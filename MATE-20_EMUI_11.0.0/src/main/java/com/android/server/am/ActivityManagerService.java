package com.android.server.am;

import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.ActivityThread;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.AppOpsManagerInternal;
import android.app.ApplicationErrorReport;
import android.app.BroadcastOptions;
import android.app.BroadcastOptionsEx;
import android.app.ContentProviderHolder;
import android.app.Dialog;
import android.app.IActivityController;
import android.app.IApplicationThread;
import android.app.IAssistDataReceiver;
import android.app.IInstrumentationWatcher;
import android.app.INotificationManager;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidObserver;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.WaitResult;
import android.app.WindowConfiguration;
import android.app.backup.IBackupManager;
import android.app.usage.UsageStatsManagerInternal;
import android.common.HwFrameworkFactory;
import android.content.AutofillOptions;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentCaptureOptions;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IContentProvider;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.pm.ActivityPresentationInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageManager;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.PackageParser;
import android.content.pm.ParceledListSlice;
import android.content.pm.PathPermission;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.UserInfo;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Rect;
import android.hardware.biometrics.face.V1_0.FaceAcquiredInfo;
import android.hardware.display.DisplayManagerInternal;
import android.hwtheme.HwThemeManager;
import android.iawareperf.UniPerf;
import android.net.INetd;
import android.net.NetworkPolicyManager;
import android.net.Uri;
import android.os.AppZygote;
import android.os.Binder;
import android.os.BinderProxy;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.DropBoxManager;
import android.os.FactoryTest;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.ICancellationSignal;
import android.os.IDeviceIdentifiersPolicyService;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PowerManager;
import android.os.PowerManagerInternal;
import android.os.PowerSaveState;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.ShellCallback;
import android.os.StrictMode;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.storage.StorageManager;
import android.provider.DeviceConfig;
import android.provider.Settings;
import android.rms.iaware.AwareAppStartBinder;
import android.sysprop.VoldProperties;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.DebugUtils;
import android.util.EventLog;
import android.util.Flog;
import android.util.Log;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.StatsLog;
import android.util.TimeUtils;
import android.util.TimingsTraceLog;
import android.util.proto.ProtoOutputStream;
import android.util.proto.ProtoUtils;
import android.view.IRecentsAnimationRunner;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.autofill.AutofillManagerInternal;
import android.zrhung.IZrHung;
import android.zrhung.ZrHungData;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.annotations.VisibleForTesting;
import com.android.internal.app.DumpHeapActivity;
import com.android.internal.app.IAppOpsCallback;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.ProcessMap;
import com.android.internal.app.SystemUserHomeActivity;
import com.android.internal.app.procstats.ProcessStats;
import com.android.internal.content.PackageHelper;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BinderInternal;
import com.android.internal.os.ByteTransferPipe;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.TransferPipe;
import com.android.internal.os.ZygoteInit;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.function.QuadFunction;
import com.android.internal.util.function.TriFunction;
import com.android.server.AlarmManagerInternal;
import com.android.server.AlarmManagerService;
import com.android.server.AnimationThread;
import com.android.server.AttributeCache;
import com.android.server.BatteryService;
import com.android.server.DeviceIdleController;
import com.android.server.DisplayThread;
import com.android.server.FgThread;
import com.android.server.GraphicsStatsService;
import com.android.server.HwServiceExFactory;
import com.android.server.HwServiceFactory;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalServices;
import com.android.server.LockGuard;
import com.android.server.NetworkManagementInternal;
import com.android.server.PackageWatchdog;
import com.android.server.RescueParty;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiModeManagerService;
import com.android.server.UiThread;
import com.android.server.Watchdog;
import com.android.server.am.ActiveServices;
import com.android.server.am.UidRecord;
import com.android.server.appop.AppOpsService;
import com.android.server.backup.BackupAgentTimeoutParameters;
import com.android.server.connectivity.NetworkAgentInfo;
import com.android.server.contentcapture.ContentCaptureManagerInternal;
import com.android.server.display.color.DisplayTransformManager;
import com.android.server.firewall.IntentFirewall;
import com.android.server.hdmi.HdmiCecKeycode;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.job.JobSchedulerShellCommand;
import com.android.server.job.controllers.JobStatus;
import com.android.server.mtm.taskstatus.ProcessInfo;
import com.android.server.notification.NotificationShellCmd;
import com.android.server.pm.DumpState;
import com.android.server.pm.Installer;
import com.android.server.pm.PackageManagerService;
import com.android.server.policy.PhoneWindowManager;
import com.android.server.policy.WindowManagerPolicy;
import com.android.server.slice.SliceClientPermissions;
import com.android.server.uri.GrantUri;
import com.android.server.uri.UriGrantsManagerInternal;
import com.android.server.utils.PriorityDump;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.ActivityMetricsLaunchObserver;
import com.android.server.wm.ActivityRecord;
import com.android.server.wm.ActivityServiceConnectionsHolder;
import com.android.server.wm.ActivityTaskManagerDebugConfig;
import com.android.server.wm.ActivityTaskManagerInternal;
import com.android.server.wm.ActivityTaskManagerService;
import com.android.server.wm.SurfaceAnimationThread;
import com.android.server.wm.TaskChangeNotificationController;
import com.android.server.wm.TaskRecord;
import com.android.server.wm.WindowManagerService;
import com.android.server.wm.WindowProcessController;
import com.huawei.android.app.IHwActivityManager;
import com.huawei.android.app.IHwDAMonitorCallback;
import com.huawei.android.content.IIntentReceiverEx;
import com.huawei.android.content.pm.HwPackageManager;
import com.huawei.android.content.pm.IHwPackageManager;
import com.huawei.pgmng.log.LogPower;
import dalvik.system.VMRuntime;
import huawei.android.security.IHwBehaviorCollectManager;
import huawei.cust.HwCustUtils;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import libcore.util.EmptyArray;

public class ActivityManagerService extends AbsActivityManager implements IHwActivityManagerInner, Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {
    public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    private static final String ACTIVITY_START_PSS_DEFER_CONFIG = "activity_start_pss_defer";
    private static final long ALL_DISPATCH_THRESHOLD_MS = 1000;
    public static final String ANR_TRACE_DIR = "/data/anr";
    static final long BATTERY_STATS_TIME = 1800000;
    private static final int BINDER_PROXY_HIGH_WATERMARK = 6000;
    private static final int BINDER_PROXY_LOW_WATERMARK = 5500;
    static final int BROADCAST_BG_TIMEOUT = 60000;
    static final int BROADCAST_FG_TIMEOUT = 10000;
    private static final String BROADCAST_GESTURE_ACTION = "com.huawei.motion.change.noification";
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CHECK_SERVICE_PRECHECK_MSG = 96;
    static final int CHECK_SERVICE_TIMEOUT_MSG = 99;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int COLLECT_PSS_BG_MSG = 1;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT = 10000;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    static final int CONTENT_PROVIDER_WAIT_TIMEOUT = 20000;
    static final int DEFER_PSS_MSG = 2;
    static final int DELETE_DUMPHEAP_MSG = 51;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_UIDS_CHANGED_UI_MSG = 53;
    static final int DROPBOX_MAX_SIZE = 196608;
    static final long[] DUMP_MEM_BUCKETS = {5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
    static final int[] DUMP_MEM_OOM_ADJ = {JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -900, -800, -700, 0, 100, 200, 250, DisplayTransformManager.LEVEL_COLOR_MATRIX_INVERT_COLOR, 400, SystemService.PHASE_SYSTEM_SERVICES_READY, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START, 700, 800, 900};
    static final String[] DUMP_MEM_OOM_COMPACT_LABEL = {"native", "sys", "pers", "persvc", "fore", "vis", "percept", "perceptl", "heavy", BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD, "servicea", "home", "prev", "serviceb", "cached"};
    static final String[] DUMP_MEM_OOM_LABEL = {"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Perceptible Low", "Heavy Weight", "Backup", "A Services", "Home", "Previous", "B Services", "Cached"};
    static final String[] EMPTY_STRING_ARRAY = new String[0];
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int FORCE_GC_ALL_MSG = 418;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int GC_DELAY = 210000;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    static final int IDLE_UIDS_MSG = 58;
    private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    static final boolean IS_DEBUG_VERSION;
    static final boolean IS_TV = "tv".equals(SystemProperties.get("ro.build.characteristics", BatteryService.HealthServiceWrapper.INSTANCE_VENDOR));
    private static final int JAVA_DUMP_MINIMUM_SIZE = 100;
    static final int KILL_APPLICATION_MSG = 22;
    static final int KILL_APP_ZYGOTE_DELAY_MS = 5000;
    static final int KILL_APP_ZYGOTE_MSG = 71;
    private static final int KSM_SHARED = 0;
    private static final int KSM_SHARING = 1;
    private static final int KSM_UNSHARED = 2;
    private static final int KSM_VOLATILE = 3;
    private static final int LONG_CHANEGD_UIDS_SIZE = 100;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 50;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    private static final int MINIMUM_MEMORY_GROWTH_THRESHOLD = 10000;
    static final long MONITOR_CPU_MAX_TIME = 268435455;
    static final long MONITOR_CPU_MIN_TIME = 5000;
    static final boolean MONITOR_CPU_USAGE = true;
    static final boolean MONITOR_THREAD_CPU_USAGE = false;
    public static final int MY_PID = Process.myPid();
    private static final int NATIVE_DUMP_TIMEOUT_MS = 2000;
    private static final long NETWORK_ACCESS_TIMEOUT_DEFAULT_MS = 200;
    @VisibleForTesting
    static final int NETWORK_STATE_BLOCK = 1;
    @VisibleForTesting
    static final int NETWORK_STATE_NO_CHANGE = 0;
    @VisibleForTesting
    static final int NETWORK_STATE_UNBLOCK = 2;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PERSISTENT_MASK = 9;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    static final int PRELOAD_TIMEOUT_MSG = 21;
    private static final int[] PROCESS_STATE_STATS_FORMAT = {32, 544, 10272};
    static final int PROC_START_TIMEOUT = 10000;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    private static final long PSS_DEFER_DELAY_MS = (SystemProperties.getBoolean("ro.config.hw_low_ram", false) ? BackupAgentTimeoutParameters.DEFAULT_QUOTA_EXCEEDED_TIMEOUT_MILLIS : 0);
    static final int PUSH_TEMP_WHITELIST_UI_MSG = 68;
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    static final int RUNNING_REMOTE_ANIMATION_TIMEOUT = 1500;
    static final int RUNNING_REMOTE_ANIMATION_TIMEOUT_MSG = 72;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final String SERVICE_RECORD_KEY = "servicerecord";
    static final int SERVICE_TIMEOUT_MSG = 12;
    static final int SERVICE_WAIT_TIMEOUT = 5000;
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    private static final long SINGLE_DISPATCH_THRESHOLD_MS = 100;
    private static final int SLOW_UID_OBSERVER_THRESHOLD_MS = 20;
    public static final int STOCK_PM_FLAGS = 1024;
    static final int STOP_DEFERRING_PSS_MSG = 3;
    private static final int SWITCH_RTG_SCHED = 1048576;
    static final String SYSTEM_DEBUGGABLE = "ro.debuggable";
    private static final String SYSTEM_PROPERTY_DEVICE_PROVISIONED = "persist.sys.device_provisioned";
    public static final String TAG = "ActivityManager";
    static final String TAG_BACKUP = "ActivityManager";
    private static final String TAG_BROADCAST = "ActivityManager";
    private static final String TAG_CLEANUP = "ActivityManager";
    private static final String TAG_CONFIGURATION = (TAG + ActivityTaskManagerDebugConfig.POSTFIX_CONFIGURATION);
    private static final String TAG_LOCKTASK = "ActivityManager";
    static final String TAG_LRU = "ActivityManager";
    private static final String TAG_MU = "ActivityManager_MU";
    private static final String TAG_NETWORK = "ActivityManager_Network";
    static final String TAG_OOM_ADJ = "ActivityManager";
    private static final String TAG_POWER = "ActivityManager";
    static final String TAG_PROCESSES = "ActivityManager";
    static final String TAG_PROCESS_OBSERVERS = "ActivityManager";
    private static final String TAG_PROVIDER = "ActivityManager";
    static final String TAG_PSS = "ActivityManager";
    private static final String TAG_SERVICE = "ActivityManager";
    private static final String TAG_SWITCH = "ActivityManager";
    static final String TAG_UID_OBSERVERS = "ActivityManager";
    public static final int TOP_APP_PRIORITY_BOOST = -10;
    static final boolean TRACK_PROCSTATS_ASSOCIATIONS = true;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final boolean VALIDATE_UID_STATES = true;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
    private static final IZrHung mAppEyeBinderBlock = HwFrameworkFactory.getZrHung("appeye_ssbinderfull");
    @GuardedBy({"ActivityManagerService.class"})
    private static SimpleDateFormat sAnrFileDateFormat;
    private static final ThreadLocal<Identity> sCallerIdentity = new ThreadLocal<>();
    static boolean sDisableForceGC = false;
    static final HostingRecord sNullHostingRecord = new HostingRecord(null);
    private static String sTheRealBuildSerial = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
    private static ThreadPriorityBooster sThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
    final ArrayList<ActiveInstrumentation> mActiveInstrumentation;
    ProcessChangeItem[] mActiveProcessChanges;
    UidRecord.ChangeItem[] mActiveUidChanges;
    boolean mActivityIdle;
    private final ActivityMetricsLaunchObserver mActivityLaunchObserver;
    private final AtomicInteger mActivityStartingNesting;
    @VisibleForTesting
    public ActivityTaskManagerService mActivityTaskManager;
    boolean mAllowLowerMemLevel;
    ArrayMap<String, PackageAssociationInfo> mAllowedAssociations;
    private AlarmManagerService mAlms;
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks;
    boolean mAlwaysFinishActivities;
    private Map<String, String> mAppAgentMap;
    ArrayMap<String, IBinder> mAppBindArgs;
    final AppErrors mAppErrors;
    final AppOpsService mAppOpsService;
    final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations;
    @VisibleForTesting
    public ActivityTaskManagerInternal mAtmInternal;
    final ArrayList<ProcessChangeItem> mAvailProcessChanges;
    final ArrayList<UidRecord.ChangeItem> mAvailUidChanges;
    int[] mBackgroundAppIdWhitelist;
    ArraySet<String> mBackgroundLaunchBroadcasts;
    @GuardedBy({"this"})
    final SparseArray<BackupRecord> mBackupTargets;
    final BatteryStatsService mBatteryStatsService;
    BroadcastQueue mBgBroadcastQueue;
    final Handler mBgHandler;
    BroadcastQueue mBgKeyAppBroadcastQueue;
    BroadcastQueue mBgThirdAppBroadcastQueue;
    private boolean mBinderTransactionTrackingEnabled;
    @GuardedBy({"this"})
    boolean mBootAnimationComplete;
    int mBootPhase;
    volatile boolean mBooted;
    volatile boolean mBooting;
    final BroadcastQueue[] mBroadcastQueues;
    @GuardedBy({"this"})
    boolean mCallFinishBooting;
    ActivityManagerConstants mConstants;
    ContentCaptureManagerInternal mContentCaptureService;
    final Context mContext;
    CoreSettingsObserver mCoreSettingsObserver;
    protected boolean mCpusetSwitch;
    BroadcastStats mCurBroadcastStats;
    OomAdjObserver mCurOomAdjObserver;
    int mCurOomAdjUid;
    private String mCurResumedPackage;
    private int mCurResumedUid;
    HwCustActivityManagerService mCustAms;
    HwDAMonitorProxy mDAProxy;
    String mDebugApp;
    boolean mDebugTransient;
    DevelopmentSettingsObserver mDevelopmentSettingsObserver;
    int[] mDeviceIdleExceptIdleWhitelist;
    int[] mDeviceIdleTempWhitelist;
    int[] mDeviceIdleWhitelist;
    String mDeviceOwnerName;
    boolean mEnableOffloadQueue;
    final int mFactoryTest;
    BroadcastQueue mFgBroadcastQueue;
    BroadcastQueue mFgKeyAppBroadcastQueue;
    BroadcastQueue mFgThirdAppBroadcastQueue;
    boolean mForceBackgroundCheck;
    final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages;
    boolean mFullPssPending;
    final MainHandler mHandler;
    @VisibleForTesting
    public final ServiceThread mHandlerThread;
    final HiddenApiSettings mHiddenApiBlacklist;
    IHwActivityManagerServiceEx mHwAMSEx;
    HwInnerActivityManagerService mHwInnerService;
    final SparseArray<ImportanceToken> mImportantProcesses;
    private final Injector mInjector;
    private Installer mInstaller;
    final InstrumentationReporter mInstrumentationReporter;
    public final IntentFirewall mIntentFirewall;
    ArrayMap<String, IBinder> mIsolatedAppBindArgs;
    protected ActivityRecord mLastActivityRecord;
    private int mLastAppCrashedPid;
    BroadcastStats mLastBroadcastStats;
    final AtomicLong mLastCpuTime;
    long mLastFullPssTime;
    long mLastIdleTime;
    long mLastMemUsageReportTime;
    int mLastMemoryLevel;
    int mLastNumProcesses;
    long mLastPowerCheckUptime;
    long mLastWriteTime;
    final ArrayList<ContentProviderRecord> mLaunchingProviders;
    private ParcelFileDescriptor[] mLifeMonitorFds;
    DeviceIdleController.LocalService mLocalDeviceIdleController;
    PowerManagerInternal mLocalPowerManager;
    public final ThreadLocal<String> mLocalStopReason;
    final LowMemDetector mLowMemDetector;
    long mLowRamStartTime;
    long mLowRamTimeSinceLastIdle;
    String mMemWatchDumpFile;
    int mMemWatchDumpPid;
    String mMemWatchDumpProcName;
    int mMemWatchDumpUid;
    private boolean mMemWatchIsUserInitiated;
    final ProcessMap<Pair<Long, String>> mMemWatchProcesses;
    String mNativeDebuggingApp;
    BroadcastQueue mOffloadBroadcastQueue;
    volatile boolean mOnBattery;
    public OomAdjProfiler mOomAdjProfiler;
    OomAdjuster mOomAdjuster;
    String mOrigDebugApp;
    boolean mOrigWaitForDebugger;
    PackageManagerInternal mPackageManagerInt;
    final PackageWatchdog mPackageWatchdog;
    @VisibleForTesting
    public final PendingIntentController mPendingIntentController;
    final ArrayList<ProcessChangeItem> mPendingProcessChanges;
    final ArrayList<ProcessRecord> mPendingPssProcesses;
    final PendingTempWhitelists mPendingTempWhitelist;
    final ArrayList<UidRecord.ChangeItem> mPendingUidChanges;
    boolean mPersistentReady;
    final ArrayList<ProcessRecord> mPersistentStartingProcesses;
    final PidMap mPidsSelfLocked;
    private final PriorityDump.PriorityDumper mPriorityDumper;
    final Handler mProcStartHandler;
    final ServiceThread mProcStartHandlerThread;
    final CountDownLatch mProcessCpuInitLatch;
    final AtomicBoolean mProcessCpuMutexFree;
    final Thread mProcessCpuThread;
    final ProcessCpuTracker mProcessCpuTracker;
    final ProcessList mProcessList;
    final RemoteCallbackList<IProcessObserver> mProcessObservers;
    private final long[] mProcessStateStatsLongs;
    final ProcessStatsService mProcessStats;
    final ArrayList<ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    final ArrayList<ProcessRecord> mProcessesToGc;
    final ProfileData mProfileData;
    int mProfileType;
    final ProviderMap mProviderMap;
    private volatile long mPssDeferralTime;
    private final DeviceConfig.OnPropertiesChangedListener mPssDelayConfigListener;
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver;
    final HashMap<IBinder, ReceiverList> mRegisteredReceivers;
    boolean mSafeMode;
    final ActiveServices mServices;
    final SparseArray<ArrayMap<String, ArrayList<Intent>>> mStickyBroadcasts;
    final StringBuilder mStringBuilder;
    protected int mSubSwitch;
    boolean mSystemProvidersInstalled;
    volatile boolean mSystemReady;
    SystemServiceManager mSystemServiceManager;
    final ActivityThread mSystemThread;
    boolean mTestPssMode;
    String mTrackAllocationApp;
    boolean mTrackingAssociations;
    @VisibleForTesting
    public UriGrantsManagerInternal mUgmInternal;
    final Context mUiContext;
    final Handler mUiHandler;
    int mUidChangeDispatchCount;
    final RemoteCallbackList<IUidObserver> mUidObservers;
    UsageStatsManagerInternal mUsageStatsService;
    boolean mUseFifoUiScheduling;
    final UserController mUserController;
    private boolean mUserIsMonkey;
    final ActiveUids mValidateUids;
    boolean mWaitForDebugger;
    @VisibleForTesting
    long mWaitForNetworkTimeoutMs;
    int mWakefulness;
    @VisibleForTesting
    public WindowManagerService mWindowManager;
    private volatile int mWtfClusterCount;
    private volatile long mWtfClusterStart;

    /* access modifiers changed from: package-private */
    public interface OomAdjObserver {
        void onOomAdjMessage(String str);
    }

    static {
        boolean z = true;
        if (SystemProperties.getInt("ro.logsystem.usertype", 1) != 3) {
            z = false;
        }
        IS_DEBUG_VERSION = z;
    }

    /* access modifiers changed from: package-private */
    public BroadcastQueue broadcastQueueForIntent(Intent intent) {
        if (isOnOffloadQueue(intent.getFlags())) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG, "Broadcast intent " + intent + " on offload queue");
            }
            return this.mOffloadBroadcastQueue;
        }
        boolean isFg = (intent.getFlags() & 268435456) != 0;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
            StringBuilder sb = new StringBuilder();
            sb.append("Broadcast intent ");
            sb.append(intent);
            sb.append(" on ");
            sb.append(isFg ? "foreground" : "background");
            sb.append(" queue");
            Slog.i(TAG, sb.toString());
        }
        return isFg ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
    }

    static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    /* access modifiers changed from: private */
    public final class PackageAssociationInfo {
        private final ArraySet<String> mAllowedPackageAssociations;
        private boolean mIsDebuggable;
        private final String mSourcePackage;

        PackageAssociationInfo(String sourcePackage, ArraySet<String> allowedPackages, boolean isDebuggable) {
            this.mSourcePackage = sourcePackage;
            this.mAllowedPackageAssociations = allowedPackages;
            this.mIsDebuggable = isDebuggable;
        }

        /* access modifiers changed from: package-private */
        public boolean isPackageAssociationAllowed(String targetPackage) {
            return this.mIsDebuggable || this.mAllowedPackageAssociations.contains(targetPackage);
        }

        /* access modifiers changed from: package-private */
        public boolean isDebuggable() {
            return this.mIsDebuggable;
        }

        /* access modifiers changed from: package-private */
        public void setDebuggable(boolean isDebuggable) {
            this.mIsDebuggable = isDebuggable;
        }

        /* access modifiers changed from: package-private */
        public ArraySet<String> getAllowedPackageAssociations() {
            return this.mAllowedPackageAssociations;
        }
    }

    /* access modifiers changed from: package-private */
    public final class PidMap {
        private final SparseArray<ProcessRecord> mPidMap = new SparseArray<>();

        PidMap() {
        }

        /* access modifiers changed from: package-private */
        public void put(ProcessRecord app) {
            synchronized (this) {
                this.mPidMap.put(app.pid, app);
            }
            ActivityManagerService.this.mAtmInternal.onProcessMapped(app.pid, app.getWindowProcessController());
        }

        /* access modifiers changed from: package-private */
        public void remove(ProcessRecord app) {
            boolean removed = false;
            synchronized (this) {
                ProcessRecord existingApp = this.mPidMap.get(app.pid);
                if (existingApp != null && existingApp.startSeq == app.startSeq) {
                    this.mPidMap.remove(app.pid);
                    removed = true;
                }
            }
            if (removed) {
                ActivityManagerService.this.mAtmInternal.onProcessUnMapped(app.pid);
            }
        }

        /* access modifiers changed from: package-private */
        public boolean removeIfNoThread(ProcessRecord app) {
            boolean removed = false;
            synchronized (this) {
                ProcessRecord existingApp = get(app.pid);
                if (existingApp != null && existingApp.startSeq == app.startSeq && app.thread == null) {
                    this.mPidMap.remove(app.pid);
                    removed = true;
                }
            }
            if (removed) {
                ActivityManagerService.this.mAtmInternal.onProcessUnMapped(app.pid);
            }
            return removed;
        }

        /* access modifiers changed from: package-private */
        public ProcessRecord get(int pid) {
            return this.mPidMap.get(pid);
        }

        /* access modifiers changed from: package-private */
        public int size() {
            return this.mPidMap.size();
        }

        /* access modifiers changed from: package-private */
        public ProcessRecord valueAt(int index) {
            return this.mPidMap.valueAt(index);
        }

        /* access modifiers changed from: package-private */
        public int keyAt(int index) {
            return this.mPidMap.keyAt(index);
        }

        /* access modifiers changed from: package-private */
        public int indexOfKey(int key) {
            return this.mPidMap.indexOfKey(key);
        }
    }

    /* access modifiers changed from: package-private */
    public abstract class ImportanceToken implements IBinder.DeathRecipient {
        final int pid;
        final String reason;
        final IBinder token;

        ImportanceToken(int _pid, IBinder _token, String _reason) {
            this.pid = _pid;
            this.token = _token;
            this.reason = _reason;
        }

        @Override // java.lang.Object
        public String toString() {
            return "ImportanceToken { " + Integer.toHexString(System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long pToken = proto.start(fieldId);
            proto.write(1120986464257L, this.pid);
            IBinder iBinder = this.token;
            if (iBinder != null) {
                proto.write(1138166333442L, iBinder.toString());
            }
            proto.write(1138166333443L, this.reason);
            proto.end(pToken);
        }
    }

    /* access modifiers changed from: package-private */
    public static final class Association {
        int mCount;
        int mLastState = 22;
        long mLastStateUptime;
        int mNesting;
        final String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        long[] mStateTimes = new long[22];
        final ComponentName mTargetComponent;
        final String mTargetProcess;
        final int mTargetUid;
        long mTime;

        Association(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent, String targetProcess) {
            this.mSourceUid = sourceUid;
            this.mSourceProcess = sourceProcess;
            this.mTargetUid = targetUid;
            this.mTargetComponent = targetComponent;
            this.mTargetProcess = targetProcess;
        }
    }

    /* access modifiers changed from: private */
    public final class DevelopmentSettingsObserver extends ContentObserver {
        private final ComponentName mBugreportStorageProvider = new ComponentName(NotificationShellCmd.NOTIFICATION_PACKAGE, "com.android.shell.BugreportStorageProvider");
        private final Uri mUri = Settings.Global.getUriFor("development_settings_enabled");

        public DevelopmentSettingsObserver() {
            super(ActivityManagerService.this.mHandler);
            ActivityManagerService.this.mContext.getContentResolver().registerContentObserver(this.mUri, false, this, -1);
            onChange();
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean selfChange, Uri uri, int userId) {
            if (this.mUri.equals(uri)) {
                onChange();
            }
        }

        public void onChange() {
            int i = 1;
            boolean enabled = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "development_settings_enabled", Build.IS_ENG ? 1 : 0) != 0;
            PackageManager packageManager = ActivityManagerService.this.mContext.getPackageManager();
            ComponentName componentName = this.mBugreportStorageProvider;
            if (!enabled) {
                i = 0;
            }
            packageManager.setComponentEnabledSetting(componentName, i, 0);
        }
    }

    private class Identity {
        public final int pid;
        public final IBinder token;
        public final int uid;

        Identity(IBinder _token, int _pid, int _uid) {
            this.token = _token;
            this.pid = _pid;
            this.uid = _uid;
        }
    }

    /* access modifiers changed from: package-private */
    public static final class PendingTempWhitelist {
        final long duration;
        final String tag;
        final int targetUid;

        PendingTempWhitelist(int _targetUid, long _duration, String _tag) {
            this.targetUid = _targetUid;
            this.duration = _duration;
            this.tag = _tag;
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1120986464257L, this.targetUid);
            proto.write(1112396529666L, this.duration);
            proto.write(1138166333443L, this.tag);
            proto.end(token);
        }
    }

    /* access modifiers changed from: package-private */
    public class ProfileData {
        private String mProfileApp = null;
        private ProcessRecord mProfileProc = null;
        private ProfilerInfo mProfilerInfo = null;

        ProfileData() {
        }

        /* access modifiers changed from: package-private */
        public void setProfileApp(String profileApp) {
            this.mProfileApp = profileApp;
            if (ActivityManagerService.this.mAtmInternal != null) {
                ActivityManagerService.this.mAtmInternal.setProfileApp(profileApp);
            }
        }

        /* access modifiers changed from: package-private */
        public String getProfileApp() {
            return this.mProfileApp;
        }

        /* access modifiers changed from: package-private */
        public void setProfileProc(ProcessRecord profileProc) {
            WindowProcessController windowProcessController;
            this.mProfileProc = profileProc;
            if (ActivityManagerService.this.mAtmInternal != null) {
                ActivityTaskManagerInternal activityTaskManagerInternal = ActivityManagerService.this.mAtmInternal;
                if (profileProc == null) {
                    windowProcessController = null;
                } else {
                    windowProcessController = profileProc.getWindowProcessController();
                }
                activityTaskManagerInternal.setProfileProc(windowProcessController);
            }
        }

        /* access modifiers changed from: package-private */
        public ProcessRecord getProfileProc() {
            return this.mProfileProc;
        }

        /* access modifiers changed from: package-private */
        public void setProfilerInfo(ProfilerInfo profilerInfo) {
            this.mProfilerInfo = profilerInfo;
            if (ActivityManagerService.this.mAtmInternal != null) {
                ActivityManagerService.this.mAtmInternal.setProfilerInfo(profilerInfo);
            }
        }

        /* access modifiers changed from: package-private */
        public ProfilerInfo getProfilerInfo() {
            return this.mProfilerInfo;
        }
    }

    /* access modifiers changed from: package-private */
    public static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        static final int CHANGE_FOREGROUND_SERVICES = 2;
        int changes;
        boolean foregroundActivities;
        int foregroundServiceTypes;
        int pid;
        int processState;
        int uid;

        ProcessChangeItem() {
        }
    }

    /* access modifiers changed from: package-private */
    public static final class UidObserverRegistration {
        private static int[] ORIG_ENUMS = {4, 8, 2, 1};
        private static int[] PROTO_ENUMS = {3, 4, 2, 1};
        final int cutpoint;
        final SparseIntArray lastProcStates;
        int mMaxDispatchTime;
        int mSlowDispatchCount;
        final String pkg;
        final int uid;
        final int which;

        UidObserverRegistration(int _uid, String _pkg, int _which, int _cutpoint) {
            this.uid = _uid;
            this.pkg = _pkg;
            this.which = _which;
            this.cutpoint = _cutpoint;
            if (this.cutpoint >= 0) {
                this.lastProcStates = new SparseIntArray();
            } else {
                this.lastProcStates = null;
            }
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1120986464257L, this.uid);
            proto.write(1138166333442L, this.pkg);
            ProtoUtils.writeBitWiseFlagsToProtoEnum(proto, 2259152797699L, this.which, ORIG_ENUMS, PROTO_ENUMS);
            proto.write(1120986464260L, this.cutpoint);
            SparseIntArray sparseIntArray = this.lastProcStates;
            if (sparseIntArray != null) {
                int NI = sparseIntArray.size();
                for (int i = 0; i < NI; i++) {
                    long pToken = proto.start(2246267895813L);
                    proto.write(1120986464257L, this.lastProcStates.keyAt(i));
                    proto.write(1120986464258L, this.lastProcStates.valueAt(i));
                    proto.end(pToken);
                }
            }
            proto.end(token);
        }
    }

    /* access modifiers changed from: private */
    public final class AppDeathRecipient implements IBinder.DeathRecipient {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord app, int pid, IApplicationThread thread) {
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                Slog.v(ActivityManagerService.TAG, "New death recipient " + this + " for thread " + thread.asBinder());
            }
            this.mApp = app;
            this.mPid = pid;
            this.mAppThread = thread;
        }

        /* JADX INFO: finally extract failed */
        @Override // android.os.IBinder.DeathRecipient
        public void binderDied() {
            boolean isKilledByAm = this.mApp.killedByAm;
            boolean isForgroundActivities = this.mApp.mHasForegroundActivities;
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                Slog.v(ActivityManagerService.TAG, "Death received in " + this + " for thread " + this.mAppThread.asBinder());
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            if (isKilledByAm || isForgroundActivities) {
                ActivityManagerService.this.mHwAMSEx.reportAppDiedMsg(this.mApp.userId, this.mApp.processName, -1, "BinderDiedElse");
            } else {
                ActivityManagerService.this.mHwAMSEx.reportAppDiedMsg(this.mApp.userId, this.mApp.processName, -1, "BinderDiedLMK");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final class UiHandler extends Handler {
        public UiHandler() {
            super(UiThread.get().getLooper(), null, true);
        }

        @Override // android.os.Handler
        public void handleMessage(Message msg) {
            int i = msg.what;
            if (i == 1) {
                ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(msg);
                ActivityManagerService.this.ensureBootCompleted();
            } else if (i == 2) {
                ActivityManagerService.this.mAppErrors.handleShowAnrUi(msg);
                ActivityManagerService.this.ensureBootCompleted();
            } else if (i == 6) {
                Dialog d = null;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ProcessRecord app = (ProcessRecord) msg.obj;
                        if (msg.arg1 != 0) {
                            if (!app.waitedForDebugger) {
                                d = new AppWaitingForDebuggerDialog(ActivityManagerService.this, ActivityManagerService.this.mUiContext, app);
                                app.waitDialog = d;
                                app.waitedForDebugger = true;
                            }
                        } else if (app.waitDialog != null) {
                            app.waitDialog.dismiss();
                            app.waitDialog = null;
                        }
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
                if (d != null) {
                    d.show();
                }
            } else if (i == 26) {
                HashMap<String, Object> data = (HashMap) msg.obj;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ProcessRecord proc = (ProcessRecord) data.get("app");
                        if (proc == null) {
                            Slog.e(ActivityManagerService.TAG, "App not found when showing strict mode dialog.");
                        } else if (proc.crashDialog != null) {
                            Slog.e(ActivityManagerService.TAG, "App already has strict mode dialog: " + proc);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else {
                            AppErrorResult res = (AppErrorResult) data.get("result");
                            if (ActivityManagerService.this.mAtmInternal.showStrictModeViolationDialog()) {
                                Dialog d2 = new StrictModeViolationDialog(ActivityManagerService.this.mUiContext, ActivityManagerService.this, res, proc);
                                d2.show();
                                proc.crashDialog = d2;
                            } else {
                                res.set(0);
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            ActivityManagerService.this.ensureBootCompleted();
                        }
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i == 53) {
                ActivityManagerService.this.dispatchUidsChanged();
            } else if (i == 68) {
                ActivityManagerService.this.pushTempWhitelist();
            } else if (i == 70) {
                ActivityManagerService.this.dispatchOomAdjObserver((String) msg.obj);
            } else if (i == 31) {
                ActivityManagerService.this.dispatchProcessesChanged();
            } else if (i == 32) {
                ActivityManagerService.this.dispatchProcessDied(msg.arg1, msg.arg2);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final class MainHandler extends Handler {
        public MainHandler(Looper looper) {
            super(looper, null, true);
        }

        @Override // android.os.Handler
        public void handleMessage(Message msg) {
            int uid;
            String procName;
            long memLimit;
            boolean isUserInitiated;
            int i = msg.what;
            if (i == 5) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.performAppGcsIfAppropriateLocked();
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i == 33) {
                final ArrayList<ProcessMemInfo> memInfos = (ArrayList) msg.obj;
                new Thread() {
                    /* class com.android.server.am.ActivityManagerService.MainHandler.AnonymousClass1 */

                    @Override // java.lang.Thread, java.lang.Runnable
                    public void run() {
                        ActivityManagerService.this.reportMemUsage(memInfos);
                    }
                }.start();
            } else if (i == 41) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.mProcessList.updateAllTimePrefsLocked(msg.arg1);
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i == ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.mProcessList.handleAllTrustStorageUpdateLocked();
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i == 66) {
                ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) msg.obj);
            } else if (i == 69) {
                ActivityManagerService.this.mServices.serviceForegroundCrash((ProcessRecord) msg.obj, msg.getData().getCharSequence(ActivityManagerService.SERVICE_RECORD_KEY));
            } else if (i == 96) {
                ProcessRecord proc = (ProcessRecord) msg.obj;
                if (proc != null) {
                    LogPower.handleTimeOut("startservice", proc.processName, String.valueOf(proc.pid));
                    Message timeoutMsg = obtainMessage(99);
                    timeoutMsg.obj = proc;
                    sendMessageDelayed(timeoutMsg, ActivityManagerService.MONITOR_CPU_MIN_TIME);
                }
            } else if (i == 99) {
                ProcessRecord proc2 = (ProcessRecord) msg.obj;
                if (proc2 != null) {
                    LogPower.handleTimeOut("servicetimeout", proc2.processName, String.valueOf(proc2.pid));
                }
            } else if (i == ActivityManagerService.FORCE_GC_ALL_MSG) {
                Log.i(ActivityManagerService.TAG, "forceGCAfterRebooting message received");
                ActivityManagerService.this.mHwAMSEx.forceGCAfterRebooting();
            } else if (i == 12) {
                ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) msg.obj);
            } else if (i == 13) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        for (int i2 = ActivityManagerService.this.mProcessList.mLruProcesses.size() - 1; i2 >= 0; i2--) {
                            ProcessRecord r = ActivityManagerService.this.mProcessList.mLruProcesses.get(i2);
                            if (r.thread != null) {
                                try {
                                    r.thread.updateTimeZone();
                                } catch (RemoteException e) {
                                    Slog.w(ActivityManagerService.TAG, "Failed to update time zone for: " + r.info.processName);
                                }
                            }
                        }
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i == 71) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.mProcessList.killAppZygoteIfNeededLocked((AppZygote) msg.obj);
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            } else if (i != 72) {
                switch (i) {
                    case 20:
                        ProcessRecord app = (ProcessRecord) msg.obj;
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                ActivityManagerService.this.processStartTimedOutLocked(app);
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        return;
                    case 21:
                        ApplicationInfo aInfo = (ApplicationInfo) msg.obj;
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                ActivityManagerService.this.preloadAppTimeOutLocked(aInfo);
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        return;
                    case 22:
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                int appId = msg.arg1;
                                int userId = msg.arg2;
                                Bundle bundle = (Bundle) msg.obj;
                                ActivityManagerService.this.forceStopPackageLocked(bundle.getString("pkg"), appId, false, false, true, false, false, userId, bundle.getString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY));
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        return;
                    default:
                        switch (i) {
                            case ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG /* 27 */:
                                synchronized (ActivityManagerService.this) {
                                    try {
                                        ActivityManagerService.boostPriorityForLockedSection();
                                        ActivityManagerService.this.checkExcessivePowerUsageLocked();
                                        removeMessages(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG);
                                        sendMessageDelayed(obtainMessage(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG), ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                                    } finally {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                    }
                                }
                                return;
                            case ActivityManagerService.CLEAR_DNS_CACHE_MSG /* 28 */:
                                synchronized (ActivityManagerService.this) {
                                    try {
                                        ActivityManagerService.boostPriorityForLockedSection();
                                        ActivityManagerService.this.mProcessList.clearAllDnsCacheLocked();
                                    } finally {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                    }
                                }
                                return;
                            case 29:
                                ActivityManagerService.this.mProcessList.setAllHttpProxy();
                                return;
                            default:
                                String reportPackage = null;
                                switch (i) {
                                    case 49:
                                        int uid2 = msg.arg1;
                                        byte[] firstPacket = (byte[]) msg.obj;
                                        synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                            for (int i3 = 0; i3 < ActivityManagerService.this.mPidsSelfLocked.size(); i3++) {
                                                ProcessRecord p = ActivityManagerService.this.mPidsSelfLocked.valueAt(i3);
                                                if (p.uid == uid2 && p.thread != null) {
                                                    try {
                                                        p.thread.notifyCleartextNetwork(firstPacket);
                                                    } catch (RemoteException e2) {
                                                    }
                                                }
                                            }
                                        }
                                        return;
                                    case HdmiCecKeycode.CEC_KEYCODE_PREVIOUS_CHANNEL /* 50 */:
                                        synchronized (ActivityManagerService.this) {
                                            try {
                                                ActivityManagerService.boostPriorityForLockedSection();
                                                uid = ActivityManagerService.this.mMemWatchDumpUid;
                                                if (uid == 1000) {
                                                    procName = ActivityManagerService.this.mContext.getString(17039593);
                                                } else {
                                                    procName = ActivityManagerService.this.mMemWatchDumpProcName;
                                                }
                                                Pair<Long, String> val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(procName, uid);
                                                if (val == null) {
                                                    val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(procName, 0);
                                                }
                                                if (val != null) {
                                                    memLimit = ((Long) val.first).longValue();
                                                    reportPackage = (String) val.second;
                                                } else {
                                                    memLimit = 0;
                                                }
                                                isUserInitiated = ActivityManagerService.this.mMemWatchIsUserInitiated;
                                            } finally {
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                            }
                                        }
                                        if (procName != null) {
                                            if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                                Slog.d(ActivityManagerService.TAG, "Showing dump heap notification from " + procName + SliceClientPermissions.SliceAuthority.DELIMITER + uid);
                                            }
                                            INotificationManager inm = NotificationManager.getService();
                                            if (inm != null) {
                                                String text = ActivityManagerService.this.mContext.getString(isUserInitiated ? 17040010 : 17040008, procName);
                                                Intent deleteIntent = new Intent();
                                                deleteIntent.setAction("com.android.server.am.DELETE_DUMPHEAP");
                                                Intent intent = new Intent();
                                                intent.setClassName(PackageManagerService.PLATFORM_PACKAGE_NAME, DumpHeapActivity.class.getName());
                                                intent.putExtra("process", procName);
                                                intent.putExtra("size", memLimit);
                                                intent.putExtra("is_user_initiated", isUserInitiated);
                                                intent.putExtra("is_system_process", uid == 1000);
                                                if (reportPackage != null) {
                                                    intent.putExtra("direct_launch", reportPackage);
                                                }
                                                int userId2 = UserHandle.getUserId(uid);
                                                try {
                                                    inm.enqueueNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, PackageManagerService.PLATFORM_PACKAGE_NAME, (String) null, 12, new Notification.Builder(ActivityManagerService.this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17303544).setAutoCancel(true).setTicker(text).setColor(ActivityManagerService.this.mContext.getColor(17170460)).setContentTitle(text).setContentText(ActivityManagerService.this.mContext.getText(17040009)).setContentIntent(PendingIntent.getActivityAsUser(ActivityManagerService.this.mContext, 0, intent, 268435456, null, new UserHandle(userId2))).setDeleteIntent(PendingIntent.getBroadcastAsUser(ActivityManagerService.this.mContext, 0, deleteIntent, 0, UserHandle.SYSTEM)).build(), userId2);
                                                    return;
                                                } catch (RuntimeException e3) {
                                                    Slog.w(ActivityManagerService.TAG, "Error showing notification for dump heap", e3);
                                                    return;
                                                } catch (RemoteException e4) {
                                                    return;
                                                }
                                            } else {
                                                return;
                                            }
                                        } else {
                                            return;
                                        }
                                    case 51:
                                        ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
                                        synchronized (ActivityManagerService.this) {
                                            try {
                                                ActivityManagerService.boostPriorityForLockedSection();
                                                ActivityManagerService.this.mMemWatchDumpFile = null;
                                                ActivityManagerService.this.mMemWatchDumpProcName = null;
                                                ActivityManagerService.this.mMemWatchDumpPid = -1;
                                                ActivityManagerService.this.mMemWatchDumpUid = -1;
                                            } finally {
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                            }
                                        }
                                        return;
                                    default:
                                        switch (i) {
                                            case 56:
                                                try {
                                                    ((IUiAutomationConnection) msg.obj).shutdown();
                                                } catch (RemoteException e5) {
                                                    Slog.w(ActivityManagerService.TAG, "Error shutting down UiAutomationConnection");
                                                }
                                                ActivityManagerService.this.mUserIsMonkey = false;
                                                return;
                                            case 57:
                                                ProcessRecord app2 = (ProcessRecord) msg.obj;
                                                synchronized (ActivityManagerService.this) {
                                                    try {
                                                        ActivityManagerService.boostPriorityForLockedSection();
                                                        ActivityManagerService.this.processContentProviderPublishTimedOutLocked(app2);
                                                    } finally {
                                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                                    }
                                                }
                                                return;
                                            case 58:
                                                ActivityManagerService.this.idleUids();
                                                return;
                                            default:
                                                return;
                                        }
                                }
                        }
                }
            } else {
                ProcessRecord pr = (ProcessRecord) msg.obj;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        if (pr != null && pr.runningRemoteAnimationNum > 0) {
                            Slog.e(ActivityManagerService.TAG, "Force to reset running remote animation status for pid: " + pr.pid);
                            pr.runningRemoteAnimation = false;
                            pr.runningRemoteAnimationNum = 0;
                            ActivityManagerService.this.updateOomAdjLocked(pr, true, "updateOomAdj_uiVisibility");
                        }
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            }
        }
    }

    /* JADX INFO: finally extract failed */
    /* JADX DEBUG: Multi-variable search result rejected for r11v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v2, types: [com.android.server.am.ProcessStatsService, android.os.IBinder] */
    /* JADX WARN: Type inference failed for: r1v7, types: [com.android.server.am.ActivityManagerService$PermissionController, android.os.IBinder] */
    /* JADX WARN: Type inference failed for: r1v8, types: [android.os.IBinder, com.android.server.am.ActivityManagerService$ProcessInfoService] */
    /* JADX WARNING: Unknown variable types count: 3 */
    public void setSystemProcess() {
        try {
            ServiceManager.addService("activity", this, true, 21);
            ServiceManager.addService("procstats", (IBinder) this.mProcessStats);
            ServiceManager.addService("meminfo", new MemBinder(this), false, 2);
            ServiceManager.addService("gfxinfo", new GraphicsBinder(this));
            ServiceManager.addService("dbinfo", new DbBinder(this));
            ServiceManager.addService("cpuinfo", new CpuBinder(this), false, 1);
            ServiceManager.addService("permission", (IBinder) new PermissionController(this));
            ServiceManager.addService("processinfo", (IBinder) new ProcessInfoService(this));
            ApplicationInfo info = this.mContext.getPackageManager().getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1049600);
            this.mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = this.mProcessList.newProcessRecordLocked(info, info.processName, false, 0, new HostingRecord("system"));
                    app.setPersistent(true);
                    app.pid = MY_PID;
                    app.getWindowProcessController().setPid(MY_PID);
                    app.maxAdj = -900;
                    app.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                    this.mPidsSelfLocked.put(app);
                    this.mProcessList.updateLruProcessLocked(app, false, null);
                    updateOomAdjLocked("updateOomAdj_meh");
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.startWatchingMode(HANDLE_TRUST_STORAGE_UPDATE_MSG, null, new IAppOpsCallback.Stub() {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass6 */

                public void opChanged(int op, int uid, String packageName) {
                    if (op == ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG && packageName != null && ActivityManagerService.this.mAppOpsService.checkOperation(op, uid, packageName) != 0) {
                        ActivityManagerService.this.runInBackgroundDisabled(uid);
                    }
                }
            });
        } catch (PackageManager.NameNotFoundException e) {
            throw new RuntimeException("Unable to find android system package", e);
        }
    }

    public void setWindowManager(WindowManagerService wm) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mWindowManager = wm;
                this.mActivityTaskManager.setWindowManager(wm);
                this.mWindowManager.registerPointerEventListener(this.mHwAMSEx.getPointerEventListener(), 0);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setAlarmManager(AlarmManagerService service) {
        this.mAlms = service;
    }

    public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager) {
        this.mUsageStatsService = usageStatsManager;
        this.mActivityTaskManager.setUsageStatsManager(usageStatsManager);
    }

    public void setContentCaptureManager(ContentCaptureManagerInternal contentCaptureManager) {
        this.mContentCaptureService = contentCaptureManager;
    }

    public void startObservingNativeCrashes() {
        new NativeCrashListener(this).start();
    }

    public IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    /* access modifiers changed from: package-private */
    public static class MemBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() {
            /* class com.android.server.am.ActivityManagerService.MemBinder.AnonymousClass1 */

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpHigh(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                dump(fd, pw, new String[]{"-a"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fd, pw, "  ", args, false, null, asProto);
            }
        };

        MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        @Override // android.os.Binder
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", pw)) {
                PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public static class GraphicsBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        @Override // android.os.Binder
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", pw)) {
                this.mActivityManagerService.dumpGraphicsHardwareUsage(fd, pw, args);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public static class DbBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        @Override // android.os.Binder
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", pw)) {
                this.mActivityManagerService.dumpDbInfo(fd, pw, args);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public static class CpuBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() {
            /* class com.android.server.am.ActivityManagerService.CpuBinder.AnonymousClass1 */

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto && DumpUtils.checkDumpAndUsageStatsPermission(CpuBinder.this.mActivityManagerService.mContext, "cpuinfo", pw)) {
                    synchronized (CpuBinder.this.mActivityManagerService.mProcessCpuTracker) {
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentLoad());
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                    }
                }
            }
        };

        CpuBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        @Override // android.os.Binder
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
        }
    }

    public static final class Lifecycle extends SystemService {
        private static ActivityTaskManagerService sAtm;
        private final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            HwServiceFactory.IHwActivityManagerService iAMS = HwServiceFactory.getHwActivityManagerService();
            if (iAMS != null) {
                this.mService = iAMS.getInstance(context, sAtm);
            } else {
                this.mService = new ActivityManagerService(context, sAtm);
            }
        }

        public static ActivityManagerService startService(SystemServiceManager ssm, ActivityTaskManagerService atm) {
            sAtm = atm;
            return ((Lifecycle) ssm.startService(Lifecycle.class)).getService();
        }

        @Override // com.android.server.SystemService
        public void onStart() {
            this.mService.start();
        }

        @Override // com.android.server.SystemService
        public void onBootPhase(int phase) {
            ActivityManagerService activityManagerService = this.mService;
            activityManagerService.mBootPhase = phase;
            if (phase == 500) {
                activityManagerService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            } else if (phase == 550) {
                activityManagerService.startBroadcastObservers();
            } else if (phase == 600) {
                activityManagerService.mPackageWatchdog.onPackagesReady();
            }
        }

        @Override // com.android.server.SystemService
        public void onCleanupUser(int userId) {
            this.mService.mBatteryStatsService.onCleanupUser(userId);
        }

        public ActivityManagerService getService() {
            return this.mService;
        }
    }

    /* access modifiers changed from: package-private */
    public static class HiddenApiSettings extends ContentObserver implements DeviceConfig.OnPropertiesChangedListener {
        public static final String HIDDEN_API_ACCESS_LOG_SAMPLING_RATE = "hidden_api_access_log_sampling_rate";
        public static final String HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE = "hidden_api_access_statslog_sampling_rate";
        private boolean mBlacklistDisabled;
        private final Context mContext;
        private List<String> mExemptions = Collections.emptyList();
        private String mExemptionsStr;
        private int mLogSampleRate = -1;
        private int mPolicy = -1;
        private int mStatslogSampleRate = -1;

        public void onPropertiesChanged(DeviceConfig.Properties properties) {
            setSampleRates(properties.getInt(HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, this.mLogSampleRate), properties.getInt(HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, this.mStatslogSampleRate));
        }

        private void setSampleRates(int logSampleRate, int statslogSampleRate) {
            if (logSampleRate >= 0 && logSampleRate <= 65536 && logSampleRate != this.mLogSampleRate) {
                this.mLogSampleRate = logSampleRate;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessLogSampleRate(this.mLogSampleRate);
            }
            if (statslogSampleRate >= 0 && statslogSampleRate <= 65536 && statslogSampleRate != this.mStatslogSampleRate) {
                this.mStatslogSampleRate = statslogSampleRate;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessStatslogSampleRate(this.mStatslogSampleRate);
            }
        }

        private void initializeSampleRates() {
            setSampleRates(DeviceConfig.getInt("app_compat", HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, 0), DeviceConfig.getInt("app_compat", HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, 0));
        }

        public HiddenApiSettings(Handler handler, Context context) {
            super(handler);
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_policy"), false, this);
            initializeSampleRates();
            DeviceConfig.addOnPropertiesChangedListener("app_compat", this.mContext.getMainExecutor(), this);
            update();
        }

        private void update() {
            List<String> list;
            String exemptions = Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(exemptions, this.mExemptionsStr)) {
                this.mExemptionsStr = exemptions;
                if ("*".equals(exemptions)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    if (TextUtils.isEmpty(exemptions)) {
                        list = Collections.emptyList();
                    } else {
                        list = Arrays.asList(exemptions.split(","));
                    }
                    this.mExemptions = list;
                }
                if (!Process.ZYGOTE_PROCESS.setApiBlacklistExemptions(this.mExemptions)) {
                    Slog.e(ActivityManagerService.TAG, "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            this.mPolicy = getValidEnforcementPolicy("hidden_api_policy");
        }

        private int getValidEnforcementPolicy(String settingsKey) {
            int policy = Settings.Global.getInt(this.mContext.getContentResolver(), settingsKey, -1);
            if (ApplicationInfo.isValidHiddenApiEnforcementPolicy(policy)) {
                return policy;
            }
            return -1;
        }

        /* access modifiers changed from: package-private */
        public boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        /* access modifiers changed from: package-private */
        public int getPolicy() {
            return this.mPolicy;
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean selfChange) {
            update();
        }
    }

    @VisibleForTesting
    public ActivityManagerService(Injector injector) {
        this(injector, (ServiceThread) null);
    }

    @VisibleForTesting
    public ActivityManagerService(Injector injector, ServiceThread handlerThread) {
        this.mCpusetSwitch = false;
        this.mSubSwitch = 0;
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mUseFifoUiScheduling = false;
        this.mBroadcastQueues = initialBroadcastQueue();
        this.mCustAms = (HwCustActivityManagerService) HwCustUtils.createObj(HwCustActivityManagerService.class, new Object[0]);
        this.mLastAppCrashedPid = -1;
        this.mPriorityDumper = new PriorityDump.PriorityDumper() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass1 */

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"activities"}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", "all-platform-critical"}, asProto);
                }
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mProcessList = new ProcessList();
        boolean hasHandlerThread = true;
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mProcessesToGc = new ArrayList<>();
        this.mPendingPssProcesses = new ArrayList<>();
        this.mActivityStartingNesting = new AtomicInteger(0);
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass2 */

            public void onActivityLaunched(byte[] activity, int temperature) {
                if (ActivityManagerService.this.mPssDeferralTime > 0) {
                    ActivityManagerService.this.mBgHandler.sendMessageAtFrontOfQueue(ActivityManagerService.this.mBgHandler.obtainMessage(2));
                }
            }

            public void onIntentStarted(Intent intent) {
            }

            public void onIntentFailed() {
            }

            public void onActivityLaunchCancelled(byte[] abortingActivity) {
            }

            public void onActivityLaunchFinished(byte[] finalActivity) {
            }
        };
        this.mPssDeferralTime = PSS_DEFER_DELAY_MS;
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mPssDelayConfigListener = new DeviceConfig.OnPropertiesChangedListener() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass3 */

            public void onPropertiesChanged(DeviceConfig.Properties properties) {
                ActivityManagerService.this.mPssDeferralTime = properties.getLong(ActivityManagerService.ACTIVITY_START_PSS_DEFER_CONFIG, 0);
                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                    Slog.d(ActivityManagerService.TAG, "Activity-start PSS delay now " + ActivityManagerService.this.mPssDeferralTime + " ms");
                }
            }
        };
        this.mValidateUids = new ActiveUids(this, false);
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass4 */

            /* access modifiers changed from: protected */
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult((AnonymousClass4) filter, match, userId);
                }
                return null;
            }

            /* access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* access modifiers changed from: protected */
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mLaunchingProviders = new ArrayList<>();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new PendingTempWhitelists(this);
        this.mStringBuilder = new StringBuilder(256);
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = 1;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap<>();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mProfileData = new ProfileData();
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap<>();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mProcessObservers = new RemoteCallbackList<>();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList<>();
        this.mAvailProcessChanges = new ArrayList<>();
        this.mUidObservers = new RemoteCallbackList<>();
        this.mActiveUidChanges = new UidRecord.ChangeItem[5];
        this.mPendingUidChanges = new ArrayList<>();
        this.mAvailUidChanges = new ArrayList<>();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mBooted = false;
        this.mActivityIdle = false;
        this.mLastMemUsageReportTime = 0;
        this.mLocalStopReason = new ThreadLocal<>();
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass5 */

            /* JADX WARNING: Removed duplicated region for block: B:122:0x0256 A[Catch:{ all -> 0x02c0 }] */
            /* JADX WARNING: Removed duplicated region for block: B:139:0x02b6  */
            @Override // android.os.Handler
            public void handleMessage(Message msg) {
                MemInfoReader memInfo;
                int i;
                Throwable th;
                ProcessRecord proc;
                int procState;
                int statType;
                long lastPssTime;
                int pid;
                long start;
                long[] tmp;
                Throwable th2;
                int num;
                List<ProcessCpuTracker.Stats> stats;
                int i2 = msg.what;
                if (i2 == 1) {
                    long start2 = SystemClock.uptimeMillis();
                    MemInfoReader memInfo2 = null;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = 0;
                            if (ActivityManagerService.this.mFullPssPending) {
                                try {
                                    ActivityManagerService.this.mFullPssPending = false;
                                    memInfo2 = new MemInfoReader();
                                } catch (Throwable th3) {
                                    memInfo = th3;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th4) {
                                            memInfo = th4;
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw memInfo;
                                }
                            }
                        } catch (Throwable th5) {
                            memInfo = th5;
                            while (true) {
                                break;
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw memInfo;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    long[] jArr = null;
                    if (memInfo2 != null) {
                        ActivityManagerService.this.updateCpuStatsNow();
                        synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                            stats = ActivityManagerService.this.mProcessCpuTracker.getStats($$Lambda$ActivityManagerService$5$BegFiGFfKLYS7VRmiWluczgOC5k.INSTANCE);
                        }
                        int N = stats.size();
                        long nativeTotalPss = 0;
                        for (int j = 0; j < N; j++) {
                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                if (ActivityManagerService.this.mPidsSelfLocked.indexOfKey(stats.get(j).pid) < 0) {
                                    nativeTotalPss += Debug.getPss(stats.get(j).pid, null, null);
                                }
                            }
                        }
                        memInfo2.readMemInfo();
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                    Slog.d(ActivityManagerService.TAG, "Collected native and kernel memory in " + (SystemClock.uptimeMillis() - start2) + "ms");
                                }
                                long cachedKb = memInfo2.getCachedSizeKb();
                                long freeKb = memInfo2.getFreeSizeKb();
                                long zramKb = memInfo2.getZramTotalSizeKb();
                                long kernelKb = memInfo2.getKernelUsedSizeKb();
                                EventLogTags.writeAmMeminfo(cachedKb * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, nativeTotalPss * 1024);
                                ActivityManagerService.this.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, nativeTotalPss);
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                    int num2 = 0;
                    long[] tmp2 = new long[3];
                    while (true) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerService.this.mPendingPssProcesses.size() <= 0) {
                                    try {
                                        break;
                                    } catch (Throwable th6) {
                                        th = th6;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th7) {
                                                th = th7;
                                            }
                                        }
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } else {
                                    proc = ActivityManagerService.this.mPendingPssProcesses.remove(i);
                                    procState = proc.pssProcState;
                                    statType = proc.pssStatType;
                                    lastPssTime = proc.lastPssTime;
                                    long now = SystemClock.uptimeMillis();
                                    if (proc.thread == null || procState != proc.setProcState || lastPssTime + 1000 >= now) {
                                        ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                        proc = null;
                                        pid = 0;
                                    } else {
                                        pid = proc.pid;
                                    }
                                }
                            } catch (Throwable th8) {
                                th = th8;
                                while (true) {
                                    break;
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        if (proc != null) {
                            long startTime = SystemClock.currentThreadTimeMillis();
                            long pss = Debug.getPss(pid, tmp2, jArr);
                            long endTime = SystemClock.currentThreadTimeMillis();
                            synchronized (ActivityManagerService.this) {
                                try {
                                    ActivityManagerService.boostPriorityForLockedSection();
                                    if (pss != 0) {
                                        try {
                                            if (proc.thread != null && proc.setProcState == procState && proc.pid == pid) {
                                                start = start2;
                                                try {
                                                    if (proc.lastPssTime == lastPssTime) {
                                                        num2++;
                                                        ProcessList.commitNextPssTime(proc.procStateMemTracker);
                                                        ActivityManagerService.this.recordPssSampleLocked(proc, procState, pss, tmp2[0], tmp2[1], tmp2[2], statType, endTime - startTime, SystemClock.uptimeMillis());
                                                        tmp = tmp2;
                                                        try {
                                                        } catch (Throwable th9) {
                                                            th2 = th9;
                                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                                            throw th2;
                                                        }
                                                    } else {
                                                        ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                                        if (!ActivityManagerDebugConfig.DEBUG_PSS) {
                                                            StringBuilder sb = new StringBuilder();
                                                            sb.append("Skipped pss collection of ");
                                                            sb.append(pid);
                                                            sb.append(": ");
                                                            sb.append(proc.thread == null ? "NO_THREAD " : "");
                                                            sb.append(proc.pid != pid ? "PID_CHANGED " : "");
                                                            sb.append(" initState=");
                                                            sb.append(procState);
                                                            sb.append(" curState=");
                                                            sb.append(proc.setProcState);
                                                            sb.append(" ");
                                                            tmp = tmp2;
                                                            num = num2;
                                                            try {
                                                                sb.append(proc.lastPssTime != lastPssTime ? "TIME_CHANGED" : "");
                                                                Slog.d(ActivityManagerService.TAG, sb.toString());
                                                            } catch (Throwable th10) {
                                                                th2 = th10;
                                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                                throw th2;
                                                            }
                                                        } else {
                                                            tmp = tmp2;
                                                            num = num2;
                                                        }
                                                        num2 = num;
                                                    }
                                                } catch (Throwable th11) {
                                                    th2 = th11;
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                    throw th2;
                                                }
                                            }
                                        } catch (Throwable th12) {
                                            th2 = th12;
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            throw th2;
                                        }
                                    }
                                    start = start2;
                                    try {
                                        ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                        if (!ActivityManagerDebugConfig.DEBUG_PSS) {
                                        }
                                        num2 = num;
                                    } catch (Throwable th13) {
                                        th2 = th13;
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th2;
                                    }
                                } catch (Throwable th14) {
                                    th2 = th14;
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else {
                            start = start2;
                            tmp = tmp2;
                        }
                        tmp2 = tmp;
                        start2 = start;
                        jArr = null;
                        i = 0;
                    }
                    if (ActivityManagerService.this.mTestPssMode || ActivityManagerDebugConfig.DEBUG_PSS) {
                        Slog.d(ActivityManagerService.TAG, "Collected pss of " + num2 + " processes in " + (SystemClock.uptimeMillis() - start2) + "ms");
                    }
                    ActivityManagerService.this.mPendingPssProcesses.clear();
                    ActivityManagerService.resetPriorityAfterLockedSection();
                } else if (i2 == 2) {
                    ActivityManagerService.this.deferPssForActivityStart();
                } else if (i2 == 3) {
                    int nesting = ActivityManagerService.this.mActivityStartingNesting.decrementAndGet();
                    if (nesting <= 0) {
                        if (ActivityManagerDebugConfig.DEBUG_PSS) {
                            Slog.d(ActivityManagerService.TAG, "PSS activity start deferral interval ended; now " + nesting);
                        }
                        if (nesting < 0) {
                            Slog.wtf(ActivityManagerService.TAG, "Activity start nesting undercount!");
                            ActivityManagerService.this.mActivityStartingNesting.incrementAndGet();
                        }
                    } else if (ActivityManagerDebugConfig.DEBUG_PSS) {
                        Slog.d(ActivityManagerService.TAG, "Still deferring PSS, nesting=" + nesting);
                    }
                }
            }

            static /* synthetic */ boolean lambda$handleMessage$0(ProcessCpuTracker.Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mProcessStateStatsLongs = new long[1];
        this.mPersistentReady = false;
        this.mHwAMSEx = null;
        this.mHwInnerService = new HwInnerActivityManagerService(this);
        this.mDAProxy = new HwDAMonitorProxy();
        hasHandlerThread = handlerThread == null ? false : hasHandlerThread;
        this.mInjector = injector;
        this.mContext = this.mInjector.getContext();
        this.mUiContext = null;
        this.mAppErrors = null;
        this.mPackageWatchdog = null;
        this.mAppOpsService = this.mInjector.getAppOpsService(null, null);
        this.mBatteryStatsService = null;
        this.mHandler = hasHandlerThread ? new MainHandler(handlerThread.getLooper()) : null;
        this.mHandlerThread = handlerThread;
        this.mConstants = hasHandlerThread ? new ActivityManagerConstants(this.mContext, this, this.mHandler) : null;
        ActiveUids activeUids = new ActiveUids(this, false);
        this.mProcessList.init(this, activeUids);
        this.mLowMemDetector = null;
        this.mOomAdjuster = new OomAdjuster(this, this.mProcessList, activeUids);
        this.mIntentFirewall = hasHandlerThread ? new IntentFirewall(new IntentFirewallInterface(), this.mHandler) : null;
        this.mProcessCpuThread = null;
        this.mProcessStats = null;
        this.mProviderMap = null;
        this.mServices = hasHandlerThread ? new ActiveServices(this) : null;
        this.mSystemThread = null;
        this.mUiHandler = injector.getUiHandler(null);
        this.mUserController = hasHandlerThread ? new UserController(this) : null;
        this.mPendingIntentController = hasHandlerThread ? new PendingIntentController(handlerThread.getLooper(), this.mUserController) : null;
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
        this.mFactoryTest = 0;
    }

    public ActivityManagerService(Context systemContext, ActivityTaskManagerService atm) {
        boolean z;
        this.mCpusetSwitch = false;
        this.mSubSwitch = 0;
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mUseFifoUiScheduling = false;
        this.mBroadcastQueues = initialBroadcastQueue();
        this.mCustAms = (HwCustActivityManagerService) HwCustUtils.createObj(HwCustActivityManagerService.class, new Object[0]);
        this.mLastAppCrashedPid = -1;
        this.mPriorityDumper = new PriorityDump.PriorityDumper() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass1 */

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"activities"}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", "all-platform-critical"}, asProto);
                }
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mProcessList = new ProcessList();
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mProcessesToGc = new ArrayList<>();
        this.mPendingPssProcesses = new ArrayList<>();
        this.mActivityStartingNesting = new AtomicInteger(0);
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass2 */

            public void onActivityLaunched(byte[] activity, int temperature) {
                if (ActivityManagerService.this.mPssDeferralTime > 0) {
                    ActivityManagerService.this.mBgHandler.sendMessageAtFrontOfQueue(ActivityManagerService.this.mBgHandler.obtainMessage(2));
                }
            }

            public void onIntentStarted(Intent intent) {
            }

            public void onIntentFailed() {
            }

            public void onActivityLaunchCancelled(byte[] abortingActivity) {
            }

            public void onActivityLaunchFinished(byte[] finalActivity) {
            }
        };
        this.mPssDeferralTime = PSS_DEFER_DELAY_MS;
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mPssDelayConfigListener = new DeviceConfig.OnPropertiesChangedListener() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass3 */

            public void onPropertiesChanged(DeviceConfig.Properties properties) {
                ActivityManagerService.this.mPssDeferralTime = properties.getLong(ActivityManagerService.ACTIVITY_START_PSS_DEFER_CONFIG, 0);
                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                    Slog.d(ActivityManagerService.TAG, "Activity-start PSS delay now " + ActivityManagerService.this.mPssDeferralTime + " ms");
                }
            }
        };
        this.mValidateUids = new ActiveUids(this, false);
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass4 */

            /* access modifiers changed from: protected */
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult((AnonymousClass4) filter, match, userId);
                }
                return null;
            }

            /* access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* access modifiers changed from: protected */
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mLaunchingProviders = new ArrayList<>();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new PendingTempWhitelists(this);
        this.mStringBuilder = new StringBuilder(256);
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = 1;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap<>();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mProfileData = new ProfileData();
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap<>();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mProcessObservers = new RemoteCallbackList<>();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList<>();
        this.mAvailProcessChanges = new ArrayList<>();
        this.mUidObservers = new RemoteCallbackList<>();
        this.mActiveUidChanges = new UidRecord.ChangeItem[5];
        this.mPendingUidChanges = new ArrayList<>();
        this.mAvailUidChanges = new ArrayList<>();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mBooted = false;
        this.mActivityIdle = false;
        this.mLastMemUsageReportTime = 0;
        this.mLocalStopReason = new ThreadLocal<>();
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass5 */

            /* JADX WARNING: Removed duplicated region for block: B:122:0x0256 A[Catch:{ all -> 0x02c0 }] */
            /* JADX WARNING: Removed duplicated region for block: B:139:0x02b6  */
            @Override // android.os.Handler
            public void handleMessage(Message msg) {
                MemInfoReader memInfo;
                int i;
                Throwable th;
                ProcessRecord proc;
                int procState;
                int statType;
                long lastPssTime;
                int pid;
                long start;
                long[] tmp;
                Throwable th2;
                int num;
                List<ProcessCpuTracker.Stats> stats;
                int i2 = msg.what;
                if (i2 == 1) {
                    long start2 = SystemClock.uptimeMillis();
                    MemInfoReader memInfo2 = null;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            i = 0;
                            if (ActivityManagerService.this.mFullPssPending) {
                                try {
                                    ActivityManagerService.this.mFullPssPending = false;
                                    memInfo2 = new MemInfoReader();
                                } catch (Throwable th3) {
                                    memInfo = th3;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th4) {
                                            memInfo = th4;
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw memInfo;
                                }
                            }
                        } catch (Throwable th5) {
                            memInfo = th5;
                            while (true) {
                                break;
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw memInfo;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    long[] jArr = null;
                    if (memInfo2 != null) {
                        ActivityManagerService.this.updateCpuStatsNow();
                        synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                            stats = ActivityManagerService.this.mProcessCpuTracker.getStats($$Lambda$ActivityManagerService$5$BegFiGFfKLYS7VRmiWluczgOC5k.INSTANCE);
                        }
                        int N = stats.size();
                        long nativeTotalPss = 0;
                        for (int j = 0; j < N; j++) {
                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                if (ActivityManagerService.this.mPidsSelfLocked.indexOfKey(stats.get(j).pid) < 0) {
                                    nativeTotalPss += Debug.getPss(stats.get(j).pid, null, null);
                                }
                            }
                        }
                        memInfo2.readMemInfo();
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                    Slog.d(ActivityManagerService.TAG, "Collected native and kernel memory in " + (SystemClock.uptimeMillis() - start2) + "ms");
                                }
                                long cachedKb = memInfo2.getCachedSizeKb();
                                long freeKb = memInfo2.getFreeSizeKb();
                                long zramKb = memInfo2.getZramTotalSizeKb();
                                long kernelKb = memInfo2.getKernelUsedSizeKb();
                                EventLogTags.writeAmMeminfo(cachedKb * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, nativeTotalPss * 1024);
                                ActivityManagerService.this.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, nativeTotalPss);
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                    int num2 = 0;
                    long[] tmp2 = new long[3];
                    while (true) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerService.this.mPendingPssProcesses.size() <= 0) {
                                    try {
                                        break;
                                    } catch (Throwable th6) {
                                        th = th6;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th7) {
                                                th = th7;
                                            }
                                        }
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } else {
                                    proc = ActivityManagerService.this.mPendingPssProcesses.remove(i);
                                    procState = proc.pssProcState;
                                    statType = proc.pssStatType;
                                    lastPssTime = proc.lastPssTime;
                                    long now = SystemClock.uptimeMillis();
                                    if (proc.thread == null || procState != proc.setProcState || lastPssTime + 1000 >= now) {
                                        ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                        proc = null;
                                        pid = 0;
                                    } else {
                                        pid = proc.pid;
                                    }
                                }
                            } catch (Throwable th8) {
                                th = th8;
                                while (true) {
                                    break;
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        if (proc != null) {
                            long startTime = SystemClock.currentThreadTimeMillis();
                            long pss = Debug.getPss(pid, tmp2, jArr);
                            long endTime = SystemClock.currentThreadTimeMillis();
                            synchronized (ActivityManagerService.this) {
                                try {
                                    ActivityManagerService.boostPriorityForLockedSection();
                                    if (pss != 0) {
                                        try {
                                            if (proc.thread != null && proc.setProcState == procState && proc.pid == pid) {
                                                start = start2;
                                                try {
                                                    if (proc.lastPssTime == lastPssTime) {
                                                        num2++;
                                                        ProcessList.commitNextPssTime(proc.procStateMemTracker);
                                                        ActivityManagerService.this.recordPssSampleLocked(proc, procState, pss, tmp2[0], tmp2[1], tmp2[2], statType, endTime - startTime, SystemClock.uptimeMillis());
                                                        tmp = tmp2;
                                                        try {
                                                        } catch (Throwable th9) {
                                                            th2 = th9;
                                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                                            throw th2;
                                                        }
                                                    } else {
                                                        ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                                        if (!ActivityManagerDebugConfig.DEBUG_PSS) {
                                                            StringBuilder sb = new StringBuilder();
                                                            sb.append("Skipped pss collection of ");
                                                            sb.append(pid);
                                                            sb.append(": ");
                                                            sb.append(proc.thread == null ? "NO_THREAD " : "");
                                                            sb.append(proc.pid != pid ? "PID_CHANGED " : "");
                                                            sb.append(" initState=");
                                                            sb.append(procState);
                                                            sb.append(" curState=");
                                                            sb.append(proc.setProcState);
                                                            sb.append(" ");
                                                            tmp = tmp2;
                                                            num = num2;
                                                            try {
                                                                sb.append(proc.lastPssTime != lastPssTime ? "TIME_CHANGED" : "");
                                                                Slog.d(ActivityManagerService.TAG, sb.toString());
                                                            } catch (Throwable th10) {
                                                                th2 = th10;
                                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                                throw th2;
                                                            }
                                                        } else {
                                                            tmp = tmp2;
                                                            num = num2;
                                                        }
                                                        num2 = num;
                                                    }
                                                } catch (Throwable th11) {
                                                    th2 = th11;
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                    throw th2;
                                                }
                                            }
                                        } catch (Throwable th12) {
                                            th2 = th12;
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            throw th2;
                                        }
                                    }
                                    start = start2;
                                    try {
                                        ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                        if (!ActivityManagerDebugConfig.DEBUG_PSS) {
                                        }
                                        num2 = num;
                                    } catch (Throwable th13) {
                                        th2 = th13;
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th2;
                                    }
                                } catch (Throwable th14) {
                                    th2 = th14;
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else {
                            start = start2;
                            tmp = tmp2;
                        }
                        tmp2 = tmp;
                        start2 = start;
                        jArr = null;
                        i = 0;
                    }
                    if (ActivityManagerService.this.mTestPssMode || ActivityManagerDebugConfig.DEBUG_PSS) {
                        Slog.d(ActivityManagerService.TAG, "Collected pss of " + num2 + " processes in " + (SystemClock.uptimeMillis() - start2) + "ms");
                    }
                    ActivityManagerService.this.mPendingPssProcesses.clear();
                    ActivityManagerService.resetPriorityAfterLockedSection();
                } else if (i2 == 2) {
                    ActivityManagerService.this.deferPssForActivityStart();
                } else if (i2 == 3) {
                    int nesting = ActivityManagerService.this.mActivityStartingNesting.decrementAndGet();
                    if (nesting <= 0) {
                        if (ActivityManagerDebugConfig.DEBUG_PSS) {
                            Slog.d(ActivityManagerService.TAG, "PSS activity start deferral interval ended; now " + nesting);
                        }
                        if (nesting < 0) {
                            Slog.wtf(ActivityManagerService.TAG, "Activity start nesting undercount!");
                            ActivityManagerService.this.mActivityStartingNesting.incrementAndGet();
                        }
                    } else if (ActivityManagerDebugConfig.DEBUG_PSS) {
                        Slog.d(ActivityManagerService.TAG, "Still deferring PSS, nesting=" + nesting);
                    }
                }
            }

            static /* synthetic */ boolean lambda$handleMessage$0(ProcessCpuTracker.Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mProcessStateStatsLongs = new long[1];
        this.mPersistentReady = false;
        this.mHwAMSEx = null;
        this.mHwInnerService = new HwInnerActivityManagerService(this);
        this.mDAProxy = new HwDAMonitorProxy();
        this.mHwAMSEx = HwServiceExFactory.getHwActivityManagerServiceEx(this, systemContext);
        LockGuard.installLock(this, 6);
        this.mInjector = new Injector();
        this.mContext = systemContext;
        this.mFactoryTest = FactoryTest.getMode();
        this.mSystemThread = ActivityThread.currentActivityThread();
        this.mUiContext = this.mSystemThread.getSystemUiContext();
        Slog.i(TAG, "Memory class: " + ActivityManager.staticGetMemoryClass());
        this.mHandlerThread = new ServiceThread(TAG, -2, false);
        this.mHandlerThread.start();
        this.mHandler = new MainHandler(this.mHandlerThread.getLooper());
        this.mUiHandler = this.mInjector.getUiHandler(this);
        this.mProcStartHandlerThread = new ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread.start();
        this.mProcStartHandler = new Handler(this.mProcStartHandlerThread.getLooper());
        this.mConstants = new ActivityManagerConstants(this.mContext, this, this.mHandler);
        ActiveUids activeUids = new ActiveUids(this, true);
        this.mProcessList.init(this, activeUids);
        this.mLowMemDetector = new LowMemDetector(this);
        this.mOomAdjuster = new OomAdjuster(this, this.mProcessList, activeUids);
        BroadcastConstants foreConstants = new BroadcastConstants("bcast_fg_constants");
        foreConstants.TIMEOUT = JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY;
        BroadcastConstants backConstants = new BroadcastConstants("bcast_bg_constants");
        backConstants.TIMEOUT = 60000;
        BroadcastConstants offloadConstants = new BroadcastConstants("bcast_offload_constants");
        offloadConstants.TIMEOUT = 60000;
        offloadConstants.SLOW_TIME = 2147483647L;
        this.mEnableOffloadQueue = SystemProperties.getBoolean("persist.device_config.activity_manager_native_boot.offload_queue_enabled", false);
        this.mFgBroadcastQueue = new HwBroadcastQueue(this, this.mHandler, "foreground", foreConstants, false);
        this.mBgBroadcastQueue = new HwBroadcastQueue(this, this.mHandler, "background", backConstants, true);
        this.mOffloadBroadcastQueue = new HwBroadcastQueue(this, this.mHandler, "offload", offloadConstants, true);
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        broadcastQueueArr[0] = this.mFgBroadcastQueue;
        broadcastQueueArr[1] = this.mBgBroadcastQueue;
        broadcastQueueArr[2] = this.mOffloadBroadcastQueue;
        setThirdPartyAppBroadcastQueue(broadcastQueueArr);
        setKeyAppBroadcastQueue(this.mBroadcastQueues);
        this.mServices = new ActiveServices(this);
        this.mProviderMap = new ProviderMap(this);
        this.mPackageWatchdog = PackageWatchdog.getInstance(this.mUiContext);
        this.mAppErrors = new AppErrors(this.mUiContext, this, this.mPackageWatchdog);
        File systemDir = SystemServiceManager.ensureSystemDir();
        BackgroundThread.get();
        this.mBatteryStatsService = new BatteryStatsService(systemContext, systemDir, BackgroundThread.getHandler());
        this.mBatteryStatsService.getActiveStatistics().readLocked();
        this.mBatteryStatsService.scheduleWriteToDisk();
        this.mBatteryStatsService.setActivityService(this);
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            z = true;
        } else {
            z = this.mBatteryStatsService.getActiveStatistics().getIsOnBattery();
        }
        this.mOnBattery = z;
        this.mBatteryStatsService.getActiveStatistics().setCallback(this);
        this.mOomAdjProfiler.batteryPowerChanged(this.mOnBattery);
        this.mProcessStats = new ProcessStatsService(this, new File(systemDir, "procstats"));
        this.mAppOpsService = this.mInjector.getAppOpsService(new File(systemDir, "appops.xml"), this.mHandler);
        this.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
        this.mUserController = new UserController(this);
        this.mPendingIntentController = new PendingIntentController(this.mHandlerThread.getLooper(), this.mUserController);
        if (SystemProperties.getInt("sys.use_fifo_ui", 0) != 0) {
            this.mUseFifoUiScheduling = true;
        }
        this.mTrackingAssociations = "1".equals(SystemProperties.get("debug.track-associations"));
        this.mIntentFirewall = new IntentFirewall(new IntentFirewallInterface(), this.mHandler);
        this.mActivityTaskManager = atm;
        this.mActivityTaskManager.initialize(this.mIntentFirewall, this.mPendingIntentController, DisplayThread.get().getLooper());
        this.mAtmInternal = (ActivityTaskManagerInternal) LocalServices.getService(ActivityTaskManagerInternal.class);
        this.mProcessCpuThread = new Thread("CpuTracker") {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass7 */

            /* JADX WARNING: Code restructure failed: missing block: B:28:0x005e, code lost:
                r1 = th;
             */
            @Override // java.lang.Thread, java.lang.Runnable
            public void run() {
                synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                    ActivityManagerService.this.mProcessCpuInitLatch.countDown();
                    ActivityManagerService.this.mProcessCpuTracker.init();
                }
                while (true) {
                    try {
                        synchronized (this) {
                            long now = SystemClock.uptimeMillis();
                            long nextCpuDelay = (ActivityManagerService.this.mLastCpuTime.get() + ActivityManagerService.MONITOR_CPU_MAX_TIME) - now;
                            long nextWriteDelay = (ActivityManagerService.this.mLastWriteTime + 1800000) - now;
                            if (nextWriteDelay < nextCpuDelay) {
                                nextCpuDelay = nextWriteDelay;
                            }
                            if (nextCpuDelay > 0) {
                                ActivityManagerService.this.mProcessCpuMutexFree.set(true);
                                wait(nextCpuDelay);
                            }
                        }
                    } catch (InterruptedException e) {
                    }
                    try {
                        ActivityManagerService.this.updateCpuStatsNow();
                    } catch (Exception e2) {
                        Slog.e(ActivityManagerService.TAG, "Unexpected exception collecting process stats", e2);
                    }
                }
                while (true) {
                }
            }
        };
        this.mHiddenApiBlacklist = new HiddenApiSettings(this.mHandler, this.mContext);
        Watchdog.getInstance().addMonitor(this);
        Watchdog.getInstance().addThread(this.mHandler);
        updateOomAdjLocked("updateOomAdj_meh");
        try {
            IZrHung iZrHung = HwFrameworkFactory.getZrHung("appeye_frameworkblock");
            if (iZrHung != null) {
                ZrHungData data = new ZrHungData();
                data.put("monitor", this);
                iZrHung.check(data);
            }
            Process.setThreadGroupAndCpuset(this.mOomAdjuster.mAppCompact.mCompactionThread.getThreadId(), 2);
        } catch (Exception e) {
            Slog.w(TAG, "Setting background thread cpuset failed");
        }
    }

    public void setSystemServiceManager(SystemServiceManager mgr) {
        this.mSystemServiceManager = mgr;
    }

    public void setInstaller(Installer installer) {
        this.mInstaller = installer;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void start() {
        Process.removeAllProcessGroups();
        this.mProcessCpuThread.start();
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish(this.mContext);
        Slog.d("AppOps", "AppOpsService published");
        LocalServices.addService(ActivityManagerInternal.class, new LocalService());
        this.mActivityTaskManager.onActivityManagerInternalAdded();
        this.mUgmInternal.onActivityManagerInternalAdded();
        this.mPendingIntentController.onActivityManagerInternalAdded();
        try {
            this.mProcessCpuInitLatch.await();
        } catch (InterruptedException e) {
            Slog.wtf(TAG, "Interrupted wait during start", e);
            Thread.currentThread().interrupt();
            throw new IllegalStateException("Interrupted wait during start");
        }
    }

    public void initPowerManagement() {
        this.mActivityTaskManager.onInitPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
    }

    private ArraySet<String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    /* access modifiers changed from: package-private */
    public void requireAllowedAssociationsLocked(String packageName) {
        ensureAllowedAssociations();
        if (this.mAllowedAssociations.get(packageName) == null) {
            this.mAllowedAssociations.put(packageName, new PackageAssociationInfo(packageName, new ArraySet(), false));
        }
    }

    /* access modifiers changed from: package-private */
    public boolean validateAssociationAllowedLocked(String pkg1, int uid1, String pkg2, int uid2) {
        ensureAllowedAssociations();
        if (uid1 == uid2 || UserHandle.getAppId(uid1) == 1000 || UserHandle.getAppId(uid2) == 1000) {
            return true;
        }
        PackageAssociationInfo pai = this.mAllowedAssociations.get(pkg1);
        if (pai != null && !pai.isPackageAssociationAllowed(pkg2)) {
            return false;
        }
        PackageAssociationInfo pai2 = this.mAllowedAssociations.get(pkg2);
        if (pai2 == null || pai2.isPackageAssociationAllowed(pkg1)) {
            return true;
        }
        return false;
    }

    private void ensureAllowedAssociations() {
        if (this.mAllowedAssociations == null) {
            ArrayMap<String, ArraySet<String>> allowedAssociations = SystemConfig.getInstance().getAllowedAssociations();
            this.mAllowedAssociations = new ArrayMap<>(allowedAssociations.size());
            getPackageManagerInternalLocked();
            for (int i = 0; i < allowedAssociations.size(); i++) {
                String pkg = allowedAssociations.keyAt(i);
                ArraySet<String> asc = allowedAssociations.valueAt(i);
                boolean isDebuggable = false;
                try {
                    boolean z = false;
                    ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(pkg, (int) DumpState.DUMP_INTENT_FILTER_VERIFIERS, 0);
                    if (ai != null) {
                        if ((ai.flags & 2) != 0) {
                            z = true;
                        }
                        isDebuggable = z;
                    }
                } catch (RemoteException e) {
                }
                this.mAllowedAssociations.put(pkg, new PackageAssociationInfo(pkg, asc, isDebuggable));
            }
        }
    }

    private void updateAssociationForApp(ApplicationInfo appInfo) {
        ensureAllowedAssociations();
        PackageAssociationInfo pai = this.mAllowedAssociations.get(appInfo.packageName);
        if (pai != null) {
            pai.setDebuggable((appInfo.flags & 2) != 0);
        }
    }

    /* JADX INFO: finally extract failed */
    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        if (code == 1599295570) {
            ArrayList<IBinder> procs = new ArrayList<>();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int NP = this.mProcessList.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (app.thread != null) {
                                procs.add(app.thread.asBinder());
                            }
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            int N = procs.size();
            for (int i = 0; i < N; i++) {
                Parcel data2 = Parcel.obtain();
                try {
                    procs.get(i).transact(1599295570, data2, null, 1);
                } catch (RemoteException e) {
                }
                data2.recycle();
            }
        }
        try {
            return super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e2) {
            if (!(e2 instanceof SecurityException) && !(e2 instanceof IllegalArgumentException) && !(e2 instanceof IllegalStateException)) {
                Slog.wtf(TAG, "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + code, e2);
            }
            throw e2;
        }
    }

    /* access modifiers changed from: package-private */
    public void updateCpuStats() {
        if (this.mLastCpuTime.get() < SystemClock.uptimeMillis() - MONITOR_CPU_MIN_TIME && this.mProcessCpuMutexFree.compareAndSet(true, false)) {
            synchronized (this.mProcessCpuThread) {
                this.mProcessCpuThread.notify();
            }
        }
    }

    /* JADX INFO: Multiple debug info for r0v18 com.android.internal.os.BatteryStatsImpl$Uid$Proc: [D('totalUTime' int), D('ps' com.android.internal.os.BatteryStatsImpl$Uid$Proc)] */
    /* access modifiers changed from: package-private */
    public void updateCpuStatsNow() {
        PidMap pidMap;
        PidMap pidMap2;
        Throwable th;
        int N;
        int totalUTime;
        synchronized (this.mProcessCpuTracker) {
            this.mProcessCpuMutexFree.set(false);
            long now = SystemClock.uptimeMillis();
            boolean haveNewCpuStats = false;
            if (this.mLastCpuTime.get() < now - MONITOR_CPU_MIN_TIME) {
                this.mLastCpuTime.set(now);
                this.mProcessCpuTracker.update();
                if (this.mProcessCpuTracker.hasGoodLastStats()) {
                    haveNewCpuStats = true;
                    if ("true".equals(SystemProperties.get("events.cpu"))) {
                        int user = this.mProcessCpuTracker.getLastUserTime();
                        int system = this.mProcessCpuTracker.getLastSystemTime();
                        int iowait = this.mProcessCpuTracker.getLastIoWaitTime();
                        int irq = this.mProcessCpuTracker.getLastIrqTime();
                        int softIrq = this.mProcessCpuTracker.getLastSoftIrqTime();
                        int total = user + system + iowait + irq + softIrq + this.mProcessCpuTracker.getLastIdleTime();
                        if (total == 0) {
                            total = 1;
                        }
                        EventLog.writeEvent((int) EventLogTags.CPU, Integer.valueOf((((((user + system) + iowait) + irq) + softIrq) * 100) / total), Integer.valueOf((user * 100) / total), Integer.valueOf((system * 100) / total), Integer.valueOf((iowait * 100) / total), Integer.valueOf((irq * 100) / total), Integer.valueOf((softIrq * 100) / total));
                    }
                }
            }
            BatteryStatsImpl bstats = this.mBatteryStatsService.getActiveStatistics();
            synchronized (bstats) {
                PidMap pidMap3 = this.mPidsSelfLocked;
                synchronized (pidMap3) {
                    if (haveNewCpuStats) {
                        try {
                            if (bstats.startAddingCpuLocked()) {
                                int totalUTime2 = 0;
                                int N2 = this.mProcessCpuTracker.countStats();
                                int i = 0;
                                int totalSTime = 0;
                                while (i < N2) {
                                    ProcessCpuTracker.Stats st = this.mProcessCpuTracker.getStats(i);
                                    if (!st.working) {
                                        N = N2;
                                        pidMap2 = pidMap3;
                                    } else {
                                        ProcessRecord pr = this.mPidsSelfLocked.get(st.pid);
                                        int totalUTime3 = totalUTime2 + st.rel_utime;
                                        totalSTime += st.rel_stime;
                                        if (pr != null) {
                                            BatteryStatsImpl.Uid.Proc ps = pr.curProcBatteryStats;
                                            if (ps == null || !ps.isActive()) {
                                                BatteryStatsImpl.Uid.Proc processStatsLocked = bstats.getProcessStatsLocked(pr.info.uid, pr.processName);
                                                ps = processStatsLocked;
                                                pr.curProcBatteryStats = processStatsLocked;
                                            }
                                            ps.addCpuTimeLocked(st.rel_utime, st.rel_stime);
                                            totalUTime = totalUTime3;
                                            N = N2;
                                            pidMap2 = pidMap3;
                                            pr.curCpuTime += (long) (st.rel_utime + st.rel_stime);
                                            if (pr.lastCpuTime == 0) {
                                                pr.lastCpuTime = pr.curCpuTime;
                                            }
                                        } else {
                                            totalUTime = totalUTime3;
                                            N = N2;
                                            pidMap2 = pidMap3;
                                            BatteryStatsImpl.Uid.Proc ps2 = st.batteryStats;
                                            if (ps2 == null || !ps2.isActive()) {
                                                BatteryStatsImpl.Uid.Proc processStatsLocked2 = bstats.getProcessStatsLocked(bstats.mapUid(st.uid), st.name);
                                                ps2 = processStatsLocked2;
                                                st.batteryStats = processStatsLocked2;
                                            }
                                            ps2.addCpuTimeLocked(st.rel_utime, st.rel_stime);
                                        }
                                        totalUTime2 = totalUTime;
                                    }
                                    i++;
                                    pidMap3 = pidMap2;
                                    N2 = N;
                                }
                                pidMap = pidMap3;
                                bstats.finishAddingCpuLocked(totalUTime2, totalSTime, this.mProcessCpuTracker.getLastUserTime(), this.mProcessCpuTracker.getLastSystemTime(), this.mProcessCpuTracker.getLastIoWaitTime(), this.mProcessCpuTracker.getLastIrqTime(), this.mProcessCpuTracker.getLastSoftIrqTime(), this.mProcessCpuTracker.getLastIdleTime());
                            } else {
                                pidMap = pidMap3;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            throw th;
                        }
                    } else {
                        pidMap = pidMap3;
                    }
                    if (this.mLastWriteTime < now - 1800000) {
                        this.mLastWriteTime = now;
                        this.mBatteryStatsService.scheduleWriteToDisk();
                    }
                }
            }
        }
    }

    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    public void batteryPowerChanged(boolean onBattery) {
        updateCpuStatsNow();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : onBattery;
                }
                this.mOomAdjProfiler.batteryPowerChanged(onBattery);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void batteryStatsReset() {
        this.mOomAdjProfiler.reset();
    }

    public void batterySendBroadcast(Intent intent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private ArrayMap<String, IBinder> getCommonServicesLocked(boolean isolated) {
        if (isolated) {
            if (this.mIsolatedAppBindArgs == null) {
                this.mIsolatedAppBindArgs = new ArrayMap<>(1);
                addServiceToMap(this.mIsolatedAppBindArgs, "package");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            this.mAppBindArgs = new ArrayMap<>();
            addServiceToMap(this.mAppBindArgs, "package");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, "alarm");
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, GraphicsStatsService.GRAPHICS_STATS_SERVICE);
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, "content");
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
        }
        return this.mAppBindArgs;
    }

    private static void addServiceToMap(ArrayMap<String, IBinder> map, String name) {
        IBinder service = ServiceManager.getService(name);
        if (service != null) {
            map.put(name, service);
        }
    }

    public void setFocusedStack(int stackId) {
        this.mActivityTaskManager.setFocusedStack(stackId);
    }

    public void registerTaskStackListener(ITaskStackListener listener) {
        this.mActivityTaskManager.registerTaskStackListener(listener);
    }

    public void unregisterTaskStackListener(ITaskStackListener listener) {
        this.mActivityTaskManager.unregisterTaskStackListener(listener);
    }

    /* access modifiers changed from: package-private */
    public final void updateLruProcessLocked(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        this.mProcessList.updateLruProcessLocked(app, activityChange, client);
    }

    /* access modifiers changed from: package-private */
    public final void removeLruProcessLocked(ProcessRecord app) {
        this.mProcessList.removeLruProcessLocked(app);
    }

    /* access modifiers changed from: package-private */
    public final ProcessRecord getProcessRecordLocked(String processName, int uid, boolean keepIfLarge) {
        return this.mProcessList.getProcessRecordLocked(processName, UserHandle.getUid(this.mHwAMSEx.getCloneAppUserId(processName, UserHandle.getUserId(uid)), uid), keepIfLarge);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ProcessMap<ProcessRecord> getProcessNames() {
        return this.mProcessList.mProcessNames;
    }

    /* access modifiers changed from: package-private */
    public void notifyPackageUse(String packageName, int reason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                getPackageManagerInternalLocked().notifyPackageUse(packageName, reason);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ApplicationInfo info = new ApplicationInfo();
                info.uid = 1000;
                info.processName = processName;
                info.className = entryPoint;
                info.packageName = PackageManagerService.PLATFORM_PACKAGE_NAME;
                info.seInfoUser = ":complete";
                info.targetSdkVersion = Build.VERSION.SDK_INT;
                z = this.mProcessList.startProcessLocked(processName, info, false, 0, sNullHostingRecord, true, true, uid, true, abiOverride, entryPoint, entryPointArgs, crashHandler) != null;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final int preloadApplicationLocked(ApplicationInfo info) {
        return this.mProcessList.preloadApplication(info);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, HostingRecord hostingRecord, boolean allowWhileBooting, boolean isolated, boolean keepIfLarge) {
        return this.mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingRecord, allowWhileBooting, isolated, 0, keepIfLarge, null, null, null, null);
    }

    /* access modifiers changed from: package-private */
    public boolean isAllowedWhileBooting(ApplicationInfo ai) {
        return (ai.flags & 8) != 0;
    }

    /* access modifiers changed from: package-private */
    public void updateBatteryStats(ComponentName activity, int uid, int userId, boolean resumed) {
        int i;
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG, "updateBatteryStats: comp=" + activity + "res=" + resumed);
        }
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        String packageName = activity.getPackageName();
        String shortClassName = activity.getShortClassName();
        if (resumed) {
            i = 1;
        } else {
            i = 0;
        }
        StatsLog.write(42, uid, packageName, shortClassName, i);
        synchronized (stats) {
            if (resumed) {
                stats.noteActivityResumedLocked(uid);
            } else {
                stats.noteActivityPausedLocked(uid);
            }
        }
    }

    /* JADX INFO: finally extract failed */
    public void updateActivityUsageStats(ComponentName activity, int userId, int event, IBinder appToken, ComponentName taskRoot) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG, "updateActivityUsageStats: comp=" + activity + " hash=" + appToken.hashCode() + " event=" + event);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    this.mUsageStatsService.reportEvent(activity, userId, event, appToken.hashCode(), taskRoot);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mContentCaptureService == null) {
            return;
        }
        if (event == 2 || event == 1 || event == 23 || event == 24) {
            this.mContentCaptureService.notifyActivityEvent(userId, activity, event);
        }
    }

    public void updateActivityUsageStats(String packageName, int userId, int event) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG, "updateActivityUsageStats: package=" + packageName + " event=" + event);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    this.mUsageStatsService.reportEvent(packageName, userId, event);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void updateForegroundServiceUsageStats(ComponentName service, int userId, boolean started) {
        int i;
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG, "updateForegroundServiceUsageStats: comp=" + service + " started=" + started);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
                    if (started) {
                        i = 19;
                    } else {
                        i = 20;
                    }
                    usageStatsManagerInternal.reportEvent(service, userId, i, 0, (ComponentName) null);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public CompatibilityInfo compatibilityInfoForPackage(ApplicationInfo ai) {
        return this.mAtmInternal.compatibilityInfoForPackage(ai);
    }

    private void enforceNotIsolatedCaller(String caller) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            throw new SecurityException("Isolated process not allowed to call " + caller);
        }
    }

    public void setPackageScreenCompatMode(String packageName, int mode) {
        this.mActivityTaskManager.setPackageScreenCompatMode(packageName, mode);
    }

    private boolean hasUsageStatsPermission(String callingPackage) {
        int mode = this.mAppOpsService.noteOperation(43, Binder.getCallingUid(), callingPackage);
        return mode == 3 ? checkCallingPermission("android.permission.PACKAGE_USAGE_STATS") == 0 : mode == 0;
    }

    public int getPackageProcessState(String packageName, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        int procState = 21;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord proc = this.mProcessList.mLruProcesses.get(i);
                    if (procState > proc.setProcState && (proc.pkgList.containsKey(packageName) || (proc.pkgDeps != null && proc.pkgDeps.contains(packageName)))) {
                        procState = proc.setProcState;
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return procState;
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level) throws RemoteException {
        if (isCallerShell()) {
            return setProcessMemoryTrimLevel(process, userId, level, false);
        }
        EventLog.writeEvent(1397638484, 160390416, Integer.valueOf(Binder.getCallingUid()), "");
        throw new SecurityException("Only shell can call it");
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level, boolean iAware) throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = findProcessLocked(process, userId, "setProcessMemoryTrimLevel");
                if (app == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                } else if (app.thread == null) {
                    throw new IllegalArgumentException("Process has no app thread");
                } else if (app.trimMemoryLevel < level) {
                    if (level >= 20 && (!iAware || app.getCurProcState() <= 6)) {
                        if (app.getCurProcState() <= 7) {
                            throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                        }
                    }
                    if (iAware) {
                        app.thread.iawareTrimMemory(level, iAware);
                        return true;
                    }
                    app.thread.scheduleTrimMemory(level);
                    app.trimMemoryLevel = level;
                    resetPriorityAfterLockedSection();
                    return true;
                } else {
                    throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void dispatchProcessesChanged() {
        int N;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingProcessChanges.size();
                if (this.mActiveProcessChanges.length < N) {
                    this.mActiveProcessChanges = new ProcessChangeItem[N];
                }
                this.mPendingProcessChanges.toArray(this.mActiveProcessChanges);
                this.mPendingProcessChanges.clear();
                if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                    Slog.i(TAG, "*** Delivering " + N + " process changes");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0) {
            i--;
            IProcessObserver observer = this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                for (int j = 0; j < N; j++) {
                    try {
                        ProcessChangeItem item = this.mActiveProcessChanges[j];
                        if ((item.changes & 1) != 0) {
                            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                Slog.i(TAG, "ACTIVITIES CHANGED pid=" + item.pid + " uid=" + item.uid + ": " + item.foregroundActivities);
                            }
                            observer.onForegroundActivitiesChanged(item.pid, item.uid, item.foregroundActivities);
                        }
                        if ((item.changes & 2) != 0) {
                            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                Slog.i(TAG, "FOREGROUND SERVICES CHANGED pid=" + item.pid + " uid=" + item.uid + ": " + item.foregroundServiceTypes);
                            }
                            observer.onForegroundServicesChanged(item.pid, item.uid, item.foregroundServiceTypes);
                        }
                    } catch (RemoteException e) {
                    }
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int j2 = 0; j2 < N; j2++) {
                    this.mAvailProcessChanges.add(this.mActiveProcessChanges[j2]);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public ProcessChangeItem enqueueProcessChangeItemLocked(int pid, int uid) {
        int i = this.mPendingProcessChanges.size() - 1;
        ProcessChangeItem item = null;
        while (true) {
            if (i < 0) {
                break;
            }
            item = this.mPendingProcessChanges.get(i);
            if (item.pid != pid) {
                i--;
            } else if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                Slog.i(TAG, "Re-using existing item: " + item);
            }
        }
        if (i < 0) {
            int NA = this.mAvailProcessChanges.size();
            if (NA > 0) {
                item = this.mAvailProcessChanges.remove(NA - 1);
                if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                    Slog.i(TAG, "Retrieving available item: " + item);
                }
            } else {
                item = new ProcessChangeItem();
                if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                    Slog.i(TAG, "Allocating new item: " + item);
                }
            }
            item.changes = 0;
            item.pid = pid;
            item.uid = uid;
            if (this.mPendingProcessChanges.size() == 0) {
                if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                    Slog.i(TAG, "*** Enqueueing dispatch processes changed!");
                }
                this.mUiHandler.obtainMessage(31).sendToTarget();
            }
            this.mPendingProcessChanges.add(item);
        }
        return item;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void dispatchProcessDied(int pid, int uid) {
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0) {
            i--;
            IProcessObserver observer = this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                try {
                    observer.onProcessDied(pid, uid);
                } catch (RemoteException e) {
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
    }

    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public void dispatchUidsChanged() {
        int N;
        long start = SystemClock.uptimeMillis();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingUidChanges.size();
                if (this.mActiveUidChanges.length < N) {
                    this.mActiveUidChanges = new UidRecord.ChangeItem[N];
                }
                for (int i = 0; i < N; i++) {
                    UidRecord.ChangeItem change = this.mPendingUidChanges.get(i);
                    this.mActiveUidChanges[i] = change;
                    if (change.uidRecord != null) {
                        change.uidRecord.pendingChange = null;
                        change.uidRecord = null;
                    }
                }
                this.mPendingUidChanges.clear();
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    Slog.i(TAG, "*** Delivering " + N + " uid changes");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        this.mUidChangeDispatchCount += N;
        int i2 = this.mUidObservers.beginBroadcast();
        while (i2 > 0) {
            i2--;
            dispatchUidsChangedForObserver(this.mUidObservers.getBroadcastItem(i2), (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(i2), N);
        }
        this.mUidObservers.finishBroadcast();
        if (this.mUidObservers.getRegisteredCallbackCount() > 0) {
            for (int j = 0; j < N; j++) {
                UidRecord.ChangeItem item = this.mActiveUidChanges[j];
                if ((item.change & 1) != 0) {
                    this.mValidateUids.remove(item.uid);
                } else {
                    UidRecord validateUid = this.mValidateUids.get(item.uid);
                    if (validateUid == null) {
                        validateUid = new UidRecord(item.uid);
                        this.mValidateUids.put(item.uid, validateUid);
                    }
                    if ((item.change & 2) != 0) {
                        validateUid.idle = true;
                    } else if ((item.change & 4) != 0) {
                        validateUid.idle = false;
                    }
                    int i3 = item.processState;
                    validateUid.setProcState = i3;
                    validateUid.setCurProcState(i3);
                    validateUid.lastDispatchedProcStateSeq = item.procStateSeq;
                }
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int j2 = 0; j2 < N; j2++) {
                    this.mAvailUidChanges.add(this.mActiveUidChanges[j2]);
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        long end = SystemClock.uptimeMillis();
        if (end - start > 1000) {
            Slog.w(TAG, "Finishing dispatch all uids changed took " + (end - start) + "ms");
        }
    }

    private void dispatchUidsChangedForObserver(IUidObserver observer, UidObserverRegistration reg, int changesSize) {
        boolean isLenthTooLong;
        int i = changesSize;
        if (observer != null) {
            try {
                long begin = SystemClock.uptimeMillis();
                boolean isLenthTooLong2 = false;
                if (i > 100) {
                    isLenthTooLong2 = true;
                    Slog.w(TAG, "Dispatch uids changed changesSize : " + i);
                }
                int j = 0;
                while (j < i) {
                    try {
                        UidRecord.ChangeItem item = this.mActiveUidChanges[j];
                        int change = item.change;
                        if (isLenthTooLong2 && ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
                            Slog.w(TAG, "Dispatch uids changed change : " + change);
                        }
                        if (change == 0 && (reg.which & 1) == 0) {
                            isLenthTooLong = isLenthTooLong2;
                        } else {
                            long start = SystemClock.uptimeMillis();
                            if ((change & 2) != 0) {
                                if ((reg.which & 4) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID idle uid=" + item.uid);
                                    }
                                    observer.onUidIdle(item.uid, item.ephemeral);
                                }
                            } else if (!((change & 4) == 0 || (reg.which & 8) == 0)) {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    Slog.i(TAG, "UID active uid=" + item.uid);
                                }
                                observer.onUidActive(item.uid);
                            }
                            if ((reg.which & 16) != 0) {
                                if ((change & 8) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID cached uid=" + item.uid);
                                    }
                                    observer.onUidCachedChanged(item.uid, true);
                                } else if ((change & 16) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID active uid=" + item.uid);
                                    }
                                    observer.onUidCachedChanged(item.uid, false);
                                }
                            }
                            if ((change & 1) != 0) {
                                if ((reg.which & 2) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID gone uid=" + item.uid);
                                    }
                                    observer.onUidGone(item.uid, item.ephemeral);
                                }
                                if (reg.lastProcStates != null) {
                                    reg.lastProcStates.delete(item.uid);
                                    isLenthTooLong = isLenthTooLong2;
                                } else {
                                    isLenthTooLong = isLenthTooLong2;
                                }
                            } else if ((reg.which & 1) != 0) {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    Slog.i(TAG, "UID CHANGED uid=" + item.uid + ": " + item.processState);
                                }
                                boolean doReport = true;
                                if (reg.cutpoint >= 0) {
                                    isLenthTooLong = isLenthTooLong2;
                                    int lastState = reg.lastProcStates.get(item.uid, -1);
                                    if (lastState != -1) {
                                        doReport = (lastState <= reg.cutpoint) != (item.processState <= reg.cutpoint);
                                    } else {
                                        doReport = item.processState != 21;
                                    }
                                } else {
                                    isLenthTooLong = isLenthTooLong2;
                                }
                                if (doReport) {
                                    if (reg.lastProcStates != null) {
                                        reg.lastProcStates.put(item.uid, item.processState);
                                    }
                                    observer.onUidStateChanged(item.uid, item.processState, item.procStateSeq);
                                }
                            } else {
                                isLenthTooLong = isLenthTooLong2;
                            }
                            int duration = (int) (SystemClock.uptimeMillis() - start);
                            if (reg.mMaxDispatchTime < duration) {
                                reg.mMaxDispatchTime = duration;
                            }
                            if (duration >= 20) {
                                reg.mSlowDispatchCount++;
                            }
                        }
                        j++;
                        i = changesSize;
                        isLenthTooLong2 = isLenthTooLong;
                    } catch (RemoteException e) {
                        return;
                    }
                }
                long end = SystemClock.uptimeMillis();
                if (end - begin > SINGLE_DISPATCH_THRESHOLD_MS) {
                    Slog.w(TAG, "Dispatch uids changed took " + (end - begin) + "ms for observer : " + observer);
                }
            } catch (RemoteException e2) {
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dispatchOomAdjObserver(String msg) {
        OomAdjObserver observer;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                observer = this.mCurOomAdjObserver;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        if (observer != null) {
            observer.onOomAdjMessage(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void setOomAdjObserver(int uid, OomAdjObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = uid;
                this.mCurOomAdjObserver = observer;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void clearOomAdjObserver() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = -1;
                this.mCurOomAdjObserver = null;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void reportOomAdjMessageLocked(String tag, String msg) {
        Slog.d(tag, msg);
        if (this.mCurOomAdjObserver != null) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    /* access modifiers changed from: package-private */
    public void reportUidInfoMessageLocked(String tag, String msg, int uid) {
        Slog.i(TAG, msg);
        if (this.mCurOomAdjObserver != null && uid == this.mCurOomAdjUid) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    public int startActivity(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        return this.mActivityTaskManager.startActivity(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions);
    }

    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return this.mActivityTaskManager.startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    /* access modifiers changed from: package-private */
    public WaitResult startActivityAndWait(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return this.mActivityTaskManager.startActivityAndWait(caller, callingPackage, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    public final int startActivityFromRecents(int taskId, Bundle bOptions) {
        return this.mActivityTaskManager.startActivityFromRecents(taskId, bOptions);
    }

    public void startRecentsActivity(Intent intent, IAssistDataReceiver assistDataReceiver, IRecentsAnimationRunner recentsAnimationRunner) {
        this.mActivityTaskManager.startRecentsActivity(intent, assistDataReceiver, recentsAnimationRunner);
    }

    public void cancelRecentsAnimation(boolean restoreHomeStackPosition) {
        this.mActivityTaskManager.cancelRecentsAnimation(restoreHomeStackPosition);
    }

    public final boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_FINISHACTIVITY);
        return this.mActivityTaskManager.finishActivity(token, resultCode, resultData, finishTask);
    }

    public void setRequestedOrientation(IBinder token, int requestedOrientation) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_SETREQUESTEDORIENTATION);
        this.mActivityTaskManager.setRequestedOrientation(token, requestedOrientation);
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            this.mAtmInternal.finishHeavyWeightApp();
            return;
        }
        String msg = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public void crashApplication(int uid, int initialPid, String packageName, int userId, String message, boolean force) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAppErrors.scheduleAppCrashLocked(uid, initialPid, packageName, userId, message, force);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        String msg = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void handleAppDiedLocked(ProcessRecord app, boolean restarting, boolean allowRestart) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendEvent(4, app.uid, app.pid, app.processName, (String) null);
        IHwActivityManagerServiceEx iHwActivityManagerServiceEx = this.mHwAMSEx;
        if (iHwActivityManagerServiceEx != null) {
            iHwActivityManagerServiceEx.handleAppDiedLocked(app, restarting, allowRestart);
        }
        if (app.pid == this.mWindowManager.getRemoteViewsPid()) {
            this.mWindowManager.handleAppDiedForRemoteViews();
        }
        int pid = app.pid;
        if (!cleanUpApplicationRecordLocked(app, restarting, allowRestart, -1, false) && !restarting) {
            removeLruProcessLocked(app);
            if (pid > 0) {
                ProcessList.remove(pid);
            }
        }
        if (this.mProfileData.getProfileProc() == app) {
            clearProfilerLocked();
        }
        this.mAtmInternal.handleAppDied(app.getWindowProcessController(), restarting, new Runnable(app) {
            /* class com.android.server.am.$$Lambda$ActivityManagerService$2afaFERxNQEnSdevJxY5plp1fS4 */
            private final /* synthetic */ ProcessRecord f$1;

            {
                this.f$1 = r2;
            }

            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.lambda$handleAppDiedLocked$0$ActivityManagerService(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$handleAppDiedLocked$0$ActivityManagerService(ProcessRecord app) {
        Slog.w(TAG, "Crash of app " + app.processName + " running instrumentation " + app.getActiveInstrumentation().mClass);
        Bundle info = new Bundle();
        info.putString("shortMsg", "Process crashed.");
        finishInstrumentationLocked(app, 0, info);
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord getRecordForAppLocked(IApplicationThread thread) {
        if (thread == null) {
            return null;
        }
        ProcessRecord record = this.mProcessList.getLRURecordForAppLocked(thread);
        if (record != null) {
            return record;
        }
        IBinder threadBinder = thread.asBinder();
        ArrayMap<String, SparseArray<ProcessRecord>> pmap = this.mProcessList.mProcessNames.getMap();
        for (int i = pmap.size() - 1; i >= 0; i--) {
            SparseArray<ProcessRecord> procs = pmap.valueAt(i);
            for (int j = procs.size() - 1; j >= 0; j--) {
                ProcessRecord proc = procs.valueAt(j);
                if (proc.thread != null && proc.thread.asBinder() == threadBinder) {
                    Slog.wtf(TAG, "getRecordForApp: exists in name list but not in LRU list: " + proc);
                    return proc;
                }
            }
        }
        return null;
    }

    /* access modifiers changed from: package-private */
    public final void doLowMemReportIfNeededLocked(ProcessRecord dyingProc) {
        ArrayList<ProcessMemInfo> memInfos;
        if (!this.mProcessList.haveBackgroundProcessLocked()) {
            boolean doReport = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
            if (doReport) {
                long now = SystemClock.uptimeMillis();
                if (now < this.mLastMemUsageReportTime + BackupAgentTimeoutParameters.DEFAULT_FULL_BACKUP_AGENT_TIMEOUT_MILLIS) {
                    doReport = false;
                } else {
                    this.mLastMemUsageReportTime = now;
                }
            }
            if (doReport) {
                memInfos = new ArrayList<>(this.mProcessList.getLruSizeLocked());
            } else {
                memInfos = null;
            }
            EventLog.writeEvent((int) EventLogTags.AM_LOW_MEMORY, this.mProcessList.getLruSizeLocked());
            long now2 = SystemClock.uptimeMillis();
            for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                ProcessRecord rec = this.mProcessList.mLruProcesses.get(i);
                if (!(rec == dyingProc || rec.thread == null)) {
                    if (doReport) {
                        memInfos.add(new ProcessMemInfo(rec.processName, rec.pid, rec.setAdj, rec.setProcState, rec.adjType, rec.makeAdjReason()));
                    }
                    if (rec.lastLowMemory + this.mConstants.GC_MIN_INTERVAL <= now2) {
                        if (rec.setAdj <= 400) {
                            rec.lastRequestedGc = 0;
                        } else {
                            rec.lastRequestedGc = rec.lastLowMemory;
                        }
                        rec.reportLowMemory = true;
                        rec.lastLowMemory = now2;
                        this.mProcessesToGc.remove(rec);
                        addProcessToGcListLocked(rec);
                    }
                }
            }
            if (doReport) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(33, memInfos));
            }
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void appDiedLocked(ProcessRecord app) {
        appDiedLocked(app, app.pid, app.thread, false);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void appDiedLocked(ProcessRecord app, int pid, IApplicationThread thread, boolean fromBinderDied) {
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord curProc = this.mPidsSelfLocked.get(pid);
            if (curProc != app) {
                Slog.w(TAG, "Spurious death for " + app + ", curProc for " + pid + ": " + curProc);
                return;
            }
        }
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        synchronized (stats) {
            stats.noteProcessDiedLocked(app.info.uid, pid);
        }
        if (!app.killed) {
            if (!fromBinderDied) {
                Process.killProcessQuiet(pid);
            }
            ProcessList.killProcessGroup(app.uid, pid);
            app.killed = true;
        }
        if (app.pid == pid && app.thread != null && app.thread.asBinder() == thread.asBinder()) {
            boolean doLowMem = app.getActiveInstrumentation() == null;
            if (!app.killedByAm) {
                reportUidInfoMessageLocked(TAG, "Process " + app.processName + " (pid " + pid + ") has died: " + ProcessList.makeOomAdjString(app.setAdj, true) + " " + ProcessList.makeProcStateString(app.setProcState), app.info.uid);
                this.mAllowLowerMemLevel = true;
            } else {
                this.mAllowLowerMemLevel = false;
                doLowMem = false;
            }
            EventLog.writeEvent((int) EventLogTags.AM_PROC_DIED, Integer.valueOf(app.userId), Integer.valueOf(app.pid), app.processName, Integer.valueOf(app.setAdj), Integer.valueOf(app.setProcState));
            if (ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.v(TAG, "Dying app: " + app + ", pid: " + pid + ", thread: " + thread.asBinder());
            }
            handleAppDiedLocked(app, false, true);
            if (doLowMem) {
                updateOomAdjLocked("updateOomAdj_processEnd");
            }
            if (doLowMem) {
                doLowMemReportIfNeededLocked(app);
            }
        } else if (app.pid != pid) {
            reportUidInfoMessageLocked(TAG, "Process " + app.processName + " (pid " + pid + ") has died and restarted (pid " + app.pid + ").", app.info.uid);
            EventLog.writeEvent((int) EventLogTags.AM_PROC_DIED, Integer.valueOf(app.userId), Integer.valueOf(app.pid), app.processName);
        } else if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            Slog.d(TAG, "Received spurious death notification for thread " + thread.asBinder());
        }
        if (!MemoryStatUtil.hasMemcg()) {
            StatsLog.write(65, SystemClock.elapsedRealtime());
        }
    }

    public static File dumpStackTraces(ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        ArrayList<Integer> extraPids = null;
        Slog.i(TAG, "dumpStackTraces pids=" + lastPids + " nativepids=" + nativePids);
        if (processCpuTracker != null) {
            processCpuTracker.init();
            try {
                Thread.sleep(NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
            } catch (InterruptedException e) {
            }
            processCpuTracker.update();
            int N = processCpuTracker.countWorkingStats();
            extraPids = new ArrayList<>();
            for (int i = 0; i < N && extraPids.size() < 5; i++) {
                ProcessCpuTracker.Stats stats = processCpuTracker.getWorkingStats(i);
                if (lastPids == null || lastPids.indexOfKey(stats.pid) < 0) {
                    Slog.i(TAG, "Skipping next CPU consuming process, not a java proc: " + stats.pid);
                } else {
                    extraPids.add(Integer.valueOf(stats.pid));
                }
            }
        }
        File tracesDir = new File(ANR_TRACE_DIR);
        maybePruneOldTraces(tracesDir);
        File tracesFile = createAnrDumpFile(tracesDir);
        if (tracesFile == null) {
            return null;
        }
        dumpStackTraces(tracesFile.getAbsolutePath(), firstPids, nativePids, extraPids);
        return tracesFile;
    }

    private static synchronized File createAnrDumpFile(File tracesDir) {
        synchronized (ActivityManagerService.class) {
            boostPriorityForLockedSection();
            if (sAnrFileDateFormat == null) {
                sAnrFileDateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
            }
            String formattedDate = sAnrFileDateFormat.format(new Date());
            File anrFile = new File(tracesDir, "anr_" + formattedDate);
            try {
                if (anrFile.createNewFile()) {
                    FileUtils.setPermissions(anrFile.getAbsolutePath(), 384, -1, -1);
                    resetPriorityAfterLockedSection();
                    return anrFile;
                }
                Slog.w(TAG, "Unable to create ANR dump file: createNewFile failed");
                resetPriorityAfterLockedSection();
                return null;
            } catch (IOException ioe) {
                Slog.w(TAG, "Exception creating ANR dump file:", ioe);
            }
        }
    }

    private static void maybePruneOldTraces(File tracesDir) {
        File[] files = tracesDir.listFiles();
        if (files != null) {
            int max = SystemProperties.getInt("tombstoned.max_anr_count", 64);
            long now = System.currentTimeMillis();
            Arrays.sort(files, Comparator.comparingLong($$Lambda$yk1Ms9fVlF6PvprMwF2rrudw4Q.INSTANCE).reversed());
            for (int i = 0; i < files.length; i++) {
                if ((i > max || now - files[i].lastModified() > 86400000) && !files[i].delete()) {
                    Slog.w(TAG, "Unable to prune stale trace file: " + files[i]);
                }
            }
        }
    }

    private static long dumpJavaTracesTombstoned(int pid, String fileName, long timeoutMs) {
        long timeStart = SystemClock.elapsedRealtime();
        boolean javaSuccess = Debug.dumpJavaBacktraceToFileTimeout(pid, fileName, (int) (timeoutMs / 1000));
        if (javaSuccess) {
            try {
                if (new File(fileName).length() < SINGLE_DISPATCH_THRESHOLD_MS) {
                    Slog.w(TAG, "Successfully created Java ANR file is empty!");
                    javaSuccess = false;
                }
            } catch (Exception e) {
                Slog.w(TAG, "Unable to get ANR file size", e);
                javaSuccess = false;
            }
        }
        if (!javaSuccess) {
            Slog.w(TAG, "Dumping Java threads failed, initiating native stack dump.");
            if (!Debug.dumpNativeBacktraceToFileTimeout(pid, fileName, 2)) {
                Slog.w(TAG, "Native stack dump failed!");
            }
        }
        return SystemClock.elapsedRealtime() - timeStart;
    }

    public static void dumpStackTraces(String tracesFile, ArrayList<Integer> firstPids, ArrayList<Integer> nativePids, ArrayList<Integer> extraPids) {
        Slog.i(TAG, "Dumping to " + tracesFile);
        if (IS_DEBUG_VERSION && mAppEyeBinderBlock != null) {
            ZrHungData data = new ZrHungData();
            data.putString("method", "readTransactionInSubThread");
            mAppEyeBinderBlock.check(data);
        }
        long remainingTime = 20000;
        if (firstPids != null) {
            int num = firstPids.size();
            for (int i = 0; i < num; i++) {
                Slog.i(TAG, "Collecting stacks for pid " + firstPids.get(i));
                remainingTime -= dumpJavaTracesTombstoned(firstPids.get(i).intValue(), tracesFile, remainingTime);
                if (remainingTime <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current firstPid=" + firstPids.get(i) + "); deadline exceeded.");
                    return;
                }
            }
        }
        if (nativePids != null) {
            Iterator<Integer> it = nativePids.iterator();
            while (it.hasNext()) {
                int pid = it.next().intValue();
                Slog.i(TAG, "Collecting stacks for native pid " + pid);
                long nativeDumpTimeoutMs = Math.min(2000L, remainingTime);
                long start = SystemClock.elapsedRealtime();
                Debug.dumpNativeBacktraceToFileTimeout(pid, tracesFile, (int) (nativeDumpTimeoutMs / 1000));
                remainingTime -= SystemClock.elapsedRealtime() - start;
                if (remainingTime <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current native pid=" + pid + "); deadline exceeded.");
                    return;
                }
            }
        }
        if (extraPids != null) {
            Iterator<Integer> it2 = extraPids.iterator();
            while (it2.hasNext()) {
                int pid2 = it2.next().intValue();
                Slog.i(TAG, "Collecting stacks for extra pid " + pid2);
                remainingTime -= dumpJavaTracesTombstoned(pid2, tracesFile, remainingTime);
                if (remainingTime <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current extra pid=" + pid2 + "); deadline exceeded.");
                    return;
                }
            }
        }
        if (IS_DEBUG_VERSION && mAppEyeBinderBlock != null) {
            ZrHungData data2 = new ZrHungData();
            data2.putString("method", "writeTransactionToTrace");
            data2.putString("path", tracesFile);
            mAppEyeBinderBlock.check(data2);
        }
        Slog.i(TAG, "Done dumping");
    }

    /* JADX WARNING: Removed duplicated region for block: B:32:0x008d A[Catch:{ all -> 0x0077 }] */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x00e5  */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x00e7  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x00eb  */
    /* JADX WARNING: Removed duplicated region for block: B:77:0x015f  */
    /* JADX WARNING: Removed duplicated region for block: B:82:0x017b  */
    public boolean clearApplicationUserData(String packageName, boolean keepState, final IPackageDataObserver observer, int userId) {
        Throwable th;
        Throwable th2;
        final ApplicationInfo applicationInfo;
        boolean clearingOwnUidData;
        boolean isUninstalledAppWithoutInstantMetadata;
        final boolean isInstantApp;
        if (this.mHwAMSEx.isNeedForbidShellFunc(packageName)) {
            Slog.i(TAG, "clearApplicationUserData need forbid shell func, " + packageName + " won't be cleared");
            if (observer != null) {
                try {
                    observer.onRemoveCompleted(packageName, false);
                } catch (RemoteException e) {
                    Slog.e(TAG, "Observer no longer exists.");
                }
            }
            return false;
        }
        enforceNotIsolatedCaller("clearApplicationUserData");
        final int uid = Binder.getCallingUid();
        final int pid = Binder.getCallingPid();
        final int resolvedUserId = this.mUserController.handleIncomingUser(pid, uid, userId, false, 2, "clearApplicationUserData", null);
        long callingId = Binder.clearCallingIdentity();
        try {
            IPackageManager pm = AppGlobals.getPackageManager();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (!getPackageManagerInternalLocked().isPackageDataProtected(resolvedUserId, packageName)) {
                        applicationInfo = null;
                        try {
                            applicationInfo = pm.getApplicationInfo(packageName, 8192, resolvedUserId);
                        } catch (RemoteException e2) {
                        }
                        if (applicationInfo != null) {
                            try {
                                if (applicationInfo.uid == uid) {
                                    clearingOwnUidData = true;
                                    if (!clearingOwnUidData) {
                                        if (checkComponentPermission("android.permission.CLEAR_APP_USER_DATA", pid, uid, -1, true) != 0) {
                                            throw new SecurityException("PID " + pid + " does not have permission android.permission.CLEAR_APP_USER_DATA to clear data of package " + packageName);
                                        }
                                    }
                                    boolean hasInstantMetadata = getPackageManagerInternalLocked().hasInstantApplicationMetadata(packageName, resolvedUserId);
                                    isUninstalledAppWithoutInstantMetadata = applicationInfo != null && !hasInstantMetadata;
                                    isInstantApp = (applicationInfo == null && applicationInfo.isInstantApp()) || hasInstantMetadata;
                                    boolean canAccessInstantApps = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", pid, uid, -1, true) != 0;
                                    if (isUninstalledAppWithoutInstantMetadata) {
                                        if (!isInstantApp || canAccessInstantApps) {
                                            if (applicationInfo != null) {
                                                forceStopPackageLocked(packageName, applicationInfo.uid, "clear data");
                                                this.mAtmInternal.removeRecentTasksByPackageName(packageName, resolvedUserId);
                                            }
                                        }
                                    }
                                    Slog.w(TAG, "Invalid packageName: " + packageName);
                                    if (observer != null) {
                                        try {
                                            observer.onRemoveCompleted(packageName, false);
                                        } catch (RemoteException e3) {
                                            Slog.i(TAG, "Observer no longer exists.");
                                        }
                                    }
                                    resetPriorityAfterLockedSection();
                                    Binder.restoreCallingIdentity(callingId);
                                    return false;
                                }
                            } catch (Throwable th3) {
                                th2 = th3;
                                resetPriorityAfterLockedSection();
                                throw th2;
                            }
                        }
                        clearingOwnUidData = false;
                        if (!clearingOwnUidData) {
                        }
                        boolean hasInstantMetadata2 = getPackageManagerInternalLocked().hasInstantApplicationMetadata(packageName, resolvedUserId);
                        if (applicationInfo != null) {
                        }
                        if (applicationInfo == null) {
                        }
                        if (checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", pid, uid, -1, true) != 0) {
                        }
                        if (isUninstalledAppWithoutInstantMetadata) {
                        }
                        try {
                            Slog.w(TAG, "Invalid packageName: " + packageName);
                            if (observer != null) {
                            }
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(callingId);
                            return false;
                        } catch (Throwable th4) {
                            th2 = th4;
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    } else {
                        throw new SecurityException("Cannot clear data for a protected package: " + packageName);
                    }
                } catch (Throwable th5) {
                    th2 = th5;
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
            try {
                try {
                    pm.clearApplicationUserData(packageName, new IPackageDataObserver.Stub() {
                        /* class com.android.server.am.ActivityManagerService.AnonymousClass8 */

                        public void onRemoveCompleted(String packageName, boolean succeeded) throws RemoteException {
                            if (applicationInfo != null) {
                                synchronized (ActivityManagerService.this) {
                                    try {
                                        ActivityManagerService.boostPriorityForLockedSection();
                                        ActivityManagerService.this.finishForceStopPackageLocked(packageName, applicationInfo.uid);
                                    } finally {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                    }
                                }
                            }
                            Intent intent = new Intent("android.intent.action.PACKAGE_DATA_CLEARED", Uri.fromParts("package", packageName, null));
                            intent.addFlags(DumpState.DUMP_SERVICE_PERMISSIONS);
                            ApplicationInfo applicationInfo = applicationInfo;
                            intent.putExtra("android.intent.extra.UID", applicationInfo != null ? applicationInfo.uid : -1);
                            intent.putExtra("android.intent.extra.user_handle", resolvedUserId);
                            if (isInstantApp) {
                                intent.putExtra("android.intent.extra.PACKAGE_NAME", packageName);
                                ActivityManagerService.this.broadcastIntentInPackage(PackageManagerService.PLATFORM_PACKAGE_NAME, 1000, uid, pid, intent, null, null, 0, null, null, "android.permission.ACCESS_INSTANT_APPS", null, false, false, resolvedUserId, false);
                            } else {
                                ActivityManagerService.this.broadcastIntentInPackage(PackageManagerService.PLATFORM_PACKAGE_NAME, 1000, uid, pid, intent, null, null, 0, null, null, null, null, false, false, resolvedUserId, false);
                            }
                            IPackageDataObserver iPackageDataObserver = observer;
                            if (iPackageDataObserver != null) {
                                iPackageDataObserver.onRemoveCompleted(packageName, succeeded);
                            }
                        }
                    }, resolvedUserId);
                    if (applicationInfo != null) {
                        if (!keepState) {
                            this.mUgmInternal.removeUriPermissionsForPackage(packageName, resolvedUserId, true, false);
                            NotificationManager.getService().clearData(packageName, applicationInfo.uid, uid == applicationInfo.uid);
                        }
                        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).cancelJobsForUid(applicationInfo.uid, "clear data");
                        ((AlarmManagerInternal) LocalServices.getService(AlarmManagerInternal.class)).removeAlarmsForUid(applicationInfo.uid);
                    }
                } catch (RemoteException e4) {
                }
                Binder.restoreCallingIdentity(callingId);
                return true;
            } catch (Throwable th6) {
                th = th6;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } catch (Throwable th7) {
            th = th7;
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    public void killBackgroundProcesses(String packageName, int userId) {
        int appId;
        Throwable th;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_KILLBACKGROUNDPROCESSES);
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0 || checkCallingPermission("android.permission.RESTART_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "killBackgroundProcesses", null);
            Slog.i(TAG, "killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
            int[] userIds = this.mUserController.expandUserId(userId2);
            long callingId = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                for (int targetUserId : userIds) {
                    try {
                        appId = UserHandle.getAppId(pm.getPackageUid(packageName, 268435456, targetUserId));
                    } catch (RemoteException e) {
                        appId = -1;
                    }
                    if (appId == -1) {
                        Slog.w(TAG, "Invalid packageName: " + packageName);
                        return;
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            try {
                                this.mProcessList.killPackageProcessesLocked(packageName, appId, targetUserId, SystemService.PHASE_SYSTEM_SERVICES_READY, "kill background");
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterLockedSection();
                }
                Binder.restoreCallingIdentity(callingId);
            } finally {
                Binder.restoreCallingIdentity(callingId);
            }
        } else {
            String msg = "Permission Denial: killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* JADX INFO: finally extract failed */
    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        this.mAllowLowerMemLevel = true;
                        this.mProcessList.killPackageProcessesLocked(null, -1, -1, 900, "kill all background");
                        doLowMemReportIfNeededLocked(null);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
            } finally {
                Binder.restoreCallingIdentity(callingId);
            }
        } else {
            String msg = "Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: package-private */
    public void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        this.mProcessList.killAllBackgroundProcessesExceptLocked(minTargetSdk, maxProcState);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
            } finally {
                Binder.restoreCallingIdentity(callingId);
            }
        } else {
            String msg = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* JADX INFO: Multiple debug info for r13v11 'callingPid'  int: [D('callingPid' int), D('pm' android.content.pm.IPackageManager)] */
    @Override // com.android.server.am.IHwActivityManagerInner
    public void forceStopPackage(String packageName, int userId) {
        Throwable th;
        Throwable th2;
        int[] iArr;
        int i;
        IPackageManager pm;
        boolean z;
        int[] users;
        int i2;
        int callingPid;
        String str;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int callingPid2 = Binder.getCallingPid();
            int userId2 = this.mUserController.handleIncomingUser(callingPid2, Binder.getCallingUid(), userId, true, 2, "forceStopPackage", null);
            long callingId = Binder.clearCallingIdentity();
            try {
                if (this.mHwAMSEx.isNeedForbidShellFunc(packageName)) {
                    try {
                        Slog.i(TAG, "forceStopPackage need forbid shell func, " + packageName + " won't be killed");
                        Binder.restoreCallingIdentity(callingId);
                    } catch (Throwable th3) {
                        th = th3;
                        Binder.restoreCallingIdentity(callingId);
                        throw th;
                    }
                } else {
                    String reason = this.mLocalStopReason.get();
                    if (this.mActivityTaskManager.isNeedSkipForceStopForHwMultiWindow(packageName, userId2, reason)) {
                        Slog.i(TAG, "skipping force stop for hw multiple window, package:" + packageName + " user:" + userId2 + " force stop reason:" + reason);
                        Binder.restoreCallingIdentity(callingId);
                        return;
                    }
                    IPackageManager pm2 = AppGlobals.getPackageManager();
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            int i3 = -1;
                            boolean z2 = true;
                            if (userId2 == -1) {
                                try {
                                    iArr = this.mUserController.getUsers();
                                } catch (Throwable th4) {
                                    th2 = th4;
                                }
                            } else {
                                iArr = new int[]{userId2};
                            }
                            int[] users2 = iArr;
                            int length = users2.length;
                            String reason2 = reason;
                            int i4 = 0;
                            while (i4 < length) {
                                try {
                                    int user = users2[i4];
                                    if (getPackageManagerInternalLocked().isPackageStateProtected(packageName, user)) {
                                        try {
                                            Slog.w(TAG, "Ignoring request to force stop protected package " + packageName + " u" + user);
                                            resetPriorityAfterLockedSection();
                                            Binder.restoreCallingIdentity(callingId);
                                            return;
                                        } catch (Throwable th5) {
                                            th2 = th5;
                                            resetPriorityAfterLockedSection();
                                            throw th2;
                                        }
                                    } else {
                                        int pkgUid = -1;
                                        try {
                                            pkgUid = pm2.getPackageUid(packageName, 268435456, user);
                                        } catch (RemoteException e) {
                                        }
                                        if (pkgUid == i3) {
                                            Slog.w(TAG, "Invalid packageName: " + packageName);
                                            i = i4;
                                            i2 = length;
                                            users = users2;
                                            z = z2;
                                            pm = pm2;
                                            callingPid = callingPid2;
                                        } else {
                                            try {
                                                pm2.setPackageStoppedState(packageName, z2, user);
                                            } catch (RemoteException e2) {
                                            } catch (IllegalArgumentException e3) {
                                                Slog.w(TAG, "Failed trying to unstop package " + packageName + ": " + e3);
                                            }
                                            if (this.mUserController.isUserRunning(user, 0)) {
                                                i = i4;
                                                i2 = length;
                                                users = users2;
                                                z = true;
                                                pm = pm2;
                                                callingPid = callingPid2;
                                                try {
                                                    this.mDAProxy.notifyProcessWillDie(true, false, false, packageName, -1, -1);
                                                    String reason3 = this.mLocalStopReason.get();
                                                    try {
                                                        StringBuilder sb = new StringBuilder();
                                                        sb.append("from pid ");
                                                        sb.append(callingPid);
                                                        if (reason3 == null) {
                                                            str = "";
                                                        } else {
                                                            str = " " + reason3;
                                                        }
                                                        sb.append(str);
                                                        sb.append(callingPid == Process.myPid() ? "" : "by app");
                                                        forceStopPackageLocked(packageName, pkgUid, sb.toString());
                                                        this.mLocalStopReason.set(null);
                                                        finishForceStopPackageLocked(packageName, pkgUid);
                                                        this.mHwAMSEx.reportAppDiedMsg(userId2, packageName, callingPid, "forceStop" + reason3);
                                                        reason2 = reason3;
                                                    } catch (Throwable th6) {
                                                        th2 = th6;
                                                        resetPriorityAfterLockedSection();
                                                        throw th2;
                                                    }
                                                } catch (Throwable th7) {
                                                    th2 = th7;
                                                    resetPriorityAfterLockedSection();
                                                    throw th2;
                                                }
                                            } else {
                                                i = i4;
                                                i2 = length;
                                                users = users2;
                                                pm = pm2;
                                                z = true;
                                                callingPid = callingPid2;
                                            }
                                        }
                                        i4 = i + 1;
                                        callingPid2 = callingPid;
                                        length = i2;
                                        users2 = users;
                                        z2 = z;
                                        pm2 = pm;
                                        i3 = -1;
                                    }
                                } catch (Throwable th8) {
                                    th2 = th8;
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            }
                        } catch (Throwable th9) {
                            th2 = th9;
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                        try {
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(callingId);
                        } catch (Throwable th10) {
                            th = th10;
                            Binder.restoreCallingIdentity(callingId);
                            throw th;
                        }
                    }
                }
            } catch (Throwable th11) {
                th = th11;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: forceStopPackage() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public void addPackageDependency(String packageName) {
        ProcessRecord proc;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (Binder.getCallingPid() != Process.myPid()) {
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                    }
                    if (proc != null) {
                        if (proc.pkgDeps == null) {
                            proc.pkgDeps = new ArraySet<>(1);
                        }
                        proc.pkgDeps.add(packageName);
                    }
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void killApplication(String pkg, int appId, int userId, String reason) {
        if (pkg != null) {
            if ("vold reset".equals(reason) && "com.android.providers.media".equals(pkg)) {
                this.mHwAMSEx.killApplication(pkg, appId, userId, reason);
            } else if (appId < 0) {
                Slog.w(TAG, "Invalid appid specified for pkg : " + pkg);
            } else {
                int callerUid = Binder.getCallingUid();
                if (UserHandle.getAppId(callerUid) == 1000) {
                    Message msg = this.mHandler.obtainMessage(22);
                    msg.arg1 = appId;
                    msg.arg2 = userId;
                    Bundle bundle = new Bundle();
                    bundle.putString("pkg", pkg);
                    bundle.putString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
                    msg.obj = bundle;
                    this.mHandler.sendMessage(msg);
                    return;
                }
                throw new SecurityException(callerUid + " cannot kill pkg: " + pkg);
            }
        }
    }

    public void closeSystemDialogs(String reason) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_CLOSESYSTEMDIALOGS);
        this.mAtmInternal.closeSystemDialogs(reason);
    }

    /* JADX INFO: Multiple debug info for r3v12 int: [D('targetUserId' int), D('now' long)] */
    public Debug.MemoryInfo[] getProcessMemoryInfo(int[] pids) {
        Throwable th;
        ProcessRecord proc;
        int oomAdj;
        int callingUserId;
        int callingUid;
        int callingPid;
        long lastNow;
        long now;
        boolean allUsers;
        int targetUserId;
        Throwable th2;
        int[] iArr = pids;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETPROCESSMEMORYINFO);
        enforceNotIsolatedCaller("getProcessMemoryInfo");
        long now2 = SystemClock.uptimeMillis();
        long lastNow2 = now2 - this.mConstants.MEMORY_INFO_THROTTLE_TIME;
        int callingPid2 = Binder.getCallingPid();
        int callingUid2 = Binder.getCallingUid();
        int callingUserId2 = UserHandle.getUserId(callingUid2);
        boolean allUsers2 = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid2) == 0;
        boolean allUids = this.mAtmInternal.isGetTasksAllowed("getProcessMemoryInfo", callingPid2, callingUid2);
        Debug.MemoryInfo[] infos = new Debug.MemoryInfo[iArr.length];
        int i = iArr.length - 1;
        while (i >= 0) {
            infos[i] = new Debug.MemoryInfo();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        try {
                            proc = this.mPidsSelfLocked.get(iArr[i]);
                            if (proc != null) {
                                try {
                                    oomAdj = proc.setAdj;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            } else {
                                oomAdj = 0;
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th5) {
                                    th = th5;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            throw th;
                        }
                    }
                } catch (Throwable th6) {
                    th = th6;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            int targetUserId2 = -1;
            int targetUid = proc != null ? proc.uid : -1;
            if (proc != null) {
                targetUserId2 = UserHandle.getUserId(targetUid);
            }
            if (callingUid2 != targetUid) {
                if (!allUids) {
                    now = now2;
                    lastNow = lastNow2;
                    callingPid = callingPid2;
                    callingUid = callingUid2;
                    callingUserId = callingUserId2;
                    allUsers = allUsers2;
                } else if (!allUsers2) {
                    now = now2;
                    targetUserId = targetUserId2;
                    if (targetUserId != callingUserId2) {
                        lastNow = lastNow2;
                        callingPid = callingPid2;
                        callingUid = callingUid2;
                        callingUserId = callingUserId2;
                        allUsers = allUsers2;
                    }
                } else {
                    now = now2;
                    targetUserId = targetUserId2;
                }
                i--;
                iArr = pids;
                allUsers2 = allUsers;
                now2 = now;
                lastNow2 = lastNow;
                callingPid2 = callingPid;
                callingUid2 = callingUid;
                callingUserId2 = callingUserId;
            } else {
                now = now2;
                targetUserId = targetUserId2;
            }
            if (proc != null) {
                if (proc.lastMemInfoTime >= lastNow2 && proc.lastMemInfo != null) {
                    infos[i].set(proc.lastMemInfo);
                    lastNow = lastNow2;
                    callingPid = callingPid2;
                    callingUid = callingUid2;
                    callingUserId = callingUserId2;
                    allUsers = allUsers2;
                    i--;
                    iArr = pids;
                    allUsers2 = allUsers;
                    now2 = now;
                    lastNow2 = lastNow;
                    callingPid2 = callingPid;
                    callingUid2 = callingUid;
                    callingUserId2 = callingUserId;
                }
            }
            long startTime = SystemClock.currentThreadTimeMillis();
            Debug.MemoryInfo memInfo = new Debug.MemoryInfo();
            Debug.getMemoryInfo(iArr[i], memInfo);
            long endTime = SystemClock.currentThreadTimeMillis();
            infos[i].set(memInfo);
            if (proc != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        proc.lastMemInfo = memInfo;
                        lastNow = lastNow2;
                        try {
                            proc.lastMemInfoTime = SystemClock.uptimeMillis();
                            if (proc.thread == null) {
                                callingPid = callingPid2;
                                callingUid = callingUid2;
                                callingUserId = callingUserId2;
                                allUsers = allUsers2;
                            } else if (proc.setAdj == oomAdj) {
                                try {
                                } catch (Throwable th7) {
                                    th2 = th7;
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                                try {
                                    callingPid = callingPid2;
                                    callingUid = callingUid2;
                                } catch (Throwable th8) {
                                    th2 = th8;
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                                try {
                                    callingUserId = callingUserId2;
                                    try {
                                        proc.baseProcessTracker.addPss((long) infos[i].getTotalPss(), (long) infos[i].getTotalUss(), (long) infos[i].getTotalRss(), false, 4, endTime - startTime, proc.pkgList.mPkgList);
                                        int ipkg = proc.pkgList.size() - 1;
                                        while (ipkg >= 0) {
                                            ProcessStats.ProcessStateHolder holder = proc.pkgList.valueAt(ipkg);
                                            StatsLog.write(18, proc.info.uid, holder.state.getName(), holder.state.getPackage(), (long) infos[i].getTotalPss(), (long) infos[i].getTotalUss(), (long) infos[i].getTotalRss(), 4, endTime - startTime, holder.appVersion);
                                            ipkg--;
                                            allUsers2 = allUsers2;
                                            proc = proc;
                                            startTime = startTime;
                                        }
                                        allUsers = allUsers2;
                                    } catch (Throwable th9) {
                                        th2 = th9;
                                        resetPriorityAfterLockedSection();
                                        throw th2;
                                    }
                                } catch (Throwable th10) {
                                    th2 = th10;
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            } else {
                                callingPid = callingPid2;
                                callingUid = callingUid2;
                                callingUserId = callingUserId2;
                                allUsers = allUsers2;
                            }
                        } catch (Throwable th11) {
                            th2 = th11;
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    } catch (Throwable th12) {
                        th2 = th12;
                        resetPriorityAfterLockedSection();
                        throw th2;
                    }
                }
                resetPriorityAfterLockedSection();
            } else {
                lastNow = lastNow2;
                callingPid = callingPid2;
                callingUid = callingUid2;
                callingUserId = callingUserId2;
                allUsers = allUsers2;
            }
            i--;
            iArr = pids;
            allUsers2 = allUsers;
            now2 = now;
            lastNow2 = lastNow;
            callingPid2 = callingPid;
            callingUid2 = callingUid;
            callingUserId2 = callingUserId;
        }
        return infos;
    }

    public long[] getProcessPss(int[] pids) {
        Throwable th;
        ProcessRecord proc;
        int oomAdj;
        int callingPid;
        Throwable th2;
        int[] iArr = pids;
        enforceNotIsolatedCaller("getProcessPss");
        int callingPid2 = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        int i = 0;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allUids = this.mAtmInternal.isGetTasksAllowed("getProcessPss", callingPid2, callingUid);
        long[] pss = new long[iArr.length];
        int i2 = iArr.length - 1;
        while (i2 >= 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        try {
                            proc = this.mPidsSelfLocked.get(iArr[i2]);
                            if (proc != null) {
                                try {
                                    oomAdj = proc.setAdj;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            } else {
                                oomAdj = i;
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th5) {
                                    th = th5;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            throw th;
                        }
                    }
                } catch (Throwable th6) {
                    th = th6;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            if (!allUids) {
                callingPid = callingPid2;
            } else if (allUsers || UserHandle.getUserId(proc.uid) == userId) {
                long[] tmpUss = new long[3];
                long startTime = SystemClock.currentThreadTimeMillis();
                pss[i2] = Debug.getPss(iArr[i2], tmpUss, null);
                long endTime = SystemClock.currentThreadTimeMillis();
                if (proc != null) {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            if (proc.thread == null || proc.setAdj != oomAdj) {
                                callingPid = callingPid2;
                            } else {
                                proc.baseProcessTracker.addPss(pss[i2], tmpUss[i], tmpUss[2], false, 3, endTime - startTime, proc.pkgList.mPkgList);
                                int ipkg = proc.pkgList.size() - 1;
                                while (ipkg >= 0) {
                                    ProcessStats.ProcessStateHolder holder = proc.pkgList.valueAt(ipkg);
                                    try {
                                        StatsLog.write(18, proc.info.uid, holder.state.getName(), holder.state.getPackage(), pss[i2], tmpUss[0], tmpUss[2], 3, endTime - startTime, holder.appVersion);
                                        ipkg--;
                                        callingPid2 = callingPid2;
                                    } catch (Throwable th7) {
                                        th2 = th7;
                                        resetPriorityAfterLockedSection();
                                        throw th2;
                                    }
                                }
                                callingPid = callingPid2;
                            }
                        } catch (Throwable th8) {
                            th2 = th8;
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                    resetPriorityAfterLockedSection();
                } else {
                    callingPid = callingPid2;
                }
            } else {
                callingPid = callingPid2;
            }
            i2--;
            iArr = pids;
            callingPid2 = callingPid;
            i = 0;
        }
        return pss;
    }

    public void killApplicationProcess(String processName, int uid) {
        if (processName != null) {
            int callerUid = Binder.getCallingUid();
            if (callerUid == 1000) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        ProcessRecord app = getProcessRecordLocked(processName, uid, true);
                        if (app == null || app.thread == null) {
                            Slog.w(TAG, "Process/uid not found attempting kill of " + processName + " / " + uid);
                        } else {
                            try {
                                app.thread.scheduleSuicide();
                            } catch (RemoteException e) {
                            }
                        }
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                return;
            }
            throw new SecurityException(callerUid + " cannot kill app process: " + processName);
        }
    }

    @GuardedBy({"this"})
    private void forceStopPackageLocked(String packageName, int uid, String reason) {
        forceStopPackageLocked(packageName, UserHandle.getAppId(uid), false, false, true, false, false, UserHandle.getUserId(uid), reason);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    @GuardedBy({"this"})
    private void finishForceStopPackageLocked(String packageName, int uid) {
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", packageName, null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        intent.putExtra("android.intent.extra.UID", uid);
        intent.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(uid));
        broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), UserHandle.getUserId(uid));
    }

    private void cleanupDisabledPackageComponentsLocked(String packageName, int userId, String[] changedClasses) {
        Set<String> disabledClasses;
        int i;
        IPackageManager pm = AppGlobals.getPackageManager();
        if (changedClasses != null) {
            int enabled = 0;
            int i2 = changedClasses.length - 1;
            int i3 = 0;
            Set<String> disabledClasses2 = null;
            while (true) {
                if (i2 < 0) {
                    disabledClasses = disabledClasses2;
                    i = i3;
                    break;
                }
                String changedClass = changedClasses[i2];
                int i4 = 0;
                if (changedClass.equals(packageName)) {
                    try {
                        enabled = pm.getApplicationEnabledSetting(packageName, userId != -1 ? userId : 0);
                        if (!(enabled == 1 || enabled == 0)) {
                            i4 = 1;
                        }
                        i3 = i4;
                        if (i3 != 0) {
                            disabledClasses = null;
                            i = i3;
                            break;
                        }
                    } catch (Exception e) {
                        return;
                    }
                } else {
                    try {
                        ComponentName componentName = new ComponentName(packageName, changedClass);
                        if (userId != -1) {
                            i4 = userId;
                        }
                        int enabled2 = pm.getComponentEnabledSetting(componentName, i4);
                        if (enabled2 == 1 || enabled2 == 0) {
                            enabled = enabled2;
                        } else {
                            if (disabledClasses2 == null) {
                                disabledClasses2 = new ArraySet<>(changedClasses.length);
                            }
                            disabledClasses2.add(changedClass);
                            enabled = enabled2;
                        }
                    } catch (Exception e2) {
                        return;
                    }
                }
                i2--;
            }
            if (!(i == 0 && disabledClasses == null)) {
                this.mAtmInternal.cleanupDisabledPackageComponents(packageName, disabledClasses, userId, this.mBooted);
                this.mServices.bringDownDisabledPackageServicesLocked(packageName, disabledClasses, userId, false, true);
                ArrayList<ContentProviderRecord> providers = new ArrayList<>();
                this.mProviderMap.collectPackageProvidersLocked(packageName, disabledClasses, true, false, userId, providers);
                for (int i5 = providers.size() - 1; i5 >= 0; i5--) {
                    removeDyingProviderLocked(null, providers.get(i5), true);
                }
                for (int i6 = this.mBroadcastQueues.length - 1; i6 >= 0; i6--) {
                    this.mBroadcastQueues[i6].cleanupDisabledPackageReceiversLocked(packageName, disabledClasses, userId, true);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final boolean clearBroadcastQueueForUserLocked(int userId) {
        boolean didSomething = false;
        for (int i = this.mBroadcastQueues.length - 1; i >= 0; i--) {
            didSomething |= this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(null, null, userId, true);
        }
        return didSomething;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r19v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r10v3, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r10v4 */
    /* JADX WARN: Type inference failed for: r10v5 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:13:0x0045  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x00a3  */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x00b0  */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x0102  */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x011f  */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x012b A[LOOP:0: B:42:0x0128->B:44:0x012b, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x013f  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x015f A[ADDED_TO_REGION] */
    /* JADX WARNING: Unknown variable types count: 1 */
    @GuardedBy({"this"})
    public final boolean forceStopPackageLocked(String packageName, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        int appId2;
        boolean bDisableService;
        StringBuilder sb;
        boolean didSomething;
        ?? r10;
        ArrayList<ContentProviderRecord> providers;
        int i;
        AttributeCache ac;
        if (userId == -1 && packageName == null) {
            Slog.w(TAG, "Can't force stop all processes of all users, that is insane!");
        }
        if (appId < 0 && packageName != null) {
            try {
                appId2 = UserHandle.getAppId(AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, 0));
            } catch (RemoteException e) {
            }
            bDisableService = !this.mHwAMSEx.isApplyPersistAppPatch(packageName, appId2, userId, callerWillRestart, evenPersistent, reason, null);
            if (doit) {
                if (packageName != null) {
                    Slog.i(TAG, "Force stopping " + packageName + " appid=" + appId2 + " user=" + userId + ": " + reason);
                } else {
                    Slog.i(TAG, "Force stopping u" + userId + ": " + reason);
                }
                this.mAppErrors.resetProcessCrashTimeLocked(packageName == null, appId2, userId);
            }
            ProcessList processList = this.mProcessList;
            if (packageName != null) {
                sb.append("stop user ");
                sb.append(userId);
            } else {
                sb = new StringBuilder();
                sb.append("stop ");
                sb.append(packageName);
            }
            sb.append(reason);
            boolean didSomething2 = processList.killPackageProcessesLocked(packageName, appId2, userId, -10000, callerWillRestart, true, doit, evenPersistent, true, sb.toString()) | this.mAtmInternal.onForceStopPackage(packageName, doit, evenPersistent, userId);
            if (bDisableService || !this.mServices.bringDownDisabledPackageServicesLocked(packageName, null, userId, evenPersistent, doit)) {
                r10 = 1;
                didSomething = didSomething2;
            } else if (!doit) {
                return true;
            } else {
                r10 = 1;
                didSomething = true;
            }
            if (packageName == null) {
                this.mStickyBroadcasts.remove(userId);
            }
            providers = new ArrayList<>();
            if (this.mProviderMap.collectPackageProvidersLocked(packageName, (Set<String>) null, doit, evenPersistent, userId, providers)) {
                if (!doit) {
                    return r10;
                }
                didSomething = true;
            }
            int size = providers.size();
            int i2 = r10 == true ? 1 : 0;
            int i3 = r10 == true ? 1 : 0;
            int i4 = r10 == true ? 1 : 0;
            for (i = size - i2; i >= 0; i--) {
                removeDyingProviderLocked(null, providers.get(i), r10);
            }
            this.mUgmInternal.removeUriPermissionsForPackage(packageName, userId, false, false);
            if (doit) {
                for (int i5 = this.mBroadcastQueues.length - r10; i5 >= 0; i5--) {
                    didSomething |= this.mBroadcastQueues[i5].cleanupDisabledPackageReceiversLocked(packageName, null, userId, doit);
                }
            }
            if (packageName == null || uninstalling) {
                didSomething |= this.mPendingIntentController.removePendingIntentsForPackage(packageName, userId, appId2, doit);
            }
            if (doit) {
                if (!(!purgeCache || packageName == null || (ac = AttributeCache.instance()) == null)) {
                    ac.removePackage(packageName);
                }
                if (this.mBooted) {
                    this.mAtmInternal.resumeTopActivities((boolean) r10);
                }
            }
            return didSomething;
        }
        appId2 = appId;
        bDisableService = !this.mHwAMSEx.isApplyPersistAppPatch(packageName, appId2, userId, callerWillRestart, evenPersistent, reason, null);
        if (doit) {
        }
        ProcessList processList2 = this.mProcessList;
        if (packageName != null) {
        }
        sb.append(reason);
        boolean didSomething22 = processList2.killPackageProcessesLocked(packageName, appId2, userId, -10000, callerWillRestart, true, doit, evenPersistent, true, sb.toString()) | this.mAtmInternal.onForceStopPackage(packageName, doit, evenPersistent, userId);
        if (bDisableService) {
        }
        r10 = 1;
        didSomething = didSomething22;
        if (packageName == null) {
        }
        providers = new ArrayList<>();
        if (this.mProviderMap.collectPackageProvidersLocked(packageName, (Set<String>) null, doit, evenPersistent, userId, providers)) {
        }
        int size2 = providers.size();
        int i22 = r10 == true ? 1 : 0;
        int i32 = r10 == true ? 1 : 0;
        int i42 = r10 == true ? 1 : 0;
        while (i >= 0) {
        }
        this.mUgmInternal.removeUriPermissionsForPackage(packageName, userId, false, false);
        if (doit) {
        }
        didSomething |= this.mPendingIntentController.removePendingIntentsForPackage(packageName, userId, appId2, doit);
        if (doit) {
        }
        return didSomething;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    @GuardedBy({"this"})
    private final void processContentProviderPublishTimedOutLocked(ProcessRecord app) {
        cleanupAppInLaunchingProvidersLocked(app, true);
        this.mProcessList.removeProcessLocked(app, false, true, "timeout publishing content providers");
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    @GuardedBy({"this"})
    private final void preloadAppTimeOutLocked(ApplicationInfo aInfo) {
        this.mProcessList.removeUsapPreload(aInfo);
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    @GuardedBy({"this"})
    private final void processStartTimedOutLocked(final ProcessRecord app) {
        int pid = app.pid;
        if (this.mPidsSelfLocked.removeIfNoThread(app)) {
            Slog.w(TAG, "Process " + app + " failed to attach");
            EventLog.writeEvent((int) EventLogTags.AM_PROCESS_START_TIMEOUT, Integer.valueOf(app.userId), Integer.valueOf(pid), Integer.valueOf(app.uid), app.processName);
            this.mDAProxy.notifyProcessDied(app.pid, app.uid);
            this.mProcessList.removeProcessNameLocked(app.processName, app.uid);
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(app.getWindowProcessController());
            this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
            cleanupAppInLaunchingProvidersLocked(app, true);
            this.mServices.processStartTimedOutLocked(app);
            app.kill("start timeout", true);
            if (app.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
            }
            removeLruProcessLocked(app);
            BackupRecord backupTarget = this.mBackupTargets.get(app.userId);
            if (backupTarget != null && backupTarget.app.pid == pid) {
                Slog.w(TAG, "Unattached app died before backup, skipping");
                this.mHandler.post(new Runnable() {
                    /* class com.android.server.am.ActivityManagerService.AnonymousClass9 */

                    @Override // java.lang.Runnable
                    public void run() {
                        try {
                            IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnectedForUser(app.userId, app.info.packageName);
                        } catch (RemoteException e) {
                        }
                    }
                });
            }
            if (isPendingBroadcastProcessLocked(pid)) {
                Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
                skipPendingBroadcastLocked(pid);
                return;
            }
            return;
        }
        Slog.w(TAG, "Spurious process start timeout - pid not known for " + app);
    }

    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:195:0x048e */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r8v15 */
    /* JADX WARN: Type inference failed for: r8v17, types: [int] */
    /* JADX WARN: Type inference failed for: r19v1 */
    /* JADX WARN: Type inference failed for: r19v17 */
    /* JADX WARN: Type inference failed for: r19v18 */
    /* JADX WARN: Type inference failed for: r8v108 */
    /* JADX WARN: Type inference failed for: r8v109 */
    /* JADX WARN: Type inference failed for: r19v19 */
    /* JADX WARNING: Removed duplicated region for block: B:168:0x0400  */
    /* JADX WARNING: Removed duplicated region for block: B:188:0x0476  */
    /* JADX WARNING: Removed duplicated region for block: B:194:0x048c A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:225:0x0522 A[Catch:{ Exception -> 0x0526 }] */
    /* JADX WARNING: Removed duplicated region for block: B:233:0x053a  */
    /* JADX WARNING: Removed duplicated region for block: B:237:0x055a  */
    /* JADX WARNING: Removed duplicated region for block: B:241:0x056b  */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x0595  */
    /* JADX WARNING: Removed duplicated region for block: B:248:0x059d  */
    /* JADX WARNING: Removed duplicated region for block: B:251:0x05b0  */
    /* JADX WARNING: Removed duplicated region for block: B:252:0x05c8  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x06d5  */
    /* JADX WARNING: Removed duplicated region for block: B:303:0x072c A[SYNTHETIC, Splitter:B:303:0x072c] */
    /* JADX WARNING: Removed duplicated region for block: B:309:0x0752 A[SYNTHETIC, Splitter:B:309:0x0752] */
    /* JADX WARNING: Removed duplicated region for block: B:318:0x077e  */
    /* JADX WARNING: Removed duplicated region for block: B:320:0x0782  */
    /* JADX WARNING: Removed duplicated region for block: B:326:0x07ae  */
    /* JADX WARNING: Removed duplicated region for block: B:328:0x07b2  */
    /* JADX WARNING: Removed duplicated region for block: B:340:0x0805  */
    /* JADX WARNING: Removed duplicated region for block: B:342:0x0809  */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x0814  */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x00f8  */
    /* JADX WARNING: Removed duplicated region for block: B:46:0x0131  */
    /* JADX WARNING: Unknown variable types count: 2 */
    @GuardedBy({"this"})
    private boolean attachApplicationLocked(IApplicationThread thread, int pid, int callingUid, long startSeq) {
        ProcessRecord app;
        long startTime;
        int i;
        int i2;
        ProcessRecord pending;
        boolean z;
        List<ProviderInfo> providers;
        String processName;
        Exception e;
        boolean enableTrackAllocation;
        boolean isRestrictedBackupMode;
        ?? r19;
        String preBindAgent;
        BackupRecord backupTarget;
        ActiveInstrumentation instr;
        boolean z2;
        AutofillOptions autofillOptions;
        ContentCaptureOptions contentCaptureOptions;
        Configuration multiWindowOverrideConfig;
        String processName2;
        BackupRecord backupTarget2;
        long startTime2;
        boolean badApp;
        Exception e2;
        boolean z3;
        ContentCaptureManagerInternal ccm;
        AutofillOptions autofillOptions2;
        ActiveInstrumentation instr2;
        boolean needsInfo;
        boolean z4;
        String processName3;
        long startTime3 = SystemClock.uptimeMillis();
        if (pid == MY_PID || pid < 0) {
            app = null;
        } else {
            synchronized (this.mPidsSelfLocked) {
                app = this.mPidsSelfLocked.get(pid);
            }
            if (!(app == null || (app.startUid == callingUid && app.startSeq == startSeq))) {
                ProcessRecord pending2 = this.mProcessList.mPendingStarts.get(startSeq);
                if (pending2 != null) {
                    processName3 = pending2.processName;
                } else {
                    processName3 = null;
                }
                String msg = "attachApplicationLocked process:" + processName3 + " startSeq:" + startSeq + " pid:" + pid + " belongs to another existing app:" + app.processName + " startSeq:" + app.startSeq;
                Slog.wtf(TAG, msg);
                EventLog.writeEvent(1397638484, "131105245", Integer.valueOf(app.startUid), msg);
                r19 = -1;
                r19 = -1;
                cleanUpApplicationRecordLocked(app, false, false, -1, true);
                this.mPidsSelfLocked.remove(app);
                app = null;
            }
        }
        if (app != null || startSeq <= 0) {
            startTime = startTime3;
            i2 = 3;
            i = pid;
        } else {
            pending = this.mProcessList.mPendingStarts.get(startSeq);
            if (pending != null && pending.startUid == callingUid && pending.startSeq == startSeq) {
                startTime = startTime3;
                i2 = 3;
                i = pid;
                if (this.mProcessList.handleProcessStartedLocked(pending, pid, pending.isUsingWrapper(), startSeq, true)) {
                    if (pending != null) {
                        Slog.w(TAG, "No pending application record for pid " + i + " (IApplicationThread " + thread + "); dropping process");
                        EventLog.writeEvent((int) EventLogTags.AM_DROP_PROCESS, i);
                        if (i <= 0 || i == MY_PID) {
                            try {
                                thread.scheduleExit();
                                return false;
                            } catch (Exception e3) {
                                return false;
                            }
                        } else {
                            Process.killProcessQuiet(pid);
                            return false;
                        }
                    } else {
                        if (pending.thread != null) {
                            z = true;
                            handleAppDiedLocked(pending, true, true);
                        } else {
                            z = true;
                        }
                        if (ActivityManagerDebugConfig.DEBUG_ALL) {
                            Slog.v(TAG, "Binding process pid " + i + " to record " + pending);
                        }
                        String processName4 = pending.processName;
                        try {
                            AppDeathRecipient adr = new AppDeathRecipient(pending, i, thread);
                            thread.asBinder().linkToDeath(adr, 0);
                            pending.deathRecipient = adr;
                            Object[] objArr = new Object[i2];
                            objArr[0] = Integer.valueOf(pending.userId);
                            Integer valueOf = Integer.valueOf(pending.pid);
                            char c = z ? 1 : 0;
                            char c2 = z ? 1 : 0;
                            char c3 = z ? 1 : 0;
                            objArr[c] = valueOf;
                            objArr[2] = pending.processName;
                            EventLog.writeEvent((int) EventLogTags.AM_PROC_BOUND, objArr);
                            pending.verifiedAdj = -10000;
                            pending.setAdj = -10000;
                            pending.curAdj = -10000;
                            pending.setSchedGroup = 2;
                            pending.setCurrentSchedulingGroup(2);
                            pending.forcingToImportant = null;
                            updateProcessForegroundLocked(pending, false, 0, false);
                            pending.hasShownUi = false;
                            pending.setDebugging(false);
                            pending.cached = false;
                            pending.killedByAm = false;
                            pending.killed = false;
                            pending.unlocked = StorageManager.isUserKeyUnlocked(pending.userId);
                            this.mHandler.removeMessages(20, pending);
                            boolean normalMode = (this.mProcessesReady || isAllowedWhileBooting(pending.info)) ? z : false;
                            if (normalMode) {
                                try {
                                    providers = generateApplicationProvidersLocked(pending);
                                } catch (SecurityException e4) {
                                    Slog.e(TAG, "generateApplicationProvidersLocked error.");
                                    pending.makeActive(thread, this.mProcessStats);
                                    throw e4;
                                } catch (Exception e5) {
                                    Slog.e(TAG, "generateApplicationProvidersLocked fail.");
                                    pending.makeActive(thread, this.mProcessStats);
                                    throw e5;
                                }
                            } else {
                                providers = null;
                            }
                            if (providers != null && checkAppInLaunchingProvidersLocked(pending)) {
                                Message msg2 = this.mHandler.obtainMessage(57);
                                msg2.obj = pending;
                                this.mHandler.sendMessageDelayed(msg2, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                                Flog.i(103, "sendMessage CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG for " + pending);
                            }
                            checkTime(startTime, "attachApplicationLocked: before bindApplication");
                            if (!normalMode) {
                                Slog.i(TAG, "Launching preboot mode app: " + pending);
                            }
                            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                                Slog.v(TAG, "New app record " + pending + " thread=" + thread.asBinder() + " pid=" + i);
                            }
                            BackupRecord backupTarget3 = this.mBackupTargets.get(pending.userId);
                            StringBuilder sb = new StringBuilder();
                            sb.append("Binding process pid:");
                            sb.append(i);
                            sb.append(" to procname:");
                            sb.append(processName4);
                            sb.append(" providers.size=");
                            sb.append(providers == null ? 0 : providers.size());
                            Flog.i(102, sb.toString());
                            ?? r8 = 0;
                            try {
                                if (this.mDebugApp != null) {
                                    try {
                                        if (this.mDebugApp.equals(processName4)) {
                                            if (this.mWaitForDebugger) {
                                                z4 = true;
                                            } else {
                                                z4 = z;
                                            }
                                            boolean z5 = z4;
                                            pending.setDebugging(z);
                                            r8 = z5;
                                            if (this.mDebugTransient) {
                                                this.mDebugApp = this.mOrigDebugApp;
                                                this.mWaitForDebugger = this.mOrigWaitForDebugger;
                                                r8 = z5;
                                            }
                                        }
                                    } catch (Exception e6) {
                                        e = e6;
                                        processName = processName4;
                                        Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                        pending.resetPackageList(this.mProcessStats);
                                        pending.unlinkDeathRecipient();
                                        this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                        return false;
                                    }
                                }
                                if (this.mTrackAllocationApp == null || !this.mTrackAllocationApp.equals(processName4)) {
                                    enableTrackAllocation = false;
                                } else {
                                    this.mTrackAllocationApp = null;
                                    enableTrackAllocation = true;
                                }
                                if (backupTarget3 == null || !backupTarget3.appInfo.packageName.equals(processName4)) {
                                    isRestrictedBackupMode = false;
                                } else {
                                    isRestrictedBackupMode = (backupTarget3.appInfo.uid < 10000 || !(backupTarget3.backupMode == 2 || backupTarget3.backupMode == i2 || backupTarget3.backupMode == z)) ? false : z;
                                }
                                ActiveInstrumentation instr3 = pending.getActiveInstrumentation();
                                if (instr3 != null) {
                                    notifyPackageUse(instr3.mClass.getPackageName(), 7);
                                }
                                if (ActivityTaskManagerDebugConfig.DEBUG_CONFIGURATION) {
                                    Slog.v(TAG_CONFIGURATION, "Binding proc " + processName4 + " with config " + pending.getWindowProcessController().getConfiguration());
                                }
                                ApplicationInfo appInfo = instr3 != null ? instr3.mTargetInfo : pending.info;
                                pending.compat = compatibilityInfoForPackage(appInfo);
                                if (pending.hostingRecord != null && "activity".equals(pending.hostingRecord.getType()) && this.mHwAMSEx.isPreloadEnable()) {
                                    thread.preLoadClass(appInfo, pending.compat);
                                }
                                ProfilerInfo profilerInfo = null;
                                String preBindAgent2 = null;
                                if (this.mProfileData.getProfileApp() != null && this.mProfileData.getProfileApp().equals(processName4)) {
                                    this.mProfileData.setProfileProc(pending);
                                    if (this.mProfileData.getProfilerInfo() != null) {
                                        if (this.mProfileData.getProfilerInfo().profileFile != null || this.mProfileData.getProfilerInfo().attachAgentDuringBind) {
                                            boolean z6 = z ? 1 : 0;
                                            boolean z7 = z ? 1 : 0;
                                            boolean z8 = z ? 1 : 0;
                                            needsInfo = z6;
                                        } else {
                                            needsInfo = false;
                                        }
                                        profilerInfo = needsInfo ? new ProfilerInfo(this.mProfileData.getProfilerInfo()) : null;
                                        if (this.mProfileData.getProfilerInfo().agent != null) {
                                            preBindAgent2 = this.mProfileData.getProfilerInfo().agent;
                                        }
                                        preBindAgent = preBindAgent2;
                                        BackupRecord backupTarget4 = r19;
                                        if (this.mAppAgentMap != null) {
                                        }
                                        profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                        clearProfilerLocked();
                                        if (!appInfo.isInstantApp()) {
                                        }
                                        if (this.mActiveInstrumentation.size() > 0) {
                                        }
                                        instr = instr3;
                                        backupTarget = backupTarget3;
                                        z2 = true;
                                        if (preBindAgent != null) {
                                        }
                                        if (UserHandle.getAppId(pending.info.uid) >= 10000) {
                                        }
                                        autofillOptions = autofillOptions2;
                                        if (UserHandle.getAppId(pending.info.uid) >= 10000) {
                                        }
                                        contentCaptureOptions = null;
                                        checkTime(startTime, "attachApplicationLocked: immediately before bindApplication");
                                        long bindApplicationTimeMillis = SystemClock.elapsedRealtime();
                                        if (!pending.launchfromActivity) {
                                        }
                                        this.mAtmInternal.preBindApplication(pending.getWindowProcessController(), multiWindowOverrideConfig);
                                        ActiveInstrumentation instr22 = pending.getActiveInstrumentation();
                                        if (pending.isolatedEntryPoint == null) {
                                        }
                                        if (profilerInfo != null) {
                                        }
                                        pending.makeActive(thread, this.mProcessStats);
                                        checkTime(startTime2, "attachApplicationLocked: immediately after bindApplication");
                                        this.mProcessList.updateLruProcessLocked(pending, false, null);
                                        checkTime(startTime2, "attachApplicationLocked: after updateLruProcessLocked");
                                        long uptimeMillis = SystemClock.uptimeMillis();
                                        pending.lastLowMemory = uptimeMillis;
                                        pending.lastRequestedGc = uptimeMillis;
                                        this.mPersistentStartingProcesses.remove(pending);
                                        Slog.v(TAG, "Attach application locked removing on hold: " + pending);
                                        this.mProcessesOnHold.remove(pending);
                                        badApp = false;
                                        boolean didSomething = false;
                                        if (normalMode) {
                                        }
                                        if (badApp) {
                                        }
                                        if (!badApp) {
                                        }
                                        if (!badApp) {
                                        }
                                        if (badApp) {
                                        }
                                    }
                                } else if (!(instr3 == null || instr3.mProfileFile == null)) {
                                    ProfilerInfo profilerInfo2 = new ProfilerInfo(instr3.mProfileFile, (ParcelFileDescriptor) null, 0, false, false, (String) null, false);
                                    profilerInfo = profilerInfo2;
                                    preBindAgent = null;
                                    r19 = profilerInfo2;
                                    BackupRecord backupTarget42 = r19;
                                    if (this.mAppAgentMap != null) {
                                        backupTarget42 = r19;
                                        if (this.mAppAgentMap.containsKey(processName4)) {
                                            backupTarget42 = r19;
                                            if ((pending.info.flags & 2) != 0) {
                                                this.mAppAgentMap.get(processName4);
                                                if (profilerInfo == null) {
                                                    backupTarget42 = null;
                                                    profilerInfo = new ProfilerInfo((String) null, (ParcelFileDescriptor) null, 0, false, false, this.mAppAgentMap.get(processName4), true);
                                                } else {
                                                    backupTarget42 = r19;
                                                    if (profilerInfo.agent == null) {
                                                        profilerInfo = profilerInfo.setAgent(this.mAppAgentMap.get(processName4), true);
                                                        backupTarget42 = r19;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                                        profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                        if (TextUtils.equals(this.mProfileData.getProfileApp(), processName4) && this.mProfileData.getProfilerInfo() != null) {
                                            clearProfilerLocked();
                                        }
                                    }
                                    String buildSerial = (!appInfo.isInstantApp() || appInfo.targetSdkVersion >= CLEAR_DNS_CACHE_MSG) ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : sTheRealBuildSerial;
                                    if (this.mActiveInstrumentation.size() > 0 || instr3 != null) {
                                        instr = instr3;
                                        backupTarget = backupTarget3;
                                        z2 = true;
                                    } else {
                                        try {
                                            z2 = true;
                                            int i3 = this.mActiveInstrumentation.size() - 1;
                                            while (i3 >= 0 && pending.getActiveInstrumentation() == null) {
                                                ActiveInstrumentation aInstr = this.mActiveInstrumentation.get(i3);
                                                if (!aInstr.mFinished) {
                                                    instr2 = instr3;
                                                    if (aInstr.mTargetInfo.uid == pending.uid) {
                                                        if (aInstr.mTargetProcesses.length != 0) {
                                                            String[] strArr = aInstr.mTargetProcesses;
                                                            int length = strArr.length;
                                                            backupTarget42 = backupTarget3;
                                                            int i4 = 0;
                                                            while (true) {
                                                                if (i4 >= length) {
                                                                    break;
                                                                }
                                                                try {
                                                                    if (strArr[i4].equals(pending.processName)) {
                                                                        pending.setActiveInstrumentation(aInstr);
                                                                        aInstr.mRunningProcesses.add(pending);
                                                                        break;
                                                                    }
                                                                    i4++;
                                                                    strArr = strArr;
                                                                    length = length;
                                                                } catch (Exception e7) {
                                                                    e = e7;
                                                                    processName = processName4;
                                                                    Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                                                    pending.resetPackageList(this.mProcessStats);
                                                                    pending.unlinkDeathRecipient();
                                                                    this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                                                    return false;
                                                                }
                                                            }
                                                        } else if (aInstr.mTargetInfo.packageName.equals(pending.info.packageName)) {
                                                            pending.setActiveInstrumentation(aInstr);
                                                            aInstr.mRunningProcesses.add(pending);
                                                            backupTarget42 = backupTarget3;
                                                        } else {
                                                            backupTarget42 = backupTarget3;
                                                        }
                                                    } else {
                                                        backupTarget42 = backupTarget3;
                                                    }
                                                } else {
                                                    instr2 = instr3;
                                                    backupTarget42 = backupTarget3;
                                                }
                                                i3--;
                                                instr3 = instr2;
                                                backupTarget3 = backupTarget42;
                                            }
                                            instr = instr3;
                                            backupTarget = backupTarget3;
                                        } catch (Exception e8) {
                                            e = e8;
                                            processName = processName4;
                                            Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                            pending.resetPackageList(this.mProcessStats);
                                            pending.unlinkDeathRecipient();
                                            this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                            return false;
                                        }
                                    }
                                    if (preBindAgent != null) {
                                        thread.attachAgent(preBindAgent);
                                    }
                                    if (UserHandle.getAppId(pending.info.uid) >= 10000) {
                                        AutofillManagerInternal afm = (AutofillManagerInternal) LocalServices.getService(AutofillManagerInternal.class);
                                        if (afm != null) {
                                            autofillOptions = afm.getAutofillOptions(pending.info.packageName, pending.info.longVersionCode, pending.userId);
                                            if (UserHandle.getAppId(pending.info.uid) >= 10000 || (ccm = (ContentCaptureManagerInternal) LocalServices.getService(ContentCaptureManagerInternal.class)) == null) {
                                                contentCaptureOptions = null;
                                            } else {
                                                contentCaptureOptions = ccm.getOptionsForPackage(pending.userId, pending.info.packageName);
                                            }
                                            checkTime(startTime, "attachApplicationLocked: immediately before bindApplication");
                                            long bindApplicationTimeMillis2 = SystemClock.elapsedRealtime();
                                            if (!pending.launchfromActivity) {
                                                multiWindowOverrideConfig = new Configuration();
                                            } else {
                                                multiWindowOverrideConfig = null;
                                            }
                                            this.mAtmInternal.preBindApplication(pending.getWindowProcessController(), multiWindowOverrideConfig);
                                            ActiveInstrumentation instr222 = pending.getActiveInstrumentation();
                                            if (pending.isolatedEntryPoint == null) {
                                                thread.runIsolatedEntryPoint(pending.isolatedEntryPoint, pending.isolatedEntryPointArgs);
                                                startTime2 = startTime;
                                                processName2 = processName4;
                                                backupTarget2 = backupTarget;
                                            } else if (instr222 != null) {
                                                try {
                                                    Bundle bundle = this.mCoreSettingsObserver.getCoreSettingsLocked();
                                                    if (multiWindowOverrideConfig != null && !Configuration.EMPTY.equals(multiWindowOverrideConfig)) {
                                                        bundle.putParcelable("overrideConfig", multiWindowOverrideConfig);
                                                    }
                                                    ComponentName componentName = instr222.mClass;
                                                    Bundle bundle2 = instr222.mArguments;
                                                    IInstrumentationWatcher iInstrumentationWatcher = instr222.mWatcher;
                                                    IUiAutomationConnection iUiAutomationConnection = instr222.mUiAutomationConnection;
                                                    startTime2 = startTime;
                                                    try {
                                                        boolean z9 = this.mBinderTransactionTrackingEnabled;
                                                        if (!isRestrictedBackupMode) {
                                                            if (normalMode) {
                                                                z3 = false;
                                                                backupTarget2 = backupTarget;
                                                                processName2 = processName4;
                                                                thread.bindApplication(processName4, appInfo, providers, componentName, profilerInfo, bundle2, iInstrumentationWatcher, iUiAutomationConnection, (int) r8, z9, enableTrackAllocation, z3, pending.isPersistent(), new Configuration(pending.getWindowProcessController().getConfiguration()), pending.compat, getCommonServicesLocked(pending.isolated), bundle, buildSerial, autofillOptions, contentCaptureOptions);
                                                            }
                                                        }
                                                        z3 = z2;
                                                        backupTarget2 = backupTarget;
                                                        processName2 = processName4;
                                                        try {
                                                            thread.bindApplication(processName4, appInfo, providers, componentName, profilerInfo, bundle2, iInstrumentationWatcher, iUiAutomationConnection, (int) r8, z9, enableTrackAllocation, z3, pending.isPersistent(), new Configuration(pending.getWindowProcessController().getConfiguration()), pending.compat, getCommonServicesLocked(pending.isolated), bundle, buildSerial, autofillOptions, contentCaptureOptions);
                                                        } catch (Exception e9) {
                                                            e = e9;
                                                            processName = processName2;
                                                        }
                                                    } catch (Exception e10) {
                                                        e = e10;
                                                        processName = processName4;
                                                        Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                                        pending.resetPackageList(this.mProcessStats);
                                                        pending.unlinkDeathRecipient();
                                                        this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                                        return false;
                                                    }
                                                } catch (Exception e11) {
                                                    e = e11;
                                                    processName = processName4;
                                                    Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                                    pending.resetPackageList(this.mProcessStats);
                                                    pending.unlinkDeathRecipient();
                                                    this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                                    return false;
                                                }
                                            } else {
                                                startTime2 = startTime;
                                                processName2 = processName4;
                                                backupTarget2 = backupTarget;
                                                try {
                                                    Bundle bundle3 = this.mCoreSettingsObserver.getCoreSettingsLocked();
                                                    if (multiWindowOverrideConfig != null && !Configuration.EMPTY.equals(multiWindowOverrideConfig)) {
                                                        bundle3.putParcelable("overrideConfig", multiWindowOverrideConfig);
                                                    }
                                                    thread.bindApplication(processName2, appInfo, providers, (ComponentName) null, profilerInfo, (Bundle) null, (IInstrumentationWatcher) null, (IUiAutomationConnection) null, (int) r8, this.mBinderTransactionTrackingEnabled, enableTrackAllocation, isRestrictedBackupMode || !normalMode, pending.isPersistent(), new Configuration(pending.getWindowProcessController().getConfiguration()), pending.compat, getCommonServicesLocked(pending.isolated), bundle3, buildSerial, autofillOptions, contentCaptureOptions);
                                                } catch (Exception e12) {
                                                    e = e12;
                                                    processName = processName2;
                                                    Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                                    pending.resetPackageList(this.mProcessStats);
                                                    pending.unlinkDeathRecipient();
                                                    this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                                    return false;
                                                }
                                            }
                                            if (profilerInfo != null) {
                                                profilerInfo.closeFd();
                                            }
                                            pending.makeActive(thread, this.mProcessStats);
                                            checkTime(startTime2, "attachApplicationLocked: immediately after bindApplication");
                                            this.mProcessList.updateLruProcessLocked(pending, false, null);
                                            checkTime(startTime2, "attachApplicationLocked: after updateLruProcessLocked");
                                            long uptimeMillis2 = SystemClock.uptimeMillis();
                                            pending.lastLowMemory = uptimeMillis2;
                                            pending.lastRequestedGc = uptimeMillis2;
                                            this.mPersistentStartingProcesses.remove(pending);
                                            if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(pending)) {
                                                Slog.v(TAG, "Attach application locked removing on hold: " + pending);
                                            }
                                            this.mProcessesOnHold.remove(pending);
                                            badApp = false;
                                            boolean didSomething2 = false;
                                            if (normalMode) {
                                                try {
                                                    didSomething2 = this.mAtmInternal.attachApplication(pending.getWindowProcessController());
                                                } catch (Exception e13) {
                                                    Slog.wtf(TAG, "Exception thrown launching activities in " + pending, e13);
                                                    badApp = true;
                                                }
                                            }
                                            if (badApp) {
                                                try {
                                                    try {
                                                        didSomething2 |= this.mServices.attachApplicationLocked(pending, processName2);
                                                        checkTime(startTime2, "attachApplicationLocked: after mServices.attachApplicationLocked");
                                                    } catch (Exception e14) {
                                                        e2 = e14;
                                                    }
                                                } catch (Exception e15) {
                                                    e2 = e15;
                                                    Slog.wtf(TAG, "Exception thrown starting services in " + pending, e2);
                                                    badApp = true;
                                                    if (!badApp) {
                                                    }
                                                    if (!badApp) {
                                                    }
                                                    if (badApp) {
                                                    }
                                                }
                                            }
                                            if (!badApp) {
                                                if (isPendingBroadcastProcessLocked(pid)) {
                                                    try {
                                                        didSomething2 |= sendPendingBroadcastsLocked(pending);
                                                        checkTime(startTime2, "attachApplicationLocked: after sendPendingBroadcastsLocked");
                                                    } catch (Exception e16) {
                                                        Slog.wtf(TAG, "Exception thrown dispatching broadcasts in " + pending, e16);
                                                        badApp = true;
                                                    }
                                                }
                                            }
                                            if (!badApp) {
                                                if (backupTarget2 != null && backupTarget2.app == pending) {
                                                    if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                                        Slog.v(TAG, "New app is backup target, launching agent for " + pending);
                                                    }
                                                    notifyPackageUse(backupTarget2.appInfo.packageName, 5);
                                                    try {
                                                        thread.scheduleCreateBackupAgent(backupTarget2.appInfo, compatibilityInfoForPackage(backupTarget2.appInfo), backupTarget2.backupMode, backupTarget2.userId);
                                                    } catch (Exception e17) {
                                                        Slog.wtf(TAG, "Exception thrown creating backup agent in " + pending, e17);
                                                        badApp = true;
                                                    }
                                                }
                                            }
                                            if (badApp) {
                                                pending.kill("error during init", true);
                                                handleAppDiedLocked(pending, false, true);
                                                return false;
                                            }
                                            if (!didSomething2) {
                                                updateOomAdjLocked("updateOomAdj_processBegin");
                                                checkTime(startTime2, "attachApplicationLocked: after updateOomAdjLocked");
                                            }
                                            StatsLog.write(169, pending.info.uid, pending.pid, pending.info.packageName, 3, pending.startTime, (int) (bindApplicationTimeMillis2 - pending.startTime), (int) (SystemClock.elapsedRealtime() - pending.startTime), pending.hostingRecord.getType(), pending.hostingRecord.getName() != null ? pending.hostingRecord.getName() : "");
                                            return true;
                                        }
                                        autofillOptions2 = null;
                                    } else {
                                        autofillOptions2 = null;
                                    }
                                    autofillOptions = autofillOptions2;
                                    if (UserHandle.getAppId(pending.info.uid) >= 10000) {
                                    }
                                    contentCaptureOptions = null;
                                    checkTime(startTime, "attachApplicationLocked: immediately before bindApplication");
                                    long bindApplicationTimeMillis22 = SystemClock.elapsedRealtime();
                                    if (!pending.launchfromActivity) {
                                    }
                                    this.mAtmInternal.preBindApplication(pending.getWindowProcessController(), multiWindowOverrideConfig);
                                    ActiveInstrumentation instr2222 = pending.getActiveInstrumentation();
                                    if (pending.isolatedEntryPoint == null) {
                                    }
                                    if (profilerInfo != null) {
                                    }
                                    pending.makeActive(thread, this.mProcessStats);
                                    checkTime(startTime2, "attachApplicationLocked: immediately after bindApplication");
                                    this.mProcessList.updateLruProcessLocked(pending, false, null);
                                    checkTime(startTime2, "attachApplicationLocked: after updateLruProcessLocked");
                                    long uptimeMillis22 = SystemClock.uptimeMillis();
                                    pending.lastLowMemory = uptimeMillis22;
                                    pending.lastRequestedGc = uptimeMillis22;
                                    this.mPersistentStartingProcesses.remove(pending);
                                    Slog.v(TAG, "Attach application locked removing on hold: " + pending);
                                    this.mProcessesOnHold.remove(pending);
                                    badApp = false;
                                    boolean didSomething22 = false;
                                    if (normalMode) {
                                    }
                                    if (badApp) {
                                    }
                                    if (!badApp) {
                                    }
                                    if (!badApp) {
                                    }
                                    if (badApp) {
                                    }
                                }
                                preBindAgent = null;
                                BackupRecord backupTarget422 = r19;
                                if (this.mAppAgentMap != null) {
                                }
                                profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                clearProfilerLocked();
                                if (!appInfo.isInstantApp()) {
                                }
                                if (this.mActiveInstrumentation.size() > 0) {
                                }
                                instr = instr3;
                                backupTarget = backupTarget3;
                                z2 = true;
                                if (preBindAgent != null) {
                                }
                                try {
                                    if (UserHandle.getAppId(pending.info.uid) >= 10000) {
                                    }
                                    autofillOptions = autofillOptions2;
                                    if (UserHandle.getAppId(pending.info.uid) >= 10000) {
                                    }
                                    contentCaptureOptions = null;
                                    checkTime(startTime, "attachApplicationLocked: immediately before bindApplication");
                                    long bindApplicationTimeMillis222 = SystemClock.elapsedRealtime();
                                    if (!pending.launchfromActivity) {
                                    }
                                    this.mAtmInternal.preBindApplication(pending.getWindowProcessController(), multiWindowOverrideConfig);
                                    ActiveInstrumentation instr22222 = pending.getActiveInstrumentation();
                                    if (pending.isolatedEntryPoint == null) {
                                    }
                                    if (profilerInfo != null) {
                                    }
                                    pending.makeActive(thread, this.mProcessStats);
                                } catch (Exception e18) {
                                    e = e18;
                                    processName = processName4;
                                    Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                    pending.resetPackageList(this.mProcessStats);
                                    pending.unlinkDeathRecipient();
                                    this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                    return false;
                                }
                                try {
                                    checkTime(startTime2, "attachApplicationLocked: immediately after bindApplication");
                                    this.mProcessList.updateLruProcessLocked(pending, false, null);
                                    checkTime(startTime2, "attachApplicationLocked: after updateLruProcessLocked");
                                    long uptimeMillis222 = SystemClock.uptimeMillis();
                                    pending.lastLowMemory = uptimeMillis222;
                                    pending.lastRequestedGc = uptimeMillis222;
                                    this.mPersistentStartingProcesses.remove(pending);
                                    Slog.v(TAG, "Attach application locked removing on hold: " + pending);
                                    this.mProcessesOnHold.remove(pending);
                                    badApp = false;
                                    boolean didSomething222 = false;
                                    if (normalMode) {
                                    }
                                    if (badApp) {
                                    }
                                    if (!badApp) {
                                    }
                                    if (!badApp) {
                                    }
                                    if (badApp) {
                                    }
                                } catch (Exception e19) {
                                    e = e19;
                                    processName = processName2;
                                    Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                    pending.resetPackageList(this.mProcessStats);
                                    pending.unlinkDeathRecipient();
                                    this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                    return false;
                                }
                            } catch (Exception e20) {
                                e = e20;
                                processName = processName4;
                                Slog.wtf(TAG, "Exception thrown during bind of " + pending, e);
                                pending.resetPackageList(this.mProcessStats);
                                pending.unlinkDeathRecipient();
                                this.mProcessList.startProcessLocked(pending, new HostingRecord("bind-fail", processName));
                                return false;
                            }
                        } catch (RemoteException e21) {
                            pending.resetPackageList(this.mProcessStats);
                            this.mProcessList.startProcessLocked(pending, new HostingRecord("link fail", processName4));
                            return false;
                        }
                    }
                }
            } else {
                startTime = startTime3;
                i2 = 3;
                i = pid;
            }
        }
        pending = app;
        if (pending != null) {
        }
    }

    public final void attachApplication(IApplicationThread thread, long startSeq) {
        if (thread != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long start = SystemClock.uptimeMillis();
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    attachApplicationLocked(thread, callingPid, callingUid, startSeq);
                    Binder.restoreCallingIdentity(origId);
                    Flog.i(101, "Attach thread to application:" + callingPid + " cost " + (SystemClock.uptimeMillis() - start));
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Invalid application interface");
    }

    public final void finishBindApplication(IApplicationThread thread) {
        ProcessRecord app;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int callingPid = Binder.getCallingPid();
                long origId = Binder.clearCallingIdentity();
                if (thread == null) {
                    Slog.e(TAG, "finishBindApplication thread is null, return! callingPid: " + callingPid);
                    return;
                }
                Slog.d(TAG, "finishBindApplication callingPid " + callingPid);
                if (callingPid != MY_PID && callingPid >= 0) {
                    synchronized (this.mPidsSelfLocked) {
                        app = this.mPidsSelfLocked.get(callingPid);
                    }
                    if (app != null) {
                        app.preloadStatus = 0;
                        UidRecord uidRec = app.uidRecord;
                        if (uidRec != null) {
                            uidRec.isPreload = false;
                            Slog.d(TAG, "finishBindApplication preloadStatus: " + app.preloadStatus + " app: " + app + " uidRec.isPreload: " + uidRec.isPreload);
                        }
                    }
                }
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void showBootMessage(CharSequence msg, boolean always) {
        if (Binder.getCallingUid() == Process.myUid()) {
            this.mWindowManager.showBootMessage(msg, always);
            return;
        }
        throw new SecurityException();
    }

    /* access modifiers changed from: package-private */
    public final void finishBooting() {
        int i;
        Trace.traceBegin(64, "FinishBooting");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mBootAnimationComplete) {
                    this.mCallFinishBooting = true;
                    return;
                } else {
                    this.mCallFinishBooting = false;
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        ArraySet<String> completedIsas = new ArraySet<>();
        String[] strArr = Build.SUPPORTED_ABIS;
        for (String abi : strArr) {
            Process.ZYGOTE_PROCESS.establishZygoteConnectionForAbi(abi);
            String instructionSet = VMRuntime.getInstructionSet(abi);
            if (!completedIsas.contains(instructionSet)) {
                try {
                    this.mInstaller.markBootComplete(VMRuntime.getInstructionSet(abi));
                } catch (Installer.InstallerException e) {
                    if (!VMRuntime.didPruneDalvikCache()) {
                        Slog.w(TAG, "Unable to mark boot complete for abi: " + abi + " (" + e.getMessage() + ")");
                    }
                }
                completedIsas.add(instructionSet);
            }
        }
        IntentFilter pkgFilter = new IntentFilter();
        pkgFilter.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
        pkgFilter.addDataScheme("package");
        this.mContext.registerReceiver(new BroadcastReceiver() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass10 */

            @Override // android.content.BroadcastReceiver
            public void onReceive(Context context, Intent intent) {
                ActivityManagerService activityManagerService;
                Throwable th;
                String[] pkgs = intent.getStringArrayExtra("android.intent.extra.PACKAGES");
                if (pkgs != null) {
                    for (String pkg : pkgs) {
                        ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                        synchronized (activityManagerService2) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                ActivityManagerService activityManagerService3 = ActivityManagerService.this;
                                StringBuilder sb = new StringBuilder();
                                sb.append("query restart");
                                sb.append("android.intent.action.QUERY_PACKAGE_RESTART".equals(intent.getAction()) ? "by app" : "");
                                activityManagerService = activityManagerService2;
                                try {
                                    if (activityManagerService3.forceStopPackageLocked(pkg, -1, false, false, false, false, false, 0, sb.toString())) {
                                        setResultCode(-1);
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        return;
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                } catch (Throwable th2) {
                                    th = th2;
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                activityManagerService = activityManagerService2;
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    }
                }
            }
        }, pkgFilter);
        IntentFilter dumpheapFilter = new IntentFilter();
        dumpheapFilter.addAction("com.android.server.am.DELETE_DUMPHEAP");
        this.mContext.registerReceiver(new BroadcastReceiver() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass11 */

            @Override // android.content.BroadcastReceiver
            public void onReceive(Context context, Intent intent) {
                ActivityManagerService.this.mHandler.sendEmptyMessageDelayed(51, intent.getBooleanExtra("delay_delete", false) ? BackupAgentTimeoutParameters.DEFAULT_FULL_BACKUP_AGENT_TIMEOUT_MILLIS : 0);
            }
        }, dumpheapFilter);
        try {
            Slog.i(TAG, "About to commit checkpoint");
            PackageHelper.getStorageManager().commitChanges();
        } catch (Exception e2) {
            ((PowerManager) this.mInjector.getContext().getSystemService("power")).reboot("Checkpoint commit failed");
        }
        this.mSystemServiceManager.startBootPhase(1000);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int NP = this.mProcessesOnHold.size();
                if (NP > 0) {
                    ArrayList<ProcessRecord> procs = new ArrayList<>(this.mProcessesOnHold);
                    for (int ip = 0; ip < NP; ip++) {
                        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                            Slog.v(TAG, "Starting process on hold: " + procs.get(ip));
                        }
                        this.mProcessList.startProcessLocked(procs.get(ip), new HostingRecord("on-hold"));
                    }
                }
                if (this.mFactoryTest != 1) {
                    this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(CHECK_EXCESSIVE_POWER_USE_MSG), this.mConstants.POWER_CHECK_INTERVAL);
                    SystemProperties.set("sys.boot_completed", "1");
                    if (!"trigger_restart_min_framework".equals(VoldProperties.decrypt().orElse("")) || "".equals(VoldProperties.encrypt_progress().orElse(""))) {
                        SystemProperties.set("dev.bootcomplete", "1");
                    }
                    this.mUserController.sendBootCompleted(new IIntentReceiver.Stub() {
                        /* class com.android.server.am.ActivityManagerService.AnonymousClass12 */

                        public void performReceive(Intent intent, int resultCode, String data, Bundle extras, boolean ordered, boolean sticky, int sendingUser) {
                            synchronized (ActivityManagerService.this) {
                                try {
                                    ActivityManagerService.boostPriorityForLockedSection();
                                    ActivityManagerService.this.mOomAdjuster.mAppCompact.compactAllSystem();
                                    ActivityManagerService.this.requestPssAllProcsLocked(SystemClock.uptimeMillis(), true, false);
                                    if (ActivityManagerService.this.mCustAms != null && ActivityManagerService.this.mCustAms.isAllowRamCompress()) {
                                        ActivityManagerService.this.mCustAms.setEvent("BOOT_COMPLETE");
                                    }
                                } finally {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                }
                            }
                        }
                    });
                    this.mUserController.scheduleStartProfiles();
                    initBroadcastResourceLocked();
                    resetPriorityAfterLockedSection();
                    Trace.traceEnd(64);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void bootAnimationComplete() {
        boolean callFinishBooting;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                callFinishBooting = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        if (callFinishBooting) {
            finishBooting();
        }
        sDisableForceGC = SystemProperties.getBoolean("persist.disable.force.gc", false);
        if (!sDisableForceGC) {
            Log.i(TAG, "Send Force-gc message to schedule forceGCAfterRebooting after delay 210000 ms");
            MainHandler mainHandler = this.mHandler;
            mainHandler.sendMessageDelayed(mainHandler.obtainMessage(FORCE_GC_ALL_MSG), 210000);
            return;
        }
        Log.i(TAG, "forceGCAfterRebooting has been disabled by property persist.disable.force.gc = true");
    }

    /* access modifiers changed from: package-private */
    public final void ensureBootCompleted() {
        boolean booting;
        boolean enableScreen;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                booting = this.mBooting;
                enableScreen = false;
                this.mBooting = false;
                if (!this.mBooted) {
                    enableScreen = true;
                }
                this.mBooted = true;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        if (booting) {
            finishBooting();
        }
        if (enableScreen) {
            this.mAtmInternal.enableScreenAfterBoot(this.mBooted);
        }
    }

    public IIntentSender getIntentSender(int type, String packageName, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId) {
        RemoteException e;
        enforceNotIsolatedCaller("getIntentSender");
        boolean z = true;
        if (intents != null) {
            if (intents.length >= 1) {
                for (int i = 0; i < intents.length; i++) {
                    Intent intent = intents[i];
                    if (intent != null) {
                        if (intent.hasFileDescriptors()) {
                            throw new IllegalArgumentException("File descriptors passed in Intent");
                        } else if (type != 1 || (intent.getFlags() & DumpState.DUMP_APEX) == 0) {
                            intents[i] = new Intent(intent);
                        } else {
                            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                        }
                    }
                }
                if (!(resolvedTypes == null || resolvedTypes.length == intents.length)) {
                    throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
                }
            } else {
                throw new IllegalArgumentException("Intents array length must be >= 1");
            }
        }
        if (bOptions == null || !bOptions.hasFileDescriptors()) {
            int callingUid = Binder.getCallingUid();
            UserController userController = this.mUserController;
            int callingPid = Binder.getCallingPid();
            if (type != 1) {
                z = false;
            }
            int userId2 = userId == -2 ? -2 : userController.handleIncomingUser(callingPid, callingUid, userId, z, 0, "getIntentSender", null);
            if (!(callingUid == 0 || callingUid == 1000)) {
                try {
                    int uid = AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, UserHandle.getUserId(callingUid));
                    if (!UserHandle.isSameApp(callingUid, uid)) {
                        String msg = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + ", (need uid=" + uid + ") is not allowed to send as package " + packageName;
                        Slog.w(TAG, msg);
                        throw new SecurityException(msg);
                    }
                } catch (RemoteException e2) {
                    e = e2;
                    throw new SecurityException(e);
                }
            }
            if (type != 3) {
                return this.mPendingIntentController.getIntentSender(type, packageName, callingUid, userId2, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions);
            }
            try {
            } catch (RemoteException e3) {
                e = e3;
                throw new SecurityException(e);
            }
            try {
                return this.mAtmInternal.getIntentSender(type, packageName, callingUid, userId2, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions);
            } catch (RemoteException e4) {
                e = e4;
                throw new SecurityException(e);
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in options");
        }
    }

    public int sendIntentSender(IIntentSender target, IBinder whitelistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options) {
        Intent intent2;
        StringBuilder sb = new StringBuilder();
        sb.append("sendIntentSender target:");
        sb.append(target);
        sb.append(", intent:");
        sb.append(intent != null ? intent.toShortStringWithoutClip(true, true, false) : "null");
        Slog.i(TAG, sb.toString());
        if (this.mHwAMSEx.shouldSkipSendIntentSender(target, options)) {
            return 0;
        }
        if (target instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) target).sendWithResult(code, intent, resolvedType, whitelistToken, finishedReceiver, requiredPermission, options);
        }
        if (intent == null) {
            Slog.wtf(TAG, "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        try {
            target.send(code, intent2, resolvedType, whitelistToken, (IIntentReceiver) null, requiredPermission, options);
        } catch (RemoteException e) {
        }
        if (finishedReceiver != null) {
            try {
                finishedReceiver.performReceive(intent2, 0, (String) null, (Bundle) null, false, false, UserHandle.getCallingUserId());
            } catch (RemoteException e2) {
            }
        }
        return 0;
    }

    public void cancelIntentSender(IIntentSender sender) {
        this.mPendingIntentController.cancelIntentSender(sender);
    }

    public String getPackageForIntentSender(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            return ((PendingIntentRecord) pendingResult).key.packageName;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public void registerIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        this.mPendingIntentController.registerIntentSenderCancelListener(sender, receiver);
    }

    public void unregisterIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        this.mPendingIntentController.unregisterIntentSenderCancelListener(sender, receiver);
    }

    public int getUidForIntentSender(IIntentSender sender) {
        if (!(sender instanceof PendingIntentRecord)) {
            return -1;
        }
        try {
            return ((PendingIntentRecord) sender).uid;
        } catch (ClassCastException e) {
            return -1;
        }
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.allIntents == null) {
                return false;
            }
            for (int i = 0; i < res.key.allIntents.length; i++) {
                Intent intent = res.key.allIntents[i];
                if (!(intent.getPackage() == null || intent.getComponent() == null)) {
                    return false;
                }
            }
            return true;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAnActivity(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            if (((PendingIntentRecord) pendingResult).key.type == 2) {
                return true;
            }
            return false;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAForegroundService(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord) || ((PendingIntentRecord) pendingResult).key.type != 5) {
            return false;
        }
        return true;
    }

    public boolean isIntentSenderABroadcast(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord) || ((PendingIntentRecord) pendingResult).key.type != 1) {
            return false;
        }
        return true;
    }

    public Intent getIntentForIntentSender(IIntentSender pendingResult) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.requestIntent != null) {
                return new Intent(res.key.requestIntent);
            }
            return null;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public String getTagForIntentSender(IIntentSender pendingResult, String prefix) {
        String tagForIntentSenderLocked;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    tagForIntentSenderLocked = getTagForIntentSenderLocked(res, prefix);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return tagForIntentSenderLocked;
        } catch (ClassCastException e) {
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix) {
        Intent intent = res.key.requestIntent;
        if (intent == null) {
            return null;
        }
        if (res.lastTag != null && res.lastTagPrefix == prefix && (res.lastTagPrefix == null || res.lastTagPrefix.equals(prefix))) {
            return res.lastTag;
        }
        res.lastTagPrefix = prefix;
        StringBuilder sb = new StringBuilder(128);
        if (prefix != null) {
            sb.append(prefix);
        }
        if (intent.getAction() != null) {
            sb.append(intent.getAction());
        } else if (intent.getComponent() != null) {
            intent.getComponent().appendShortString(sb);
        } else {
            sb.append("?");
        }
        String sb2 = sb.toString();
        res.lastTag = sb2;
        return sb2;
    }

    /* JADX INFO: finally extract failed */
    public void setProcessLimit(int max) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.setOverrideMaxCachedProcesses(max);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        trimApplications("updateOomAdj_processEnd");
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return overrideMaxCachedProcesses;
    }

    /* access modifiers changed from: package-private */
    public void importanceTokenDied(ImportanceToken token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    if (this.mImportantProcesses.get(token.pid) == token) {
                        this.mImportantProcesses.remove(token.pid);
                        ProcessRecord pr = this.mPidsSelfLocked.get(token.pid);
                        if (pr == null) {
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        pr.forcingToImportant = null;
                        updateProcessForegroundLocked(pr, false, 0, false);
                        updateOomAdjLocked("updateOomAdj_uiVisibility");
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void setProcessImportant(IBinder token, int pid, boolean isForeground, String reason) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessImportant()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean changed = false;
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pid);
                    if (pr != null || !isForeground) {
                        ImportanceToken oldToken = this.mImportantProcesses.get(pid);
                        if (oldToken != null) {
                            oldToken.token.unlinkToDeath(oldToken, 0);
                            this.mImportantProcesses.remove(pid);
                            if (pr != null) {
                                pr.forcingToImportant = null;
                            }
                            changed = true;
                        }
                        if (isForeground && token != null) {
                            ImportanceToken newToken = new ImportanceToken(pid, token, reason) {
                                /* class com.android.server.am.ActivityManagerService.AnonymousClass13 */

                                @Override // android.os.IBinder.DeathRecipient
                                public void binderDied() {
                                    ActivityManagerService.this.importanceTokenDied(this);
                                }
                            };
                            try {
                                token.linkToDeath(newToken, 0);
                                this.mImportantProcesses.put(pid, newToken);
                                pr.forcingToImportant = newToken;
                                changed = true;
                            } catch (RemoteException e) {
                            }
                        }
                    } else {
                        Slog.w(TAG, "setProcessForeground called on unknown pid: " + pid);
                        return;
                    }
                }
                if (changed) {
                    updateOomAdjLocked("updateOomAdj_uiVisibility");
                }
                resetPriorityAfterLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isAppForeground(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mProcessList.mActiveUids.get(uid);
                boolean z = false;
                if (uidRec != null) {
                    if (!uidRec.idle) {
                        if (uidRec.getCurProcState() <= 7) {
                            z = true;
                        }
                        resetPriorityAfterLockedSection();
                        return z;
                    }
                }
                return false;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isAppBad(ApplicationInfo info) {
        boolean isBadProcessLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isBadProcessLocked = this.mAppErrors.isBadProcessLocked(info);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return isBadProcessLocked;
    }

    /* access modifiers changed from: package-private */
    public int getUidState(int uid) {
        int uidProcStateLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                uidProcStateLocked = this.mProcessList.getUidProcStateLocked(uid);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return uidProcStateLocked;
    }

    /* access modifiers changed from: package-private */
    public static class ProcessInfoService extends IProcessInfoService.Stub {
        final ActivityManagerService mActivityManagerService;

        ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] pids, int[] states) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] pids, int[] states, int[] scores) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, scores);
        }
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] pids, int[] states, int[] scores) {
        if (scores != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (pids == null) {
            throw new NullPointerException("pids");
        } else if (states == null) {
            throw new NullPointerException("states");
        } else if (pids.length != states.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        } else if (scores == null || pids.length == scores.length) {
            synchronized (this.mPidsSelfLocked) {
                for (int i = 0; i < pids.length; i++) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pids[i]);
                    states[i] = pr == null ? 21 : pr.getCurProcState();
                    if (scores != null) {
                        scores[i] = pr == null ? -10000 : pr.curAdj;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
    }

    /* access modifiers changed from: package-private */
    public static class PermissionController extends IPermissionController.Stub {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(String permission, int pid, int uid) {
            return this.mActivityManagerService.checkPermission(permission, pid, uid) == 0;
        }

        public int noteOp(String op, int uid, String packageName) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(op), uid, packageName);
        }

        public String[] getPackagesForUid(int uid) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(uid);
        }

        public boolean isRuntimePermission(String permission) {
            try {
                if ((this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(permission, 0).protectionLevel & 15) == 1) {
                    return true;
                }
                return false;
            } catch (PackageManager.NameNotFoundException nnfe) {
                Slog.e(ActivityManagerService.TAG, "No such permission: " + permission, nnfe);
                return false;
            }
        }

        public int getPackageUid(String packageName, int flags) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(packageName, flags);
            } catch (PackageManager.NameNotFoundException e) {
                return -1;
            }
        }
    }

    class IntentFirewallInterface implements IntentFirewall.AMSInterface {
        IntentFirewallInterface() {
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            return ActivityManagerService.checkComponentPermission(permission, pid, uid, owningUid, exported);
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public Object getAMSLock() {
            return ActivityManagerService.this;
        }
    }

    public static int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
        if (pid == MY_PID) {
            return 0;
        }
        return ActivityManager.checkComponentPermission(permission, uid, owningUid, exported);
    }

    public int checkPermission(String permission, int pid, int uid) {
        if (permission == null) {
            return -1;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken) {
        if (permission == null) {
            return -1;
        }
        Identity tlsIdentity = sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            Slog.d(TAG, "checkComponentPermission() adjusting {pid,uid} to {" + tlsIdentity.pid + "," + tlsIdentity.uid + "}");
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    /* access modifiers changed from: package-private */
    public int checkCallingPermission(String permission) {
        return checkPermission(permission, Binder.getCallingPid(), Binder.getCallingUid());
    }

    /* access modifiers changed from: package-private */
    public void enforceCallingPermission(String permission, String func) {
        if (checkCallingPermission(permission) != 0) {
            String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + permission;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void enforcePermission(String permission, int pid, int uid, String func) {
        if (checkPermission(permission, pid, uid) != 0) {
            String msg = "Permission Denial: " + func + " from pid=" + pid + ", uid=" + uid + " requires " + permission;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public boolean isAppStartModeDisabled(int uid, String packageName) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                z = getAppStartModeLocked(uid, packageName, 0, -1, false, true, false) == 3;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    /* access modifiers changed from: package-private */
    public int appRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        HwCustActivityManagerService hwCustActivityManagerService;
        if (isOnDeviceIdleWhitelistLocked(uid, false) && ((hwCustActivityManagerService = this.mCustAms) == null || !hwCustActivityManagerService.isAddRestrictedForCust(packageName))) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " on idle whitelist; not restricted in background");
            }
            return 0;
        } else if (getPackageManagerInternalLocked().isSystemAppGrantByMdmAndNonPreload(packageName)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " not on idle whitelist, but in MDM special list; not restricted in background");
            }
            return 0;
        } else if (packageTargetSdk >= 26) {
            Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " targets O+, restricted");
            return 2;
        } else {
            int appop = this.mAppOpsService.noteOperation(HANDLE_TRUST_STORAGE_UPDATE_MSG, uid, packageName);
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Legacy app " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " bg appop " + appop);
            }
            if (appop != 0) {
                if (appop != 1) {
                    return 2;
                }
                return 1;
            } else if (!this.mForceBackgroundCheck || UserHandle.isCore(uid) || isOnDeviceIdleWhitelistLocked(uid, true)) {
                return 0;
            } else {
                if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                    Slog.i(TAG, "Force background check: " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " restricted");
                }
                return 1;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public int appServicesRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        if (getPackageManagerInternalLocked().isPackagePersistent(packageName)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " is persistent; not restricted in background");
            }
            return 0;
        } else if (!uidOnBackgroundWhitelist(uid)) {
            return appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " on background whitelist; not restricted in background");
            }
            return 0;
        }
    }

    /* access modifiers changed from: package-private */
    public int getAppStartModeLocked(int uid, String packageName, int packageTargetSdk, int callingPid, boolean alwaysRestrict, boolean disabledOnly, boolean forcedStandby) {
        boolean ephemeral;
        int startMode;
        ProcessRecord proc;
        UidRecord uidRec = this.mProcessList.getUidRecordLocked(uid);
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            StringBuilder sb = new StringBuilder();
            sb.append("checkAllowBackground: uid=");
            sb.append(uid);
            sb.append(" pkg=");
            sb.append(packageName);
            sb.append(" rec=");
            sb.append(uidRec);
            sb.append(" always=");
            sb.append(alwaysRestrict);
            sb.append(" idle=");
            sb.append(uidRec != null ? uidRec.idle : false);
            Slog.d(TAG, sb.toString());
        }
        if (uidRec != null && !alwaysRestrict && !forcedStandby && !uidRec.idle) {
            return 0;
        }
        if (uidRec == null) {
            ephemeral = getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packageName);
        } else {
            ephemeral = uidRec.ephemeral;
        }
        if (ephemeral) {
            return 3;
        }
        if (disabledOnly) {
            return 0;
        }
        if (alwaysRestrict) {
            startMode = appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            startMode = appServicesRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.d(TAG, "checkAllowBackground: uid=" + uid + " pkg=" + packageName + " startMode=" + startMode + " onwhitelist=" + isOnDeviceIdleWhitelistLocked(uid, false) + " onwhitelist(ei)=" + isOnDeviceIdleWhitelistLocked(uid, true));
        }
        if (startMode == 1 && callingPid >= 0) {
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(callingPid);
            }
            if (proc != null && !ActivityManager.isProcStateBackground(proc.getCurProcState())) {
                return 0;
            }
        }
        return startMode;
    }

    /* access modifiers changed from: package-private */
    public boolean isOnDeviceIdleWhitelistLocked(int uid, boolean allowExceptIdleToo) {
        int[] whitelist;
        int appId = UserHandle.getAppId(uid);
        if (allowExceptIdleToo) {
            whitelist = this.mDeviceIdleExceptIdleWhitelist;
        } else {
            whitelist = this.mDeviceIdleWhitelist;
        }
        return Arrays.binarySearch(whitelist, appId) >= 0 || Arrays.binarySearch(this.mDeviceIdleTempWhitelist, appId) >= 0 || this.mPendingTempWhitelist.indexOfKey(uid) >= 0;
    }

    /* access modifiers changed from: package-private */
    public String getPendingTempWhitelistTagForUidLocked(int uid) {
        PendingTempWhitelist ptw = this.mPendingTempWhitelist.get(uid);
        if (ptw != null) {
            return ptw.tag;
        }
        return null;
    }

    private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags) {
        ContentProviderRecord cpr = this.mProviderMap.getProviderByName(authority, userHandle);
        if (cpr != null) {
            return cpr.info;
        }
        try {
            return AppGlobals.getPackageManager().resolveContentProvider(authority, pmFlags | 2048, userHandle);
        } catch (RemoteException e) {
            return null;
        }
    }

    @VisibleForTesting
    public void grantEphemeralAccessLocked(int userId, Intent intent, int targetAppId, int ephemeralAppId) {
        getPackageManagerInternalLocked().grantEphemeralAccess(userId, intent, targetAppId, ephemeralAppId);
    }

    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, int userId, IBinder callerToken) {
        enforceNotIsolatedCaller("checkUriPermission");
        Identity tlsIdentity = sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        if (pid != MY_PID && !this.mUgmInternal.checkUriPermission(new GrantUri(userId, uri, false), uid, modeFlags)) {
            return -1;
        }
        return 0;
    }

    public void grantUriPermission(IApplicationThread caller, String targetPkg, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(userId, uri, false);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when granting permission to uri " + grantUri);
                } else if (targetPkg != null) {
                    Preconditions.checkFlagsArgument(modeFlags, (int) HdmiCecKeycode.UI_SOUND_PRESENTATION_TREBLE_STEP_MINUS);
                    this.mUgmInternal.grantUriPermission(r.uid, targetPkg, grantUri, modeFlags, null, UserHandle.getUserId(r.uid));
                } else {
                    throw new IllegalArgumentException("null target");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void revokeUriPermission(IApplicationThread caller, String targetPackage, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("revokeUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when revoking permission to uri " + uri);
                } else if (uri == null) {
                    Slog.w(TAG, "revokeUriPermission: null uri");
                } else if (!Intent.isAccessUriMode(modeFlags)) {
                    resetPriorityAfterLockedSection();
                } else if (getProviderInfoLocked(uri.getAuthority(), userId, 786432) == null) {
                    Slog.w(TAG, "No content provider found for permission revoke: " + uri.toSafeString());
                    resetPriorityAfterLockedSection();
                } else {
                    this.mUgmInternal.revokeUriPermission(targetPackage, r.uid, new GrantUri(userId, uri, false), modeFlags);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void showWaitingForDebugger(IApplicationThread who, boolean waiting) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = who != null ? getRecordForAppLocked(who) : null;
                if (app != null) {
                    Message msg = Message.obtain();
                    msg.what = 6;
                    msg.obj = app;
                    msg.arg1 = waiting ? 1 : 0;
                    this.mUiHandler.sendMessage(msg);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo outInfo) {
        this.mProcessList.getMemoryInfo(outInfo);
    }

    public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum) {
        return this.mActivityTaskManager.getTasks(maxNum);
    }

    public List<ActivityManager.RunningTaskInfo> getFilteredTasks(int maxNum, @WindowConfiguration.ActivityType int ignoreActivityType, @WindowConfiguration.WindowingMode int ignoreWindowingMode) {
        return this.mActivityTaskManager.getFilteredTasks(maxNum, ignoreActivityType, ignoreWindowingMode);
    }

    public void cancelTaskWindowTransition(int taskId) {
        this.mActivityTaskManager.cancelTaskWindowTransition(taskId);
    }

    public void setTaskResizeable(int taskId, int resizeableMode) {
        this.mActivityTaskManager.setTaskResizeable(taskId, resizeableMode);
    }

    public ActivityManager.TaskSnapshot getTaskSnapshot(int taskId, boolean reducedResolution) {
        return this.mActivityTaskManager.getTaskSnapshot(taskId, reducedResolution);
    }

    public void resizeTask(int taskId, Rect bounds, int resizeMode) {
        this.mActivityTaskManager.resizeTask(taskId, bounds, resizeMode);
    }

    public Rect getTaskBounds(int taskId) {
        return this.mActivityTaskManager.getTaskBounds(taskId);
    }

    public void removeStack(int stackId) {
        this.mActivityTaskManager.removeStack(stackId);
    }

    public boolean removeTask(int taskId) {
        return this.mActivityTaskManager.removeTask(taskId);
    }

    public void moveTaskToFront(IApplicationThread appThread, String callingPackage, int taskId, int flags, Bundle bOptions) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_MOVETASKTOFRONT);
        this.mActivityTaskManager.moveTaskToFront(appThread, callingPackage, taskId, flags, bOptions);
    }

    public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
        return this.mActivityTaskManager.moveActivityTaskToBack(token, nonRoot);
    }

    public void moveTaskToStack(int taskId, int stackId, boolean toTop) {
        this.mActivityTaskManager.moveTaskToStack(taskId, stackId, toTop);
    }

    public void resizeStack(int stackId, Rect destBounds, boolean allowResizeInDockedMode, boolean preserveWindows, boolean animate, int animationDuration) {
        this.mActivityTaskManager.resizeStack(stackId, destBounds, allowResizeInDockedMode, preserveWindows, animate, animationDuration);
    }

    public ParceledListSlice<ActivityManager.RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETRECENTTASKS);
        return this.mActivityTaskManager.getRecentTasks(maxNum, flags, userId);
    }

    public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds) {
        return this.mActivityTaskManager.moveTopActivityToPinnedStack(stackId, bounds);
    }

    public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds, Rect tempDockedTaskInsetBounds, Rect tempOtherTaskBounds, Rect tempOtherTaskInsetBounds) {
        this.mActivityTaskManager.resizeDockedStack(dockedBounds, tempDockedTaskBounds, tempDockedTaskInsetBounds, tempOtherTaskBounds, tempOtherTaskInsetBounds);
    }

    public void positionTaskInStack(int taskId, int stackId, int position) {
        this.mActivityTaskManager.positionTaskInStack(taskId, stackId, position);
    }

    public List<ActivityManager.StackInfo> getAllStackInfos() {
        return this.mActivityTaskManager.getAllStackInfos();
    }

    public int getTaskForActivity(IBinder token, boolean onlyRoot) {
        return this.mActivityTaskManager.getTaskForActivity(token, onlyRoot);
    }

    public void updateDeviceOwner(String packageName) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || callingUid == 1000) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mDeviceOwnerName = packageName;
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("updateDeviceOwner called from non-system process");
    }

    public void updateLockTaskPackages(int userId, String[] packages) {
        this.mActivityTaskManager.updateLockTaskPackages(userId, packages);
    }

    public boolean isInLockTaskMode() {
        return this.mActivityTaskManager.isInLockTaskMode();
    }

    public int getLockTaskModeState() {
        return this.mActivityTaskManager.getLockTaskModeState();
    }

    public void startSystemLockTaskMode(int taskId) throws RemoteException {
        this.mActivityTaskManager.startSystemLockTaskMode(taskId);
    }

    private final List<ProviderInfo> generateApplicationProvidersLocked(ProcessRecord app) {
        List<ProviderInfo> providers;
        ContentProviderRecord cpr;
        try {
            providers = AppGlobals.getPackageManager().queryContentProviders(app.processName, app.uid, 268438528, (String) null).getList();
        } catch (RemoteException e) {
            providers = null;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "generateApplicationProvidersLocked, app.info.uid = " + app.uid);
        }
        int userId = app.userId;
        if (providers != null) {
            int N = providers.size();
            app.pubProviders.ensureCapacity(app.pubProviders.size() + N);
            int N2 = N;
            int i = 0;
            while (i < N2) {
                ProviderInfo cpi = providers.get(i);
                boolean singleton = isSingleton(cpi.processName, cpi.applicationInfo, cpi.name, cpi.flags);
                if (!singleton || UserHandle.getUserId(app.uid) == 0) {
                    ComponentName comp = new ComponentName(cpi.packageName, cpi.name);
                    ContentProviderRecord cpr2 = this.mProviderMap.getProviderByClass(comp, userId);
                    if (cpr2 == null) {
                        cpr = new ContentProviderRecord(this, cpi, app.info, comp, singleton);
                        this.mProviderMap.putProviderByClass(comp, cpr);
                    } else {
                        cpr = cpr2;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_MU) {
                        Slog.v(TAG_MU, "generateApplicationProvidersLocked, cpi.uid = " + cpr.uid);
                    }
                    app.pubProviders.put(cpi.name, cpr);
                    if (!cpi.multiprocess || !PackageManagerService.PLATFORM_PACKAGE_NAME.equals(cpi.packageName)) {
                        app.addPackage(cpi.applicationInfo.packageName, cpi.applicationInfo.longVersionCode, this.mProcessStats);
                    }
                    notifyPackageUse(cpi.applicationInfo.packageName, 4);
                } else {
                    providers.remove(i);
                    N2--;
                    i--;
                }
                i++;
            }
        }
        return providers;
    }

    public String checkContentProviderAccess(String authority, int userId) {
        ProcessRecord r;
        String checkContentProviderPermissionLocked;
        if (userId == -1) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", TAG);
            userId = UserHandle.getCallingUserId();
        }
        ProviderInfo cpi = null;
        try {
            cpi = AppGlobals.getPackageManager().resolveContentProvider(authority, 790016, userId);
        } catch (RemoteException e) {
        }
        if (cpi == null) {
            return "Failed to find provider " + authority + " for user " + userId + "; expected to find a valid ContentProvider for this authority";
        }
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (r == null) {
            return "Failed to find PID " + Binder.getCallingPid();
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi, r, userId, true);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return checkContentProviderPermissionLocked;
    }

    private final String checkContentProviderPermissionLocked(ProviderInfo cpi, ProcessRecord r, int userId, boolean checkUser) {
        int userId2;
        String suffix;
        boolean checkedGrants;
        int tmpTargetUserId;
        int callingPid = r != null ? r.pid : Binder.getCallingPid();
        int callingUid = r != null ? r.uid : Binder.getCallingUid();
        boolean checkedGrants2 = false;
        if (checkUser) {
            userId2 = userId;
            int tmpTargetUserId2 = this.mUserController.unsafeConvertIncomingUser(userId2);
            if (tmpTargetUserId2 == UserHandle.getUserId(callingUid)) {
                checkedGrants = false;
            } else if (this.mUgmInternal.checkAuthorityGrants(callingUid, cpi, tmpTargetUserId2, checkUser)) {
                return null;
            } else {
                checkedGrants = true;
            }
            if (!checkedGrants || cpi.authority == null || !cpi.authority.contains("com.huawei.android.launcher.settings")) {
                tmpTargetUserId = tmpTargetUserId2;
                userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 0, "checkContentProviderPermissionLocked " + cpi.authority, null);
            } else {
                tmpTargetUserId = tmpTargetUserId2;
            }
            if (userId2 != tmpTargetUserId) {
                checkedGrants2 = false;
            } else {
                checkedGrants2 = checkedGrants;
            }
        } else {
            userId2 = userId;
        }
        if (checkComponentPermission(cpi.readPermission, callingPid, callingUid, cpi.applicationInfo.uid, cpi.exported) == 0 || checkComponentPermission(cpi.writePermission, callingPid, callingUid, cpi.applicationInfo.uid, cpi.exported) == 0) {
            return null;
        }
        PathPermission[] pps = cpi.pathPermissions;
        if (pps != null) {
            int i = pps.length;
            while (i > 0) {
                i--;
                PathPermission pp = pps[i];
                String pprperm = pp.getReadPermission();
                if (pprperm != null && checkComponentPermission(pprperm, callingPid, callingUid, cpi.applicationInfo.uid, cpi.exported) == 0) {
                    return null;
                }
                String ppwperm = pp.getWritePermission();
                if (ppwperm != null && checkComponentPermission(ppwperm, callingPid, callingUid, cpi.applicationInfo.uid, cpi.exported) == 0) {
                    return null;
                }
            }
        }
        if (!checkedGrants2 && this.mUgmInternal.checkAuthorityGrants(callingUid, cpi, userId2, checkUser)) {
            return null;
        }
        if (!cpi.exported) {
            suffix = " that is not exported from UID " + cpi.applicationInfo.uid;
        } else if ("android.permission.MANAGE_DOCUMENTS".equals(cpi.readPermission)) {
            suffix = " requires that you obtain access using ACTION_OPEN_DOCUMENT or related APIs";
        } else {
            suffix = " requires " + cpi.readPermission + " or " + cpi.writePermission;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Permission Denial: opening provider ");
        sb.append(cpi.name);
        sb.append(" from ");
        sb.append(r != null ? r : "(null)");
        sb.append(" (pid=");
        sb.append(callingPid);
        sb.append(", uid=");
        sb.append(callingUid);
        sb.append(")");
        sb.append(suffix);
        String msg = sb.toString();
        Slog.w(TAG, msg);
        return msg;
    }

    /* access modifiers changed from: package-private */
    public ContentProviderConnection incProviderCountLocked(ProcessRecord r, ContentProviderRecord cpr, IBinder externalProcessToken, int callingUid, String callingPackage, String callingTag, boolean stable) {
        if (r != null) {
            for (int i = 0; i < r.conProviders.size(); i++) {
                ContentProviderConnection conn = r.conProviders.get(i);
                if (conn.provider == cpr) {
                    if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                        Slog.v(TAG, "Adding provider requested by " + r.processName + " from process " + cpr.info.processName + ": " + cpr.name.flattenToShortString() + " scnt=" + conn.stableCount + " uscnt=" + conn.unstableCount);
                    }
                    if (stable) {
                        conn.stableCount++;
                        conn.numStableIncs++;
                    } else {
                        conn.unstableCount++;
                        conn.numUnstableIncs++;
                    }
                    return conn;
                }
            }
            ContentProviderConnection conn2 = new ContentProviderConnection(cpr, r, callingPackage);
            conn2.startAssociationIfNeeded();
            if (stable) {
                conn2.stableCount = 1;
                conn2.numStableIncs = 1;
            } else {
                conn2.unstableCount = 1;
                conn2.numUnstableIncs = 1;
            }
            cpr.connections.add(conn2);
            r.conProviders.add(conn2);
            startAssociationLocked(r.uid, r.processName, r.getCurProcState(), cpr.uid, cpr.appInfo.longVersionCode, cpr.name, cpr.info.processName);
            this.mHwAMSEx.reportServiceRelationIAware(2, cpr, r, stable);
            return conn2;
        }
        cpr.addExternalProcessHandleLocked(externalProcessToken, callingUid, callingTag);
        return null;
    }

    /* access modifiers changed from: package-private */
    public boolean decProviderCountLocked(ContentProviderConnection conn, ContentProviderRecord cpr, IBinder externalProcessToken, boolean stable) {
        if (conn != null) {
            ContentProviderRecord cpr2 = conn.provider;
            if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                Slog.v(TAG, "Removing provider requested by " + conn.client.processName + " from process " + cpr2.info.processName + ": " + cpr2.name.flattenToShortString() + " scnt=" + conn.stableCount + " uscnt=" + conn.unstableCount);
            }
            if (stable) {
                conn.stableCount--;
            } else {
                conn.unstableCount--;
            }
            if (conn.stableCount != 0 || conn.unstableCount != 0) {
                return false;
            }
            conn.stopAssociation();
            cpr2.connections.remove(conn);
            conn.client.conProviders.remove(conn);
            if (conn.client.setProcState < 16 && cpr2.proc != null) {
                cpr2.proc.lastProviderTime = SystemClock.uptimeMillis();
            }
            stopAssociationLocked(conn.client.uid, conn.client.processName, cpr2.uid, cpr2.appInfo.longVersionCode, cpr2.name, cpr2.info.processName);
            return true;
        }
        cpr.removeExternalProcessHandleLocked(externalProcessToken);
        return false;
    }

    /* access modifiers changed from: package-private */
    public void checkTime(long startTime, String where) {
        long now = SystemClock.uptimeMillis();
        if (now - startTime > 50) {
            Slog.w(TAG, "Slow operation: " + (now - startTime) + "ms so far, now at " + where);
        }
    }

    private boolean isProcessAliveLocked(ProcessRecord proc) {
        if (proc.pid <= 0) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                Slog.d(TAG, "Process hasn't started yet: " + proc);
            }
            return false;
        }
        if (proc.procStatFile == null) {
            proc.procStatFile = "/proc/" + proc.pid + "/stat";
        }
        this.mProcessStateStatsLongs[0] = 0;
        if (!Process.readProcFile(proc.procStatFile, PROCESS_STATE_STATS_FORMAT, null, this.mProcessStateStatsLongs, null)) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                Slog.d(TAG, "UNABLE TO RETRIEVE STATE FOR " + proc.procStatFile);
            }
            return false;
        }
        long state = this.mProcessStateStatsLongs[0];
        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
            Slog.d(TAG, "RETRIEVED STATE FOR " + proc.procStatFile + ": " + ((char) ((int) state)));
        }
        if (state == 90 || state == 88 || state == 120 || state == 75) {
            return false;
        }
        return true;
    }

    private String checkContentProviderAssociation(ProcessRecord callingApp, int callingUid, ProviderInfo cpi) {
        if (callingApp != null) {
            for (int i = callingApp.pkgList.size() - 1; i >= 0; i--) {
                if (!validateAssociationAllowedLocked(callingApp.pkgList.keyAt(i), callingApp.uid, cpi.packageName, cpi.applicationInfo.uid)) {
                    return cpi.packageName;
                }
            }
            return null;
        } else if (validateAssociationAllowedLocked(cpi.packageName, cpi.applicationInfo.uid, null, callingUid)) {
            return null;
        } else {
            return "<null>";
        }
    }

    /* JADX INFO: finally extract failed */
    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:230:0x04a7 */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX INFO: Multiple debug info for r15v28 'cpi'  android.content.pm.ProviderInfo: [D('conn' com.android.server.am.ContentProviderConnection), D('cpi' android.content.pm.ProviderInfo)] */
    /* JADX INFO: Multiple debug info for r5v58 ??: [D('callingPid' int), D('token' android.os.IBinder)] */
    /* JADX INFO: Multiple debug info for r13v30 'startTime'  long: [D('startTime' long), D('token' android.os.IBinder)] */
    /* JADX WARN: Type inference failed for: r2v85, types: [com.android.server.am.ActivityManagerService$PidMap] */
    /* JADX WARN: Type inference failed for: r5v58, types: [int] */
    /* JADX WARN: Type inference failed for: r5v78, types: [int] */
    /* JADX WARNING: Code restructure failed: missing block: B:564:0x0cb4, code lost:
        r7 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:565:0x0cb5, code lost:
        if (r4 == null) goto L_0x0cf7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:568:?, code lost:
        r4.waiting = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:574:0x0cc6, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:575:0x0cc7, code lost:
        r1 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:581:0x0cd1, code lost:
        r4.waiting = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:586:0x0cdb, code lost:
        r1 = 0;
        r4.waiting = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:589:0x0ce7, code lost:
        r1 = 0;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:143:0x029c  */
    /* JADX WARNING: Removed duplicated region for block: B:145:0x02b4  */
    /* JADX WARNING: Removed duplicated region for block: B:153:0x02fa  */
    /* JADX WARNING: Removed duplicated region for block: B:212:0x0470  */
    /* JADX WARNING: Removed duplicated region for block: B:213:0x0473  */
    /* JADX WARNING: Removed duplicated region for block: B:220:0x048b A[Catch:{ all -> 0x0b52 }] */
    /* JADX WARNING: Removed duplicated region for block: B:378:0x073f  */
    /* JADX WARNING: Removed duplicated region for block: B:388:0x0763  */
    /* JADX WARNING: Removed duplicated region for block: B:395:0x07b3  */
    /* JADX WARNING: Removed duplicated region for block: B:399:0x07c1  */
    /* JADX WARNING: Removed duplicated region for block: B:492:0x0a27  */
    /* JADX WARNING: Removed duplicated region for block: B:495:0x0a41  */
    /* JADX WARNING: Removed duplicated region for block: B:496:0x0a49  */
    /* JADX WARNING: Removed duplicated region for block: B:499:0x0a69  */
    /* JADX WARNING: Removed duplicated region for block: B:519:0x0b14 A[Catch:{ all -> 0x0b42 }] */
    /* JADX WARNING: Removed duplicated region for block: B:538:0x0bf0 A[LOOP:1: B:538:0x0bf0->B:590:0x0ce8, LOOP_START, PHI: r1 r2 r11 
      PHI: (r1v9 android.app.ContentProviderHolder) = (r1v7 android.app.ContentProviderHolder), (r1v25 android.app.ContentProviderHolder) binds: [B:537:0x0bef, B:590:0x0ce8] A[DONT_GENERATE, DONT_INLINE]
      PHI: (r2v4 'userId' int) = (r2v3 'userId' int), (r2v18 'userId' int) binds: [B:537:0x0bef, B:590:0x0ce8] A[DONT_GENERATE, DONT_INLINE]
      PHI: (r11v4 char) = (r11v2 char), (r11v17 char) binds: [B:537:0x0bef, B:590:0x0ce8] A[DONT_GENERATE, DONT_INLINE], SYNTHETIC, Splitter:B:538:0x0bf0] */
    /* JADX WARNING: Removed duplicated region for block: B:574:0x0cc6 A[Catch:{ InterruptedException -> 0x0cc4, all -> 0x0cc6, all -> 0x0cdf }, ExcHandler: all (r0v19 'th' java.lang.Throwable A[CUSTOM_DECLARE, Catch:{  }]), Splitter:B:555:0x0c69] */
    /* JADX WARNING: Removed duplicated region for block: B:581:0x0cd1 A[Catch:{ InterruptedException -> 0x0cc4, all -> 0x0cc6, all -> 0x0cdf }] */
    /* JADX WARNING: Removed duplicated region for block: B:586:0x0cdb A[Catch:{ InterruptedException -> 0x0cc4, all -> 0x0cc6, all -> 0x0cdf }] */
    /* JADX WARNING: Removed duplicated region for block: B:589:0x0ce7  */
    /* JADX WARNING: Unknown variable types count: 3 */
    private ContentProviderHolder getContentProviderImpl(IApplicationThread caller, String name, IBinder token, int callingUid, String callingPackage, String callingTag, boolean stable, int userId) {
        boolean isAwareMimeTypeBinder;
        IBinder iBinder;
        int callingUid2;
        IBinder token2;
        Throwable th;
        ProcessRecord r;
        ContentProviderRecord cpr;
        boolean checkCrossUser;
        int userId2;
        int callingUid3;
        IBinder iBinder2;
        ContentProviderConnection conn;
        long startTime;
        boolean providerRunning;
        ProcessRecord r2;
        ContentProviderHolder contentProviderHolder;
        IBinder token3;
        boolean providerRunning2;
        char c;
        char c2;
        ContentProviderConnection conn2;
        int userId3;
        ContentProviderHolder contentProviderHolder2;
        Throwable th2;
        Throwable th3;
        int userId4;
        char c3;
        int userId5;
        boolean singleton;
        int userId6;
        String msg;
        IBinder token4;
        int callingPid;
        ProcessRecord callerApp;
        IBinder token5;
        ComponentName comp;
        char c4;
        ContentProviderRecord cpr2;
        int N;
        int i;
        ProcessRecord r3;
        int userId7;
        ProviderInfo cpi;
        ContentProviderHolder contentProviderHolder3;
        ContentProviderRecord cpr3;
        ComponentName comp2;
        ContentProviderConnection conn3;
        Throwable th4;
        ContentProviderRecord cpr4;
        String str;
        ApplicationInfo applicationInfo;
        char c5;
        ContentProviderRecord cpr5;
        Throwable th5;
        int callingPid2;
        int callingUid4;
        Throwable th6;
        ?? r5;
        ContentProviderConnection conn4;
        boolean success;
        IBinder token6;
        boolean lastRef;
        Throwable th7;
        int userId8 = this.mHwAMSEx.getContentProviderUserId(name, userId);
        ProviderInfo cpi2 = null;
        boolean providerRunning3 = false;
        if (token == null || !(token instanceof AwareAppStartBinder)) {
            callingUid2 = callingUid;
            token2 = token;
            iBinder = null;
            isAwareMimeTypeBinder = false;
        } else {
            AwareAppStartBinder awareAppStartBinder = (AwareAppStartBinder) token;
            ?? r52 = awareAppStartBinder.callingPid;
            int callingUid5 = awareAppStartBinder.callingUid;
            token2 = awareAppStartBinder.tokenRaw;
            iBinder = r52;
            isAwareMimeTypeBinder = true;
            callingUid2 = callingUid5;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long startTime2 = SystemClock.uptimeMillis();
                if (caller != null) {
                    try {
                        ProcessRecord r4 = getRecordForAppLocked(caller);
                        if (r4 != null) {
                            r = r4;
                        } else {
                            throw new SecurityException("Unable to find app for caller " + caller + " (pid=" + Binder.getCallingPid() + ") when getting content provider " + name);
                        }
                    } catch (Throwable th8) {
                        th = th8;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th9) {
                                th = th9;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } else {
                    r = null;
                }
                checkTime(startTime2, "getContentProviderImpl: getProviderByName");
                ContentProviderRecord cpr6 = this.mProviderMap.getProviderByName(name, userId8);
                ProviderInfo cpi3 = null;
                if (cpr6 != null || userId8 == 0) {
                    cpr = cpr6;
                    userId8 = userId8;
                    checkCrossUser = true;
                } else {
                    try {
                        ContentProviderRecord cpr7 = this.mProviderMap.getProviderByName(name, 0);
                        if (cpr7 != null) {
                            cpi2 = cpr7.info;
                            try {
                                if (!isSingleton(cpi2.processName, cpi2.applicationInfo, cpi2.name, cpi2.flags) || !isValidSingletonCall(r.uid, cpi2.applicationInfo.uid)) {
                                    cpi2 = null;
                                    checkCrossUser = true;
                                    cpr = null;
                                    userId8 = userId8;
                                } else {
                                    userId8 = 0;
                                    checkCrossUser = false;
                                    cpr = cpr7;
                                }
                            } catch (Throwable th10) {
                                th = th10;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            checkCrossUser = true;
                            cpr = cpr7;
                        }
                    } catch (Throwable th11) {
                        th = th11;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                if (cpr != null) {
                    try {
                        if (cpr.proc != null) {
                            providerRunning3 = !cpr.proc.killed;
                            if (cpr.proc.killed && cpr.proc.killedByAm) {
                                checkTime(startTime2, "getContentProviderImpl: before appDied (killedByAm)");
                                long iden = Binder.clearCallingIdentity();
                                try {
                                    appDiedLocked(cpr.proc);
                                    Binder.restoreCallingIdentity(iden);
                                    checkTime(startTime2, "getContentProviderImpl: after appDied (killedByAm)");
                                } catch (Throwable th12) {
                                    Binder.restoreCallingIdentity(iden);
                                    throw th12;
                                }
                            }
                        }
                    } catch (Throwable th13) {
                        th = th13;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                if (providerRunning3) {
                    try {
                        ProviderInfo cpi4 = cpr.info;
                        if (r != null) {
                            try {
                                if (cpr.canRunHere(r)) {
                                    String checkContentProviderAssociation = checkContentProviderAssociation(r, callingUid2, cpi4);
                                    String msg2 = checkContentProviderAssociation;
                                    if (checkContentProviderAssociation == null) {
                                        checkTime(startTime2, "getContentProviderImpl: before checkContentProviderPermission");
                                        if (cpi4 != null) {
                                            try {
                                                String checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi4, r, userId8, checkCrossUser);
                                                msg2 = checkContentProviderPermissionLocked;
                                                if (checkContentProviderPermissionLocked != null) {
                                                    throw new SecurityException(msg2);
                                                }
                                            } catch (Throwable th14) {
                                                th7 = th14;
                                                th = th7;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        }
                                        checkTime(startTime2, "getContentProviderImpl: after checkContentProviderPermission");
                                        if (cpi4 != null) {
                                            if (this.mHwAMSEx.shouldPreventStartProvider(cpi4, userId8, r.uid, r.pid, r, false)) {
                                                resetPriorityAfterLockedSection();
                                                return null;
                                            }
                                        }
                                        ContentProviderHolder holder = cpr.newHolder(null);
                                        holder.provider = null;
                                        resetPriorityAfterLockedSection();
                                        return holder;
                                    }
                                    throw new SecurityException("Content provider lookup " + cpr.name.flattenToShortString() + " failed: association not allowed with package " + msg2);
                                }
                            } catch (Throwable th15) {
                                th7 = th15;
                                th = th7;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        try {
                            if (AppGlobals.getPackageManager().resolveContentProvider(name, 0, userId8) == null) {
                                resetPriorityAfterLockedSection();
                                return null;
                            }
                            try {
                                String msg3 = checkContentProviderAssociation(r, callingUid2, cpi4);
                                if (msg3 == null) {
                                    checkTime(startTime2, "getContentProviderImpl: before checkContentProviderPermission");
                                    String msg4 = checkContentProviderPermissionLocked(cpi4, r, userId8, checkCrossUser);
                                    if (msg4 == null) {
                                        checkTime(startTime2, "getContentProviderImpl: after checkContentProviderPermission");
                                        long origId = Binder.clearCallingIdentity();
                                        checkTime(startTime2, "getContentProviderImpl: incProviderCountLocked");
                                        iBinder2 = iBinder;
                                        userId2 = userId8;
                                        callingUid3 = callingUid2;
                                        startTime = startTime2;
                                        try {
                                            conn4 = incProviderCountLocked(r, cpr, token2, callingUid2, callingPackage, callingTag, stable);
                                            if (conn4 != null) {
                                                try {
                                                    if (conn4.stableCount + conn4.unstableCount == 1) {
                                                        if (cpr.proc != null) {
                                                            r2 = r;
                                                            if (r2.setAdj <= 250) {
                                                                checkTime(startTime, "getContentProviderImpl: before updateLruProcess");
                                                                contentProviderHolder = null;
                                                                this.mProcessList.updateLruProcessLocked(cpr.proc, false, null);
                                                                checkTime(startTime, "getContentProviderImpl: after updateLruProcess");
                                                            } else {
                                                                contentProviderHolder = null;
                                                            }
                                                        } else {
                                                            r2 = r;
                                                            contentProviderHolder = null;
                                                        }
                                                        checkTime(startTime, "getContentProviderImpl: before updateOomAdj");
                                                        int verifiedAdj = cpr.proc.verifiedAdj;
                                                        success = updateOomAdjLocked(cpr.proc, true, "updateOomAdj_getProvider");
                                                        if (success && verifiedAdj != cpr.proc.setAdj && !isProcessAliveLocked(cpr.proc)) {
                                                            success = false;
                                                        }
                                                        maybeUpdateProviderUsageStatsLocked(r2, cpr.info.packageName, name);
                                                        checkTime(startTime, "getContentProviderImpl: after updateOomAdj");
                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                            Slog.i(TAG, "Adjust success: " + success);
                                                        }
                                                        if (success) {
                                                            Slog.i(TAG, "Existing provider " + cpr.name.flattenToShortString() + " is crashing; detaching " + r2);
                                                            token6 = token2;
                                                            try {
                                                                boolean lastRef2 = decProviderCountLocked(conn4, cpr, token6, stable);
                                                                checkTime(startTime, "getContentProviderImpl: before appDied");
                                                                appDiedLocked(cpr.proc);
                                                                checkTime(startTime, "getContentProviderImpl: after appDied");
                                                                if (!lastRef2) {
                                                                    resetPriorityAfterLockedSection();
                                                                    return contentProviderHolder;
                                                                }
                                                                conn4 = null;
                                                                lastRef = false;
                                                            } catch (Throwable th16) {
                                                                th = th16;
                                                                while (true) {
                                                                    break;
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                throw th;
                                                            }
                                                        } else {
                                                            token6 = token2;
                                                            cpr.proc.verifiedAdj = cpr.proc.setAdj;
                                                            lastRef = providerRunning3;
                                                        }
                                                        Binder.restoreCallingIdentity(origId);
                                                        conn = conn4;
                                                        providerRunning = lastRef;
                                                        cpi2 = cpi4;
                                                        token3 = token6;
                                                    }
                                                } catch (Throwable th17) {
                                                    th = th17;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                }
                                            }
                                            r2 = r;
                                            contentProviderHolder = null;
                                            try {
                                                checkTime(startTime, "getContentProviderImpl: before updateOomAdj");
                                                int verifiedAdj2 = cpr.proc.verifiedAdj;
                                                success = updateOomAdjLocked(cpr.proc, true, "updateOomAdj_getProvider");
                                                success = false;
                                                maybeUpdateProviderUsageStatsLocked(r2, cpr.info.packageName, name);
                                                checkTime(startTime, "getContentProviderImpl: after updateOomAdj");
                                                if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                }
                                                if (success) {
                                                }
                                            } catch (Throwable th18) {
                                                th = th18;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        } catch (Throwable th19) {
                                            th = th19;
                                            while (true) {
                                                break;
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                        try {
                                            Binder.restoreCallingIdentity(origId);
                                            conn = conn4;
                                            providerRunning = lastRef;
                                            cpi2 = cpi4;
                                            token3 = token6;
                                        } catch (Throwable th20) {
                                            th = th20;
                                            while (true) {
                                                break;
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    } else {
                                        try {
                                            throw new SecurityException(msg4);
                                        } catch (Throwable th21) {
                                            th = th21;
                                            while (true) {
                                                break;
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    }
                                } else {
                                    throw new SecurityException("Content provider lookup " + cpr.name.flattenToShortString() + " failed: association not allowed with package " + msg3);
                                }
                            } catch (Throwable th22) {
                                th = th22;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (RemoteException e) {
                        }
                    } catch (Throwable th23) {
                        th = th23;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } else {
                    userId2 = userId8;
                    token3 = token2;
                    callingUid3 = callingUid2;
                    iBinder2 = iBinder;
                    startTime = startTime2;
                    contentProviderHolder = null;
                    r2 = r;
                    conn = null;
                    providerRunning = providerRunning3;
                }
                if (!providerRunning) {
                    try {
                        checkTime(startTime, "getContentProviderImpl: before resolveContentProvider");
                        userId5 = userId2;
                        try {
                            cpi2 = AppGlobals.getPackageManager().resolveContentProvider(name, 3072, userId5);
                            checkTime(startTime, "getContentProviderImpl: after resolveContentProvider");
                        } catch (RemoteException e2) {
                        }
                    } catch (RemoteException e3) {
                        userId5 = userId2;
                    } catch (Throwable th24) {
                        th = th24;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                    if (cpi2 == null) {
                        try {
                            resetPriorityAfterLockedSection();
                            return contentProviderHolder;
                        } catch (Throwable th25) {
                            th = th25;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else {
                        try {
                            try {
                                if (isSingleton(cpi2.processName, cpi2.applicationInfo, cpi2.name, cpi2.flags)) {
                                    try {
                                        if (isValidSingletonCall(r2.uid, cpi2.applicationInfo.uid)) {
                                            singleton = true;
                                            if (!singleton) {
                                                userId6 = 0;
                                            } else {
                                                userId6 = userId5;
                                            }
                                            cpi2.applicationInfo = getAppInfoForUser(cpi2.applicationInfo, userId6);
                                            checkTime(startTime, "getContentProviderImpl: got app info for user");
                                            msg = checkContentProviderAssociation(r2, callingUid3, cpi2);
                                            if (msg != null) {
                                                checkTime(startTime, "getContentProviderImpl: before checkContentProviderPermission");
                                                String msg5 = checkContentProviderPermissionLocked(cpi2, r2, userId6, !singleton);
                                                if (msg5 == null) {
                                                    checkTime(startTime, "getContentProviderImpl: after checkContentProviderPermission");
                                                    if (isAwareMimeTypeBinder) {
                                                        callingUid3 = callingUid3;
                                                        try {
                                                            synchronized (this.mPidsSelfLocked) {
                                                                try {
                                                                    token4 = token3;
                                                                    r5 = iBinder2;
                                                                    try {
                                                                        callerApp = this.mPidsSelfLocked.get(r5);
                                                                        try {
                                                                        } catch (Throwable th26) {
                                                                            th6 = th26;
                                                                            token3 = r5;
                                                                            throw th6;
                                                                        }
                                                                    } catch (Throwable th27) {
                                                                        th6 = th27;
                                                                        token3 = r5;
                                                                        throw th6;
                                                                    }
                                                                } catch (Throwable th28) {
                                                                    token4 = token3;
                                                                    token3 = iBinder2;
                                                                    th6 = th28;
                                                                    throw th6;
                                                                }
                                                            }
                                                            callingPid = r5;
                                                        } catch (Throwable th29) {
                                                            th = th29;
                                                            while (true) {
                                                                break;
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            throw th;
                                                        }
                                                    } else {
                                                        token4 = token3;
                                                        if (r2 != null) {
                                                            callingPid2 = r2.pid;
                                                        } else {
                                                            try {
                                                                callingPid2 = Binder.getCallingPid();
                                                            } catch (Throwable th30) {
                                                                th = th30;
                                                                while (true) {
                                                                    break;
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                throw th;
                                                            }
                                                        }
                                                        if (r2 != null) {
                                                            try {
                                                                callingUid4 = r2.uid;
                                                            } catch (Throwable th31) {
                                                                th = th31;
                                                            }
                                                        } else {
                                                            try {
                                                                callingUid4 = Binder.getCallingUid();
                                                            } catch (Throwable th32) {
                                                                th = th32;
                                                                while (true) {
                                                                    break;
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                throw th;
                                                            }
                                                        }
                                                        callingPid = callingPid2;
                                                        callingUid3 = callingUid4;
                                                        callerApp = r2;
                                                    }
                                                    try {
                                                        if (this.mHwAMSEx.shouldPreventStartProvider(cpi2, userId6, callingUid3, callingPid, callerApp, true)) {
                                                            try {
                                                                resetPriorityAfterLockedSection();
                                                                return null;
                                                            } catch (Throwable th33) {
                                                                th = th33;
                                                                while (true) {
                                                                    break;
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                throw th;
                                                            }
                                                        } else if (!this.mProcessesReady && !cpi2.processName.equals("system")) {
                                                            throw new IllegalArgumentException("Attempt to launch content provider before system ready");
                                                        } else if (!this.mSystemProvidersInstalled && cpi2.applicationInfo.isSystemApp() && "system".equals(cpi2.processName)) {
                                                            throw new IllegalStateException("Cannot access system provider: '" + cpi2.authority + "' before system providers are installed!");
                                                        } else if (!this.mUserController.isUserRunning(userId6, 0)) {
                                                            Slog.w(TAG, "Unable to launch app " + cpi2.applicationInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + cpi2.applicationInfo.uid + " for provider " + name + ": user " + userId6 + " is stopped");
                                                            resetPriorityAfterLockedSection();
                                                            return null;
                                                        } else {
                                                            ComponentName comp3 = new ComponentName(cpi2.packageName, cpi2.name);
                                                            checkTime(startTime, "getContentProviderImpl: before getProviderByClass");
                                                            ContentProviderRecord cpr8 = this.mProviderMap.getProviderByClass(comp3, userId6);
                                                            checkTime(startTime, "getContentProviderImpl: after getProviderByClass");
                                                            boolean firstClass = cpr8 == null;
                                                            if (firstClass) {
                                                                try {
                                                                    long ident = Binder.clearCallingIdentity();
                                                                    if (!requestTargetProviderPermissionsReviewIfNeededLocked(cpi2, r2, userId6)) {
                                                                        resetPriorityAfterLockedSection();
                                                                        return null;
                                                                    }
                                                                    try {
                                                                        checkTime(startTime, "getContentProviderImpl: before getApplicationInfo");
                                                                        try {
                                                                            ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(cpi2.applicationInfo.packageName, 1024, userId6);
                                                                            checkTime(startTime, "getContentProviderImpl: after getApplicationInfo");
                                                                            if (ai == null) {
                                                                                try {
                                                                                    StringBuilder sb = new StringBuilder();
                                                                                    comp = comp3;
                                                                                    try {
                                                                                        sb.append("No package info for content provider ");
                                                                                        sb.append(cpi2.name);
                                                                                        Slog.w(TAG, sb.toString());
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        resetPriorityAfterLockedSection();
                                                                                        return null;
                                                                                    } catch (RemoteException e4) {
                                                                                        cpi3 = cpi2;
                                                                                        cpr5 = cpr8;
                                                                                        token5 = token4;
                                                                                        c4 = 2;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        cpr2 = cpr5;
                                                                                        checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                        if (r2 != null) {
                                                                                        }
                                                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                        }
                                                                                        N = this.mLaunchingProviders.size();
                                                                                        i = 0;
                                                                                        while (i < N) {
                                                                                            i++;
                                                                                        }
                                                                                        if (i < N) {
                                                                                        }
                                                                                        checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                        if (!firstClass) {
                                                                                        }
                                                                                        this.mProviderMap.putProviderByName(name, cpr3);
                                                                                        conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                                        if (conn3 != null) {
                                                                                        }
                                                                                        conn2 = conn3;
                                                                                        contentProviderHolder2 = contentProviderHolder3;
                                                                                        cpi2 = cpi;
                                                                                        cpr = cpr3;
                                                                                        userId3 = userId7;
                                                                                        checkTime(startTime, "getContentProviderImpl: done!");
                                                                                        grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                                        resetPriorityAfterLockedSection();
                                                                                        long timeout = SystemClock.uptimeMillis() + 20000;
                                                                                        boolean timedOut = false;
                                                                                        synchronized (cpr) {
                                                                                        }
                                                                                    } catch (Throwable th34) {
                                                                                        th5 = th34;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        throw th5;
                                                                                    }
                                                                                } catch (RemoteException e5) {
                                                                                    cpi3 = cpi2;
                                                                                    comp = comp3;
                                                                                    cpr5 = cpr8;
                                                                                    token5 = token4;
                                                                                    c4 = 2;
                                                                                    Binder.restoreCallingIdentity(ident);
                                                                                    cpr2 = cpr5;
                                                                                    checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                    if (r2 != null) {
                                                                                    }
                                                                                    if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                    }
                                                                                    N = this.mLaunchingProviders.size();
                                                                                    i = 0;
                                                                                    while (i < N) {
                                                                                    }
                                                                                    if (i < N) {
                                                                                    }
                                                                                    checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                    if (!firstClass) {
                                                                                    }
                                                                                    this.mProviderMap.putProviderByName(name, cpr3);
                                                                                    conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                                    if (conn3 != null) {
                                                                                    }
                                                                                    conn2 = conn3;
                                                                                    contentProviderHolder2 = contentProviderHolder3;
                                                                                    cpi2 = cpi;
                                                                                    cpr = cpr3;
                                                                                    userId3 = userId7;
                                                                                    checkTime(startTime, "getContentProviderImpl: done!");
                                                                                    grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                                    resetPriorityAfterLockedSection();
                                                                                    long timeout2 = SystemClock.uptimeMillis() + 20000;
                                                                                    boolean timedOut2 = false;
                                                                                    synchronized (cpr) {
                                                                                    }
                                                                                } catch (Throwable th35) {
                                                                                    th5 = th35;
                                                                                    Binder.restoreCallingIdentity(ident);
                                                                                    throw th5;
                                                                                }
                                                                            } else {
                                                                                comp = comp3;
                                                                                try {
                                                                                    try {
                                                                                        cpr5 = cpr8;
                                                                                        c4 = 2;
                                                                                        cpi3 = cpi2;
                                                                                        token5 = token4;
                                                                                        try {
                                                                                            ContentProviderRecord cpr9 = new ContentProviderRecord(this, cpi2, getAppInfoForUser(ai, userId6), comp, singleton);
                                                                                            Binder.restoreCallingIdentity(ident);
                                                                                            cpr2 = cpr9;
                                                                                        } catch (RemoteException e6) {
                                                                                            Binder.restoreCallingIdentity(ident);
                                                                                            cpr2 = cpr5;
                                                                                            checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                            if (r2 != null) {
                                                                                            }
                                                                                            if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                            }
                                                                                            N = this.mLaunchingProviders.size();
                                                                                            i = 0;
                                                                                            while (i < N) {
                                                                                            }
                                                                                            if (i < N) {
                                                                                            }
                                                                                            checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                            if (!firstClass) {
                                                                                            }
                                                                                            this.mProviderMap.putProviderByName(name, cpr3);
                                                                                            conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                                            if (conn3 != null) {
                                                                                            }
                                                                                            conn2 = conn3;
                                                                                            contentProviderHolder2 = contentProviderHolder3;
                                                                                            cpi2 = cpi;
                                                                                            cpr = cpr3;
                                                                                            userId3 = userId7;
                                                                                            checkTime(startTime, "getContentProviderImpl: done!");
                                                                                            grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                                            resetPriorityAfterLockedSection();
                                                                                            long timeout22 = SystemClock.uptimeMillis() + 20000;
                                                                                            boolean timedOut22 = false;
                                                                                            synchronized (cpr) {
                                                                                            }
                                                                                        } catch (Throwable th36) {
                                                                                            th = th36;
                                                                                            while (true) {
                                                                                                break;
                                                                                            }
                                                                                            resetPriorityAfterLockedSection();
                                                                                            throw th;
                                                                                        }
                                                                                    } catch (RemoteException e7) {
                                                                                        cpi3 = cpi2;
                                                                                        cpr5 = cpr8;
                                                                                        token5 = token4;
                                                                                        c4 = 2;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        cpr2 = cpr5;
                                                                                        checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                        if (r2 != null) {
                                                                                        }
                                                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                        }
                                                                                        N = this.mLaunchingProviders.size();
                                                                                        i = 0;
                                                                                        while (i < N) {
                                                                                        }
                                                                                        if (i < N) {
                                                                                        }
                                                                                        checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                        if (!firstClass) {
                                                                                        }
                                                                                        this.mProviderMap.putProviderByName(name, cpr3);
                                                                                        conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                                        if (conn3 != null) {
                                                                                        }
                                                                                        conn2 = conn3;
                                                                                        contentProviderHolder2 = contentProviderHolder3;
                                                                                        cpi2 = cpi;
                                                                                        cpr = cpr3;
                                                                                        userId3 = userId7;
                                                                                        checkTime(startTime, "getContentProviderImpl: done!");
                                                                                        grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                                        resetPriorityAfterLockedSection();
                                                                                        long timeout222 = SystemClock.uptimeMillis() + 20000;
                                                                                        boolean timedOut222 = false;
                                                                                        synchronized (cpr) {
                                                                                        }
                                                                                    } catch (Throwable th37) {
                                                                                        th5 = th37;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        throw th5;
                                                                                    }
                                                                                } catch (RemoteException e8) {
                                                                                    cpi3 = cpi2;
                                                                                    cpr5 = cpr8;
                                                                                    token5 = token4;
                                                                                    c4 = 2;
                                                                                    Binder.restoreCallingIdentity(ident);
                                                                                    cpr2 = cpr5;
                                                                                    checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                    if (r2 != null) {
                                                                                    }
                                                                                    if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                    }
                                                                                    N = this.mLaunchingProviders.size();
                                                                                    i = 0;
                                                                                    while (i < N) {
                                                                                    }
                                                                                    if (i < N) {
                                                                                    }
                                                                                    checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                    if (!firstClass) {
                                                                                    }
                                                                                    this.mProviderMap.putProviderByName(name, cpr3);
                                                                                    conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                                    if (conn3 != null) {
                                                                                    }
                                                                                    conn2 = conn3;
                                                                                    contentProviderHolder2 = contentProviderHolder3;
                                                                                    cpi2 = cpi;
                                                                                    cpr = cpr3;
                                                                                    userId3 = userId7;
                                                                                    checkTime(startTime, "getContentProviderImpl: done!");
                                                                                    grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                                    resetPriorityAfterLockedSection();
                                                                                    long timeout2222 = SystemClock.uptimeMillis() + 20000;
                                                                                    boolean timedOut2222 = false;
                                                                                    synchronized (cpr) {
                                                                                    }
                                                                                } catch (Throwable th38) {
                                                                                    th5 = th38;
                                                                                    Binder.restoreCallingIdentity(ident);
                                                                                    throw th5;
                                                                                }
                                                                            }
                                                                        } catch (RemoteException e9) {
                                                                            cpi3 = cpi2;
                                                                            comp = comp3;
                                                                            cpr5 = cpr8;
                                                                            token5 = token4;
                                                                            c4 = 2;
                                                                            Binder.restoreCallingIdentity(ident);
                                                                            cpr2 = cpr5;
                                                                            checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                            if (r2 != null) {
                                                                            }
                                                                            if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                            }
                                                                            N = this.mLaunchingProviders.size();
                                                                            i = 0;
                                                                            while (i < N) {
                                                                            }
                                                                            if (i < N) {
                                                                            }
                                                                            checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                            if (!firstClass) {
                                                                            }
                                                                            this.mProviderMap.putProviderByName(name, cpr3);
                                                                            conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                            if (conn3 != null) {
                                                                            }
                                                                            conn2 = conn3;
                                                                            contentProviderHolder2 = contentProviderHolder3;
                                                                            cpi2 = cpi;
                                                                            cpr = cpr3;
                                                                            userId3 = userId7;
                                                                            checkTime(startTime, "getContentProviderImpl: done!");
                                                                            grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                            resetPriorityAfterLockedSection();
                                                                            long timeout22222 = SystemClock.uptimeMillis() + 20000;
                                                                            boolean timedOut22222 = false;
                                                                            synchronized (cpr) {
                                                                            }
                                                                        } catch (Throwable th39) {
                                                                            th5 = th39;
                                                                            Binder.restoreCallingIdentity(ident);
                                                                            throw th5;
                                                                        }
                                                                    } catch (RemoteException e10) {
                                                                        cpi3 = cpi2;
                                                                        comp = comp3;
                                                                        cpr5 = cpr8;
                                                                        token5 = token4;
                                                                        c4 = 2;
                                                                        Binder.restoreCallingIdentity(ident);
                                                                        cpr2 = cpr5;
                                                                        checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                        if (r2 != null) {
                                                                        }
                                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                        }
                                                                        N = this.mLaunchingProviders.size();
                                                                        i = 0;
                                                                        while (i < N) {
                                                                        }
                                                                        if (i < N) {
                                                                        }
                                                                        checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                        if (!firstClass) {
                                                                        }
                                                                        this.mProviderMap.putProviderByName(name, cpr3);
                                                                        conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                        if (conn3 != null) {
                                                                        }
                                                                        conn2 = conn3;
                                                                        contentProviderHolder2 = contentProviderHolder3;
                                                                        cpi2 = cpi;
                                                                        cpr = cpr3;
                                                                        userId3 = userId7;
                                                                        checkTime(startTime, "getContentProviderImpl: done!");
                                                                        grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                                                                        resetPriorityAfterLockedSection();
                                                                        long timeout222222 = SystemClock.uptimeMillis() + 20000;
                                                                        boolean timedOut222222 = false;
                                                                        synchronized (cpr) {
                                                                        }
                                                                    } catch (Throwable th40) {
                                                                        th5 = th40;
                                                                        Binder.restoreCallingIdentity(ident);
                                                                        throw th5;
                                                                    }
                                                                } catch (Throwable th41) {
                                                                    th = th41;
                                                                    while (true) {
                                                                        break;
                                                                    }
                                                                    resetPriorityAfterLockedSection();
                                                                    throw th;
                                                                }
                                                            } else {
                                                                cpi3 = cpi2;
                                                                comp = comp3;
                                                                cpr5 = cpr8;
                                                                token5 = token4;
                                                                c4 = 2;
                                                                cpr2 = cpr5;
                                                            }
                                                            try {
                                                                checkTime(startTime, "getContentProviderImpl: now have ContentProviderRecord");
                                                                if (r2 != null || !cpr2.canRunHere(r2)) {
                                                                    if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                        StringBuilder sb2 = new StringBuilder();
                                                                        sb2.append("LAUNCHING REMOTE PROVIDER (myuid ");
                                                                        sb2.append(r2 != null ? Integer.valueOf(r2.uid) : null);
                                                                        sb2.append(" pruid ");
                                                                        sb2.append(cpr2.appInfo.uid);
                                                                        sb2.append("): ");
                                                                        sb2.append(cpr2.info.name);
                                                                        sb2.append(" callers=");
                                                                        sb2.append(Debug.getCallers(6));
                                                                        Slog.w(TAG, sb2.toString());
                                                                    }
                                                                    N = this.mLaunchingProviders.size();
                                                                    i = 0;
                                                                    while (i < N && this.mLaunchingProviders.get(i) != cpr2) {
                                                                        i++;
                                                                    }
                                                                    if (i < N) {
                                                                        long origId2 = Binder.clearCallingIdentity();
                                                                        try {
                                                                            checkTime(startTime, "getContentProviderImpl: before set stopped state");
                                                                            AppGlobals.getPackageManager().setPackageStoppedState(cpr2.appInfo.packageName, false, userId6);
                                                                            checkTime(startTime, "getContentProviderImpl: after set stopped state");
                                                                        } catch (RemoteException e11) {
                                                                        } catch (IllegalArgumentException e12) {
                                                                            Slog.w(TAG, "Failed trying to unstop package " + cpr2.appInfo.packageName + ": " + e12);
                                                                        } catch (Throwable th42) {
                                                                            th4 = th42;
                                                                        }
                                                                        try {
                                                                            checkTime(startTime, "getContentProviderImpl: looking for process record");
                                                                            try {
                                                                                ProcessRecord proc = getProcessRecordLocked(cpi3.processName, cpr2.appInfo.uid, false);
                                                                                if (proc != null) {
                                                                                    try {
                                                                                        if (proc.thread != null && !proc.killed) {
                                                                                            StringBuilder sb3 = new StringBuilder();
                                                                                            try {
                                                                                                sb3.append("Installing in existing process ");
                                                                                                sb3.append(proc);
                                                                                                sb3.append(", pubProviders.size():");
                                                                                                sb3.append(proc.pubProviders.size());
                                                                                                sb3.append(", pubProviders.containsKey(");
                                                                                                sb3.append(cpi3.name);
                                                                                                sb3.append("):");
                                                                                                try {
                                                                                                    sb3.append(proc.pubProviders.containsKey(cpi3.name));
                                                                                                    Slog.d(TAG, sb3.toString());
                                                                                                    if (!proc.pubProviders.containsKey(cpi3.name)) {
                                                                                                        checkTime(startTime, "getContentProviderImpl: scheduling install");
                                                                                                        proc.pubProviders.put(cpi3.name, cpr2);
                                                                                                        try {
                                                                                                            proc.thread.scheduleInstallProvider(cpi3);
                                                                                                        } catch (RemoteException e13) {
                                                                                                        }
                                                                                                        c5 = 2;
                                                                                                    } else {
                                                                                                        c5 = 2;
                                                                                                        if (proc.preloadStatus == 2) {
                                                                                                            try {
                                                                                                                proc.thread.scheduleInstallProvider(cpi3);
                                                                                                            } catch (RemoteException e14) {
                                                                                                                Slog.w(TAG, "Remote exception ", e14);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    c = c5;
                                                                                                    cpr4 = cpr2;
                                                                                                    userId7 = userId6;
                                                                                                    r3 = r2;
                                                                                                    providerRunning2 = providerRunning;
                                                                                                    c2 = 0;
                                                                                                    cpi = cpi3;
                                                                                                    contentProviderHolder3 = null;
                                                                                                    cpr3 = cpr4;
                                                                                                } catch (Throwable th43) {
                                                                                                    th4 = th43;
                                                                                                    Binder.restoreCallingIdentity(origId2);
                                                                                                    throw th4;
                                                                                                }
                                                                                            } catch (Throwable th44) {
                                                                                                th4 = th44;
                                                                                                Binder.restoreCallingIdentity(origId2);
                                                                                                throw th4;
                                                                                            }
                                                                                            try {
                                                                                                cpr3.launchingApp = proc;
                                                                                                this.mLaunchingProviders.add(cpr3);
                                                                                                Binder.restoreCallingIdentity(origId2);
                                                                                            } catch (Throwable th45) {
                                                                                                th4 = th45;
                                                                                                Binder.restoreCallingIdentity(origId2);
                                                                                                throw th4;
                                                                                            }
                                                                                        }
                                                                                    } catch (Throwable th46) {
                                                                                        th4 = th46;
                                                                                        Binder.restoreCallingIdentity(origId2);
                                                                                        throw th4;
                                                                                    }
                                                                                }
                                                                                try {
                                                                                    Slog.i(TAG, "Need to start process " + cpi3.processName + " for provider " + cpi3 + ", callerApp: " + r2);
                                                                                    checkTime(startTime, "getContentProviderImpl: before start process");
                                                                                    str = cpi3.processName;
                                                                                    applicationInfo = cpr2.appInfo;
                                                                                } catch (Throwable th47) {
                                                                                    th4 = th47;
                                                                                    Binder.restoreCallingIdentity(origId2);
                                                                                    throw th4;
                                                                                }
                                                                                try {
                                                                                    try {
                                                                                        HostingRecord hostingRecord = new HostingRecord("content provider", new ComponentName(cpi3.applicationInfo.packageName, cpi3.name));
                                                                                        c = 2;
                                                                                        cpr4 = cpr2;
                                                                                        userId7 = userId6;
                                                                                        r3 = r2;
                                                                                        providerRunning2 = providerRunning;
                                                                                        c2 = 0;
                                                                                        cpi = cpi3;
                                                                                        try {
                                                                                            proc = startProcessLocked(str, applicationInfo, false, 0, hostingRecord, false, false, false);
                                                                                            checkTime(startTime, "getContentProviderImpl: after start process");
                                                                                            if (proc == null) {
                                                                                                try {
                                                                                                    Slog.w(TAG, "Unable to launch app " + cpi.applicationInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + cpi.applicationInfo.uid + " for provider " + name + ": process is bad");
                                                                                                } catch (Throwable th48) {
                                                                                                    th4 = th48;
                                                                                                }
                                                                                                try {
                                                                                                    Binder.restoreCallingIdentity(origId2);
                                                                                                    resetPriorityAfterLockedSection();
                                                                                                    return null;
                                                                                                } catch (Throwable th49) {
                                                                                                    th = th49;
                                                                                                    while (true) {
                                                                                                        break;
                                                                                                    }
                                                                                                    resetPriorityAfterLockedSection();
                                                                                                    throw th;
                                                                                                }
                                                                                            } else {
                                                                                                contentProviderHolder3 = null;
                                                                                                cpr3 = cpr4;
                                                                                                cpr3.launchingApp = proc;
                                                                                                this.mLaunchingProviders.add(cpr3);
                                                                                                Binder.restoreCallingIdentity(origId2);
                                                                                            }
                                                                                        } catch (Throwable th50) {
                                                                                            th4 = th50;
                                                                                            Binder.restoreCallingIdentity(origId2);
                                                                                            throw th4;
                                                                                        }
                                                                                    } catch (Throwable th51) {
                                                                                        th4 = th51;
                                                                                        Binder.restoreCallingIdentity(origId2);
                                                                                        throw th4;
                                                                                    }
                                                                                } catch (Throwable th52) {
                                                                                    th4 = th52;
                                                                                    Binder.restoreCallingIdentity(origId2);
                                                                                    throw th4;
                                                                                }
                                                                            } catch (Throwable th53) {
                                                                                th4 = th53;
                                                                                Binder.restoreCallingIdentity(origId2);
                                                                                throw th4;
                                                                            }
                                                                        } catch (Throwable th54) {
                                                                            th4 = th54;
                                                                            Binder.restoreCallingIdentity(origId2);
                                                                            throw th4;
                                                                        }
                                                                    } else {
                                                                        userId7 = userId6;
                                                                        r3 = r2;
                                                                        c = c4;
                                                                        cpi = cpi3;
                                                                        contentProviderHolder3 = null;
                                                                        cpr3 = cpr2;
                                                                        providerRunning2 = providerRunning;
                                                                        c2 = 0;
                                                                    }
                                                                    checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                    if (!firstClass) {
                                                                        comp2 = comp;
                                                                        this.mProviderMap.putProviderByClass(comp2, cpr3);
                                                                    } else {
                                                                        comp2 = comp;
                                                                    }
                                                                    this.mProviderMap.putProviderByName(name, cpr3);
                                                                    conn3 = incProviderCountLocked(r3, cpr3, token5, callingUid3, callingPackage, callingTag, stable);
                                                                    if (conn3 != null) {
                                                                        try {
                                                                            conn3.waiting = true;
                                                                        } catch (Throwable th55) {
                                                                            th = th55;
                                                                        }
                                                                    }
                                                                    conn2 = conn3;
                                                                    contentProviderHolder2 = contentProviderHolder3;
                                                                    cpi2 = cpi;
                                                                    cpr = cpr3;
                                                                    userId3 = userId7;
                                                                } else {
                                                                    ContentProviderHolder newHolder = cpr2.newHolder(null);
                                                                    resetPriorityAfterLockedSection();
                                                                    return newHolder;
                                                                }
                                                            } catch (Throwable th56) {
                                                                th = th56;
                                                                while (true) {
                                                                    break;
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                throw th;
                                                            }
                                                        }
                                                    } catch (Throwable th57) {
                                                        th = th57;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                } else {
                                                    try {
                                                        throw new SecurityException(msg5);
                                                    } catch (Throwable th58) {
                                                        th = th58;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                }
                                            } else {
                                                throw new SecurityException("Content provider lookup " + name + " failed: association not allowed with package " + msg);
                                            }
                                        }
                                    } catch (Throwable th59) {
                                        th = th59;
                                        while (true) {
                                            break;
                                        }
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                singleton = false;
                                if (!singleton) {
                                }
                                try {
                                    cpi2.applicationInfo = getAppInfoForUser(cpi2.applicationInfo, userId6);
                                    checkTime(startTime, "getContentProviderImpl: got app info for user");
                                } catch (Throwable th60) {
                                    th = th60;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th61) {
                                th = th61;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th62) {
                            th = th62;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                        try {
                            msg = checkContentProviderAssociation(r2, callingUid3, cpi2);
                            if (msg != null) {
                            }
                        } catch (Throwable th63) {
                            th = th63;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } else {
                    contentProviderHolder2 = contentProviderHolder;
                    providerRunning2 = providerRunning;
                    c2 = 0;
                    c = 2;
                    conn2 = conn;
                    userId3 = userId2;
                }
                try {
                    checkTime(startTime, "getContentProviderImpl: done!");
                    grantEphemeralAccessLocked(userId3, contentProviderHolder2, UserHandle.getAppId(cpi2.applicationInfo.uid), UserHandle.getAppId(Binder.getCallingUid()));
                } catch (Throwable th64) {
                    th = th64;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th65) {
                th = th65;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        long timeout2222222 = SystemClock.uptimeMillis() + 20000;
        boolean timedOut2222222 = false;
        synchronized (cpr) {
            while (true) {
                try {
                    if (cpr.provider != null) {
                        break;
                    }
                    try {
                        if (cpr.launchingApp == null) {
                            try {
                                Slog.w(TAG, "Unable to launch app " + cpi2.applicationInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + cpi2.applicationInfo.uid + " for provider " + name + ": launching app became null");
                                Object[] objArr = new Object[4];
                                objArr[c2] = Integer.valueOf(UserHandle.getUserId(cpi2.applicationInfo.uid));
                                objArr[1] = cpi2.applicationInfo.packageName;
                                objArr[c] = Integer.valueOf(cpi2.applicationInfo.uid);
                                objArr[3] = name;
                                EventLog.writeEvent((int) EventLogTags.AM_PROVIDER_LOST_PROCESS, objArr);
                                return contentProviderHolder2;
                            } catch (Throwable th66) {
                                th2 = th66;
                                while (true) {
                                    try {
                                        break;
                                    } catch (Throwable th67) {
                                        th2 = th67;
                                    }
                                }
                                throw th2;
                            }
                        } else {
                            try {
                                userId4 = userId3;
                                try {
                                    long wait = Math.max(0L, timeout2222222 - SystemClock.uptimeMillis());
                                    Slog.v(TAG_MU, "Waiting to start provider " + cpr + " launchingApp=" + cpr.launchingApp + " caller pid= " + Binder.getCallingPid() + " for " + wait + " ms");
                                    if (conn2 != null) {
                                        conn2.waiting = true;
                                    }
                                    cpr.wait(wait);
                                    if (cpr.provider == null) {
                                        break;
                                    }
                                    if (conn2 != null) {
                                        conn2.waiting = false;
                                        c3 = 0;
                                    } else {
                                        c3 = 0;
                                    }
                                    c2 = c3;
                                    userId3 = userId4;
                                    contentProviderHolder2 = null;
                                } catch (InterruptedException e15) {
                                    if (conn2 != null) {
                                    }
                                    c2 = c3;
                                    userId3 = userId4;
                                    contentProviderHolder2 = null;
                                } catch (Throwable th68) {
                                    th2 = th68;
                                    while (true) {
                                        break;
                                    }
                                    throw th2;
                                }
                            } catch (InterruptedException e16) {
                                userId4 = userId3;
                                if (conn2 != null) {
                                }
                                c2 = c3;
                                userId3 = userId4;
                                contentProviderHolder2 = null;
                            } catch (Throwable th69) {
                                Throwable th70 = th69;
                                if (conn2 != null) {
                                }
                                throw th70;
                            }
                        }
                    } catch (Throwable th71) {
                        th2 = th71;
                        while (true) {
                            break;
                        }
                        throw th2;
                    }
                } catch (Throwable th72) {
                    th2 = th72;
                    while (true) {
                        break;
                    }
                    throw th2;
                }
            }
            try {
            } catch (Throwable th73) {
                th2 = th73;
                while (true) {
                    break;
                }
                throw th2;
            }
        }
        if (timedOut2222222) {
            String callerName = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    try {
                        ProcessRecord record = this.mProcessList.getLRURecordForAppLocked(caller);
                        if (record != null) {
                            try {
                                callerName = record.processName;
                            } catch (Throwable th74) {
                                th3 = th74;
                                while (true) {
                                    try {
                                        break;
                                    } catch (Throwable th75) {
                                        th3 = th75;
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                throw th3;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        Slog.wtf(TAG, "Timeout waiting for provider " + cpi2.applicationInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + cpi2.applicationInfo.uid + " for provider " + name + " providerRunning=" + providerRunning2 + " caller=" + callerName + SliceClientPermissions.SliceAuthority.DELIMITER + Binder.getCallingUid());
                        return null;
                    } catch (Throwable th76) {
                        th3 = th76;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th3;
                    }
                } catch (Throwable th77) {
                    th3 = th77;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th3;
                }
            }
        } else {
            Slog.v(TAG, "Successfully start provider " + cpr + " launchingApp=" + cpr.launchingApp + " caller pid= " + Binder.getCallingPid());
            return cpr.newHolder(conn2);
        }
    }

    /* access modifiers changed from: private */
    public static final class StartActivityRunnable implements Runnable {
        private final Context mContext;
        private final Intent mIntent;
        private final UserHandle mUserHandle;

        StartActivityRunnable(Context context, Intent intent, UserHandle userHandle) {
            this.mContext = context;
            this.mIntent = intent;
            this.mUserHandle = userHandle;
        }

        @Override // java.lang.Runnable
        public void run() {
            this.mContext.startActivityAsUser(this.mIntent, this.mUserHandle);
        }
    }

    private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi, ProcessRecord r, int userId) {
        boolean callerForeground = true;
        if (!getPackageManagerInternalLocked().isPermissionsReviewRequired(cpi.packageName, userId)) {
            return true;
        }
        if (r != null && r.setSchedGroup == 0) {
            callerForeground = false;
        }
        if (!callerForeground) {
            Slog.w(TAG, "u" + userId + " Instantiating a provider in package" + cpi.packageName + " requires a permissions review");
            return false;
        }
        Intent intent = new Intent("android.intent.action.REVIEW_PERMISSIONS");
        intent.addFlags(276824064);
        intent.putExtra("android.intent.extra.PACKAGE_NAME", cpi.packageName);
        if (ActivityManagerDebugConfig.DEBUG_PERMISSIONS_REVIEW) {
            Slog.i(TAG, "u" + userId + " Launching permission review for package " + cpi.packageName);
        }
        this.mHandler.post(new StartActivityRunnable(this.mContext, intent, new UserHandle(userId)));
        return false;
    }

    @VisibleForTesting
    public IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    @VisibleForTesting
    public PackageManagerInternal getPackageManagerInternalLocked() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    public final ContentProviderHolder getContentProvider(IApplicationThread caller, String callingPackage, String name, int userId, boolean stable) {
        enforceNotIsolatedCaller("getContentProvider");
        if (caller != null) {
            int callingUid = Binder.getCallingUid();
            if (callingPackage == null || this.mAppOpsService.checkPackage(callingUid, callingPackage) == 0) {
                return getContentProviderImpl(caller, name, null, callingUid, callingPackage, null, stable, userId);
            }
            throw new SecurityException("Given calling package " + callingPackage + " does not match caller's uid " + callingUid);
        }
        String msg = "null IApplicationThread when getting content provider " + name;
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public ContentProviderHolder getContentProviderExternal(String name, int userId, IBinder token, String tag) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
        return getContentProviderExternalUnchecked(name, token, Binder.getCallingUid(), tag != null ? tag : "*external*", this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "getContentProvider", null));
    }

    private ContentProviderHolder getContentProviderExternalUnchecked(String name, IBinder token, int callingUid, String callingTag, int userId) {
        return getContentProviderImpl(null, name, token, callingUid, null, callingTag, true, userId);
    }

    /* JADX INFO: finally extract failed */
    public void removeContentProvider(IBinder connection, boolean stable) {
        enforceNotIsolatedCaller("removeContentProvider");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ContentProviderConnection conn = (ContentProviderConnection) connection;
                    if (conn != null) {
                        try {
                            if (decProviderCountLocked(conn, null, null, stable)) {
                                updateOomAdjLocked("updateOomAdj_removeProvider");
                            }
                        } catch (Throwable th) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else {
                        throw new NullPointerException("connection is null");
                    }
                } catch (ClassCastException e) {
                    String msg = "removeContentProvider: " + connection + " not a ContentProviderConnection";
                    Slog.w(TAG, msg);
                    throw new IllegalArgumentException(msg);
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    @Deprecated
    public void removeContentProviderExternal(String name, IBinder token) {
        removeContentProviderExternalAsUser(name, token, UserHandle.getCallingUserId());
    }

    public void removeContentProviderExternalAsUser(String name, IBinder token, int userId) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
        long ident = Binder.clearCallingIdentity();
        try {
            removeContentProviderExternalUnchecked(name, token, userId);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId) {
        int userId2 = this.mHwAMSEx.getContentProviderUserId(name, userId);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ContentProviderRecord cpr = this.mProviderMap.getProviderByName(name, userId2);
                if (cpr == null) {
                    if (ActivityManagerDebugConfig.DEBUG_ALL) {
                        Slog.v(TAG, name + " content provider not found in providers list");
                    }
                    return;
                }
                ContentProviderRecord localCpr = this.mProviderMap.getProviderByClass(new ComponentName(cpr.info.packageName, cpr.info.name), userId2);
                if (!localCpr.hasExternalProcessHandles()) {
                    Slog.e(TAG, "Attmpt to remove content provider: " + localCpr + " with no external references.");
                } else if (localCpr.removeExternalProcessHandleLocked(token)) {
                    updateOomAdjLocked("updateOomAdj_removeProvider");
                } else {
                    Slog.e(TAG, "Attmpt to remove content provider " + localCpr + " with no external reference for token: " + token + ".");
                }
                resetPriorityAfterLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void publishContentProviders(IApplicationThread caller, List<ContentProviderHolder> providers) {
        if (providers != null) {
            enforceNotIsolatedCaller("publishContentProviders");
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord r = getRecordForAppLocked(caller);
                    if (r != null) {
                        if (ActivityManagerDebugConfig.DEBUG_MU) {
                            Slog.v(TAG_MU, "ProcessRecord uid = " + r.uid);
                        }
                        long origId = Binder.clearCallingIdentity();
                        int N = providers.size();
                        Flog.i(103, "publishContentProviders app: " + r + ", providers.size: " + N);
                        for (int i = 0; i < N; i++) {
                            ContentProviderHolder src = providers.get(i);
                            if (!(src == null || src.info == null)) {
                                if (src.provider != null) {
                                    ContentProviderRecord dst = r.pubProviders.get(src.info.name);
                                    if (dst == null) {
                                        continue;
                                    } else {
                                        if (ActivityManagerDebugConfig.DEBUG_MU) {
                                            Slog.v(TAG_MU, "ContentProviderRecord uid = " + dst.uid);
                                        }
                                        this.mProviderMap.putProviderByClass(new ComponentName(dst.info.packageName, dst.info.name), dst);
                                        String[] names = dst.info.authority.split(";");
                                        for (String str : names) {
                                            this.mProviderMap.putProviderByName(str, dst);
                                        }
                                        int j = 0;
                                        boolean wasInLaunchingProviders = false;
                                        int launchingCount = this.mLaunchingProviders.size();
                                        while (j < launchingCount) {
                                            if (this.mLaunchingProviders.get(j) == dst) {
                                                this.mLaunchingProviders.remove(j);
                                                wasInLaunchingProviders = true;
                                                j--;
                                                launchingCount--;
                                            }
                                            j++;
                                        }
                                        if (wasInLaunchingProviders) {
                                            this.mHandler.removeMessages(57, r);
                                        }
                                        r.addPackage(dst.info.applicationInfo.packageName, dst.info.applicationInfo.longVersionCode, this.mProcessStats);
                                        synchronized (dst) {
                                            dst.provider = src.provider;
                                            dst.setProcess(r);
                                            dst.notifyAll();
                                        }
                                        updateOomAdjLocked(r, true, "updateOomAdj_getProvider");
                                        maybeUpdateProviderUsageStatsLocked(r, src.info.packageName, src.info.authority);
                                    }
                                }
                            }
                        }
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append("Unable to find app for caller ");
                    sb.append(caller);
                    sb.append(" (pid=");
                    sb.append(Binder.getCallingPid());
                    sb.append(") when publishing content providers");
                    throw new SecurityException(sb.toString());
                } catch (Throwable th) {
                    th = th;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public boolean refContentProvider(IBinder connection, int stable, int unstable) {
        boolean z;
        try {
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (stable > 0) {
                            conn.numStableIncs += stable;
                        }
                        int stable2 = stable + conn.stableCount;
                        if (stable2 >= 0) {
                            if (unstable > 0) {
                                conn.numUnstableIncs += unstable;
                            }
                            int unstable2 = unstable + conn.unstableCount;
                            if (unstable2 < 0) {
                                throw new IllegalStateException("unstableCount < 0: " + unstable2);
                            } else if (stable2 + unstable2 > 0) {
                                conn.stableCount = stable2;
                                conn.unstableCount = unstable2;
                                z = !conn.dead;
                            } else {
                                throw new IllegalStateException("ref counts can't go to zero here: stable=" + stable2 + " unstable=" + unstable2);
                            }
                        } else {
                            throw new IllegalStateException("stableCount < 0: " + stable2);
                        }
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                return z;
            }
            throw new NullPointerException("connection is null");
        } catch (ClassCastException e) {
            String msg = "refContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        }
    }

    public void unstableProviderDied(IBinder connection) {
        IContentProvider provider;
        try {
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        provider = conn.provider.provider;
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                if (provider != null) {
                    if (provider.asBinder().pingBinder()) {
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                Slog.w(TAG, "unstableProviderDied: caller " + Binder.getCallingUid() + " says " + conn + " died, but we don't agree");
                            } finally {
                                resetPriorityAfterLockedSection();
                            }
                        }
                        return;
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            if (conn.provider.provider == provider) {
                                ProcessRecord proc = conn.provider.proc;
                                if (proc == null || proc.thread == null) {
                                    resetPriorityAfterLockedSection();
                                    return;
                                }
                                reportUidInfoMessageLocked(TAG, "Process " + proc.processName + " (pid " + proc.pid + ") early provider death", proc.info.uid);
                                long ident = Binder.clearCallingIdentity();
                                try {
                                    appDiedLocked(proc);
                                    resetPriorityAfterLockedSection();
                                } finally {
                                    Binder.restoreCallingIdentity(ident);
                                }
                            }
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                }
            } else {
                throw new NullPointerException("connection is null");
            }
        } catch (ClassCastException e) {
            String msg = "refContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        }
    }

    public void appNotRespondingViaProvider(IBinder connection) {
        enforceCallingPermission("android.permission.REMOVE_TASKS", "appNotRespondingViaProvider()");
        ContentProviderConnection conn = (ContentProviderConnection) connection;
        if (conn == null) {
            Slog.w(TAG, "ContentProviderConnection is null");
            return;
        }
        final ProcessRecord host = conn.provider.proc;
        if (host == null) {
            Slog.w(TAG, "Failed to find hosting ProcessRecord");
        } else {
            this.mHandler.post(new Runnable() {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass14 */

                @Override // java.lang.Runnable
                public void run() {
                    host.appNotResponding(null, null, null, null, false, "ContentProvider not responding");
                }
            });
        }
    }

    /* JADX INFO: finally extract failed */
    public final void installSystemProviders() {
        List<ProviderInfo> providers;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                providers = generateApplicationProvidersLocked((ProcessRecord) this.mProcessList.mProcessNames.get("system", 1000));
                if (providers != null) {
                    for (int i = providers.size() - 1; i >= 0; i--) {
                        ProviderInfo pi = providers.get(i);
                        if ((pi.applicationInfo.flags & 1) == 0) {
                            Slog.w(TAG, "Not installing system proc provider " + pi.name + ": not system .apk");
                            providers.remove(i);
                        }
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        if (providers != null) {
            this.mSystemThread.installSystemProviders(providers);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mSystemProvidersInstalled = true;
                Slog.i(TAG, "installSystemProviders success");
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        this.mConstants.start(this.mContext.getContentResolver());
        this.mCoreSettingsObserver = new CoreSettingsObserver(this);
        this.mActivityTaskManager.installSystemProviders();
        this.mDevelopmentSettingsObserver = new DevelopmentSettingsObserver();
        SettingsToPropertiesMapper.start(this.mContext.getContentResolver());
        this.mOomAdjuster.initSettings();
        RescueParty.onSettingsProviderPublished(this.mContext);
    }

    /* access modifiers changed from: package-private */
    public void startPersistentApps(int matchFlags) {
        if (this.mFactoryTest != 1) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (ApplicationInfo app : AppGlobals.getPackageManager().getPersistentApplications(matchFlags | 1024).getList()) {
                        if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(app.packageName)) {
                            addAppLocked(app, null, false, null);
                        }
                    }
                } catch (RemoteException e) {
                }
                try {
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x00bf A[Catch:{ RemoteException -> 0x0113, SecurityException -> 0x0111 }] */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x00cd A[ADDED_TO_REGION, Catch:{ RemoteException -> 0x0113, SecurityException -> 0x0111 }] */
    public void installEncryptionUnawareProviders(int userId) {
        Throwable th;
        int NA;
        SparseArray<ProcessRecord> apps;
        int NP;
        int matchFlags;
        int NA2;
        SparseArray<ProcessRecord> apps2;
        int NP2;
        int matchFlags2;
        boolean processMatch;
        boolean userMatch;
        int i = userId;
        int matchFlags3 = 262152;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int NP3 = this.mProcessList.mProcessNames.getMap().size();
                int ip = 0;
                while (ip < NP3) {
                    SparseArray<ProcessRecord> apps3 = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(ip);
                    int NA3 = apps3.size();
                    int ia = 0;
                    while (ia < NA3) {
                        ProcessRecord app = apps3.valueAt(ia);
                        if (app.userId != i || app.thread == null) {
                            matchFlags = matchFlags3;
                            NP = NP3;
                            apps = apps3;
                            NA = NA3;
                        } else if (app.unlocked) {
                            matchFlags = matchFlags3;
                            NP = NP3;
                            apps = apps3;
                            NA = NA3;
                        } else {
                            int NG = app.pkgList.size();
                            int ig = 0;
                            while (ig < NG) {
                                try {
                                    String pkgName = app.pkgList.keyAt(ig);
                                    PackageInfo pkgInfo = AppGlobals.getPackageManager().getPackageInfo(pkgName, 262152, i);
                                    if (pkgInfo == null || ArrayUtils.isEmpty(pkgInfo.providers)) {
                                        matchFlags2 = matchFlags3;
                                        NP2 = NP3;
                                        apps2 = apps3;
                                        NA2 = NA3;
                                        ig++;
                                        i = userId;
                                        matchFlags3 = matchFlags2;
                                        NP3 = NP2;
                                        apps3 = apps2;
                                        NA3 = NA2;
                                    } else {
                                        ProviderInfo[] providerInfoArr = pkgInfo.providers;
                                        int length = providerInfoArr.length;
                                        int i2 = 0;
                                        while (i2 < length) {
                                            ProviderInfo pi = providerInfoArr[i2];
                                            matchFlags2 = matchFlags3;
                                            try {
                                                if (!Objects.equals(pi.processName, app.processName)) {
                                                    try {
                                                        if (!pi.multiprocess) {
                                                            processMatch = false;
                                                            NP2 = NP3;
                                                            apps2 = apps3;
                                                            NA2 = NA3;
                                                            try {
                                                                if (isSingleton(pi.processName, pi.applicationInfo, pi.name, pi.flags)) {
                                                                    if (app.userId != 0) {
                                                                        userMatch = false;
                                                                        if (processMatch || !userMatch) {
                                                                            Log.v(TAG, "Skipping " + pi);
                                                                        } else {
                                                                            Log.v(TAG, "Installing " + pi);
                                                                            app.thread.scheduleInstallProvider(pi);
                                                                        }
                                                                        i2++;
                                                                        pkgName = pkgName;
                                                                        matchFlags3 = matchFlags2;
                                                                        NP3 = NP2;
                                                                        apps3 = apps2;
                                                                        NA3 = NA2;
                                                                    }
                                                                }
                                                                userMatch = true;
                                                                if (processMatch) {
                                                                }
                                                                Log.v(TAG, "Skipping " + pi);
                                                                i2++;
                                                                pkgName = pkgName;
                                                                matchFlags3 = matchFlags2;
                                                                NP3 = NP2;
                                                                apps3 = apps2;
                                                                NA3 = NA2;
                                                            } catch (RemoteException e) {
                                                            } catch (SecurityException e2) {
                                                                Log.e(TAG, "Catch a security exception to protect the system process");
                                                                ig++;
                                                                i = userId;
                                                                matchFlags3 = matchFlags2;
                                                                NP3 = NP2;
                                                                apps3 = apps2;
                                                                NA3 = NA2;
                                                            }
                                                        }
                                                    } catch (RemoteException e3) {
                                                        NP2 = NP3;
                                                        apps2 = apps3;
                                                        NA2 = NA3;
                                                    } catch (SecurityException e4) {
                                                        NP2 = NP3;
                                                        apps2 = apps3;
                                                        NA2 = NA3;
                                                        Log.e(TAG, "Catch a security exception to protect the system process");
                                                        ig++;
                                                        i = userId;
                                                        matchFlags3 = matchFlags2;
                                                        NP3 = NP2;
                                                        apps3 = apps2;
                                                        NA3 = NA2;
                                                    }
                                                }
                                                processMatch = true;
                                                NP2 = NP3;
                                                try {
                                                    apps2 = apps3;
                                                } catch (RemoteException e5) {
                                                    apps2 = apps3;
                                                    NA2 = NA3;
                                                } catch (SecurityException e6) {
                                                    apps2 = apps3;
                                                    NA2 = NA3;
                                                    Log.e(TAG, "Catch a security exception to protect the system process");
                                                    ig++;
                                                    i = userId;
                                                    matchFlags3 = matchFlags2;
                                                    NP3 = NP2;
                                                    apps3 = apps2;
                                                    NA3 = NA2;
                                                }
                                            } catch (RemoteException e7) {
                                                NP2 = NP3;
                                                apps2 = apps3;
                                                NA2 = NA3;
                                            } catch (SecurityException e8) {
                                                NP2 = NP3;
                                                apps2 = apps3;
                                                NA2 = NA3;
                                                Log.e(TAG, "Catch a security exception to protect the system process");
                                                ig++;
                                                i = userId;
                                                matchFlags3 = matchFlags2;
                                                NP3 = NP2;
                                                apps3 = apps2;
                                                NA3 = NA2;
                                            }
                                            try {
                                                NA2 = NA3;
                                                if (isSingleton(pi.processName, pi.applicationInfo, pi.name, pi.flags)) {
                                                }
                                                userMatch = true;
                                                if (processMatch) {
                                                }
                                                Log.v(TAG, "Skipping " + pi);
                                                i2++;
                                                pkgName = pkgName;
                                                matchFlags3 = matchFlags2;
                                                NP3 = NP2;
                                                apps3 = apps2;
                                                NA3 = NA2;
                                            } catch (RemoteException e9) {
                                                NA2 = NA3;
                                            } catch (SecurityException e10) {
                                                NA2 = NA3;
                                                Log.e(TAG, "Catch a security exception to protect the system process");
                                                ig++;
                                                i = userId;
                                                matchFlags3 = matchFlags2;
                                                NP3 = NP2;
                                                apps3 = apps2;
                                                NA3 = NA2;
                                            }
                                        }
                                        matchFlags2 = matchFlags3;
                                        NP2 = NP3;
                                        apps2 = apps3;
                                        NA2 = NA3;
                                        ig++;
                                        i = userId;
                                        matchFlags3 = matchFlags2;
                                        NP3 = NP2;
                                        apps3 = apps2;
                                        NA3 = NA2;
                                    }
                                } catch (RemoteException e11) {
                                    matchFlags2 = matchFlags3;
                                    NP2 = NP3;
                                    apps2 = apps3;
                                    NA2 = NA3;
                                } catch (SecurityException e12) {
                                    matchFlags2 = matchFlags3;
                                    NP2 = NP3;
                                    apps2 = apps3;
                                    NA2 = NA3;
                                    Log.e(TAG, "Catch a security exception to protect the system process");
                                } catch (Throwable th2) {
                                    th = th2;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            matchFlags = matchFlags3;
                            NP = NP3;
                            apps = apps3;
                            NA = NA3;
                        }
                        ia++;
                        i = userId;
                        matchFlags3 = matchFlags;
                        NP3 = NP;
                        apps3 = apps;
                        NA3 = NA;
                    }
                    ip++;
                    i = userId;
                }
                resetPriorityAfterLockedSection();
            } catch (Throwable th3) {
                th = th3;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for r19v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r11v2, types: [java.lang.String, android.os.IBinder] */
    /* JADX WARN: Type inference failed for: r11v3 */
    /* JADX WARN: Type inference failed for: r11v4, types: [java.lang.String, android.os.IBinder] */
    /* JADX WARN: Type inference failed for: r11v5 */
    /* JADX WARN: Type inference failed for: r11v8 */
    /* JADX WARN: Type inference failed for: r11v9 */
    /* JADX WARN: Type inference failed for: r11v10 */
    /* JADX WARN: Type inference failed for: r11v11 */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x00b0  */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x00b6 A[SYNTHETIC, Splitter:B:51:0x00b6] */
    /* JADX WARNING: Removed duplicated region for block: B:62:0x00e1  */
    /* JADX WARNING: Removed duplicated region for block: B:64:0x00e7 A[SYNTHETIC, Splitter:B:64:0x00e7] */
    /* JADX WARNING: Removed duplicated region for block: B:73:0x00f9  */
    /* JADX WARNING: Removed duplicated region for block: B:75:0x00ff A[SYNTHETIC, Splitter:B:75:0x00ff] */
    /* JADX WARNING: Unknown variable types count: 2 */
    public String getProviderMimeType(Uri uri, int userId) {
        long ident;
        boolean clearedIdentity;
        IBinder iBinder;
        Throwable th;
        ?? r11;
        RemoteException e;
        ?? r112;
        Exception e2;
        enforceNotIsolatedCaller("getProviderMimeType");
        String name = uri.getAuthority();
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        int userId2 = this.mUserController.unsafeConvertIncomingUser(userId);
        if (canClearIdentity(callingPid, callingUid, userId2)) {
            ident = Binder.clearCallingIdentity();
            clearedIdentity = true;
        } else {
            ident = 0;
            clearedIdentity = false;
        }
        ContentProviderHolder holder = null;
        try {
            IBinder token = new AwareAppStartBinder(callingPid, callingUid, (IBinder) null);
            IBinder iBinder2 = null;
            try {
                ContentProviderHolder holder2 = getContentProviderExternalUnchecked(name, token, callingUid, "*getmimetype*", userId2);
                if (holder2 != null) {
                    try {
                        String type = holder2.provider.getType(uri);
                        if (!clearedIdentity) {
                            ident = Binder.clearCallingIdentity();
                        }
                        try {
                            removeContentProviderExternalUnchecked(name, null, userId2);
                            return type;
                        } finally {
                            Binder.restoreCallingIdentity(ident);
                        }
                    } catch (RemoteException e3) {
                        e = e3;
                        holder = holder2;
                        r11 = iBinder2;
                        Log.w(TAG, "Content provider dead retrieving " + uri, e);
                        if (!clearedIdentity) {
                            ident = Binder.clearCallingIdentity();
                        }
                        if (holder != null) {
                            try {
                                removeContentProviderExternalUnchecked(name, r11, userId2);
                            } catch (Throwable th2) {
                                Binder.restoreCallingIdentity(ident);
                                throw th2;
                            }
                        }
                        Binder.restoreCallingIdentity(ident);
                        return r11;
                    } catch (Exception e4) {
                        e2 = e4;
                        holder = holder2;
                        r112 = iBinder2;
                        try {
                            Log.w(TAG, "Exception while determining type of " + uri, e2);
                            if (!clearedIdentity) {
                                ident = Binder.clearCallingIdentity();
                            }
                            if (holder != null) {
                                try {
                                    removeContentProviderExternalUnchecked(name, r112, userId2);
                                } catch (Throwable th3) {
                                    Binder.restoreCallingIdentity(ident);
                                    throw th3;
                                }
                            }
                            Binder.restoreCallingIdentity(ident);
                            return r112;
                        } catch (Throwable th4) {
                            th = th4;
                            iBinder = r112;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        holder = holder2;
                        iBinder = iBinder2;
                        if (!clearedIdentity) {
                            ident = Binder.clearCallingIdentity();
                        }
                        if (holder != null) {
                            try {
                                removeContentProviderExternalUnchecked(name, iBinder, userId2);
                            } catch (Throwable th6) {
                                Binder.restoreCallingIdentity(ident);
                                throw th6;
                            }
                        }
                        Binder.restoreCallingIdentity(ident);
                        throw th;
                    }
                } else {
                    if (!clearedIdentity) {
                        ident = Binder.clearCallingIdentity();
                    }
                    if (holder2 != null) {
                        try {
                            removeContentProviderExternalUnchecked(name, null, userId2);
                        } catch (Throwable th7) {
                            Binder.restoreCallingIdentity(ident);
                            throw th7;
                        }
                    }
                    Binder.restoreCallingIdentity(ident);
                    return null;
                }
            } catch (RemoteException e5) {
                e = e5;
                r11 = iBinder2;
                Log.w(TAG, "Content provider dead retrieving " + uri, e);
                if (!clearedIdentity) {
                }
                if (holder != null) {
                }
                Binder.restoreCallingIdentity(ident);
                return r11;
            } catch (Exception e6) {
                e2 = e6;
                r112 = iBinder2;
                Log.w(TAG, "Exception while determining type of " + uri, e2);
                if (!clearedIdentity) {
                }
                if (holder != null) {
                }
                Binder.restoreCallingIdentity(ident);
                return r112;
            }
        } catch (RemoteException e7) {
            e = e7;
            r11 = 0;
            Log.w(TAG, "Content provider dead retrieving " + uri, e);
            if (!clearedIdentity) {
            }
            if (holder != null) {
            }
            Binder.restoreCallingIdentity(ident);
            return r11;
        } catch (Exception e8) {
            e2 = e8;
            r112 = 0;
            Log.w(TAG, "Exception while determining type of " + uri, e2);
            if (!clearedIdentity) {
            }
            if (holder != null) {
            }
            Binder.restoreCallingIdentity(ident);
            return r112;
        } catch (Throwable th8) {
            th = th8;
            iBinder = null;
            if (!clearedIdentity) {
            }
            if (holder != null) {
            }
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    private boolean canClearIdentity(int callingPid, int callingUid, int userId) {
        if (UserHandle.getUserId(callingUid) == userId || checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", callingPid, callingUid, -1, true) == 0 || checkComponentPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingPid, callingUid, -1, true) == 0) {
            return true;
        }
        return false;
    }

    private boolean uidOnBackgroundWhitelist(int uid) {
        int appId = UserHandle.getAppId(uid);
        for (int i : this.mBackgroundAppIdWhitelist) {
            if (appId == i) {
                return true;
            }
        }
        return false;
    }

    public boolean isBackgroundRestricted(String packageName) {
        int callingUid = Binder.getCallingUid();
        try {
            if (AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, UserHandle.getUserId(callingUid)) == callingUid) {
                return isBackgroundRestrictedNoCheck(callingUid, packageName);
            }
            throw new IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + packageName);
        } catch (RemoteException e) {
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isBackgroundRestrictedNoCheck(int uid, String packageName) {
        return this.mAppOpsService.checkOperation(70, uid, packageName) != 0;
    }

    public void backgroundWhitelistUid(int uid) {
        if (Binder.getCallingUid() == 1000) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Adding uid " + uid + " to bg uid whitelist");
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int N = this.mBackgroundAppIdWhitelist.length;
                    int[] newList = new int[(N + 1)];
                    System.arraycopy(this.mBackgroundAppIdWhitelist, 0, newList, 0, N);
                    newList[N] = UserHandle.getAppId(uid);
                    this.mBackgroundAppIdWhitelist = newList;
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only the OS may call backgroundWhitelistUid()");
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        return addAppLocked(info, customProcess, isolated, false, false, abiOverride);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean disableHiddenApiChecks, boolean mountExtStorageFull, String abiOverride) {
        ProcessRecord app;
        ProcessRecord app2;
        if (!isolated) {
            app = getProcessRecordLocked(customProcess != null ? customProcess : info.processName, info.uid, true);
        } else {
            app = null;
        }
        if (app == null) {
            ProcessRecord app3 = this.mProcessList.newProcessRecordLocked(info, customProcess, isolated, 0, new HostingRecord("added application", customProcess != null ? customProcess : info.processName));
            this.mProcessList.updateLruProcessLocked(app3, false, null);
            updateOomAdjLocked("updateOomAdj_processBegin");
            app2 = app3;
        } else {
            app2 = app;
        }
        try {
            AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, UserHandle.getUserId(app2.uid));
        } catch (RemoteException e) {
        } catch (IllegalArgumentException e2) {
            Slog.w(TAG, "Failed trying to unstop package " + info.packageName + ": " + e2);
        }
        if ((info.flags & 9) == 9) {
            app2.setPersistent(true);
            app2.maxAdj = -800;
        }
        if (app2.thread == null && this.mPersistentStartingProcesses.indexOf(app2) < 0) {
            this.mPersistentStartingProcesses.add(app2);
            this.mProcessList.startProcessLocked(app2, new HostingRecord("added application", customProcess != null ? customProcess : app2.processName), disableHiddenApiChecks, mountExtStorageFull, abiOverride);
        } else if (!this.mPersistentReady && app2.thread != null && "com.android.phone".equals(app2.processName)) {
            Slog.i(TAG, " phone process is running before persist ready");
            Intent intent = new Intent();
            intent.setPackage("com.android.phone");
            intent.setAction("com.android.phone.action.FAKE_BOOT_SERVICE");
            this.mContext.startService(intent);
        }
        return app2;
    }

    public void unhandledBack() {
        this.mActivityTaskManager.unhandledBack();
    }

    public ParcelFileDescriptor openContentUri(String uriString) throws RemoteException {
        enforceNotIsolatedCaller("openContentUri");
        int userId = UserHandle.getCallingUserId();
        Uri uri = Uri.parse(uriString);
        String name = uri.getAuthority();
        ContentProviderHolder cph = getContentProviderExternalUnchecked(name, null, Binder.getCallingUid(), "*opencontent*", userId);
        if (cph != null) {
            Binder token = new Binder();
            sCallerIdentity.set(new Identity(token, Binder.getCallingPid(), Binder.getCallingUid()));
            try {
                return cph.provider.openFile((String) null, uri, "r", (ICancellationSignal) null, token);
            } catch (FileNotFoundException e) {
                return null;
            } finally {
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, null, userId);
            }
        } else {
            Slog.d(TAG, "Failed to get provider for authority '" + name + "'");
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public void reportGlobalUsageEventLocked(int event) {
        this.mUsageStatsService.reportEvent(PackageManagerService.PLATFORM_PACKAGE_NAME, this.mUserController.getCurrentUserId(), event);
        int[] profiles = this.mUserController.getCurrentProfileIds();
        if (profiles != null) {
            for (int i = profiles.length - 1; i >= 0; i--) {
                this.mUsageStatsService.reportEvent((String) null, profiles[i], event);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void reportCurWakefulnessUsageEventLocked() {
        int i;
        if (this.mWakefulness == 1) {
            i = 15;
        } else {
            i = 16;
        }
        reportGlobalUsageEventLocked(i);
    }

    /* access modifiers changed from: package-private */
    public void onWakefulnessChanged(int wakefulness) {
        this.mDAProxy.onWakefulnessChanged(wakefulness);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean isAwake = false;
                boolean wasAwake = this.mWakefulness == 1;
                if (wakefulness == 1) {
                    isAwake = true;
                }
                this.mWakefulness = wakefulness;
                if (wasAwake != isAwake) {
                    this.mWindowManager.onWakefulnessChanged(isAwake);
                    this.mServices.updateScreenStateLocked(isAwake);
                    reportCurWakefulnessUsageEventLocked();
                    this.mActivityTaskManager.onScreenAwakeChanged(isAwake);
                    this.mOomAdjProfiler.onWakefulnessChanged(wakefulness);
                }
                updateOomAdjLocked("updateOomAdj_uiVisibility");
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void notifyCleartextNetwork(int uid, byte[] firstPacket) {
        this.mHandler.obtainMessage(49, uid, 0, firstPacket).sendToTarget();
    }

    public boolean shutdown(int timeout) {
        if (checkCallingPermission("android.permission.SHUTDOWN") == 0) {
            boolean timedout = this.mAtmInternal.shuttingDown(this.mBooted, timeout);
            this.mAppOpsService.shutdown();
            UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
            if (usageStatsManagerInternal != null) {
                usageStatsManagerInternal.prepareShutdown();
            }
            if (IS_TV) {
                Slog.i(TAG, "tv ignore battery shutdown...");
            } else {
                this.mBatteryStatsService.shutdown();
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mProcessStats.shutdownLocked();
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return timedout;
        }
        throw new SecurityException("Requires permission android.permission.SHUTDOWN");
    }

    public void notifyLockedProfile(int userId) {
        this.mAtmInternal.notifyLockedProfile(userId, this.mUserController.getCurrentUserId());
    }

    public void startConfirmDeviceCredentialIntent(Intent intent, Bundle options) {
        this.mAtmInternal.startConfirmDeviceCredentialIntent(intent, options);
    }

    public void stopAppSwitches() {
        this.mActivityTaskManager.stopAppSwitches();
    }

    public void resumeAppSwitches() {
        this.mActivityTaskManager.resumeAppSwitches();
    }

    /* JADX INFO: finally extract failed */
    public void setDebugApp(String packageName, boolean waitForDebugger, boolean persistent) {
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long ident = Binder.clearCallingIdentity();
        boolean z = true;
        if (persistent) {
            try {
                ContentResolver resolver = this.mContext.getContentResolver();
                Settings.Global.putString(resolver, "debug_app", packageName);
                Settings.Global.putInt(resolver, "wait_for_debugger", waitForDebugger ? 1 : 0);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!persistent) {
                    this.mOrigDebugApp = this.mDebugApp;
                    this.mOrigWaitForDebugger = this.mWaitForDebugger;
                }
                this.mDebugApp = packageName;
                this.mWaitForDebugger = waitForDebugger;
                if (persistent) {
                    z = false;
                }
                this.mDebugTransient = z;
                if (packageName != null) {
                    forceStopPackageLocked(packageName, -1, false, false, true, true, false, -1, "set debug app");
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(ident);
    }

    public void setAgentApp(String packageName, String agent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    if (agent != null) {
                        if (this.mAppAgentMap == null) {
                            this.mAppAgentMap = new HashMap();
                        }
                        if (this.mAppAgentMap.size() >= 100) {
                            Slog.e(TAG, "App agent map has too many entries, cannot add " + packageName + SliceClientPermissions.SliceAuthority.DELIMITER + agent);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        this.mAppAgentMap.put(packageName, agent);
                    } else if (this.mAppAgentMap != null) {
                        this.mAppAgentMap.remove(packageName);
                        if (this.mAppAgentMap.isEmpty()) {
                            this.mAppAgentMap = null;
                        }
                    }
                    return;
                }
                throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void setTrackAllocationApp(ApplicationInfo app, String processName) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if ((app.flags & 2) == 0) {
                        throw new SecurityException("Process not debuggable: " + app.packageName);
                    }
                }
                this.mTrackAllocationApp = processName;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if (!app.isProfileableByShell()) {
                        throw new SecurityException("Process not debuggable, and not profileable by shell: " + app.packageName);
                    }
                }
                this.mProfileData.setProfileApp(processName);
                if (!(this.mProfileData.getProfilerInfo() == null || this.mProfileData.getProfilerInfo().profileFd == null)) {
                    try {
                        this.mProfileData.getProfilerInfo().profileFd.close();
                    } catch (IOException e) {
                    }
                }
                this.mProfileData.setProfilerInfo(new ProfilerInfo(profilerInfo));
                this.mProfileType = 0;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void setNativeDebuggingAppLocked(ApplicationInfo app, String processName) {
        if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (app.flags & 2) != 0) {
            this.mNativeDebuggingApp = processName;
            return;
        }
        throw new SecurityException("Process not debuggable: " + app.packageName);
    }

    /* JADX INFO: finally extract failed */
    public void setAlwaysFinish(boolean enabled) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long ident = Binder.clearCallingIdentity();
        try {
            Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", enabled ? 1 : 0);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAlwaysFinishActivities = enabled;
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void setActivityController(IActivityController controller, boolean imAMonkey) {
        Slog.d(TAG, "setActivityController imAMonkey:" + imAMonkey + " callingPid:" + Binder.getCallingPid() + " callingUid:" + Binder.getCallingUid());
        this.mActivityTaskManager.setActivityController(controller, imAMonkey);
    }

    public void setUserIsMonkey(boolean userIsMonkey) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord proc = this.mPidsSelfLocked.get(callingPid);
                    if (proc == null) {
                        throw new SecurityException("Unknown process: " + callingPid);
                    } else if (proc.getActiveInstrumentation() == null || proc.getActiveInstrumentation().mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                Slog.d(TAG, "setUserIsMonkey userIsMonkey:" + userIsMonkey + " callingPid:" + Binder.getCallingPid() + " callingUid:" + Binder.getCallingUid());
                this.mUserIsMonkey = userIsMonkey;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean isUserAMonkey() {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mUserIsMonkey) {
                    if (!this.mActivityTaskManager.isControllerAMonkey()) {
                        z = false;
                    }
                }
                z = true;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    public void requestSystemServerHeapDump() {
        ProcessRecord pr;
        if (!Build.IS_DEBUGGABLE) {
            Slog.wtf(TAG, "requestSystemServerHeapDump called on a user build");
        } else if (Binder.getCallingUid() == 1000) {
            synchronized (this.mPidsSelfLocked) {
                pr = this.mPidsSelfLocked.get(Process.myPid());
            }
            if (pr == null) {
                Slog.w(TAG, "system process not in mPidsSelfLocked: " + Process.myPid());
                return;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    startHeapDumpLocked(pr, true);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new SecurityException("Only the system process is allowed to request a system heap dump");
        }
    }

    @Deprecated
    public void requestBugReport(int bugreportType) {
        String extraOptions;
        if (bugreportType == 0) {
            extraOptions = "bugreportfull";
        } else if (bugreportType == 1) {
            extraOptions = "bugreportplus";
        } else if (bugreportType == 2) {
            extraOptions = "bugreportremote";
        } else if (bugreportType == 3) {
            extraOptions = "bugreportwear";
        } else if (bugreportType == 4) {
            extraOptions = "bugreporttelephony";
        } else if (bugreportType == 5) {
            extraOptions = "bugreportwifi";
        } else {
            throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + bugreportType);
        }
        Slog.i(TAG, extraOptions + " requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        SystemProperties.set("dumpstate.options", extraOptions);
        SystemProperties.set("ctl.start", "bugreport");
    }

    @Deprecated
    private void requestBugReportWithDescription(String shareTitle, String shareDescription, int bugreportType) {
        if (!TextUtils.isEmpty(shareTitle)) {
            if (shareTitle.length() <= 50) {
                if (!TextUtils.isEmpty(shareDescription)) {
                    try {
                        if (shareDescription.getBytes("UTF-8").length <= 91) {
                            SystemProperties.set("dumpstate.options.description", shareDescription);
                        } else {
                            throw new IllegalArgumentException("shareTitle should be less than 91 bytes");
                        }
                    } catch (UnsupportedEncodingException e) {
                        throw new IllegalArgumentException("shareDescription: UnsupportedEncodingException");
                    }
                }
                SystemProperties.set("dumpstate.options.title", shareTitle);
            } else {
                throw new IllegalArgumentException("shareTitle should be less than 50 characters");
            }
        }
        Slog.d(TAG, "Bugreport notification title " + shareTitle + " description " + shareDescription);
        requestBugReport(bugreportType);
    }

    @Deprecated
    public void requestTelephonyBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 4);
    }

    @Deprecated
    public void requestWifiBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 5);
    }

    public void registerProcessObserver(IProcessObserver observer) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.register(observer);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void unregisterProcessObserver(IProcessObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.unregister(observer);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public int getUidProcessState(int uid, String callingPackage) {
        int uidProcStateLocked;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                uidProcStateLocked = this.mProcessList.getUidProcStateLocked(uid);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return uidProcStateLocked;
    }

    public void registerUidObserver(IUidObserver observer, int which, int cutpoint, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.register(observer, new UidObserverRegistration(Binder.getCallingUid(), callingPackage, which, cutpoint));
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void unregisterUidObserver(IUidObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.unregister(observer);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean isUidActive(int uid, String callingPackage) {
        boolean isUidActiveLocked;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isUidActiveLocked = isUidActiveLocked(uid);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return isUidActiveLocked;
    }

    /* access modifiers changed from: package-private */
    public boolean isUidActiveLocked(int uid) {
        UidRecord uidRecord = this.mProcessList.getUidRecordLocked(uid);
        return uidRecord != null && !uidRecord.setIdle;
    }

    public void setPersistentVrThread(int tid) {
        this.mActivityTaskManager.setPersistentVrThread(tid);
    }

    public static boolean scheduleAsRegularPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, 0, 0);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    public static boolean scheduleAsFifoPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, WindowManagerPolicy.COLOR_FADE_LAYER, 1);
            return true;
        } catch (IllegalArgumentException e) {
            if (suppressLogs) {
                return false;
            }
            Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e);
            return false;
        } catch (SecurityException e2) {
            if (suppressLogs) {
                return false;
            }
            Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e2);
            return false;
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isFeatureEnable(int f) {
        return this.mCpusetSwitch && (this.mSubSwitch & f) != 0;
    }

    public void setRenderThread(int tid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int pid = Binder.getCallingPid();
                if (pid == Process.myPid()) {
                    demoteSystemServerRenderThread(tid);
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord proc = this.mPidsSelfLocked.get(pid);
                    if (proc == null || proc.renderThreadTid != 0 || tid <= 0) {
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d("UI_FIFO", "Didn't set thread from setRenderThread? PID: " + pid + ", TID: " + tid + " FIFO: " + this.mUseFifoUiScheduling);
                        }
                    } else if (Process.isThreadInProcess(pid, tid)) {
                        proc.renderThreadTid = tid;
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d("UI_FIFO", "Set RenderThread tid " + tid + " for pid " + pid);
                        }
                        if (proc.getCurrentSchedulingGroup() == 3) {
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.d("UI_FIFO", "Promoting " + tid + "out of band");
                            }
                            if (this.mUseFifoUiScheduling) {
                                Process.setThreadScheduler(proc.renderThreadTid, WindowManagerPolicy.COLOR_FADE_LAYER, 1);
                            } else {
                                if (this.mCpusetSwitch) {
                                    this.mDAProxy.setVipThread(proc.uid, proc.pid, proc.renderThreadTid, true, true);
                                }
                                Process.setThreadPriority(proc.renderThreadTid, -10);
                            }
                            if (isFeatureEnable(1048576)) {
                                this.mHwAMSEx.setRtgThreadToIAware(proc, true);
                            }
                        }
                    } else {
                        throw new IllegalArgumentException("Render thread does not belong to process");
                    }
                }
                resetPriorityAfterLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void demoteSystemServerRenderThread(int tid) {
        Process.setThreadPriority(tid, 10);
    }

    public boolean isVrModePackageEnabled(ComponentName packageName) {
        this.mActivityTaskManager.enforceSystemHasVrFeature();
        return ((VrManagerInternal) LocalServices.getService(VrManagerInternal.class)).hasVrPackage(packageName, UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        return this.mActivityTaskManager.isTopActivityImmersive();
    }

    /* access modifiers changed from: protected */
    public boolean isTaskNotResizeableEx(TaskRecord task, Rect bounds) {
        return false;
    }

    public boolean isTopOfTask(IBinder token) {
        return this.mActivityTaskManager.isTopOfTask(token);
    }

    /* JADX INFO: finally extract failed */
    public void setHasTopUi(boolean hasTopUi) throws RemoteException {
        ProcessRecord pr;
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") == 0) {
            int pid = Binder.getCallingPid();
            long origId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        boolean changed = false;
                        synchronized (this.mPidsSelfLocked) {
                            pr = this.mPidsSelfLocked.get(pid);
                            if (pr == null) {
                                Slog.w(TAG, "setHasTopUi called on unknown pid: " + pid);
                                resetPriorityAfterLockedSection();
                                return;
                            } else if (pr.hasTopUi() != hasTopUi) {
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    Slog.d(TAG, "Setting hasTopUi=" + hasTopUi + " for pid=" + pid);
                                }
                                pr.setHasTopUi(hasTopUi);
                                changed = true;
                            }
                        }
                        if (changed) {
                            updateOomAdjLocked(pr, true, "updateOomAdj_uiVisibility");
                        }
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(origId);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            String msg = "Permission Denial: setHasTopUi() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERNAL_SYSTEM_WINDOW";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
        ProcessRecord pr;
        if (pid == Process.myPid()) {
            Slog.wtf(TAG, "system can't run remote animation");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    pr = this.mPidsSelfLocked.get(pid);
                    if (pr == null) {
                        Slog.w(TAG, "setRunningRemoteAnimation called on unknown pid: " + pid);
                        return;
                    }
                }
                if (runningRemoteAnimation) {
                    if (pr.runningRemoteAnimationNum == 0) {
                        pr.runningRemoteAnimation = true;
                        updateOomAdjLocked(pr, true, "updateOomAdj_uiVisibility");
                    }
                    pr.runningRemoteAnimationNum = (byte) (pr.runningRemoteAnimationNum + 1);
                    this.mHandler.removeMessages(72, pr);
                    Message msg = this.mHandler.obtainMessage(72);
                    msg.obj = pr;
                    this.mHandler.sendMessageDelayed(msg, 1500);
                } else if (pr.runningRemoteAnimationNum > 0) {
                    pr.runningRemoteAnimationNum = (byte) (pr.runningRemoteAnimationNum - 1);
                    if (pr.runningRemoteAnimationNum == 0) {
                        this.mHandler.removeMessages(72, pr);
                        pr.runningRemoteAnimation = false;
                        updateOomAdjLocked(pr, true, "updateOomAdj_uiVisibility");
                    }
                }
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                    Slog.i(TAG, "Try to set runningRemoteAnimation=" + runningRemoteAnimation + " for pid=" + pid + ", runningRemoteAnimationNum=" + ((int) pr.runningRemoteAnimationNum) + ", current running status=" + pr.runningRemoteAnimation);
                }
                resetPriorityAfterLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void enterSafeMode() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException e) {
                    }
                }
                this.mSafeMode = true;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void showSafeModeOverlay() {
        View v = LayoutInflater.from(this.mContext).inflate(17367270, (ViewGroup) null);
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        lp.type = 2015;
        lp.width = -2;
        lp.height = -2;
        lp.gravity = 8388691;
        lp.format = v.getBackground().getOpacity();
        lp.flags = 24;
        lp.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(v, lp);
    }

    public void noteWakeupAlarm(IIntentSender sender, WorkSource workSource, int sourceUid, String sourcePkg, String tag) {
        WorkSource workSource2;
        int sourceUid2;
        int standbyBucket;
        String str;
        String str2;
        if (workSource == null || !workSource.isEmpty()) {
            workSource2 = workSource;
        } else {
            workSource2 = null;
        }
        if (sourceUid > 0 || workSource2 != null) {
            sourceUid2 = sourceUid;
        } else if (sender != null && (sender instanceof PendingIntentRecord)) {
            PendingIntentRecord rec = (PendingIntentRecord) sender;
            sourceUid2 = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
        } else {
            return;
        }
        int standbyBucket2 = 0;
        this.mBatteryStatsService.noteWakupAlarm(sourcePkg, sourceUid2, workSource2, tag);
        if (workSource2 != null) {
            String workSourcePackage = workSource2.getName(0);
            int workSourceUid = workSource2.getAttributionUid();
            if (workSourcePackage == null) {
                workSourcePackage = sourcePkg;
                workSourceUid = sourceUid2;
            }
            UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
            if (usageStatsManagerInternal != null) {
                str2 = ", standbyBucket=";
                str = ", tag=";
                standbyBucket2 = usageStatsManagerInternal.getAppStandbyBucket(workSourcePackage, UserHandle.getUserId(workSourceUid), SystemClock.elapsedRealtime());
            } else {
                str2 = ", standbyBucket=";
                str = ", tag=";
            }
            StatsLog.write(35, workSource2, tag, sourcePkg, standbyBucket2);
            if (ActivityManagerDebugConfig.DEBUG_POWER) {
                Slog.w(TAG, "noteWakeupAlarm[ sourcePkg=" + sourcePkg + ", sourceUid=" + sourceUid2 + ", workSource=" + workSource2 + str + tag + str2 + standbyBucket2 + " wsName=" + workSourcePackage + ")]");
            }
            return;
        }
        UsageStatsManagerInternal usageStatsManagerInternal2 = this.mUsageStatsService;
        if (usageStatsManagerInternal2 != null) {
            standbyBucket = usageStatsManagerInternal2.getAppStandbyBucket(sourcePkg, UserHandle.getUserId(sourceUid2), SystemClock.elapsedRealtime());
        } else {
            standbyBucket = 0;
        }
        StatsLog.write_non_chained(35, sourceUid2, null, tag, sourcePkg, standbyBucket);
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteWakeupAlarm[ sourcePkg=" + sourcePkg + ", sourceUid=" + sourceUid2 + ", workSource=" + workSource2 + ", tag=" + tag + ", standbyBucket=" + standbyBucket + "]");
        }
    }

    public void noteAlarmStart(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteAlarmStart[sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteAlarmStart(tag, workSource, sourceUid);
    }

    public void noteAlarmFinish(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteAlarmFinish[sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteAlarmFinish(tag, workSource, sourceUid);
    }

    public boolean killPids(int[] pids, String pReason, boolean secure) {
        int type;
        if (Binder.getCallingUid() == 1000) {
            String reason = pReason == null ? "Unknown" : pReason;
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int worstType = 0;
                for (int i : pids) {
                    ProcessRecord proc = this.mPidsSelfLocked.get(i);
                    if (proc != null && (type = proc.setAdj) > worstType) {
                        worstType = type;
                    }
                }
                if (worstType < 999 && worstType > 900) {
                    worstType = 900;
                }
                if (!secure && worstType < 500) {
                    worstType = SystemService.PHASE_SYSTEM_SERVICES_READY;
                }
                Slog.w(TAG, "Killing processes " + reason + " at adjustment " + worstType);
                for (int i2 : pids) {
                    ProcessRecord proc2 = this.mPidsSelfLocked.get(i2);
                    if (proc2 != null) {
                        if (proc2.setAdj >= worstType && !proc2.killedByAm) {
                            proc2.kill(reason, true);
                            killed = true;
                        }
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killPids only available to the system");
    }

    public void killUid(int appId, int userId, String reason) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long identity = Binder.clearCallingIdentity();
                try {
                    this.mProcessList.killPackageProcessesLocked(null, appId, userId, -800, false, true, true, true, false, reason != null ? reason : "kill uid");
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean killProcessesBelowForeground(String reason) {
        if (Binder.getCallingUid() == 1000) {
            return killProcessesBelowAdj(0, reason);
        }
        throw new SecurityException("killProcessesBelowForeground() only available to system");
    }

    private boolean killProcessesBelowAdj(int belowAdj, String reason) {
        if (Binder.getCallingUid() == 1000) {
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int size = this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    this.mPidsSelfLocked.keyAt(i);
                    ProcessRecord proc = this.mPidsSelfLocked.valueAt(i);
                    if (proc != null) {
                        if (proc.setAdj > belowAdj && !proc.killedByAm) {
                            proc.kill(reason, true);
                            killed = true;
                        }
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killProcessesBelowAdj() only available to system");
    }

    public void hang(IBinder who, boolean allowRestart) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            IBinder.DeathRecipient death = new IBinder.DeathRecipient() {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass15 */

                @Override // android.os.IBinder.DeathRecipient
                public void binderDied() {
                    synchronized (this) {
                        notifyAll();
                    }
                }
            };
            try {
                who.linkToDeath(death, 0);
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        Watchdog.getInstance().setAllowRestart(allowRestart);
                        Slog.i(TAG, "Hanging system process at request of pid " + Binder.getCallingPid());
                        synchronized (death) {
                            while (who.isBinderAlive()) {
                                try {
                                    death.wait();
                                } catch (InterruptedException e) {
                                }
                            }
                        }
                        Watchdog.getInstance().setAllowRestart(true);
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } catch (RemoteException e2) {
                Slog.w(TAG, "hang: given caller IBinder is already dead.");
            }
        } else {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            Log.i(TAG, "Sending shutdown broadcast...");
            BroadcastReceiver br = new BroadcastReceiver() {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass16 */

                @Override // android.content.BroadcastReceiver
                public void onReceive(Context context, Intent intent) {
                    Log.i(ActivityManagerService.TAG, "Shutting down activity manager...");
                    ActivityManagerService.this.shutdown(10000);
                    Log.i(ActivityManagerService.TAG, "Shutdown complete, restarting!");
                    Process.killProcess(Process.myPid());
                    System.exit(10);
                }
            };
            Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
            intent.addFlags(268435456);
            intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
            br.onReceive(this.mContext, intent);
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    private long getLowRamTimeSinceIdle(long now) {
        long j = this.mLowRamTimeSinceLastIdle;
        long j2 = this.mLowRamStartTime;
        long j3 = 0;
        if (j2 > 0) {
            j3 = now - j2;
        }
        return j + j3;
    }

    public void performIdleMaintenance() {
        boolean z;
        int i;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long now = SystemClock.uptimeMillis();
                    long timeSinceLastIdle = now - this.mLastIdleTime;
                    this.mOomAdjuster.mAppCompact.compactAllSystem();
                    long lowRamSinceLastIdle = getLowRamTimeSinceIdle(now);
                    this.mLastIdleTime = now;
                    long j = 0;
                    this.mLowRamTimeSinceLastIdle = 0;
                    if (this.mLowRamStartTime != 0) {
                        this.mLowRamStartTime = now;
                    }
                    int i2 = 128;
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("Idle maintenance over ");
                    TimeUtils.formatDuration(timeSinceLastIdle, sb);
                    sb.append(" low RAM for ");
                    TimeUtils.formatDuration(lowRamSinceLastIdle, sb);
                    Slog.i(TAG, sb.toString());
                    boolean z2 = true;
                    boolean doKilling = lowRamSinceLastIdle > timeSinceLastIdle / 3;
                    long memoryGrowthThreshold = Math.max((Process.getTotalMemory() / 1000) / SINGLE_DISPATCH_THRESHOLD_MS, (long) JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                    int i3 = this.mProcessList.mLruProcesses.size() - 1;
                    while (i3 >= 0) {
                        ProcessRecord proc = this.mProcessList.mLruProcesses.get(i3);
                        if (proc.notCachedSinceIdle) {
                            if (proc.setProcState < 6 || proc.setProcState > 11) {
                                i = i2;
                                z = z2;
                            } else if (!doKilling || proc.initialIdlePss == j || proc.lastPss <= (proc.initialIdlePss * 3) / 2 || proc.lastPss <= proc.initialIdlePss + memoryGrowthThreshold) {
                                i = i2;
                                z = z2;
                            } else {
                                StringBuilder sb2 = new StringBuilder(i2);
                                sb2.append("Kill");
                                sb2.append(proc.processName);
                                sb2.append(" in idle maint: pss=");
                                sb2.append(proc.lastPss);
                                sb2.append(", swapPss=");
                                sb2.append(proc.lastSwapPss);
                                sb2.append(", initialPss=");
                                sb2.append(proc.initialIdlePss);
                                sb2.append(", period=");
                                TimeUtils.formatDuration(timeSinceLastIdle, sb2);
                                sb2.append(", lowRamPeriod=");
                                TimeUtils.formatDuration(lowRamSinceLastIdle, sb2);
                                Slog.wtfQuiet(TAG, sb2.toString());
                                proc.kill("idle maint (pss " + proc.lastPss + " from " + proc.initialIdlePss + ")", z2);
                                i = i2;
                                z = z2;
                            }
                        } else if (proc.setProcState >= 15 || proc.setProcState < 0) {
                            i = i2;
                            z = z2;
                        } else {
                            proc.notCachedSinceIdle = z2;
                            proc.initialIdlePss = 0;
                            z = z2;
                            i = 128;
                            proc.nextPssTime = ProcessList.computeNextPssTime(proc.setProcState, null, this.mTestPssMode, this.mAtmInternal.isSleeping(), now);
                        }
                        i3--;
                        i2 = i;
                        z2 = z;
                        j = 0;
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    public void sendIdleJobTrigger() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            long ident = Binder.clearCallingIdentity();
            try {
                broadcastIntent(null, new Intent(ACTION_TRIGGER_IDLE).setPackage(PackageManagerService.PLATFORM_PACKAGE_NAME).addFlags(1073741824), null, null, 0, null, null, null, -1, null, false, false, -1);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        } else {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
    }

    private void retrieveSettings() {
        ContentResolver resolver = this.mContext.getContentResolver();
        this.mActivityTaskManager.retrieveSettings(resolver);
        String debugApp = Settings.Global.getString(resolver, "debug_app");
        boolean z = true;
        boolean waitForDebugger = Settings.Global.getInt(resolver, "wait_for_debugger", 0) != 0;
        boolean alwaysFinishActivities = Settings.Global.getInt(resolver, "always_finish_activities", 0) != 0;
        long waitForNetworkTimeoutMs = Settings.Global.getLong(resolver, "network_access_timeout_ms", NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
        this.mHiddenApiBlacklist.registerObserver();
        long pssDeferralMs = DeviceConfig.getLong("activity_manager", ACTIVITY_START_PSS_DEFER_CONFIG, PSS_DEFER_DELAY_MS);
        DeviceConfig.addOnPropertiesChangedListener("activity_manager", ActivityThread.currentApplication().getMainExecutor(), this.mPssDelayConfigListener);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOrigDebugApp = debugApp;
                this.mDebugApp = debugApp;
                this.mOrigWaitForDebugger = waitForDebugger;
                this.mWaitForDebugger = waitForDebugger;
                this.mAlwaysFinishActivities = alwaysFinishActivities;
                Resources res = this.mContext.getResources();
                this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(res.getString(17039791));
                UserController userController = this.mUserController;
                if (res.getBoolean(17891395)) {
                    z = false;
                }
                userController.mUserSwitchUiEnabled = z;
                this.mUserController.mMaxRunningUsers = res.getInteger(17694847);
                this.mUserController.mDelayUserDataLocking = res.getBoolean(17891482);
                this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs;
                this.mPssDeferralTime = pssDeferralMs;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        if (alwaysFinishActivities) {
            setAlwaysFinish(false);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:146:0x033a, code lost:
        r0 = th;
     */
    public void systemReady(Runnable goingCallback, TimingsTraceLog traceLog) {
        Throwable th;
        ArrayList<ProcessRecord> procsToKill;
        Throwable th2;
        boolean z;
        ActivityManagerService activityManagerService;
        int currentUserId;
        Throwable t;
        Intent intent;
        ArrayList<ProcessRecord> procsToKill2;
        traceLog.traceBegin("PhaseActivityManagerReady");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mSystemReady) {
                    if (goingCallback != null) {
                        goingCallback.run();
                    }
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mLocalDeviceIdleController = (DeviceIdleController.LocalService) LocalServices.getService(DeviceIdleController.LocalService.class);
                this.mActivityTaskManager.onSystemReady();
                this.mUserController.onSystemReady();
                this.mAppOpsService.systemReady();
                this.mSystemReady = true;
                this.mHwAMSEx.startPushService();
                SystemProperties.set("sys.super_power_save", "false");
            } catch (Throwable th3) {
                th = th3;
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        try {
            sTheRealBuildSerial = IDeviceIdentifiersPolicyService.Stub.asInterface(ServiceManager.getService("device_identifiers")).getSerial();
        } catch (RemoteException e) {
        }
        synchronized (this.mPidsSelfLocked) {
            try {
                procsToKill = null;
                for (int i = this.mPidsSelfLocked.size() - 1; i >= 0; i--) {
                    try {
                        ProcessRecord proc = this.mPidsSelfLocked.valueAt(i);
                        if (!isAllowedWhileBooting(proc.info)) {
                            if (procsToKill == null) {
                                procsToKill2 = new ArrayList<>();
                            } else {
                                procsToKill2 = procsToKill;
                            }
                            try {
                                procsToKill2.add(proc);
                                procsToKill = procsToKill2;
                            } catch (Throwable th4) {
                                th = th4;
                                while (true) {
                                    try {
                                        break;
                                    } catch (Throwable th5) {
                                        th = th5;
                                    }
                                }
                                throw th;
                            }
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                }
                try {
                } catch (Throwable th7) {
                    th = th7;
                    while (true) {
                        break;
                    }
                    throw th;
                }
            } catch (Throwable th8) {
                th = th8;
                while (true) {
                    break;
                }
                throw th;
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (procsToKill != null) {
                    try {
                        for (int i2 = procsToKill.size() - 1; i2 >= 0; i2--) {
                            ProcessRecord proc2 = procsToKill.get(i2);
                            Slog.i(TAG, "Removing system update proc: " + proc2);
                            this.mProcessList.removeProcessLocked(proc2, true, false, "system update done");
                        }
                    } catch (Throwable th9) {
                        th2 = th9;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th10) {
                                th2 = th10;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th2;
                    }
                }
                this.mProcessesReady = true;
            } catch (Throwable th11) {
                th2 = th11;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        Slog.i(TAG, "System now ready");
        EventLog.writeEvent((int) EventLogTags.BOOT_PROGRESS_AMS_READY, SystemClock.uptimeMillis());
        this.mAtmInternal.updateTopComponentForFactoryTest();
        this.mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(this.mActivityLaunchObserver);
        watchDeviceProvisioning(this.mContext);
        retrieveSettings();
        this.mUgmInternal.onSystemReady();
        PowerManagerInternal pmi = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
        if (pmi != null) {
            pmi.registerLowPowerModeObserver(12, new Consumer() {
                /* class com.android.server.am.$$Lambda$ActivityManagerService$Z3G4KWA2tlTOhqhFtAvVby1SjyQ */

                @Override // java.util.function.Consumer
                public final void accept(Object obj) {
                    ActivityManagerService.this.lambda$systemReady$1$ActivityManagerService((PowerSaveState) obj);
                }
            });
            updateForceBackgroundCheck(pmi.getLowPowerState(12).batterySaverEnabled);
        } else {
            Slog.wtf(TAG, "PowerManagerInternal not found.");
        }
        if (goingCallback != null) {
            goingCallback.run();
        }
        int currentUserId2 = this.mUserController.getCurrentUserId();
        Slog.i(TAG, "Current user:" + currentUserId2);
        if (currentUserId2 == 0 || currentUserId2 == 127 || this.mUserController.isSystemUserStarted()) {
            traceLog.traceBegin("ActivityManagerStartApps");
            this.mBatteryStatsService.noteEvent(32775, Integer.toString(currentUserId2), currentUserId2);
            this.mBatteryStatsService.noteEvent(32776, Integer.toString(currentUserId2), currentUserId2);
            this.mSystemServiceManager.startUser(currentUserId2);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    startPersistentApps(DumpState.DUMP_FROZEN);
                    this.mPersistentReady = true;
                    this.mBooting = true;
                    if (UserManager.isSplitSystemUser()) {
                        try {
                            if (Settings.Secure.getInt(this.mContext.getContentResolver(), "user_setup_complete", 0) != 0) {
                                try {
                                    AppGlobals.getPackageManager().setComponentEnabledSetting(new ComponentName(this.mContext, SystemUserHomeActivity.class), 1, 0, 0);
                                } catch (RemoteException e2) {
                                    throw e2.rethrowAsRuntimeException();
                                }
                            }
                        } catch (Throwable th12) {
                            e = th12;
                            resetPriorityAfterLockedSection();
                            throw e;
                        }
                    }
                    HwThemeManager.linkDataSkinDirAsUser(currentUserId2);
                    MetricsLogger.histogram((Context) null, "boot_system_server_StartHome", (int) SystemClock.uptimeMillis());
                    this.mAtmInternal.startHomeOnAllDisplays(currentUserId2, "systemReady");
                    this.mAtmInternal.showSystemReadyErrorDialogsIfNeeded();
                    int callingUid = Binder.getCallingUid();
                    int callingPid = Binder.getCallingPid();
                    long ident = Binder.clearCallingIdentity();
                    try {
                        Intent intent2 = new Intent("android.intent.action.USER_STARTED");
                        intent2.addFlags(1342177280);
                        intent2.putExtra("android.intent.extra.user_handle", currentUserId2);
                        z = true;
                        try {
                            broadcastIntentLocked(null, null, intent2, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, callingUid, callingPid, currentUserId2);
                            intent = new Intent("android.intent.action.USER_STARTING");
                            intent.addFlags(1073741824);
                            currentUserId = currentUserId2;
                        } catch (Throwable th13) {
                            t = th13;
                            activityManagerService = this;
                            currentUserId = currentUserId2;
                            try {
                                Slog.wtf(TAG, "Failed sending first user broadcasts", t);
                                Binder.restoreCallingIdentity(ident);
                                activityManagerService.mAtmInternal.resumeTopActivities(false);
                                activityManagerService.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                                BinderInternal.nSetBinderProxyCountWatermarks((int) BINDER_PROXY_HIGH_WATERMARK, (int) BINDER_PROXY_LOW_WATERMARK);
                                BinderInternal.nSetBinderProxyCountEnabled(z);
                                BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() {
                                    /* class com.android.server.am.ActivityManagerService.AnonymousClass18 */

                                    public void onLimitReached(int uid) {
                                        Slog.wtf(ActivityManagerService.TAG, "Uid " + uid + " sent too many Binders to uid " + Process.myUid());
                                        if (uid == 1000) {
                                            Slog.i(ActivityManagerService.TAG, "Skipping kill (uid is SYSTEM)");
                                            return;
                                        }
                                        ActivityManagerService.this.killUid(UserHandle.getAppId(uid), UserHandle.getUserId(uid), "Too many Binders sent to SYSTEM");
                                        System.gc();
                                    }
                                }, activityManagerService.mHandler);
                                traceLog.traceEnd();
                                traceLog.traceEnd();
                                resetPriorityAfterLockedSection();
                                activityManagerService.mHwAMSEx.systemReady(goingCallback, traceLog);
                            } catch (Throwable th14) {
                                e = th14;
                                resetPriorityAfterLockedSection();
                                throw e;
                            }
                        }
                        try {
                            intent.putExtra("android.intent.extra.user_handle", currentUserId);
                            activityManagerService = this;
                            try {
                                broadcastIntentLocked(null, null, intent, null, new IIntentReceiver.Stub() {
                                    /* class com.android.server.am.ActivityManagerService.AnonymousClass17 */

                                    public void performReceive(Intent intent, int resultCode, String data, Bundle extras, boolean ordered, boolean sticky, int sendingUser) throws RemoteException {
                                    }
                                }, 0, null, null, new String[]{"android.permission.INTERACT_ACROSS_USERS"}, -1, null, true, false, MY_PID, 1000, callingUid, callingPid, -1);
                                try {
                                    Binder.restoreCallingIdentity(ident);
                                } catch (Throwable th15) {
                                    e = th15;
                                }
                            } catch (Throwable th16) {
                                t = th16;
                            }
                        } catch (Throwable th17) {
                            t = th17;
                            activityManagerService = this;
                            Slog.wtf(TAG, "Failed sending first user broadcasts", t);
                            Binder.restoreCallingIdentity(ident);
                            activityManagerService.mAtmInternal.resumeTopActivities(false);
                            activityManagerService.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                            BinderInternal.nSetBinderProxyCountWatermarks((int) BINDER_PROXY_HIGH_WATERMARK, (int) BINDER_PROXY_LOW_WATERMARK);
                            BinderInternal.nSetBinderProxyCountEnabled(z);
                            BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() {
                                /* class com.android.server.am.ActivityManagerService.AnonymousClass18 */

                                public void onLimitReached(int uid) {
                                    Slog.wtf(ActivityManagerService.TAG, "Uid " + uid + " sent too many Binders to uid " + Process.myUid());
                                    if (uid == 1000) {
                                        Slog.i(ActivityManagerService.TAG, "Skipping kill (uid is SYSTEM)");
                                        return;
                                    }
                                    ActivityManagerService.this.killUid(UserHandle.getAppId(uid), UserHandle.getUserId(uid), "Too many Binders sent to SYSTEM");
                                    System.gc();
                                }
                            }, activityManagerService.mHandler);
                            traceLog.traceEnd();
                            traceLog.traceEnd();
                            resetPriorityAfterLockedSection();
                            activityManagerService.mHwAMSEx.systemReady(goingCallback, traceLog);
                        }
                    } catch (Throwable th18) {
                        t = th18;
                        currentUserId = currentUserId2;
                        z = true;
                        activityManagerService = this;
                        Slog.wtf(TAG, "Failed sending first user broadcasts", t);
                        Binder.restoreCallingIdentity(ident);
                        activityManagerService.mAtmInternal.resumeTopActivities(false);
                        activityManagerService.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                        BinderInternal.nSetBinderProxyCountWatermarks((int) BINDER_PROXY_HIGH_WATERMARK, (int) BINDER_PROXY_LOW_WATERMARK);
                        BinderInternal.nSetBinderProxyCountEnabled(z);
                        BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() {
                            /* class com.android.server.am.ActivityManagerService.AnonymousClass18 */

                            public void onLimitReached(int uid) {
                                Slog.wtf(ActivityManagerService.TAG, "Uid " + uid + " sent too many Binders to uid " + Process.myUid());
                                if (uid == 1000) {
                                    Slog.i(ActivityManagerService.TAG, "Skipping kill (uid is SYSTEM)");
                                    return;
                                }
                                ActivityManagerService.this.killUid(UserHandle.getAppId(uid), UserHandle.getUserId(uid), "Too many Binders sent to SYSTEM");
                                System.gc();
                            }
                        }, activityManagerService.mHandler);
                        traceLog.traceEnd();
                        traceLog.traceEnd();
                        resetPriorityAfterLockedSection();
                        activityManagerService.mHwAMSEx.systemReady(goingCallback, traceLog);
                    }
                    activityManagerService.mAtmInternal.resumeTopActivities(false);
                    activityManagerService.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                    BinderInternal.nSetBinderProxyCountWatermarks((int) BINDER_PROXY_HIGH_WATERMARK, (int) BINDER_PROXY_LOW_WATERMARK);
                    BinderInternal.nSetBinderProxyCountEnabled(z);
                    BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() {
                        /* class com.android.server.am.ActivityManagerService.AnonymousClass18 */

                        public void onLimitReached(int uid) {
                            Slog.wtf(ActivityManagerService.TAG, "Uid " + uid + " sent too many Binders to uid " + Process.myUid());
                            if (uid == 1000) {
                                Slog.i(ActivityManagerService.TAG, "Skipping kill (uid is SYSTEM)");
                                return;
                            }
                            ActivityManagerService.this.killUid(UserHandle.getAppId(uid), UserHandle.getUserId(uid), "Too many Binders sent to SYSTEM");
                            System.gc();
                        }
                    }, activityManagerService.mHandler);
                    traceLog.traceEnd();
                    traceLog.traceEnd();
                    resetPriorityAfterLockedSection();
                    activityManagerService.mHwAMSEx.systemReady(goingCallback, traceLog);
                } catch (Throwable th19) {
                    e = th19;
                    resetPriorityAfterLockedSection();
                    throw e;
                }
            }
        } else {
            throw new RuntimeException("System user not started while current user is:" + currentUserId2);
        }
    }

    public /* synthetic */ void lambda$systemReady$1$ActivityManagerService(PowerSaveState state) {
        updateForceBackgroundCheck(state.batterySaverEnabled);
    }

    private void watchDeviceProvisioning(final Context context) {
        if (isDeviceProvisioned(context)) {
            SystemProperties.set(SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
        } else {
            context.getContentResolver().registerContentObserver(Settings.Global.getUriFor("device_provisioned"), false, new ContentObserver(new Handler(Looper.getMainLooper())) {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass19 */

                @Override // android.database.ContentObserver
                public void onChange(boolean selfChange) {
                    if (ActivityManagerService.this.isDeviceProvisioned(context)) {
                        SystemProperties.set(ActivityManagerService.SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
                        context.getContentResolver().unregisterContentObserver(this);
                    }
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private boolean isDeviceProvisioned(Context context) {
        return Settings.Global.getInt(context.getContentResolver(), "device_provisioned", 0) != 0;
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void startBroadcastObservers() {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.start(this.mContext.getContentResolver());
        }
    }

    private void updateForceBackgroundCheck(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mForceBackgroundCheck != enabled) {
                    this.mForceBackgroundCheck = enabled;
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("Force background check ");
                        sb.append(enabled ? "enabled" : "disabled");
                        Slog.i(TAG, sb.toString());
                    }
                    if (this.mForceBackgroundCheck) {
                        this.mProcessList.doStopUidForIdleUidsLocked();
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppErrors.killAppAtUserRequestLocked(app, fromDialog);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void skipCurrentReceiverLocked(ProcessRecord app) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipCurrentReceiverLocked(app);
        }
    }

    public void handleApplicationCrash(IBinder app, ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        String processName;
        IHwActivityManagerServiceEx iHwActivityManagerServiceEx;
        ProcessRecord r = findAppProcess(app, "Crash");
        String processName2 = "system_server";
        if (app != null) {
            if (r != null) {
                processName2 = r.processName;
            } else if (Binder.getCallingPid() != MY_PID) {
                processName2 = "mystery";
            }
        }
        if (r != null) {
            this.mDAProxy.notifyProcessWillDie(false, true, false, null, r.pid, r.uid);
        }
        if (!(crashInfo == null || crashInfo.stackTrace == null || r == null || r.info == null || r.uid == 1000 || (iHwActivityManagerServiceEx = this.mHwAMSEx) == null)) {
            iHwActivityManagerServiceEx.handleApplicationCrash(crashInfo.stackTrace, r.info.packageName);
        }
        if (crashInfo == null || crashInfo.stackTrace == null) {
            processName = processName2;
        } else if (crashInfo.stackTrace.endsWith("-loghandler")) {
            this.mLastAppCrashedPid = r == null ? -1 : r.pid;
            addErrorToDropBox("crash", r, processName2, null, null, null, null, null, null, crashInfo);
            return;
        } else {
            processName = processName2;
        }
        handleApplicationCrashInner("crash", r, processName, crashInfo);
    }

    /* JADX DEBUG: Can't convert new array creation: APUT found in different block: 0x0037: APUT  
      (r0v1 java.lang.Object[])
      (3 ??[int, float, short, byte, char])
      (wrap: java.lang.Integer : 0x0032: INVOKE  (r3v1 java.lang.Integer) = (r3v0 int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer)
     */
    /* access modifiers changed from: package-private */
    public void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName, ApplicationErrorReport.CrashInfo crashInfo) {
        int i;
        int i2;
        int i3;
        Object[] objArr = new Object[8];
        int relaunchReason = 0;
        objArr[0] = Integer.valueOf(Binder.getCallingPid());
        objArr[1] = Integer.valueOf(UserHandle.getUserId(Binder.getCallingUid()));
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(r == null ? -1 : r.info.flags);
        objArr[4] = crashInfo.exceptionClassName;
        objArr[5] = crashInfo.exceptionMessage;
        objArr[6] = crashInfo.throwFileName;
        objArr[7] = Integer.valueOf(crashInfo.throwLineNumber);
        EventLog.writeEvent((int) EventLogTags.AM_CRASH, objArr);
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        String str = (r == null || r.info == null) ? "" : r.info.packageName;
        if (r == null || r.info == null) {
            i = 0;
        } else if (r.info.isInstantApp()) {
            i = 2;
        } else {
            i = 1;
        }
        if (r == null) {
            i2 = 0;
        } else if (r.isInterestingToUserLocked()) {
            i2 = 2;
        } else {
            i2 = 1;
        }
        if (processName.equals("system_server")) {
            i3 = 3;
        } else if (r != null) {
            i3 = r.getProcessClassEnum();
        } else {
            i3 = 0;
        }
        StatsLog.write(78, callingUid, eventType, processName, callingPid, str, i, i2, i3);
        if (r != null) {
            relaunchReason = r.getWindowProcessController().computeRelaunchReason();
        }
        String relaunchReasonString = ActivityTaskManagerService.relaunchReasonToString(relaunchReason);
        if (crashInfo.crashTag == null) {
            crashInfo.crashTag = relaunchReasonString;
        } else {
            crashInfo.crashTag += " " + relaunchReasonString;
        }
        if (r == null || r.pid != this.mLastAppCrashedPid) {
            addErrorToDropBox(eventType, r, processName, null, null, null, null, null, null, crashInfo);
        } else {
            Slog.e(TAG, "do not add repeated dropbox, mLastAppCrashedPid==" + this.mLastAppCrashedPid);
        }
        this.mLastAppCrashedPid = -1;
        this.mAppErrors.crashApplication(r, crashInfo);
    }

    /* JADX INFO: finally extract failed */
    public void handleApplicationStrictModeViolation(IBinder app, int penaltyMask, StrictMode.ViolationInfo info) {
        ProcessRecord r = findAppProcess(app, "StrictMode");
        if ((67108864 & penaltyMask) != 0) {
            Integer stackFingerprint = Integer.valueOf(info.hashCode());
            boolean logIt = true;
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                if (this.mAlreadyLoggedViolatedStacks.contains(stackFingerprint)) {
                    logIt = false;
                } else {
                    if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                        this.mAlreadyLoggedViolatedStacks.clear();
                    }
                    this.mAlreadyLoggedViolatedStacks.add(stackFingerprint);
                }
            }
            if (logIt) {
                logStrictModeViolationToDropBox(r, info);
            }
        }
        if ((536870912 & penaltyMask) != 0) {
            AppErrorResult result = new AppErrorResult();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long origId = Binder.clearCallingIdentity();
                    Message msg = Message.obtain();
                    msg.what = 26;
                    HashMap<String, Object> data = new HashMap<>();
                    data.put("result", result);
                    data.put("app", r);
                    data.put("info", info);
                    msg.obj = data;
                    this.mUiHandler.sendMessage(msg);
                    Binder.restoreCallingIdentity(origId);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            int res = result.get();
            Slog.w(TAG, "handleApplicationStrictModeViolation; res=" + res);
        }
    }

    private void logStrictModeViolationToDropBox(ProcessRecord process, StrictMode.ViolationInfo info) {
        if (info != null) {
            boolean isSystemApp = process == null || (process.info.flags & 129) != 0;
            String processName = process == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : process.processName;
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService("dropbox");
            String dropboxTag = processClass(process) + "_strictmode";
            if (this.mSystemProvidersInstalled && dbox != null && dbox.isTagEnabled(dropboxTag)) {
                StringBuilder sb = new StringBuilder(1024);
                synchronized (sb) {
                    appendDropBoxProcessHeaders(process, processName, sb);
                    sb.append("Build: ");
                    sb.append(Build.FINGERPRINT);
                    sb.append("\n");
                    sb.append("System-App: ");
                    sb.append(isSystemApp);
                    sb.append("\n");
                    sb.append("Uptime-Millis: ");
                    sb.append(info.violationUptimeMillis);
                    sb.append("\n");
                    if (info.violationNumThisLoop != 0) {
                        sb.append("Loop-Violation-Number: ");
                        sb.append(info.violationNumThisLoop);
                        sb.append("\n");
                    }
                    if (info.numAnimationsRunning != 0) {
                        sb.append("Animations-Running: ");
                        sb.append(info.numAnimationsRunning);
                        sb.append("\n");
                    }
                    if (info.broadcastIntentAction != null) {
                        sb.append("Broadcast-Intent-Action: ");
                        sb.append(info.broadcastIntentAction);
                        sb.append("\n");
                    }
                    if (info.durationMillis != -1) {
                        sb.append("Duration-Millis: ");
                        sb.append(info.durationMillis);
                        sb.append("\n");
                    }
                    if (info.numInstances != -1) {
                        sb.append("Instance-Count: ");
                        sb.append(info.numInstances);
                        sb.append("\n");
                    }
                    if (info.tags != null) {
                        String[] strArr = info.tags;
                        for (String tag : strArr) {
                            sb.append("Span-Tag: ");
                            sb.append(tag);
                            sb.append("\n");
                        }
                    }
                    sb.append("\n");
                    sb.append(info.getStackTrace());
                    sb.append("\n");
                    if (info.getViolationDetails() != null) {
                        sb.append(info.getViolationDetails());
                        sb.append("\n");
                    }
                }
                IoThread.getHandler().post(new Runnable(dbox, dropboxTag, sb.toString()) {
                    /* class com.android.server.am.$$Lambda$ActivityManagerService$30I5N5ZS7997YvRBJqVkTZMPd6M */
                    private final /* synthetic */ DropBoxManager f$0;
                    private final /* synthetic */ String f$1;
                    private final /* synthetic */ String f$2;

                    {
                        this.f$0 = r1;
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    @Override // java.lang.Runnable
                    public final void run() {
                        this.f$0.addText(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system, final ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        final int callingUid = Binder.getCallingUid();
        final int callingPid = Binder.getCallingPid();
        if (system) {
            this.mHandler.post(new Runnable() {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass20 */

                @Override // java.lang.Runnable
                public void run() {
                    ActivityManagerService.this.handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
                }
            });
            return false;
        }
        ProcessRecord r = handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
        boolean isFatal = Build.IS_ENG || Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean isSystem = r == null || r.isPersistent();
        if (!isFatal || isSystem) {
            return false;
        }
        this.mAppErrors.crashApplication(r, crashInfo);
        return true;
    }

    /* JADX DEBUG: Can't convert new array creation: APUT found in different block: 0x0042: APUT  
      (r2v1 java.lang.Object[])
      (3 ??[int, float, short, byte, char])
      (wrap: java.lang.Integer : 0x003e: INVOKE  (r5v2 java.lang.Integer) = (r5v1 int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer)
     */
    /* access modifiers changed from: package-private */
    public ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag, ApplicationErrorReport.CrashInfo crashInfo) {
        String processName;
        ProcessRecord r = findAppProcess(app, "WTF");
        if (app == null) {
            processName = "system_server";
        } else {
            processName = r == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        }
        Object[] objArr = new Object[6];
        objArr[0] = Integer.valueOf(UserHandle.getUserId(callingUid));
        objArr[1] = Integer.valueOf(callingPid);
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(r == null ? -1 : r.info.flags);
        objArr[4] = tag;
        objArr[5] = crashInfo == null ? "" : crashInfo.exceptionMessage;
        EventLog.writeEvent((int) EventLogTags.AM_WTF, objArr);
        StatsLog.write(80, callingUid, tag, processName, callingPid, r != null ? r.getProcessClassEnum() : 0);
        addErrorToDropBox("wtf", r, processName, null, null, null, tag, null, null, crashInfo);
        return r;
    }

    private ProcessRecord findAppProcess(IBinder app, String reason) {
        ProcessRecord findAppProcessLocked;
        if (app == null) {
            return null;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                findAppProcessLocked = this.mProcessList.findAppProcessLocked(app, reason);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return findAppProcessLocked;
    }

    private void appendDropBoxProcessHeaders(ProcessRecord process, String processName, StringBuilder sb) {
        if (process == null) {
            sb.append("Process: ");
            sb.append(processName);
            sb.append("\n");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                sb.append("Process: ");
                sb.append(processName);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(process.pid);
                sb.append("\n");
                sb.append("UID: ");
                sb.append(process.uid);
                sb.append("\n");
                int flags = process.info.flags;
                IPackageManager pm = AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(Integer.toHexString(flags));
                sb.append("\n");
                for (int ip = 0; ip < process.pkgList.size(); ip++) {
                    String pkg = process.pkgList.keyAt(ip);
                    sb.append("Package: ");
                    sb.append(pkg);
                    try {
                        PackageInfo pi = pm.getPackageInfo(pkg, 0, UserHandle.getCallingUserId());
                        if (pi != null) {
                            sb.append(" v");
                            sb.append(pi.getLongVersionCode());
                            if (pi.versionName != null) {
                                sb.append(" (");
                                sb.append(pi.versionName);
                                sb.append(")");
                            }
                        }
                    } catch (RemoteException e) {
                        Slog.e(TAG, "Error getting package info: " + pkg, e);
                    }
                    sb.append("\n");
                }
                if (process.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
                if (ZygoteInit.sIsMygote) {
                    sb.append("SYSVMTYPE: Maple\n");
                } else {
                    sb.append("SYSVMTYPE: Art\n");
                }
                if ((process.info.hwFlags & DumpState.DUMP_SERVICE_PERMISSIONS) == 0) {
                    sb.append("APPVMTYPE: Art\n");
                    return;
                }
                try {
                    IHwPackageManager hwPM = HwPackageManager.getService();
                    if (hwPM == null) {
                        sb.append("APPVMTYPE: Unknown\n");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    if (hwPM.getMapleEnableFlag(process.info.packageName)) {
                        sb.append("APPVMTYPE: Maple\n");
                    } else {
                        sb.append("APPVMTYPE: Art\n");
                    }
                    resetPriorityAfterLockedSection();
                } catch (RemoteException e2) {
                    sb.append("APPVMTYPE: Unknown\n");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private static String processClass(ProcessRecord process) {
        if (process == null || process.pid == MY_PID) {
            return "system_server";
        }
        if ((process.info.flags & 1) != 0) {
            return "system_app";
        }
        return "data_app";
    }

    public void addErrorToDropBox(final String eventType, ProcessRecord process, String processName, String activityShortComponentName, String parentShortComponentName, ProcessRecord parentProcess, String subject, final String report, final File dataFile, final ApplicationErrorReport.CrashInfo crashInfo) {
        final String dropboxTag;
        String processName2;
        String processName3;
        boolean needCpuInfo;
        Throwable th;
        if (ServiceManager.getService("dropbox") != null) {
            final DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
            if ("mystery".equals(processName)) {
                dropboxTag = "data_app_" + eventType;
                processName2 = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
            } else {
                dropboxTag = processClass(process) + "_" + eventType;
                processName2 = processName;
            }
            if (this.mSystemProvidersInstalled && dbox != null) {
                if (dbox.isTagEnabled(dropboxTag)) {
                    long now = SystemClock.elapsedRealtime();
                    if (now - this.mWtfClusterStart > JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY) {
                        this.mWtfClusterStart = now;
                        this.mWtfClusterCount = 1;
                    } else {
                        int i = this.mWtfClusterCount;
                        this.mWtfClusterCount = i + 1;
                        if (i >= 5) {
                            return;
                        }
                    }
                    final StringBuilder sb = new StringBuilder(1024);
                    appendDropBoxProcessHeaders(process, processName2, sb);
                    if (process != null) {
                        sb.append("Foreground: ");
                        sb.append(process.isInterestingToUserLocked() ? "Yes" : "No");
                        sb.append("\n");
                    }
                    if (activityShortComponentName != null) {
                        sb.append("Activity: ");
                        sb.append(activityShortComponentName);
                        sb.append("\n");
                    }
                    if (parentShortComponentName != null) {
                        if (!(parentProcess == null || parentProcess.pid == process.pid)) {
                            sb.append("Parent-Process: ");
                            sb.append(parentProcess.processName);
                            sb.append("\n");
                        }
                        if (!parentShortComponentName.equals(activityShortComponentName)) {
                            sb.append("Parent-Activity: ");
                            sb.append(parentShortComponentName);
                            sb.append("\n");
                        }
                    }
                    if (subject != null) {
                        sb.append("Subject: ");
                        sb.append(subject);
                        sb.append("\n");
                    }
                    if (process != null) {
                        sb.append("Lifetime: ");
                        sb.append(((SystemClock.elapsedRealtime() - process.startTime) / 1000) + "s");
                        sb.append("\n");
                    }
                    sb.append("Build: ");
                    sb.append(Build.FINGERPRINT);
                    sb.append("\n");
                    if (Debug.isDebuggerConnected()) {
                        sb.append("Debugger: Connected\n");
                    }
                    if (!(crashInfo == null || crashInfo.crashTag == null || crashInfo.crashTag.isEmpty())) {
                        sb.append("Crash-Tag: ");
                        sb.append(crashInfo.crashTag);
                        sb.append("\n");
                    }
                    sb.append("\n");
                    if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE))) {
                        boolean needCpuInfo2 = "watchdog".equals(eventType);
                        if (!"crash".equals(eventType) || crashInfo == null || crashInfo.exceptionClassName == null) {
                            needCpuInfo = needCpuInfo2;
                        } else {
                            needCpuInfo = crashInfo.exceptionClassName.contains("TimeoutException");
                        }
                        if (needCpuInfo) {
                            synchronized (this.mProcessCpuThread) {
                                try {
                                    sb.append(this.mProcessCpuTracker.printCurrentLoad());
                                    processName3 = processName2;
                                    try {
                                        sb.append(this.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                                    } catch (Throwable th2) {
                                        th = th2;
                                        throw th;
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    throw th;
                                }
                            }
                            sb.append("\n");
                        } else {
                            processName3 = processName2;
                        }
                    } else {
                        processName3 = processName2;
                    }
                    Thread worker = new Thread("Error dump: " + dropboxTag) {
                        /* class com.android.server.am.ActivityManagerService.AnonymousClass21 */

                        @Override // java.lang.Thread, java.lang.Runnable
                        public void run() {
                            String str = report;
                            if (str != null) {
                                sb.append(str);
                            }
                            int lines = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "logcat_for_" + dropboxTag, 0);
                            int maxDataFileSize = (ActivityManagerService.DROPBOX_MAX_SIZE - sb.length()) - (lines * 100);
                            if (dataFile != null && maxDataFileSize > 0) {
                                try {
                                    if (!Log.HWINFO) {
                                        if (!"watchdog".equals(eventType)) {
                                            sb.append(FileUtils.readTextFile(dataFile, maxDataFileSize, "\n\n[[TRUNCATED]]"));
                                        }
                                    }
                                    sb.append(FileUtils.readTextFile(dataFile, 0, null));
                                } catch (IOException e) {
                                    Slog.e(ActivityManagerService.TAG, "Error reading " + dataFile, e);
                                }
                            }
                            ApplicationErrorReport.CrashInfo crashInfo = crashInfo;
                            if (!(crashInfo == null || crashInfo.stackTrace == null)) {
                                sb.append(crashInfo.stackTrace);
                            }
                            if (lines > 0) {
                                sb.append("\n");
                                InputStreamReader input = null;
                                try {
                                    Process logcat = new ProcessBuilder("/system/bin/timeout", "-k", "15s", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", "system", "-b", "main", "-b", "crash", "-t", String.valueOf(lines)).redirectErrorStream(true).start();
                                    try {
                                        logcat.getOutputStream().close();
                                    } catch (IOException e2) {
                                    }
                                    try {
                                        logcat.getErrorStream().close();
                                    } catch (IOException e3) {
                                    }
                                    InputStreamReader input2 = new InputStreamReader(logcat.getInputStream());
                                    char[] buf = new char[8192];
                                    while (true) {
                                        int num = input2.read(buf);
                                        if (num > 0) {
                                            sb.append(buf, 0, num);
                                        } else {
                                            try {
                                                break;
                                            } catch (IOException e4) {
                                            }
                                        }
                                    }
                                    input2.close();
                                } catch (IOException e5) {
                                    Slog.e(ActivityManagerService.TAG, "Error running logcat", e5);
                                    if (0 != 0) {
                                        input.close();
                                    }
                                } catch (Throwable th) {
                                    if (0 != 0) {
                                        try {
                                            input.close();
                                        } catch (IOException e6) {
                                        }
                                    }
                                    throw th;
                                }
                            }
                            dbox.addText(dropboxTag, sb.toString());
                        }
                    };
                    if (process == null) {
                        int oldMask = StrictMode.allowThreadDiskWritesMask();
                        try {
                            worker.run();
                        } finally {
                            StrictMode.setThreadPolicyMask(oldMask);
                        }
                    } else {
                        worker.start();
                    }
                }
            }
        }
    }

    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETPROCESSESINERRORSTATE);
        enforceNotIsolatedCaller("getProcessesInErrorState");
        List<ActivityManager.ProcessErrorStateInfo> errList = null;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", Binder.getCallingUid()) == 0;
        int userId = UserHandle.getUserId(Binder.getCallingUid());
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = this.mProcessList.mLruProcesses.get(i);
                    if (allUsers || app.userId == userId) {
                        boolean crashing = app.isCrashing();
                        boolean notResponding = app.isNotResponding();
                        if (app.thread != null && (crashing || notResponding)) {
                            ActivityManager.ProcessErrorStateInfo report = null;
                            if (crashing) {
                                report = app.crashingReport;
                            } else if (notResponding) {
                                report = app.notRespondingReport;
                            }
                            if (report != null) {
                                if (errList == null) {
                                    errList = new ArrayList<>(1);
                                }
                                errList.add(report);
                            } else {
                                Slog.w(TAG, "Missing app error report, app = " + app.processName + " crashing = " + crashing + " notResponding = " + notResponding);
                            }
                        }
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return errList;
    }

    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
        List<ActivityManager.RunningAppProcessInfo> runningAppProcessesLocked;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETRUNNINGAPPPROCESSES);
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int clientTargetSdk = getPackageManagerInternalLocked().getUidTargetSdkVersion(callingUid);
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean allUids = this.mAtmInternal.isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningAppProcessesLocked = this.mProcessList.getRunningAppProcessesLocked(allUsers, userId, allUids, callingUid, clientTargetSdk);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return runningAppProcessesLocked;
    }

    public List<ApplicationInfo> getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List<ActivityManager.RunningAppProcessInfo> runningApps = getRunningAppProcesses();
        List<ApplicationInfo> retList = new ArrayList<>();
        if (runningApps != null && runningApps.size() > 0) {
            Set<String> extList = new HashSet<>();
            Iterator<ActivityManager.RunningAppProcessInfo> it = runningApps.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ActivityManager.RunningAppProcessInfo app = it.next();
                if (app.pkgList != null) {
                    for (String pkg : app.pkgList) {
                        extList.add(pkg);
                    }
                }
            }
            IPackageManager pm = AppGlobals.getPackageManager();
            for (String pkg2 : extList) {
                try {
                    ApplicationInfo info = pm.getApplicationInfo(pkg2, 0, UserHandle.getCallingUserId());
                    if (!(info == null || (info.flags & DumpState.DUMP_DOMAIN_PREFERRED) == 0)) {
                        retList.add(info);
                    }
                } catch (RemoteException e) {
                }
            }
        }
        return retList;
    }

    public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outState) {
        ProcessRecord proc;
        if (outState != null) {
            enforceNotIsolatedCaller("getMyMemoryState");
            int clientTargetSdk = getPackageManagerInternalLocked().getUidTargetSdkVersion(Binder.getCallingUid());
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                    }
                    if (proc != null) {
                        this.mProcessList.fillInProcMemInfoLocked(proc, outState, clientTargetSdk);
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("outState is null");
    }

    public int getMemoryTrimLevel() {
        int i;
        enforceNotIsolatedCaller("getMyMemoryState");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                i = this.mLastMemoryLevel;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return i;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r8v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) {
        new ActivityManagerShellCommand(this, false).exec(this, in, out, err, args, callback, resultReceiver);
    }

    /* access modifiers changed from: protected */
    public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
    }

    private void dumpEverything(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage, boolean dumpClient, boolean dumpNormalPriority, int dumpAppId) {
        Throwable th;
        ActiveServices.ServiceDumper sdumper;
        Throwable th2;
        PrintWriter printWriter;
        String str;
        Flog.i(101, "dumpEverything dumpAll:" + dumpAll + " dumpPackage:" + dumpPackage + " dumpClient:" + dumpClient + " dumpNormalPriority:" + dumpNormalPriority + " dumpAppId:" + dumpAppId);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.dump(pw);
                this.mOomAdjuster.dumpAppCompactorSettings(pw);
                pw.println();
                if (dumpAll) {
                    try {
                        pw.println("-------------------------------------------------------------------------------");
                    } catch (Throwable th3) {
                        th = th3;
                    }
                }
                dumpAllowedAssociationsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                this.mPendingIntentController.dumpPendingIntents(pw, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                dumpBroadcastsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                if (dumpAll || dumpPackage != null) {
                    dumpBroadcastStatsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                    pw.println();
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                }
                dumpProvidersLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                dumpPermissionsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                sdumper = this.mServices.newServiceDumperLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                if (!dumpClient) {
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    sdumper.dumpLocked();
                }
            } catch (Throwable th4) {
                th = th4;
                while (true) {
                    try {
                        break;
                    } catch (Throwable th5) {
                        th = th5;
                    }
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (dumpClient) {
            if (dumpAll) {
                pw.println("-------------------------------------------------------------------------------");
            }
            sdumper.dumpWithClient();
        }
        if (dumpPackage == null) {
            pw.println();
            if (dumpAll) {
                pw.println("-------------------------------------------------------------------------------");
            }
            if (!this.mUserIsMonkey) {
                dumpBinderProxies(pw, BINDER_PROXY_HIGH_WATERMARK);
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                pw.println();
                if (dumpAll) {
                    try {
                        pw.println("-------------------------------------------------------------------------------");
                    } catch (Throwable th6) {
                        th2 = th6;
                    }
                }
                try {
                    this.mAtmInternal.dump("recents", fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                    pw.println();
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("lastanr", fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                    pw.println();
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("starter", fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                    pw.println();
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("containers", fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                    if (!dumpNormalPriority) {
                        pw.println();
                        if (dumpAll) {
                            pw.println("-------------------------------------------------------------------------------");
                        }
                        this.mAtmInternal.dump("activities", fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                    }
                    if (this.mAssociations.size() > 0) {
                        pw.println();
                        if (dumpAll) {
                            pw.println("-------------------------------------------------------------------------------");
                        }
                        str = dumpPackage;
                        printWriter = pw;
                        try {
                            dumpAssociationsLocked(fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        } catch (Throwable th7) {
                            th2 = th7;
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    } else {
                        str = dumpPackage;
                        printWriter = pw;
                    }
                    if (str == null) {
                        pw.println();
                        if (dumpAll) {
                            printWriter.println("-------------------------------------------------------------------------------");
                        }
                        this.mOomAdjProfiler.dump(printWriter);
                        pw.println();
                        if (dumpAll) {
                            printWriter.println("-------------------------------------------------------------------------------");
                        }
                        dumpLmkLocked(printWriter);
                    }
                    pw.println();
                    if (dumpAll) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    dumpLruLocked(printWriter, str);
                    pw.println();
                    if (dumpAll) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    dumpProcessesLocked(fd, pw, args, opti, dumpAll, dumpPackage, dumpAppId);
                    pw.println();
                    if (dumpAll) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    dumpHandler(printWriter);
                    resetPriorityAfterLockedSection();
                } catch (Throwable th8) {
                    th2 = th8;
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            } catch (Throwable th9) {
                th2 = th9;
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
    }

    /* JADX INFO: finally extract failed */
    /* JADX DEBUG: Multi-variable search result rejected for r28v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    /* JADX WARNING: Removed duplicated region for block: B:419:0x0711  */
    /* JADX WARNING: Removed duplicated region for block: B:421:0x0715  */
    private void doDump(FileDescriptor fd, PrintWriter pw, String[] args, boolean useProto) {
        String dumpPackage;
        int opti;
        String[] args2;
        int opti2;
        String cmd;
        int opti3;
        int opti4;
        String dumpPackage2;
        int opti5;
        boolean z;
        String dumpPackage3;
        int opti6;
        String dumpPackage4;
        int opti7;
        ActiveServices.ServiceDumper dumper;
        String[] args3;
        int opti8;
        String[] newArgs;
        String name;
        int opti9;
        String[] newArgs2;
        String name2;
        String dumpPackage5;
        int opti10;
        Throwable th;
        String cmd2;
        String dumpPackage6;
        int opti11;
        Throwable th2;
        int opti12;
        String dumpPackage7;
        String[] newArgs3;
        String name3;
        String opt;
        String[] args4 = args;
        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mContext, TAG, pw)) {
            int opti13 = 0;
            boolean dumpAll = false;
            boolean dumpClient = false;
            boolean dumpCheckin = false;
            boolean dumpCheckinFormat = false;
            boolean dumpNormalPriority = false;
            boolean dumpVisibleStacksOnly = false;
            boolean dumpFocusedStackOnly = false;
            String dumpPackage8 = null;
            while (opti13 < args4.length && (opt = args4[opti13]) != null && opt.length() > 0 && opt.charAt(0) == '-') {
                opti13++;
                if ("-a".equals(opt)) {
                    dumpAll = true;
                } else if ("-c".equals(opt)) {
                    dumpClient = true;
                } else if ("-v".equals(opt)) {
                    dumpVisibleStacksOnly = true;
                } else if ("-f".equals(opt)) {
                    dumpFocusedStackOnly = true;
                } else if ("-p".equals(opt)) {
                    if (opti13 < args4.length) {
                        dumpPackage8 = args4[opti13];
                        opti13++;
                        dumpClient = true;
                    } else {
                        pw.println("Error: -p option requires package argument");
                        return;
                    }
                } else if ("--checkin".equals(opt)) {
                    dumpCheckin = true;
                    dumpCheckinFormat = true;
                } else if ("-C".equals(opt)) {
                    dumpCheckinFormat = true;
                } else if ("--normal-priority".equals(opt)) {
                    dumpNormalPriority = true;
                } else if ("-h".equals(opt)) {
                    ActivityManagerShellCommand.dumpHelp(pw, true);
                    return;
                } else {
                    pw.println("Unknown argument: " + opt + "; use -h for help");
                }
            }
            long origId = Binder.clearCallingIdentity();
            if (useProto) {
                ProtoOutputStream proto = new ProtoOutputStream(fd);
                String cmd3 = opti13 < args4.length ? args4[opti13] : "";
                int opti14 = opti13 + 1;
                if ("activities".equals(cmd3) || "a".equals(cmd3)) {
                    this.mAtmInternal.writeActivitiesToProto(proto);
                } else if ("broadcasts".equals(cmd3) || "b".equals(cmd3)) {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            writeBroadcastsToProtoLocked(proto);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                } else if ("provider".equals(cmd3)) {
                    if (opti14 >= args4.length) {
                        name3 = null;
                        newArgs3 = EMPTY_STRING_ARRAY;
                    } else {
                        String name4 = args4[opti14];
                        int opti15 = opti14 + 1;
                        String[] newArgs4 = new String[(args4.length - opti15)];
                        if (args4.length > 2) {
                            System.arraycopy(args4, opti15, newArgs4, 0, args4.length - opti15);
                        }
                        name3 = name4;
                        newArgs3 = newArgs4;
                    }
                    if (!dumpProviderProto(fd, pw, name3, newArgs3)) {
                        pw.println("No providers match: " + name3);
                        pw.println("Use -h for help.");
                    }
                } else if ("service".equals(cmd3)) {
                    this.mServices.writeToProto(proto, 1146756268033L);
                } else if ("processes".equals(cmd3) || "p".equals(cmd3)) {
                    if (opti14 < args4.length) {
                        opti12 = opti14 + 1;
                        dumpPackage7 = args4[opti14];
                    } else {
                        opti12 = opti14;
                        dumpPackage7 = dumpPackage8;
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            writeProcessesToProtoLocked(proto, dumpPackage7);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                } else {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            long activityToken = proto.start(1146756268033L);
                            this.mAtmInternal.writeActivitiesToProto(proto);
                            proto.end(activityToken);
                            long broadcastToken = proto.start(1146756268034L);
                            writeBroadcastsToProtoLocked(proto);
                            proto.end(broadcastToken);
                            long serviceToken = proto.start(1146756268035L);
                            this.mServices.writeToProto(proto, 1146756268033L);
                            proto.end(serviceToken);
                            long processToken = proto.start(1146756268036L);
                            writeProcessesToProtoLocked(proto, dumpPackage8);
                            proto.end(processToken);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                }
                proto.flush();
                Binder.restoreCallingIdentity(origId);
                return;
            }
            int dumpAppId = getAppId(dumpPackage8);
            boolean more = false;
            if (opti13 < args4.length) {
                String cmd4 = args4[opti13];
                int opti16 = opti13 + 1;
                if ("activities".equals(cmd4) || "a".equals(cmd4)) {
                    cmd = cmd4;
                    opti3 = opti16;
                } else if ("lastanr".equals(cmd4) || "lastanr-traces".equals(cmd4)) {
                    cmd = cmd4;
                    opti3 = opti16;
                } else if ("starter".equals(cmd4) || "containers".equals(cmd4)) {
                    cmd = cmd4;
                    opti3 = opti16;
                } else if ("recents".equals(cmd4)) {
                    cmd = cmd4;
                    opti3 = opti16;
                } else if ("r".equals(cmd4)) {
                    cmd = cmd4;
                    opti3 = opti16;
                } else if (!"binder-proxies".equals(cmd4)) {
                    if ("allowed-associations".equals(cmd4)) {
                        if (opti16 < args4.length) {
                            dumpPackage6 = args4[opti16];
                            opti11 = opti16 + 1;
                        } else {
                            opti11 = opti16;
                            dumpPackage6 = dumpPackage8;
                        }
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                try {
                                    dumpAllowedAssociationsLocked(fd, pw, args, opti11, true, dumpPackage6);
                                } catch (Throwable th3) {
                                    th2 = th3;
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            } catch (Throwable th4) {
                                th2 = th4;
                                resetPriorityAfterLockedSection();
                                throw th2;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        opti16 = opti11;
                        dumpPackage8 = dumpPackage6;
                    } else {
                        if ("broadcasts".equals(cmd4)) {
                            opti4 = opti16;
                        } else if ("b".equals(cmd4)) {
                            opti4 = opti16;
                        } else if ("broadcast-stats".equals(cmd4)) {
                            if (opti16 < args4.length) {
                                dumpPackage5 = args4[opti16];
                                opti10 = opti16 + 1;
                            } else {
                                opti10 = opti16;
                                dumpPackage5 = dumpPackage8;
                            }
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    if (dumpCheckinFormat) {
                                        cmd2 = cmd4;
                                        try {
                                            dumpBroadcastStatsCheckinLocked(fd, pw, args, opti10, dumpCheckin, dumpPackage5);
                                        } catch (Throwable th5) {
                                            th = th5;
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    } else {
                                        cmd2 = cmd4;
                                        dumpBroadcastStatsLocked(fd, pw, args, opti10, true, dumpPackage5);
                                    }
                                } catch (Throwable th6) {
                                    th = th6;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            resetPriorityAfterLockedSection();
                            opti16 = opti10;
                            dumpPackage8 = dumpPackage5;
                        } else {
                            if ("intents".equals(cmd4)) {
                                z = true;
                                opti5 = opti16;
                            } else if ("i".equals(cmd4)) {
                                z = true;
                                opti5 = opti16;
                            } else {
                                if ("processes".equals(cmd4)) {
                                    opti6 = opti16;
                                } else if ("p".equals(cmd4)) {
                                    opti6 = opti16;
                                } else {
                                    if ("oom".equals(cmd4)) {
                                        opti2 = opti16;
                                    } else if ("o".equals(cmd4)) {
                                        opti2 = opti16;
                                    } else {
                                        if ("lmk".equals(cmd4)) {
                                            synchronized (this) {
                                                try {
                                                    boostPriorityForLockedSection();
                                                    dumpLmkLocked(pw);
                                                } catch (Throwable th7) {
                                                    resetPriorityAfterLockedSection();
                                                    throw th7;
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            opti2 = opti16;
                                        } else if ("lru".equals(cmd4)) {
                                            synchronized (this) {
                                                try {
                                                    boostPriorityForLockedSection();
                                                    dumpLruLocked(pw, null);
                                                } catch (Throwable th8) {
                                                    resetPriorityAfterLockedSection();
                                                    throw th8;
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            opti2 = opti16;
                                        } else {
                                            if ("permissions".equals(cmd4)) {
                                                opti2 = opti16;
                                            } else if ("perm".equals(cmd4)) {
                                                opti2 = opti16;
                                            } else if ("provider".equals(cmd4)) {
                                                if (opti16 >= args4.length) {
                                                    name2 = null;
                                                    opti9 = opti16;
                                                    newArgs2 = EMPTY_STRING_ARRAY;
                                                } else {
                                                    String name5 = args4[opti16];
                                                    int opti17 = opti16 + 1;
                                                    String[] newArgs5 = new String[(args4.length - opti17)];
                                                    if (args4.length > 2) {
                                                        System.arraycopy(args4, opti17, newArgs5, 0, args4.length - opti17);
                                                    }
                                                    name2 = name5;
                                                    opti9 = opti17;
                                                    newArgs2 = newArgs5;
                                                }
                                                if (!dumpProvider(fd, pw, name2, newArgs2, 0, dumpAll)) {
                                                    pw.println("No providers match: " + name2);
                                                    pw.println("Use -h for help.");
                                                }
                                                opti16 = opti9;
                                            } else {
                                                if ("providers".equals(cmd4)) {
                                                    opti2 = opti16;
                                                } else if ("prov".equals(cmd4)) {
                                                    opti2 = opti16;
                                                } else if ("service".equals(cmd4)) {
                                                    if (opti16 >= args4.length) {
                                                        name = null;
                                                        opti8 = opti16;
                                                        newArgs = EMPTY_STRING_ARRAY;
                                                    } else {
                                                        String name6 = args4[opti16];
                                                        int opti18 = opti16 + 1;
                                                        String[] newArgs6 = new String[(args4.length - opti18)];
                                                        if (args4.length > 2) {
                                                            System.arraycopy(args4, opti18, newArgs6, 0, args4.length - opti18);
                                                        }
                                                        name = name6;
                                                        opti8 = opti18;
                                                        newArgs = newArgs6;
                                                    }
                                                    if (!this.mServices.dumpService(fd, pw, name, newArgs, 0, dumpAll)) {
                                                        pw.println("No services match: " + name);
                                                        pw.println("Use -h for help.");
                                                    }
                                                    opti16 = opti8;
                                                } else if ("package".equals(cmd4)) {
                                                    if (opti16 >= args4.length) {
                                                        pw.println("package: no package name specified");
                                                        pw.println("Use -h for help.");
                                                        args3 = args4;
                                                    } else {
                                                        dumpPackage8 = args4[opti16];
                                                        int opti19 = opti16 + 1;
                                                        String[] newArgs7 = new String[(args4.length - opti19)];
                                                        if (args4.length > 2) {
                                                            System.arraycopy(args4, opti19, newArgs7, 0, args4.length - opti19);
                                                        }
                                                        args3 = newArgs7;
                                                        opti16 = 0;
                                                        more = true;
                                                    }
                                                    args4 = args3;
                                                } else {
                                                    if ("associations".equals(cmd4)) {
                                                        opti2 = opti16;
                                                    } else if ("as".equals(cmd4)) {
                                                        opti2 = opti16;
                                                    } else if ("settings".equals(cmd4)) {
                                                        synchronized (this) {
                                                            try {
                                                                boostPriorityForLockedSection();
                                                                this.mConstants.dump(pw);
                                                                this.mOomAdjuster.dumpAppCompactorSettings(pw);
                                                            } catch (Throwable th9) {
                                                                resetPriorityAfterLockedSection();
                                                                throw th9;
                                                            }
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        opti2 = opti16;
                                                    } else {
                                                        if ("services".equals(cmd4)) {
                                                            opti2 = opti16;
                                                        } else if ("s".equals(cmd4)) {
                                                            opti2 = opti16;
                                                        } else if ("locks".equals(cmd4)) {
                                                            LockGuard.dump(fd, pw, args);
                                                            opti2 = opti16;
                                                        } else if ("handler".equals(cmd4)) {
                                                            synchronized (this) {
                                                                try {
                                                                    boostPriorityForLockedSection();
                                                                    dumpHandler(pw);
                                                                } catch (Throwable th10) {
                                                                    resetPriorityAfterLockedSection();
                                                                    throw th10;
                                                                }
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            opti2 = opti16;
                                                        } else if (!this.mUserIsMonkey) {
                                                            opti2 = opti16;
                                                            if (!this.mAtmInternal.dumpActivity(fd, pw, cmd4, args, opti16, dumpAll, dumpVisibleStacksOnly, dumpFocusedStackOnly) && new ActivityManagerShellCommand(this, true).exec(this, null, fd, null, args, null, new ResultReceiver(null)) < 0) {
                                                                pw.println("Bad activity command, or no activities match: " + cmd4);
                                                                pw.println("Use -h for help.");
                                                            }
                                                        } else {
                                                            opti2 = opti16;
                                                        }
                                                        if (dumpClient) {
                                                            synchronized (this) {
                                                                try {
                                                                    boostPriorityForLockedSection();
                                                                    dumper = this.mServices.newServiceDumperLocked(fd, pw, args, opti2, true, dumpPackage8);
                                                                } catch (Throwable th11) {
                                                                    resetPriorityAfterLockedSection();
                                                                    throw th11;
                                                                }
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            dumper.dumpWithClient();
                                                        } else {
                                                            synchronized (this) {
                                                                try {
                                                                    boostPriorityForLockedSection();
                                                                    this.mServices.newServiceDumperLocked(fd, pw, args, opti2, true, dumpPackage8).dumpLocked();
                                                                } finally {
                                                                    resetPriorityAfterLockedSection();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    synchronized (this) {
                                                        try {
                                                            boostPriorityForLockedSection();
                                                            dumpAssociationsLocked(fd, pw, args, opti2, true, dumpClient, dumpPackage8);
                                                        } finally {
                                                            resetPriorityAfterLockedSection();
                                                        }
                                                    }
                                                }
                                                synchronized (this) {
                                                    try {
                                                        boostPriorityForLockedSection();
                                                        dumpProvidersLocked(fd, pw, args, opti2, true, null);
                                                    } finally {
                                                        resetPriorityAfterLockedSection();
                                                    }
                                                }
                                            }
                                            synchronized (this) {
                                                try {
                                                    boostPriorityForLockedSection();
                                                    dumpPermissionsLocked(fd, pw, args, opti2, true, null);
                                                } finally {
                                                    resetPriorityAfterLockedSection();
                                                }
                                            }
                                        }
                                        opti16 = opti2;
                                    }
                                    synchronized (this) {
                                        try {
                                            boostPriorityForLockedSection();
                                            dumpOomLocked(fd, pw, args, opti2, true);
                                        } finally {
                                            resetPriorityAfterLockedSection();
                                        }
                                    }
                                    opti16 = opti2;
                                }
                                if (opti6 < args4.length) {
                                    dumpPackage4 = args4[opti6];
                                    opti7 = opti6 + 1;
                                } else {
                                    opti7 = opti6;
                                    dumpPackage4 = dumpPackage8;
                                }
                                synchronized (this) {
                                    try {
                                        boostPriorityForLockedSection();
                                        dumpProcessesLocked(fd, pw, args, opti7, true, dumpPackage4, dumpAppId);
                                    } catch (Throwable th12) {
                                        resetPriorityAfterLockedSection();
                                        throw th12;
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                opti16 = opti7;
                                dumpPackage8 = dumpPackage4;
                            }
                            if (opti5 < args4.length) {
                                opti16 = opti5 + 1;
                                dumpPackage3 = args4[opti5];
                            } else {
                                opti16 = opti5;
                                dumpPackage3 = dumpPackage8;
                            }
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    this.mPendingIntentController.dumpPendingIntents(pw, z, dumpPackage3);
                                } catch (Throwable th13) {
                                    resetPriorityAfterLockedSection();
                                    throw th13;
                                }
                            }
                            resetPriorityAfterLockedSection();
                            dumpPackage8 = dumpPackage3;
                        }
                        if (opti4 < args4.length) {
                            opti16 = opti4 + 1;
                            dumpPackage2 = args4[opti4];
                        } else {
                            opti16 = opti4;
                            dumpPackage2 = dumpPackage8;
                        }
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                dumpBroadcastsLocked(fd, pw, args, opti16, true, dumpPackage2);
                            } catch (Throwable th14) {
                                resetPriorityAfterLockedSection();
                                throw th14;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        dumpPackage8 = dumpPackage2;
                    }
                    if (more) {
                    }
                } else if (opti16 >= args4.length) {
                    dumpBinderProxies(pw, 0);
                    opti2 = opti16;
                    opti16 = opti2;
                    if (more) {
                        Binder.restoreCallingIdentity(origId);
                        return;
                    }
                    args2 = args4;
                    dumpPackage = dumpPackage8;
                    opti = opti16;
                } else {
                    String uid = args4[opti16];
                    opti16++;
                    System.gc();
                    System.runFinalization();
                    System.gc();
                    pw.println(BinderInternal.nGetBinderProxyCount(Integer.parseInt(uid)));
                    if (more) {
                    }
                }
                opti2 = opti3;
                this.mAtmInternal.dump(cmd, fd, pw, args, opti3, true, dumpClient, dumpPackage8);
                opti16 = opti2;
                if (more) {
                }
            } else {
                args2 = args4;
                dumpPackage = dumpPackage8;
                opti = opti13;
            }
            if (dumpCheckinFormat) {
                dumpBroadcastStatsCheckinLocked(fd, pw, args2, opti, dumpCheckin, dumpPackage);
            } else if (dumpClient) {
                dumpEverything(fd, pw, args2, opti, dumpAll, dumpPackage, dumpClient, dumpNormalPriority, dumpAppId);
            } else {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        dumpEverything(fd, pw, args2, opti, dumpAll, dumpPackage, dumpClient, dumpNormalPriority, dumpAppId);
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            Binder.restoreCallingIdentity(origId);
        }
    }

    private void dumpHandler(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER HANDLER (dumpsys activity handler)");
        pw.println();
        pw.println(" mHandler:");
        this.mHandler.dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" mUiHandler:");
        this.mUiHandler.dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" UiThread.getHandler(): ");
        UiThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" FgThread.getHandler(): ");
        FgThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" IoThread.getHandler(): ");
        IoThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" DisplayThread.getHandler(): ");
        DisplayThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" AnimationThread.getHandler(): ");
        AnimationThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println();
        pw.println(" SurfaceAnimationThread.getHandler(): ");
        SurfaceAnimationThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" BackgroundThread.getHandler(): ");
        BackgroundThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
    }

    /* access modifiers changed from: package-private */
    public void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        int N1;
        int dumpUid;
        ArrayMap<String, Association> sourceProcesses;
        ActivityManagerService activityManagerService = this;
        String str = dumpPackage;
        pw.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int dumpUid2 = 0;
        boolean z = false;
        if (str != null) {
            try {
                dumpUid2 = AppGlobals.getPackageManager().getPackageUid(str, (int) DumpState.DUMP_CHANGES, 0);
            } catch (RemoteException e) {
            }
        }
        boolean printedAnything = false;
        long now = SystemClock.uptimeMillis();
        int i1 = 0;
        int N12 = activityManagerService.mAssociations.size();
        while (i1 < N12) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
            int i2 = 0;
            int N2 = targetComponents2.size();
            while (i2 < N2) {
                SparseArray<ArrayMap<String, Association>> sourceUids = targetComponents2.valueAt(i2);
                int i3 = 0;
                int N3 = sourceUids.size();
                while (i3 < N3) {
                    ArrayMap<String, Association> sourceProcesses2 = sourceUids.valueAt(i3);
                    boolean printedAnything2 = printedAnything;
                    int N4 = sourceProcesses2.size();
                    int i4 = 0;
                    while (i4 < N4) {
                        Association ass = sourceProcesses2.valueAt(i4);
                        if (str != null) {
                            sourceProcesses = sourceProcesses2;
                            if (!ass.mTargetComponent.getPackageName().equals(str) && UserHandle.getAppId(ass.mSourceUid) != dumpUid2) {
                                dumpUid = dumpUid2;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                i4++;
                                str = dumpPackage;
                                sourceProcesses2 = sourceProcesses;
                                N4 = N4;
                                dumpUid2 = dumpUid;
                                N12 = N1;
                                targetComponents2 = targetComponents;
                            }
                        } else {
                            sourceProcesses = sourceProcesses2;
                        }
                        printedAnything2 = true;
                        pw.print("  ");
                        pw.print(ass.mTargetProcess);
                        pw.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        dumpUid = dumpUid2;
                        UserHandle.formatUid(pw, ass.mTargetUid);
                        pw.print(" <- ");
                        pw.print(ass.mSourceProcess);
                        pw.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        UserHandle.formatUid(pw, ass.mSourceUid);
                        pw.println();
                        pw.print("    via ");
                        pw.print(ass.mTargetComponent.flattenToShortString());
                        pw.println();
                        pw.print("    ");
                        long dur = ass.mTime;
                        N1 = N12;
                        if (ass.mNesting > 0) {
                            targetComponents = targetComponents2;
                            dur += now - ass.mStartTime;
                        } else {
                            targetComponents = targetComponents2;
                        }
                        TimeUtils.formatDuration(dur, pw);
                        pw.print(" (");
                        pw.print(ass.mCount);
                        pw.print(" times)");
                        pw.print("  ");
                        int i = 0;
                        while (i < ass.mStateTimes.length) {
                            long amt = ass.mStateTimes[i];
                            if (ass.mLastState - 0 == i) {
                                amt += now - ass.mLastStateUptime;
                            }
                            if (amt != 0) {
                                pw.print(" ");
                                pw.print(ProcessList.makeProcStateString(i + 0));
                                pw.print("=");
                                TimeUtils.formatDuration(amt, pw);
                                if (ass.mLastState - 0 == i) {
                                    pw.print("*");
                                }
                            }
                            i++;
                            dur = dur;
                        }
                        pw.println();
                        if (ass.mNesting > 0) {
                            pw.print("    Currently active: ");
                            TimeUtils.formatDuration(now - ass.mStartTime, pw);
                            pw.println();
                        }
                        i4++;
                        str = dumpPackage;
                        sourceProcesses2 = sourceProcesses;
                        N4 = N4;
                        dumpUid2 = dumpUid;
                        N12 = N1;
                        targetComponents2 = targetComponents;
                    }
                    i3++;
                    str = dumpPackage;
                    z = false;
                    printedAnything = printedAnything2;
                    dumpUid2 = dumpUid2;
                }
                i2++;
                str = dumpPackage;
                dumpUid2 = dumpUid2;
            }
            i1++;
            activityManagerService = this;
            str = dumpPackage;
            dumpUid2 = dumpUid2;
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    private int getAppId(String dumpPackage) {
        if (dumpPackage == null) {
            return -1;
        }
        try {
            return UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(dumpPackage, 0).uid);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return -1;
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpUids(PrintWriter pw, String dumpPackage, int dumpAppId, ActiveUids uids, String header, boolean needSep) {
        boolean printed = false;
        for (int i = 0; i < uids.size(); i++) {
            UidRecord uidRec = uids.valueAt(i);
            if (dumpPackage == null || UserHandle.getAppId(uidRec.uid) == dumpAppId) {
                if (!printed) {
                    printed = true;
                    if (needSep) {
                        pw.println();
                    }
                    pw.print("  ");
                    pw.println(header);
                    needSep = true;
                }
                pw.print("    UID ");
                UserHandle.formatUid(pw, uidRec.uid);
                pw.print(": ");
                pw.println(uidRec);
            }
        }
        return printed;
    }

    /* access modifiers changed from: package-private */
    public void dumpBinderProxyInterfaceCounts(PrintWriter pw, String header) {
        BinderProxy.InterfaceCount[] proxyCounts = BinderProxy.getSortedInterfaceCounts(50);
        pw.println(header);
        for (int i = 0; i < proxyCounts.length; i++) {
            pw.println("    #" + (i + 1) + ": " + proxyCounts[i]);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpBinderProxiesCounts(PrintWriter pw, String header) {
        SparseIntArray counts = BinderInternal.nGetBinderProxyPerUidCounts();
        if (counts == null) {
            return false;
        }
        pw.println(header);
        for (int i = 0; i < counts.size(); i++) {
            int uid = counts.keyAt(i);
            int binderCount = counts.valueAt(i);
            pw.print("    UID ");
            pw.print(uid);
            pw.print(", binder count = ");
            pw.print(binderCount);
            pw.print(", package(s)= ");
            String[] pkgNames = this.mContext.getPackageManager().getPackagesForUid(uid);
            if (pkgNames != null) {
                for (String str : pkgNames) {
                    pw.print(str);
                    pw.print("; ");
                }
            } else {
                pw.print("NO PACKAGE NAME FOUND");
            }
            pw.println();
        }
        return true;
    }

    /* access modifiers changed from: package-private */
    public void dumpBinderProxies(PrintWriter pw, int minCountToDumpInterfaces) {
        pw.println("ACTIVITY MANAGER BINDER PROXY STATE (dumpsys activity binder-proxies)");
        Flog.i(101, "dumpBinderProxiesCounts begin");
        int proxyCount = BinderProxy.getProxyCount();
        if (proxyCount < minCountToDumpInterfaces) {
            pw.print("Not dumping proxy interface counts because size (" + Integer.toString(proxyCount) + ") looks reasonable");
            pw.println();
        }
        dumpBinderProxiesCounts(pw, "  Counts of Binder Proxies held by SYSTEM");
        Flog.i(101, "dumpBinderProxiesCounts end");
    }

    /* access modifiers changed from: package-private */
    public void dumpLruEntryLocked(PrintWriter pw, int index, ProcessRecord proc) {
        pw.print("    #");
        pw.print(index);
        pw.print(": ");
        pw.print(ProcessList.makeOomAdjString(proc.setAdj, false));
        pw.print(" ");
        pw.print(ProcessList.makeProcStateString(proc.getCurProcState()));
        pw.print(" ");
        pw.print(proc.toShortString());
        pw.print(" ");
        if (proc.hasActivitiesOrRecentTasks() || proc.hasClientActivities() || proc.treatLikeActivity) {
            pw.print(" activity=");
            boolean printed = false;
            if (proc.hasActivities()) {
                pw.print("activities");
                printed = true;
            }
            if (proc.hasRecentTasks()) {
                if (printed) {
                    pw.print("|");
                }
                pw.print("recents");
                printed = true;
            }
            if (proc.hasClientActivities()) {
                if (printed) {
                    pw.print("|");
                }
                pw.print("client");
                printed = true;
            }
            if (proc.treatLikeActivity) {
                if (printed) {
                    pw.print("|");
                }
                pw.print("treated");
            }
        }
        pw.println();
    }

    /* access modifiers changed from: package-private */
    public void dumpLruLocked(PrintWriter pw, String dumpPackage) {
        pw.println("ACTIVITY MANAGER LRU PROCESSES (dumpsys activity lru)");
        boolean first = true;
        int i = this.mProcessList.mLruProcesses.size() - 1;
        while (i >= this.mProcessList.mLruProcessActivityStart) {
            ProcessRecord r = this.mProcessList.mLruProcesses.get(i);
            if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                if (first) {
                    pw.println("  Activities:");
                    first = false;
                }
                dumpLruEntryLocked(pw, i, r);
            }
            i--;
        }
        boolean first2 = true;
        while (i >= this.mProcessList.mLruProcessServiceStart) {
            ProcessRecord r2 = this.mProcessList.mLruProcesses.get(i);
            if (dumpPackage == null || r2.pkgList.containsKey(dumpPackage)) {
                if (first2) {
                    pw.println("  Services:");
                    first2 = false;
                }
                dumpLruEntryLocked(pw, i, r2);
            }
            i--;
        }
        boolean first3 = true;
        while (i >= 0) {
            ProcessRecord r3 = this.mProcessList.mLruProcesses.get(i);
            if (dumpPackage == null || r3.pkgList.containsKey(dumpPackage)) {
                if (first3) {
                    pw.println("  Other:");
                    first3 = false;
                }
                dumpLruEntryLocked(pw, i, r3);
            }
            i--;
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage, int dumpAppId) {
        int numPers;
        boolean needSep;
        boolean needSep2;
        Throwable th;
        boolean needSep3 = false;
        int numPers2 = 0;
        pw.println("ACTIVITY MANAGER RUNNING PROCESSES (dumpsys activity processes)");
        if (dumpAll) {
            int NP = this.mProcessList.mProcessNames.getMap().size();
            for (int ip = 0; ip < NP; ip++) {
                SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(ip);
                int NA = procs.size();
                for (int ia = 0; ia < NA; ia++) {
                    ProcessRecord r = procs.valueAt(ia);
                    if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                        if (!needSep3) {
                            pw.println("  All known processes:");
                            needSep3 = true;
                        }
                        pw.print(r.isPersistent() ? "  *PERS*" : "  *APP*");
                        pw.print(" UID ");
                        pw.print(procs.keyAt(ia));
                        pw.print(" ");
                        pw.println(r);
                        r.dump(pw, "    ");
                        if (r.isPersistent()) {
                            numPers2++;
                        }
                    }
                }
            }
            numPers = numPers2;
        } else {
            numPers = 0;
        }
        if (this.mProcessList.mIsolatedProcesses.size() > 0) {
            boolean printed = false;
            for (int i = 0; i < this.mProcessList.mIsolatedProcesses.size(); i++) {
                ProcessRecord r2 = this.mProcessList.mIsolatedProcesses.valueAt(i);
                if (dumpPackage == null || r2.pkgList.containsKey(dumpPackage)) {
                    if (!printed) {
                        if (needSep3) {
                            pw.println();
                        }
                        pw.println("  Isolated process list (sorted by uid):");
                        printed = true;
                        needSep3 = true;
                    }
                    pw.print("    Isolated #");
                    pw.print(i);
                    pw.print(": ");
                    pw.println(r2);
                }
            }
        }
        if (this.mActiveInstrumentation.size() > 0) {
            boolean printed2 = false;
            for (int i2 = 0; i2 < this.mActiveInstrumentation.size(); i2++) {
                ActiveInstrumentation ai = this.mActiveInstrumentation.get(i2);
                if (dumpPackage == null || ai.mClass.getPackageName().equals(dumpPackage) || ai.mTargetInfo.packageName.equals(dumpPackage)) {
                    if (!printed2) {
                        if (needSep3) {
                            pw.println();
                        }
                        pw.println("  Active instrumentation:");
                        printed2 = true;
                        needSep3 = true;
                    }
                    pw.print("    Instrumentation #");
                    pw.print(i2);
                    pw.print(": ");
                    pw.println(ai);
                    ai.dump(pw, "      ");
                }
            }
        }
        if (this.mProcessList.mActiveUids.size() > 0 && dumpUids(pw, dumpPackage, dumpAppId, this.mProcessList.mActiveUids, "UID states:", needSep3)) {
            needSep3 = true;
        }
        if (dumpAll && this.mValidateUids.size() > 0 && dumpUids(pw, dumpPackage, dumpAppId, this.mValidateUids, "UID validation:", needSep3)) {
            needSep3 = true;
        }
        if (this.mProcessList.getLruSizeLocked() > 0) {
            if (needSep3) {
                pw.println();
            }
            this.mProcessList.dumpLruListHeaderLocked(pw);
            dumpProcessOomList(pw, this, this.mProcessList.mLruProcesses, "    ", "Proc", "PERS", false, dumpPackage);
            needSep3 = true;
        }
        if (dumpAll || dumpPackage != null) {
            synchronized (this.mPidsSelfLocked) {
                boolean printed3 = false;
                needSep2 = needSep3;
                for (int i3 = 0; i3 < this.mPidsSelfLocked.size(); i3++) {
                    try {
                        try {
                            ProcessRecord r3 = this.mPidsSelfLocked.valueAt(i3);
                            if (dumpPackage == null || r3.pkgList.containsKey(dumpPackage)) {
                                if (!printed3) {
                                    if (needSep2) {
                                        pw.println();
                                    }
                                    needSep2 = true;
                                    pw.println("  PID mappings:");
                                    printed3 = true;
                                }
                                pw.print("    PID #");
                                pw.print(this.mPidsSelfLocked.keyAt(i3));
                                pw.print(": ");
                                pw.println(this.mPidsSelfLocked.valueAt(i3));
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            }
                            throw th;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                }
            }
            needSep3 = needSep2;
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                boolean printed4 = false;
                needSep = needSep3;
                for (int i4 = 0; i4 < this.mImportantProcesses.size(); i4++) {
                    ProcessRecord r4 = this.mPidsSelfLocked.get(this.mImportantProcesses.valueAt(i4).pid);
                    if (dumpPackage != null) {
                        if (r4 != null) {
                            if (!r4.pkgList.containsKey(dumpPackage)) {
                            }
                        }
                    }
                    if (!printed4) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Foreground Processes:");
                        printed4 = true;
                    }
                    pw.print("    PID #");
                    pw.print(this.mImportantProcesses.keyAt(i4));
                    pw.print(": ");
                    pw.println(this.mImportantProcesses.valueAt(i4));
                }
            }
            needSep3 = needSep;
        }
        if (this.mPersistentStartingProcesses.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            pw.println("  Persisent processes that are starting:");
            dumpProcessList(pw, this, this.mPersistentStartingProcesses, "    ", "Starting Norm", "Restarting PERS", dumpPackage);
        }
        if (this.mProcessList.mRemovedProcesses.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            pw.println("  Processes that are being removed:");
            dumpProcessList(pw, this, this.mProcessList.mRemovedProcesses, "    ", "Removed Norm", "Removed PERS", dumpPackage);
        }
        if (this.mProcessesOnHold.size() > 0) {
            if (needSep3) {
                pw.println();
            }
            needSep3 = true;
            pw.println("  Processes that are on old until the system is ready:");
            dumpProcessList(pw, this, this.mProcessesOnHold, "    ", "OnHold Norm", "OnHold PERS", dumpPackage);
        }
        boolean needSep4 = this.mAppErrors.dumpLocked(fd, pw, dumpProcessesToGc(pw, needSep3, dumpPackage), dumpPackage);
        if (dumpPackage == null) {
            pw.println();
            needSep4 = false;
            this.mUserController.dump(pw, dumpAll);
        }
        boolean needSep5 = this.mAtmInternal.dumpForProcesses(fd, pw, dumpAll, dumpPackage, dumpAppId, needSep4, this.mTestPssMode, this.mWakefulness);
        if (dumpAll && this.mProcessList.mPendingStarts.size() > 0) {
            if (needSep5) {
                pw.println();
            }
            needSep5 = true;
            pw.println("  mPendingStarts: ");
            int len = this.mProcessList.mPendingStarts.size();
            for (int i5 = 0; i5 < len; i5++) {
                pw.println("    " + this.mProcessList.mPendingStarts.keyAt(i5) + ": " + this.mProcessList.mPendingStarts.valueAt(i5));
            }
        }
        if (dumpAll) {
            int NI = this.mUidObservers.getRegisteredCallbackCount();
            boolean printed5 = false;
            for (int i6 = 0; i6 < NI; i6++) {
                UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i6);
                if (dumpPackage == null || dumpPackage.equals(reg.pkg)) {
                    if (!printed5) {
                        pw.println("  mUidObservers:");
                        printed5 = true;
                    }
                    pw.print("    ");
                    UserHandle.formatUid(pw, reg.uid);
                    pw.print(" ");
                    pw.print(reg.pkg);
                    pw.print(" ");
                    pw.print(this.mUidObservers.getRegisteredCallbackItem(i6).getClass().getTypeName());
                    pw.print(":");
                    if ((reg.which & 4) != 0) {
                        pw.print(" IDLE");
                    }
                    if ((reg.which & 8) != 0) {
                        pw.print(" ACT");
                    }
                    if ((reg.which & 2) != 0) {
                        pw.print(" GONE");
                    }
                    if ((reg.which & 1) != 0) {
                        pw.print(" STATE");
                        pw.print(" (cut=");
                        pw.print(reg.cutpoint);
                        pw.print(")");
                    }
                    pw.println();
                    if (reg.lastProcStates != null) {
                        int NJ = reg.lastProcStates.size();
                        for (int j = 0; j < NJ; j++) {
                            pw.print("      Last ");
                            UserHandle.formatUid(pw, reg.lastProcStates.keyAt(j));
                            pw.print(": ");
                            pw.println(reg.lastProcStates.valueAt(j));
                        }
                    }
                }
            }
            pw.println("  mDeviceIdleWhitelist=" + Arrays.toString(this.mDeviceIdleWhitelist));
            pw.println("  mDeviceIdleExceptIdleWhitelist=" + Arrays.toString(this.mDeviceIdleExceptIdleWhitelist));
            pw.println("  mDeviceIdleTempWhitelist=" + Arrays.toString(this.mDeviceIdleTempWhitelist));
            if (this.mPendingTempWhitelist.size() > 0) {
                pw.println("  mPendingTempWhitelist:");
                for (int i7 = 0; i7 < this.mPendingTempWhitelist.size(); i7++) {
                    PendingTempWhitelist ptw = this.mPendingTempWhitelist.valueAt(i7);
                    pw.print("    ");
                    UserHandle.formatUid(pw, ptw.targetUid);
                    pw.print(": ");
                    TimeUtils.formatDuration(ptw.duration, pw);
                    pw.print(" ");
                    pw.println(ptw.tag);
                }
            }
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (dumpPackage == null || dumpPackage.equals(this.mDebugApp) || dumpPackage.equals(this.mOrigDebugApp))) {
            if (needSep5) {
                pw.println();
                needSep5 = false;
            }
            pw.println("  mDebugApp=" + this.mDebugApp + "/orig=" + this.mOrigDebugApp + " mDebugTransient=" + this.mDebugTransient + " mOrigWaitForDebugger=" + this.mOrigWaitForDebugger);
        }
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            pw.println("  Mem watch processes:");
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2 = this.mMemWatchProcesses.getMap();
            for (int i8 = 0; i8 < procs2.size(); i8++) {
                String proc = procs2.keyAt(i8);
                SparseArray<Pair<Long, String>> uids = procs2.valueAt(i8);
                for (int j2 = 0; j2 < uids.size(); j2++) {
                    if (needSep5) {
                        pw.println();
                        needSep5 = false;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append("    ");
                    sb.append(proc);
                    sb.append('/');
                    UserHandle.formatUid(sb, uids.keyAt(j2));
                    Pair<Long, String> val = uids.valueAt(j2);
                    sb.append(": ");
                    DebugUtils.sizeValueToString(((Long) val.first).longValue(), sb);
                    if (val.second != null) {
                        sb.append(", report to ");
                        sb.append((String) val.second);
                    }
                    pw.println(sb.toString());
                }
            }
            pw.print("  mMemWatchDumpProcName=");
            pw.println(this.mMemWatchDumpProcName);
            pw.print("  mMemWatchDumpFile=");
            pw.println(this.mMemWatchDumpFile);
            pw.print("  mMemWatchDumpPid=");
            pw.println(this.mMemWatchDumpPid);
            pw.print("  mMemWatchDumpUid=");
            pw.println(this.mMemWatchDumpUid);
            pw.print("  mMemWatchIsUserInitiated=");
            pw.println(this.mMemWatchIsUserInitiated);
        }
        String str = this.mTrackAllocationApp;
        if (str != null && (dumpPackage == null || dumpPackage.equals(str))) {
            if (needSep5) {
                pw.println();
                needSep5 = false;
            }
            pw.println("  mTrackAllocationApp=" + this.mTrackAllocationApp);
        }
        if (!(this.mProfileData.getProfileApp() == null && this.mProfileData.getProfileProc() == null && (this.mProfileData.getProfilerInfo() == null || (this.mProfileData.getProfilerInfo().profileFile == null && this.mProfileData.getProfilerInfo().profileFd == null))) && (dumpPackage == null || dumpPackage.equals(this.mProfileData.getProfileApp()))) {
            if (needSep5) {
                pw.println();
                needSep5 = false;
            }
            pw.println("  mProfileApp=" + this.mProfileData.getProfileApp() + " mProfileProc=" + this.mProfileData.getProfileProc());
            if (this.mProfileData.getProfilerInfo() != null) {
                pw.println("  mProfileFile=" + this.mProfileData.getProfilerInfo().profileFile + " mProfileFd=" + this.mProfileData.getProfilerInfo().profileFd);
                pw.println("  mSamplingInterval=" + this.mProfileData.getProfilerInfo().samplingInterval + " mAutoStopProfiler=" + this.mProfileData.getProfilerInfo().autoStopProfiler + " mStreamingOutput=" + this.mProfileData.getProfilerInfo().streamingOutput);
                StringBuilder sb2 = new StringBuilder();
                sb2.append("  mProfileType=");
                sb2.append(this.mProfileType);
                pw.println(sb2.toString());
            }
        }
        String str2 = this.mNativeDebuggingApp;
        if (str2 != null && (dumpPackage == null || dumpPackage.equals(str2))) {
            if (needSep5) {
                pw.println();
            }
            pw.println("  mNativeDebuggingApp=" + this.mNativeDebuggingApp);
        }
        if (dumpPackage == null) {
            if (this.mAlwaysFinishActivities) {
                pw.println("  mAlwaysFinishActivities=" + this.mAlwaysFinishActivities);
            }
            if (dumpAll) {
                pw.println("  Total persistent processes: " + numPers);
                pw.println("  mProcessesReady=" + this.mProcessesReady + " mSystemReady=" + this.mSystemReady + " mBooted=" + this.mBooted + " mFactoryTest=" + this.mFactoryTest);
                StringBuilder sb3 = new StringBuilder();
                sb3.append("  mBooting=");
                sb3.append(this.mBooting);
                sb3.append(" mCallFinishBooting=");
                sb3.append(this.mCallFinishBooting);
                sb3.append(" mBootAnimationComplete=");
                sb3.append(this.mBootAnimationComplete);
                pw.println(sb3.toString());
                pw.print("  mLastPowerCheckUptime=");
                TimeUtils.formatDuration(this.mLastPowerCheckUptime, pw);
                pw.println("");
                this.mOomAdjuster.dumpSequenceNumbersLocked(pw);
                this.mOomAdjuster.dumpProcCountsLocked(pw);
                pw.println("  mAllowLowerMemLevel=" + this.mAllowLowerMemLevel + " mLastMemoryLevel=" + this.mLastMemoryLevel + " mLastNumProcesses=" + this.mLastNumProcesses);
                long now = SystemClock.uptimeMillis();
                pw.print("  mLastIdleTime=");
                TimeUtils.formatDuration(now, this.mLastIdleTime, pw);
                pw.print(" mLowRamSinceLastIdle=");
                TimeUtils.formatDuration(getLowRamTimeSinceIdle(now), pw);
                pw.println();
                pw.println();
                pw.print("  mUidChangeDispatchCount=");
                pw.print(this.mUidChangeDispatchCount);
                pw.println();
                pw.println("  Slow UID dispatches:");
                int N = this.mUidObservers.beginBroadcast();
                for (int i9 = 0; i9 < N; i9++) {
                    UidObserverRegistration r5 = (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(i9);
                    pw.print("    ");
                    pw.print(this.mUidObservers.getBroadcastItem(i9).getClass().getTypeName());
                    pw.print(": ");
                    pw.print(r5.mSlowDispatchCount);
                    pw.print(" / Max ");
                    pw.print(r5.mMaxDispatchTime);
                    pw.println("ms");
                }
                this.mUidObservers.finishBroadcast();
                pw.println();
                pw.println("  ServiceManager statistics:");
                ServiceManager.sStatLogger.dump(pw, "    ");
                pw.println();
            }
        }
        pw.println("  mForceBackgroundCheck=" + this.mForceBackgroundCheck);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void writeProcessesToProtoLocked(ProtoOutputStream proto, String dumpPackage) {
        int numPers;
        int NP = this.mProcessList.mProcessNames.getMap().size();
        int numPers2 = 0;
        for (int ip = 0; ip < NP; ip++) {
            SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(ip);
            int NA = procs.size();
            for (int ia = 0; ia < NA; ia++) {
                ProcessRecord r = procs.valueAt(ia);
                if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                    r.writeToProto(proto, 2246267895809L, this.mProcessList.mLruProcesses.indexOf(r));
                    if (r.isPersistent()) {
                        numPers2++;
                    }
                }
            }
        }
        for (int i = 0; i < this.mProcessList.mIsolatedProcesses.size(); i++) {
            ProcessRecord r2 = this.mProcessList.mIsolatedProcesses.valueAt(i);
            if (dumpPackage == null || r2.pkgList.containsKey(dumpPackage)) {
                r2.writeToProto(proto, 2246267895810L, this.mProcessList.mLruProcesses.indexOf(r2));
            }
        }
        for (int i2 = 0; i2 < this.mActiveInstrumentation.size(); i2++) {
            ActiveInstrumentation ai = this.mActiveInstrumentation.get(i2);
            if (dumpPackage == null || ai.mClass.getPackageName().equals(dumpPackage) || ai.mTargetInfo.packageName.equals(dumpPackage)) {
                ai.writeToProto(proto, 2246267895811L);
            }
        }
        int whichAppId = getAppId(dumpPackage);
        for (int i3 = 0; i3 < this.mProcessList.mActiveUids.size(); i3++) {
            UidRecord uidRec = this.mProcessList.mActiveUids.valueAt(i3);
            if (dumpPackage == null || UserHandle.getAppId(uidRec.uid) == whichAppId) {
                uidRec.writeToProto(proto, 2246267895812L);
            }
        }
        for (int i4 = 0; i4 < this.mValidateUids.size(); i4++) {
            UidRecord uidRec2 = this.mValidateUids.valueAt(i4);
            if (dumpPackage == null || UserHandle.getAppId(uidRec2.uid) == whichAppId) {
                uidRec2.writeToProto(proto, 2246267895813L);
            }
        }
        if (this.mProcessList.getLruSizeLocked() > 0) {
            long lruToken = proto.start(1146756268038L);
            int total = this.mProcessList.getLruSizeLocked();
            proto.write(1120986464257L, total);
            proto.write(1120986464258L, total - this.mProcessList.mLruProcessActivityStart);
            proto.write(1120986464259L, total - this.mProcessList.mLruProcessServiceStart);
            numPers = numPers2;
            writeProcessOomListToProto(proto, 2246267895812L, this, this.mProcessList.mLruProcesses, false, dumpPackage);
            proto.end(lruToken);
        } else {
            numPers = numPers2;
        }
        if (dumpPackage != null) {
            synchronized (this.mPidsSelfLocked) {
                for (int i5 = 0; i5 < this.mPidsSelfLocked.size(); i5++) {
                    ProcessRecord r3 = this.mPidsSelfLocked.valueAt(i5);
                    if (r3.pkgList.containsKey(dumpPackage)) {
                        r3.writeToProto(proto, 2246267895815L);
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                for (int i6 = 0; i6 < this.mImportantProcesses.size(); i6++) {
                    ImportanceToken it = this.mImportantProcesses.valueAt(i6);
                    ProcessRecord r4 = this.mPidsSelfLocked.get(it.pid);
                    if (dumpPackage != null) {
                        if (r4 != null) {
                            if (!r4.pkgList.containsKey(dumpPackage)) {
                            }
                        }
                    }
                    it.writeToProto(proto, 2246267895816L);
                }
            }
        }
        for (int i7 = 0; i7 < this.mPersistentStartingProcesses.size(); i7++) {
            ProcessRecord r5 = this.mPersistentStartingProcesses.get(i7);
            if (dumpPackage == null || dumpPackage.equals(r5.info.packageName)) {
                r5.writeToProto(proto, 2246267895817L);
            }
        }
        for (int i8 = 0; i8 < this.mProcessList.mRemovedProcesses.size(); i8++) {
            ProcessRecord r6 = this.mProcessList.mRemovedProcesses.get(i8);
            if (dumpPackage == null || dumpPackage.equals(r6.info.packageName)) {
                r6.writeToProto(proto, 2246267895818L);
            }
        }
        for (int i9 = 0; i9 < this.mProcessesOnHold.size(); i9++) {
            ProcessRecord r7 = this.mProcessesOnHold.get(i9);
            if (dumpPackage == null || dumpPackage.equals(r7.info.packageName)) {
                r7.writeToProto(proto, 2246267895819L);
            }
        }
        writeProcessesToGcToProto(proto, 2246267895820L, dumpPackage);
        this.mAppErrors.writeToProto(proto, 1146756268045L, dumpPackage);
        this.mAtmInternal.writeProcessesToProto(proto, dumpPackage, this.mWakefulness, this.mTestPssMode);
        if (dumpPackage == null) {
            this.mUserController.writeToProto(proto, 1146756268046L);
        }
        int NI = this.mUidObservers.getRegisteredCallbackCount();
        for (int i10 = 0; i10 < NI; i10++) {
            UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i10);
            if (dumpPackage == null || dumpPackage.equals(reg.pkg)) {
                reg.writeToProto(proto, 2246267895831L);
            }
        }
        for (int v : this.mDeviceIdleWhitelist) {
            proto.write(2220498092056L, v);
        }
        for (int v2 : this.mDeviceIdleTempWhitelist) {
            proto.write(2220498092057L, v2);
        }
        if (this.mPendingTempWhitelist.size() > 0) {
            for (int i11 = 0; i11 < this.mPendingTempWhitelist.size(); i11++) {
                this.mPendingTempWhitelist.valueAt(i11).writeToProto(proto, 2246267895834L);
            }
        }
        long j = 1138166333441L;
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (dumpPackage == null || dumpPackage.equals(this.mDebugApp) || dumpPackage.equals(this.mOrigDebugApp))) {
            long debugAppToken = proto.start(1146756268062L);
            proto.write(1138166333441L, this.mDebugApp);
            proto.write(1138166333442L, this.mOrigDebugApp);
            proto.write(1133871366147L, this.mDebugTransient);
            proto.write(1133871366148L, this.mOrigWaitForDebugger);
            proto.end(debugAppToken);
        }
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            long token = proto.start(1146756268064L);
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2 = this.mMemWatchProcesses.getMap();
            int i12 = 0;
            while (i12 < procs2.size()) {
                String proc = procs2.keyAt(i12);
                SparseArray<Pair<Long, String>> uids = procs2.valueAt(i12);
                long ptoken = proto.start(2246267895809L);
                proto.write(j, proc);
                int j2 = 0;
                while (j2 < uids.size()) {
                    long utoken = proto.start(2246267895810L);
                    Pair<Long, String> val = uids.valueAt(j2);
                    proto.write(1120986464257L, uids.keyAt(j2));
                    proto.write(1138166333442L, DebugUtils.sizeValueToString(((Long) val.first).longValue(), new StringBuilder()));
                    proto.write(1138166333443L, (String) val.second);
                    proto.end(utoken);
                    j2++;
                    NI = NI;
                    proc = proc;
                }
                proto.end(ptoken);
                i12++;
                token = token;
                j = 1138166333441L;
            }
            long dtoken = proto.start(1146756268034L);
            proto.write(1138166333441L, this.mMemWatchDumpProcName);
            proto.write(1138166333442L, this.mMemWatchDumpFile);
            proto.write(1120986464259L, this.mMemWatchDumpPid);
            proto.write(1120986464260L, this.mMemWatchDumpUid);
            proto.write(1133871366149L, this.mMemWatchIsUserInitiated);
            proto.end(dtoken);
            proto.end(token);
        }
        String str = this.mTrackAllocationApp;
        if (str != null && (dumpPackage == null || dumpPackage.equals(str))) {
            proto.write(1138166333473L, this.mTrackAllocationApp);
        }
        if (!(this.mProfileData.getProfileApp() == null && this.mProfileData.getProfileProc() == null && (this.mProfileData.getProfilerInfo() == null || (this.mProfileData.getProfilerInfo().profileFile == null && this.mProfileData.getProfilerInfo().profileFd == null))) && (dumpPackage == null || dumpPackage.equals(this.mProfileData.getProfileApp()))) {
            long token2 = proto.start(1146756268066L);
            proto.write(1138166333441L, this.mProfileData.getProfileApp());
            this.mProfileData.getProfileProc().writeToProto(proto, 1146756268034L);
            if (this.mProfileData.getProfilerInfo() != null) {
                this.mProfileData.getProfilerInfo().writeToProto(proto, 1146756268035L);
                proto.write(1120986464260L, this.mProfileType);
            }
            proto.end(token2);
        }
        if (dumpPackage == null || dumpPackage.equals(this.mNativeDebuggingApp)) {
            proto.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (dumpPackage == null) {
            proto.write(1133871366180L, this.mAlwaysFinishActivities);
            proto.write(1120986464294L, numPers);
            proto.write(1133871366183L, this.mProcessesReady);
            proto.write(1133871366184L, this.mSystemReady);
            proto.write(1133871366185L, this.mBooted);
            proto.write(1120986464298L, this.mFactoryTest);
            proto.write(1133871366187L, this.mBooting);
            proto.write(1133871366188L, this.mCallFinishBooting);
            proto.write(1133871366189L, this.mBootAnimationComplete);
            proto.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mOomAdjuster.dumpProcessListVariablesLocked(proto);
            proto.write(1133871366199L, this.mAllowLowerMemLevel);
            proto.write(1120986464312L, this.mLastMemoryLevel);
            proto.write(1120986464313L, this.mLastNumProcesses);
            long now = SystemClock.uptimeMillis();
            ProtoUtils.toDuration(proto, 1146756268090L, this.mLastIdleTime, now);
            proto.write(1112396529723L, getLowRamTimeSinceIdle(now));
        }
    }

    /* access modifiers changed from: package-private */
    public void writeProcessesToGcToProto(ProtoOutputStream proto, long fieldId, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord r = this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                    long token = proto.start(fieldId);
                    r.writeToProto(proto, 1146756268033L);
                    proto.write(1133871366146L, r.reportLowMemory);
                    proto.write(1112396529667L, now);
                    proto.write(1112396529668L, r.lastRequestedGc);
                    proto.write(1112396529669L, r.lastLowMemory);
                    proto.end(token);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpProcessesToGc(PrintWriter pw, boolean needSep, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            boolean printed = false;
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord proc = this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(proc.info.packageName)) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Processes that are waiting to GC:");
                        printed = true;
                    }
                    pw.print("    Process ");
                    pw.println(proc);
                    pw.print("      lowMem=");
                    pw.print(proc.reportLowMemory);
                    pw.print(", last gced=");
                    pw.print(now - proc.lastRequestedGc);
                    pw.print(" ms ago, last lowMem=");
                    pw.print(now - proc.lastLowMemory);
                    pw.println(" ms ago");
                }
            }
        }
        return needSep;
    }

    /* access modifiers changed from: package-private */
    public void printOomLevel(PrintWriter pw, String name, int adj) {
        pw.print("    ");
        if (adj >= 0) {
            pw.print(' ');
            if (adj < 10) {
                pw.print(' ');
            }
        } else if (adj > -10) {
            pw.print(' ');
        }
        pw.print(adj);
        pw.print(": ");
        pw.print(name);
        pw.print(" (");
        pw.print(stringifySize(this.mProcessList.getMemLevel(adj), 1024));
        pw.println(")");
    }

    /* access modifiers changed from: package-private */
    public boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll) {
        boolean needSep = false;
        if (this.mProcessList.getLruSizeLocked() > 0) {
            if (0 != 0) {
                pw.println();
            }
            pw.println("  OOM levels:");
            printOomLevel(pw, "SYSTEM_ADJ", -900);
            printOomLevel(pw, "PERSISTENT_PROC_ADJ", -800);
            printOomLevel(pw, "PERSISTENT_SERVICE_ADJ", -700);
            printOomLevel(pw, "FOREGROUND_APP_ADJ", 0);
            printOomLevel(pw, "VISIBLE_APP_ADJ", 100);
            printOomLevel(pw, "PERCEPTIBLE_APP_ADJ", 200);
            printOomLevel(pw, "PERCEPTIBLE_LOW_APP_ADJ", 250);
            printOomLevel(pw, "BACKUP_APP_ADJ", DisplayTransformManager.LEVEL_COLOR_MATRIX_INVERT_COLOR);
            printOomLevel(pw, "HEAVY_WEIGHT_APP_ADJ", 400);
            printOomLevel(pw, "SERVICE_ADJ", SystemService.PHASE_SYSTEM_SERVICES_READY);
            printOomLevel(pw, "HOME_APP_ADJ", SystemService.PHASE_THIRD_PARTY_APPS_CAN_START);
            printOomLevel(pw, "PREVIOUS_APP_ADJ", 700);
            printOomLevel(pw, "SERVICE_B_ADJ", 800);
            printOomLevel(pw, "CACHED_APP_MIN_ADJ", 900);
            printOomLevel(pw, "CACHED_APP_MAX_ADJ", 999);
            if (1 != 0) {
                pw.println();
            }
            pw.print("  Process OOM control (");
            pw.print(this.mProcessList.getLruSizeLocked());
            pw.print(" total, non-act at ");
            pw.print(this.mProcessList.getLruSizeLocked() - this.mProcessList.mLruProcessActivityStart);
            pw.print(", non-svc at ");
            pw.print(this.mProcessList.getLruSizeLocked() - this.mProcessList.mLruProcessServiceStart);
            pw.println("):");
            dumpProcessOomList(pw, this, this.mProcessList.mLruProcesses, "    ", "Proc", "PERS", true, null);
            needSep = true;
        }
        dumpProcessesToGc(pw, needSep, null);
        pw.println();
        this.mAtmInternal.dumpForOom(pw);
        return true;
    }

    private boolean reportLmkKillAtOrBelow(PrintWriter pw, int oom_adj) {
        Integer cnt = ProcessList.getLmkdKillCount(0, oom_adj);
        if (cnt == null) {
            return false;
        }
        pw.println("    kills at or below oom_adj " + oom_adj + ": " + cnt);
        return true;
    }

    /* access modifiers changed from: package-private */
    public boolean dumpLmkLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER LMK KILLS (dumpsys activity lmk)");
        Integer cnt = ProcessList.getLmkdKillCount(NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE);
        if (cnt == null) {
            return false;
        }
        pw.println("  Total number of kills: " + cnt);
        if (!reportLmkKillAtOrBelow(pw, 999) || !reportLmkKillAtOrBelow(pw, 900) || !reportLmkKillAtOrBelow(pw, 800) || !reportLmkKillAtOrBelow(pw, 700) || !reportLmkKillAtOrBelow(pw, SystemService.PHASE_THIRD_PARTY_APPS_CAN_START) || !reportLmkKillAtOrBelow(pw, SystemService.PHASE_SYSTEM_SERVICES_READY) || !reportLmkKillAtOrBelow(pw, 400) || !reportLmkKillAtOrBelow(pw, DisplayTransformManager.LEVEL_COLOR_MATRIX_INVERT_COLOR) || !reportLmkKillAtOrBelow(pw, 250) || !reportLmkKillAtOrBelow(pw, 200) || !reportLmkKillAtOrBelow(pw, 100) || !reportLmkKillAtOrBelow(pw, 0)) {
            return false;
        }
        return true;
    }

    /* access modifiers changed from: protected */
    public boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args, int opti, boolean dumpAll) {
        return this.mProviderMap.dumpProvider(fd, pw, name, args, opti, dumpAll);
    }

    /* access modifiers changed from: protected */
    public boolean dumpProviderProto(FileDescriptor fd, PrintWriter pw, String name, String[] args) {
        return this.mProviderMap.dumpProviderProto(fd, pw, name, args);
    }

    public static class ItemMatcher {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        public void build(String name) {
            ComponentName componentName = ComponentName.unflattenFromString(name);
            if (componentName != null) {
                if (this.components == null) {
                    this.components = new ArrayList<>();
                }
                this.components.add(componentName);
                this.all = false;
                return;
            }
            try {
                int objectId = Integer.parseInt(name, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList<>();
                }
                this.objects.add(Integer.valueOf(objectId));
                this.all = false;
            } catch (RuntimeException e) {
                if (this.strings == null) {
                    this.strings = new ArrayList<>();
                }
                this.strings.add(name);
                this.all = false;
            }
        }

        public int build(String[] args, int opti) {
            while (opti < args.length) {
                String name = args[opti];
                if ("--".equals(name)) {
                    return opti + 1;
                }
                build(name);
                opti++;
            }
            return opti;
        }

        public boolean match(Object object, ComponentName comp) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (this.components.get(i).equals(comp)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (System.identityHashCode(object) == this.objects.get(i2).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings == null) {
                return false;
            }
            String flat = comp.flattenToString();
            for (int i3 = 0; i3 < this.strings.size(); i3++) {
                if (flat.contains(this.strings.get(i3))) {
                    return true;
                }
            }
            return false;
        }
    }

    /* access modifiers changed from: package-private */
    public void writeBroadcastsToProtoLocked(ProtoOutputStream proto) {
        if (this.mRegisteredReceivers.size() > 0) {
            for (ReceiverList r : this.mRegisteredReceivers.values()) {
                r.writeToProto(proto, 2246267895809L);
            }
        }
        this.mReceiverResolver.writeToProto(proto, 1146756268034L);
        for (BroadcastQueue q : this.mBroadcastQueues) {
            q.writeToProto(proto, 2246267895811L);
        }
        int user = 0;
        while (true) {
            long token = 1138166333441L;
            if (user < this.mStickyBroadcasts.size()) {
                long token2 = proto.start(2246267895812L);
                proto.write(1120986464257L, this.mStickyBroadcasts.keyAt(user));
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    long actionToken = proto.start(2246267895810L);
                    proto.write(token, ent.getKey());
                    Iterator<Intent> it = ent.getValue().iterator();
                    while (it.hasNext()) {
                        it.next().writeToProto(proto, 2246267895810L, false, true, true, false);
                        actionToken = actionToken;
                        token2 = token2;
                    }
                    proto.end(actionToken);
                    token = 1138166333441L;
                }
                proto.end(token2);
                user++;
            } else {
                long handlerToken = proto.start(1146756268037L);
                proto.write(1138166333441L, this.mHandler.toString());
                this.mHandler.getLooper().writeToProto(proto, 1146756268034L);
                proto.end(handlerToken);
                return;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpAllowedAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        pw.println("ACTIVITY MANAGER ALLOWED ASSOCIATION STATE (dumpsys activity allowed-associations)");
        boolean printed = false;
        if (this.mAllowedAssociations != null) {
            for (int i = 0; i < this.mAllowedAssociations.size(); i++) {
                String pkg = this.mAllowedAssociations.keyAt(i);
                ArraySet<String> asc = this.mAllowedAssociations.valueAt(i).getAllowedPackageAssociations();
                boolean printedHeader = false;
                for (int j = 0; j < asc.size(); j++) {
                    if (dumpPackage == null || pkg.equals(dumpPackage) || asc.valueAt(j).equals(dumpPackage)) {
                        if (!printed) {
                            pw.println("  Allowed associations (by restricted package):");
                            printed = true;
                        }
                        if (!printedHeader) {
                            pw.print("  * ");
                            pw.print(pkg);
                            pw.println(":");
                            printedHeader = true;
                        }
                        pw.print("      Allow: ");
                        pw.println(asc.valueAt(j));
                    }
                }
                if (this.mAllowedAssociations.valueAt(i).isDebuggable()) {
                    pw.println("      (debuggable)");
                }
            }
        }
        if (!printed) {
            pw.println("  (No association restrictions)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        String dumpPackage2;
        boolean dumpAll2;
        boolean onlyHistory;
        boolean needSep;
        String str;
        String str2;
        boolean printedAnything;
        boolean needSep2;
        boolean dumpAll3;
        boolean needSep3 = false;
        boolean printedAnything2 = false;
        if ("history".equals(dumpPackage)) {
            if (opti >= args.length || !"-s".equals(args[opti])) {
                dumpAll3 = dumpAll;
            } else {
                dumpAll3 = false;
            }
            onlyHistory = true;
            dumpAll2 = dumpAll3;
            dumpPackage2 = null;
        } else {
            dumpAll2 = dumpAll;
            onlyHistory = false;
            dumpPackage2 = dumpPackage;
        }
        pw.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        if (!onlyHistory && dumpAll2) {
            if (this.mRegisteredReceivers.size() > 0) {
                boolean printed = false;
                for (ReceiverList r : this.mRegisteredReceivers.values()) {
                    if (dumpPackage2 == null || (r.app != null && dumpPackage2.equals(r.app.info.packageName))) {
                        if (!printed) {
                            pw.println("  Registered Receivers:");
                            needSep3 = true;
                            printed = true;
                            printedAnything2 = true;
                        }
                        pw.print("  * ");
                        pw.println(r);
                        r.dump(pw, "    ");
                    }
                }
                needSep2 = needSep3;
                printedAnything = printedAnything2;
            } else {
                needSep2 = false;
                printedAnything = false;
            }
            if (this.mReceiverResolver.dump(pw, needSep2 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", dumpPackage2, false, false)) {
                needSep3 = true;
                printedAnything2 = true;
            } else {
                needSep3 = needSep2;
                printedAnything2 = printedAnything;
            }
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        int length = broadcastQueueArr.length;
        boolean z = false;
        boolean needSep4 = needSep3;
        boolean printedAnything3 = printedAnything2;
        int i = 0;
        while (i < length) {
            needSep4 = broadcastQueueArr[i].dumpLocked(fd, pw, args, opti, dumpAll2, dumpPackage2, needSep4);
            printedAnything3 |= needSep4;
            i++;
            z = z;
            length = length;
            broadcastQueueArr = broadcastQueueArr;
        }
        boolean needSep5 = true;
        if (!onlyHistory && this.mStickyBroadcasts != null && dumpPackage2 == null) {
            for (int user = 0; user < this.mStickyBroadcasts.size(); user++) {
                if (needSep5) {
                    pw.println();
                }
                needSep5 = true;
                printedAnything3 = true;
                pw.print("  Sticky broadcasts for user ");
                pw.print(this.mStickyBroadcasts.keyAt(user));
                String str3 = ":";
                pw.println(str3);
                StringBuilder sb = new StringBuilder(128);
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    pw.print("  * Sticky action ");
                    pw.print(ent.getKey());
                    if (dumpAll2) {
                        pw.println(str3);
                        ArrayList<Intent> intents = ent.getValue();
                        int N = intents.size();
                        int i2 = 0;
                        while (i2 < N) {
                            sb.setLength(0);
                            sb.append("    Intent: ");
                            intents.get(i2).toShortString(sb, true, true, false, false);
                            pw.println(sb.toString());
                            Bundle bundle = intents.get(i2).getExtras();
                            if (bundle != null) {
                                str2 = str3;
                                pw.print("      ");
                                pw.println(bundle.toString());
                            } else {
                                str2 = str3;
                            }
                            i2++;
                            needSep5 = needSep5;
                            str3 = str2;
                        }
                        needSep = needSep5;
                        str = str3;
                    } else {
                        needSep = needSep5;
                        str = str3;
                        pw.println("");
                    }
                    needSep5 = needSep;
                    str3 = str;
                }
            }
        }
        if (!onlyHistory && dumpAll2) {
            pw.println();
            BroadcastQueue[] broadcastQueueArr2 = this.mBroadcastQueues;
            for (BroadcastQueue queue : broadcastQueueArr2) {
                pw.println("  mBroadcastsScheduled [" + queue.mQueueName + "]=" + queue.mBroadcastsScheduled);
            }
            pw.println("  mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(pw), "    ");
            pw.println("  mUiHandler:");
            this.mUiHandler.dump(new PrintWriterPrinter(pw), "    ");
            printedAnything3 = true;
        }
        if (!printedAnything3) {
            pw.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            pw.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
            long now = SystemClock.elapsedRealtime();
            if (this.mLastBroadcastStats != null) {
                pw.print("  Last stats (from ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, now, pw);
                pw.print(" to ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, now, pw);
                pw.print(", ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, pw);
                pw.println(" uptime):");
                if (!this.mLastBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                    pw.println("    (nothing)");
                }
                pw.println();
            }
            pw.print("  Current stats (from ");
            TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, now, pw);
            pw.print(" to now, ");
            TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, pw);
            pw.println(" uptime):");
            if (!this.mCurBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                pw.println("    (nothing)");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean fullCheckin, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            BroadcastStats broadcastStats = this.mLastBroadcastStats;
            if (broadcastStats != null) {
                broadcastStats.dumpCheckinStats(pw, dumpPackage);
                if (fullCheckin) {
                    this.mLastBroadcastStats = null;
                    return;
                }
            }
            this.mCurBroadcastStats.dumpCheckinStats(pw, dumpPackage);
            if (fullCheckin) {
                this.mCurBroadcastStats = null;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        new ItemMatcher().build(args, opti);
        pw.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
        boolean needSep = this.mProviderMap.dumpProvidersLocked(pw, dumpAll, dumpPackage);
        boolean printedAnything = false | needSep;
        if (this.mLaunchingProviders.size() > 0) {
            boolean printed = false;
            for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
                ContentProviderRecord r = this.mLaunchingProviders.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.name.getPackageName())) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Launching content providers:");
                        printed = true;
                        printedAnything = true;
                    }
                    pw.print("  Launching #");
                    pw.print(i);
                    pw.print(": ");
                    pw.println(r);
                }
            }
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        pw.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        this.mUgmInternal.dump(pw, dumpAll, dumpPackage);
    }

    /* JADX DEBUG: Can't convert new array creation: APUT found in different block: 0x002c: APUT  (r5v1 java.lang.Object[]), (1 ??[boolean, int, float, short, byte, char]), (r6v2 java.lang.String) */
    private static final int dumpProcessList(PrintWriter pw, ActivityManagerService service, List list, String prefix, String normalLabel, String persistentLabel, String dumpPackage) {
        int numPers = 0;
        for (int i = list.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) list.get(i);
            if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                Object[] objArr = new Object[4];
                objArr[0] = prefix;
                objArr[1] = r.isPersistent() ? persistentLabel : normalLabel;
                objArr[2] = Integer.valueOf(i);
                objArr[3] = r.toString();
                pw.println(String.format("%s%s #%2d: %s", objArr));
                if (r.isPersistent()) {
                    numPers++;
                }
            }
        }
        return numPers;
    }

    private static final ArrayList<Pair<ProcessRecord, Integer>> sortProcessOomList(List<ProcessRecord> origList, String dumpPackage) {
        ArrayList<Pair<ProcessRecord, Integer>> list = new ArrayList<>(origList.size());
        for (int i = 0; i < origList.size(); i++) {
            ProcessRecord r = origList.get(i);
            if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                list.add(new Pair<>(origList.get(i), Integer.valueOf(i)));
            }
        }
        Collections.sort(list, new Comparator<Pair<ProcessRecord, Integer>>() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass22 */

            public int compare(Pair<ProcessRecord, Integer> object1, Pair<ProcessRecord, Integer> object2) {
                if (((ProcessRecord) object1.first).setAdj != ((ProcessRecord) object2.first).setAdj) {
                    return ((ProcessRecord) object1.first).setAdj > ((ProcessRecord) object2.first).setAdj ? -1 : 1;
                }
                if (((ProcessRecord) object1.first).setProcState != ((ProcessRecord) object2.first).setProcState) {
                    return ((ProcessRecord) object1.first).setProcState > ((ProcessRecord) object2.first).setProcState ? -1 : 1;
                }
                if (((Integer) object1.second).intValue() != ((Integer) object2.second).intValue()) {
                    return ((Integer) object1.second).intValue() > ((Integer) object2.second).intValue() ? -1 : 1;
                }
                return 0;
            }
        });
        return list;
    }

    private static final boolean writeProcessOomListToProto(ProtoOutputStream proto, long fieldId, ActivityManagerService service, List<ProcessRecord> origList, boolean inclDetails, String dumpPackage) {
        long curUptime;
        ArrayList<Pair<ProcessRecord, Integer>> list;
        ArrayList<Pair<ProcessRecord, Integer>> list2 = sortProcessOomList(origList, dumpPackage);
        if (list2.isEmpty()) {
            return false;
        }
        long curUptime2 = SystemClock.uptimeMillis();
        boolean z = true;
        int i = list2.size() - 1;
        while (i >= 0) {
            ProcessRecord r = (ProcessRecord) list2.get(i).first;
            long token = proto.start(fieldId);
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj, z);
            proto.write(1133871366145L, r.isPersistent());
            int size = origList.size();
            int i2 = z ? 1 : 0;
            int i3 = z ? 1 : 0;
            int i4 = z ? 1 : 0;
            proto.write(1120986464258L, (size - i2) - ((Integer) list2.get(i).second).intValue());
            proto.write(1138166333443L, oomAdj);
            int schedGroup = -1;
            int i5 = r.setSchedGroup;
            if (i5 == 0) {
                schedGroup = 0;
            } else if (i5 == 2) {
                schedGroup = 1;
            } else if (i5 == 3) {
                schedGroup = 2;
            } else if (i5 == 4) {
                schedGroup = 3;
            }
            if (schedGroup != -1) {
                proto.write(1159641169924L, schedGroup);
            }
            if (r.hasForegroundActivities()) {
                proto.write(1133871366149L, z);
            } else if (r.hasForegroundServices()) {
                proto.write(1133871366150L, z);
            }
            proto.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r.getCurProcState()));
            proto.write(1120986464264L, r.trimMemoryLevel);
            r.writeToProto(proto, 1146756268041L);
            proto.write(1138166333450L, r.adjType);
            if (!(r.adjSource == null && r.adjTarget == null)) {
                if (r.adjTarget instanceof ComponentName) {
                    ((ComponentName) r.adjTarget).writeToProto(proto, 1146756268043L);
                } else if (r.adjTarget != null) {
                    proto.write(1138166333452L, r.adjTarget.toString());
                }
                if (r.adjSource instanceof ProcessRecord) {
                    ((ProcessRecord) r.adjSource).writeToProto(proto, 1146756268045L);
                } else if (r.adjSource != null) {
                    proto.write(1138166333454L, r.adjSource.toString());
                }
            }
            if (inclDetails) {
                long detailToken = proto.start(1146756268047L);
                proto.write(1120986464257L, r.maxAdj);
                proto.write(1120986464258L, r.getCurRawAdj());
                proto.write(1120986464259L, r.setRawAdj);
                proto.write(1120986464260L, r.curAdj);
                proto.write(1120986464261L, r.setAdj);
                proto.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r.getCurProcState()));
                proto.write(1159641169928L, ProcessList.makeProcStateProtoEnum(r.setProcState));
                proto.write(1138166333449L, DebugUtils.sizeValueToString(r.lastPss * 1024, new StringBuilder()));
                proto.write(1138166333450L, DebugUtils.sizeValueToString(r.lastSwapPss * 1024, new StringBuilder()));
                proto.write(1138166333451L, DebugUtils.sizeValueToString(r.lastCachedPss * 1024, new StringBuilder()));
                proto.write(1133871366156L, r.cached);
                proto.write(1133871366157L, r.empty);
                proto.write(1133871366158L, r.hasAboveClient);
                if (r.setProcState < 11) {
                    list = list2;
                    curUptime = curUptime2;
                } else if (r.lastCpuTime != 0) {
                    long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
                    list = list2;
                    curUptime = curUptime2;
                    long timeUsed = r.curCpuTime - r.lastCpuTime;
                    long cpuTimeToken = proto.start(1146756268047L);
                    proto.write(1112396529665L, uptimeSince);
                    proto.write(1112396529666L, timeUsed);
                    proto.write(1108101562371L, (((double) timeUsed) * 100.0d) / ((double) uptimeSince));
                    proto.end(cpuTimeToken);
                } else {
                    list = list2;
                    curUptime = curUptime2;
                }
                proto.end(detailToken);
            } else {
                list = list2;
                curUptime = curUptime2;
            }
            proto.end(token);
            i--;
            list2 = list;
            curUptime2 = curUptime;
            z = true;
        }
        return true;
    }

    private static final boolean dumpProcessOomList(PrintWriter pw, ActivityManagerService service, List<ProcessRecord> origList, String prefix, String normalLabel, String persistentLabel, boolean inclDetails, String dumpPackage) {
        char schedGroup;
        char foreground;
        char c;
        long curUptime;
        ArrayList<Pair<ProcessRecord, Integer>> list = sortProcessOomList(origList, dumpPackage);
        boolean z = false;
        if (list.isEmpty()) {
            return false;
        }
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
        int i = 1;
        int i2 = list.size() - 1;
        while (i2 >= 0) {
            ProcessRecord r = (ProcessRecord) list.get(i2).first;
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj, z);
            int i3 = r.setSchedGroup;
            if (i3 == 0) {
                schedGroup = 'B';
            } else if (i3 == i) {
                schedGroup = 'R';
            } else if (i3 == 2) {
                schedGroup = 'F';
            } else if (i3 != 3) {
                schedGroup = '?';
            } else {
                schedGroup = 'T';
            }
            if (r.hasForegroundActivities()) {
                foreground = 'A';
            } else if (r.hasForegroundServices()) {
                foreground = 'S';
            } else {
                foreground = ' ';
            }
            String procState = ProcessList.makeProcStateString(r.getCurProcState());
            pw.print(prefix);
            pw.print(r.isPersistent() ? persistentLabel : normalLabel);
            pw.print(" #");
            int num = (origList.size() - 1) - ((Integer) list.get(i2).second).intValue();
            if (num < 10) {
                pw.print(' ');
            }
            pw.print(num);
            pw.print(": ");
            pw.print(oomAdj);
            pw.print(' ');
            pw.print(schedGroup);
            pw.print('/');
            pw.print(foreground);
            pw.print('/');
            pw.print(procState);
            pw.print(" trm:");
            if (r.trimMemoryLevel < 10) {
                c = ' ';
                pw.print(' ');
            } else {
                c = ' ';
            }
            pw.print(r.trimMemoryLevel);
            pw.print(c);
            pw.print(r.toShortString());
            pw.print(" (");
            pw.print(r.adjType);
            pw.println(')');
            if (!(r.adjSource == null && r.adjTarget == null)) {
                pw.print(prefix);
                pw.print("    ");
                if (r.adjTarget instanceof ComponentName) {
                    pw.print(((ComponentName) r.adjTarget).flattenToShortString());
                } else if (r.adjTarget != null) {
                    pw.print(r.adjTarget.toString());
                } else {
                    pw.print("{null}");
                }
                pw.print("<=");
                if (r.adjSource instanceof ProcessRecord) {
                    pw.print("Proc{");
                    pw.print(((ProcessRecord) r.adjSource).toShortString());
                    pw.println("}");
                } else if (r.adjSource != null) {
                    pw.println(r.adjSource.toString());
                } else {
                    pw.println("{null}");
                }
            }
            if (inclDetails) {
                pw.print(prefix);
                pw.print("    ");
                pw.print("oom: max=");
                pw.print(r.maxAdj);
                pw.print(" curRaw=");
                pw.print(r.getCurRawAdj());
                pw.print(" setRaw=");
                pw.print(r.setRawAdj);
                pw.print(" cur=");
                pw.print(r.curAdj);
                pw.print(" set=");
                pw.println(r.setAdj);
                pw.print(prefix);
                pw.print("    ");
                pw.print("state: cur=");
                pw.print(ProcessList.makeProcStateString(r.getCurProcState()));
                pw.print(" set=");
                pw.print(ProcessList.makeProcStateString(r.setProcState));
                pw.print(" lastPss=");
                DebugUtils.printSizeValue(pw, r.lastPss * 1024);
                pw.print(" lastSwapPss=");
                DebugUtils.printSizeValue(pw, r.lastSwapPss * 1024);
                pw.print(" lastCachedPss=");
                DebugUtils.printSizeValue(pw, r.lastCachedPss * 1024);
                pw.println();
                pw.print(prefix);
                pw.print("    ");
                pw.print("cached=");
                pw.print(r.cached);
                pw.print(" empty=");
                pw.print(r.empty);
                pw.print(" hasAboveClient=");
                pw.println(r.hasAboveClient);
                if (r.setProcState < 11) {
                    curUptime = curUptime2;
                } else if (r.lastCpuTime != 0) {
                    curUptime = curUptime2;
                    long timeUsed = r.curCpuTime - r.lastCpuTime;
                    pw.print(prefix);
                    pw.print("    ");
                    pw.print("run cpu over ");
                    TimeUtils.formatDuration(uptimeSince, pw);
                    pw.print(" used ");
                    TimeUtils.formatDuration(timeUsed, pw);
                    pw.print(" (");
                    pw.print((SINGLE_DISPATCH_THRESHOLD_MS * timeUsed) / uptimeSince);
                    pw.println("%)");
                } else {
                    curUptime = curUptime2;
                }
            } else {
                curUptime = curUptime2;
            }
            i2--;
            list = list;
            curUptime2 = curUptime;
            z = false;
            i = 1;
        }
        return true;
    }

    /* access modifiers changed from: package-private */
    public ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs, String[] args) {
        ArrayList<ProcessRecord> collectProcessesLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                collectProcessesLocked = this.mProcessList.collectProcessesLocked(start, allPkgs, args);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return collectProcessesLocked;
    }

    /* access modifiers changed from: package-private */
    public final void dumpGraphicsHardwareUsage(FileDescriptor fd, PrintWriter pw, String[] args) {
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        pw.println("Applications Graphics Acceleration Info:");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
        for (int i = procs.size() + -1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            if (r.thread != null) {
                pw.println("\n** Graphics info for pid " + r.pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    TransferPipe tp = new TransferPipe();
                    try {
                        r.thread.dumpGfxInfo(tp.getWriteFd(), args);
                        tp.go(fd);
                    } finally {
                        tp.kill();
                    }
                } catch (IOException e) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                } catch (RemoteException e2) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void dumpDbInfo(FileDescriptor fd, PrintWriter pw, String[] args) {
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        pw.println("Applications Database Info:");
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            if (r.thread != null) {
                pw.println("\n** Database info for pid " + r.pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    TransferPipe tp = new TransferPipe();
                    try {
                        r.thread.dumpDbInfo(tp.getWriteFd(), args);
                        tp.go(fd);
                    } finally {
                        tp.kill();
                    }
                } catch (IOException e) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                } catch (RemoteException e2) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc = false;
        final String label;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;
        final long swapPss;

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id, boolean _hasActivities) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = _hasActivities;
        }

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = false;
        }
    }

    private static void sortMemItems(List<MemItem> items) {
        Collections.sort(items, new Comparator<MemItem>() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass23 */

            public int compare(MemItem lhs, MemItem rhs) {
                if (lhs.pss < rhs.pss) {
                    return 1;
                }
                if (lhs.pss > rhs.pss) {
                    return -1;
                }
                return 0;
            }
        });
    }

    static final void dumpMemItems(PrintWriter pw, String prefix, String tag, ArrayList<MemItem> items, boolean sort, boolean isCompact, boolean dumpSwapPss) {
        if (sort && !isCompact) {
            sortMemItems(items);
        }
        for (int i = 0; i < items.size(); i++) {
            MemItem mi = items.get(i);
            if (isCompact) {
                Object obj = "N/A";
                if (mi.isProc) {
                    pw.print("proc,");
                    pw.print(tag);
                    pw.print(",");
                    pw.print(mi.shortLabel);
                    pw.print(",");
                    pw.print(mi.id);
                    pw.print(",");
                    pw.print(mi.pss);
                    pw.print(",");
                    if (dumpSwapPss) {
                        obj = Long.valueOf(mi.swapPss);
                    }
                    pw.print(obj);
                    pw.println(mi.hasActivities ? ",a" : ",e");
                } else {
                    pw.print(tag);
                    pw.print(",");
                    pw.print(mi.shortLabel);
                    pw.print(",");
                    pw.print(mi.pss);
                    pw.print(",");
                    if (dumpSwapPss) {
                        obj = Long.valueOf(mi.swapPss);
                    }
                    pw.println(obj);
                }
            } else if (dumpSwapPss) {
                pw.printf("%s%s: %-60s (%s in swap)\n", prefix, stringifyKBSize(mi.pss), mi.label, stringifyKBSize(mi.swapPss));
            } else {
                pw.printf("%s%s: %s\n", prefix, stringifyKBSize(mi.pss), mi.label);
            }
            if (mi.subitems != null) {
                dumpMemItems(pw, prefix + "    ", mi.shortLabel, mi.subitems, true, isCompact, dumpSwapPss);
            }
        }
    }

    static final void dumpMemItems(ProtoOutputStream proto, long fieldId, String tag, ArrayList<MemItem> items, boolean sort, boolean dumpSwapPss) {
        if (sort) {
            sortMemItems(items);
        }
        for (int i = 0; i < items.size(); i++) {
            MemItem mi = items.get(i);
            long token = proto.start(fieldId);
            proto.write(1138166333441L, tag);
            proto.write(1138166333442L, mi.shortLabel);
            proto.write(1133871366148L, mi.isProc);
            proto.write(1120986464259L, mi.id);
            proto.write(1133871366149L, mi.hasActivities);
            proto.write(1112396529670L, mi.pss);
            if (dumpSwapPss) {
                proto.write(1112396529671L, mi.swapPss);
            }
            if (mi.subitems != null) {
                dumpMemItems(proto, 2246267895816L, mi.shortLabel, mi.subitems, true, dumpSwapPss);
            }
            proto.end(token);
        }
    }

    static final void appendMemBucket(StringBuilder out, long memKB, String label, boolean stackLike) {
        int start;
        int start2 = label.lastIndexOf(46);
        if (start2 >= 0) {
            start = start2 + 1;
        } else {
            start = 0;
        }
        int end = label.length();
        int i = 0;
        while (true) {
            long[] jArr = DUMP_MEM_BUCKETS;
            String str = "MB.";
            if (i >= jArr.length) {
                out.append(memKB / 1024);
                if (!stackLike) {
                    str = "MB ";
                }
                out.append(str);
                out.append((CharSequence) label, start, end);
                return;
            } else if (jArr[i] >= memKB) {
                out.append(jArr[i] / 1024);
                if (!stackLike) {
                    str = "MB ";
                }
                out.append(str);
                out.append((CharSequence) label, start, end);
                return;
            } else {
                i++;
            }
        }
    }

    private final void dumpApplicationMemoryUsageHeader(PrintWriter pw, long uptime, long realtime, boolean isCheckinRequest, boolean isCompact) {
        if (isCompact) {
            pw.print("version,");
            pw.println(1);
        }
        if (isCheckinRequest || isCompact) {
            pw.print("time,");
            pw.print(uptime);
            pw.print(",");
            pw.println(realtime);
            return;
        }
        pw.println("Applications Memory Usage (in Kilobytes):");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
    }

    private final long[] getKsmInfo() {
        int[] SINGLE_LONG_FORMAT = {8224};
        long[] longTmp = new long[1];
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", SINGLE_LONG_FORMAT, null, longTmp, null);
        return new long[]{(longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024};
    }

    private static String stringifySize(long size, int order) {
        Locale locale = Locale.US;
        if (order == 1) {
            return String.format(locale, "%,13d", Long.valueOf(size));
        }
        if (order == 1024) {
            return String.format(locale, "%,9dK", Long.valueOf(size / 1024));
        }
        if (order == 1048576) {
            return String.format(locale, "%,5dM", Long.valueOf((size / 1024) / 1024));
        }
        if (order == 1073741824) {
            return String.format(locale, "%,1dG", Long.valueOf(((size / 1024) / 1024) / 1024));
        }
        throw new IllegalArgumentException("Invalid size order");
    }

    private static String stringifyKBSize(long size) {
        return stringifySize(1024 * size, 1024);
    }

    /* access modifiers changed from: private */
    public static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }
    }

    /* access modifiers changed from: package-private */
    public final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, String[] args, boolean brief, PrintWriter categoryPw, boolean asProto) {
        String opt;
        MemoryUsageDumpOptions opts = new MemoryUsageDumpOptions();
        opts.dumpDetails = false;
        opts.dumpFullDetails = false;
        opts.dumpDalvik = false;
        opts.dumpSummaryOnly = false;
        opts.dumpUnreachable = false;
        opts.oomOnly = false;
        opts.isCompact = false;
        opts.localOnly = false;
        opts.packages = false;
        opts.isCheckinRequest = false;
        opts.dumpSwapPss = false;
        opts.dumpProto = asProto;
        int opti = 0;
        while (opti < args.length && (opt = args[opti]) != null && opt.length() > 0 && opt.charAt(0) == '-') {
            opti++;
            if ("-a".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpFullDetails = true;
                opts.dumpDalvik = true;
                opts.dumpSwapPss = true;
            } else if ("-d".equals(opt)) {
                opts.dumpDalvik = true;
            } else if ("-c".equals(opt)) {
                opts.isCompact = true;
            } else if ("-s".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpSummaryOnly = true;
            } else if ("-S".equals(opt)) {
                opts.dumpSwapPss = true;
            } else if ("--unreachable".equals(opt)) {
                opts.dumpUnreachable = true;
            } else if ("--oom".equals(opt)) {
                opts.oomOnly = true;
            } else if ("--local".equals(opt)) {
                opts.localOnly = true;
            } else if ("--package".equals(opt)) {
                opts.packages = true;
            } else if ("--checkin".equals(opt)) {
                opts.isCheckinRequest = true;
            } else if (PriorityDump.PROTO_ARG.equals(opt)) {
                opts.dumpProto = true;
            } else if ("-h".equals(opt)) {
                pw.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                pw.println("  -a: include all available information for each process.");
                pw.println("  -d: include dalvik details.");
                pw.println("  -c: dump in a compact machine-parseable representation.");
                pw.println("  -s: dump only summary of application memory usage.");
                pw.println("  -S: dump also SwapPss.");
                pw.println("  --oom: only show processes organized by oom adj.");
                pw.println("  --local: only collect details locally, don't call process.");
                pw.println("  --package: interpret process arg as package, dumping all");
                pw.println("             processes that have loaded that package.");
                pw.println("  --checkin: dump data for a checkin");
                pw.println("  --proto: dump data to proto");
                pw.println("If [process] is specified it can be the name or ");
                pw.println("pid of a specific process to dump.");
                return;
            } else {
                pw.println("Unknown argument: " + opt + "; use -h for help");
            }
        }
        String[] innerArgs = new String[(args.length - opti)];
        System.arraycopy(args, opti, innerArgs, 0, args.length - opti);
        ArrayList<ProcessRecord> procs = collectProcesses(pw, opti, opts.packages, args);
        if (opts.dumpProto) {
            dumpApplicationMemoryUsage(fd, opts, innerArgs, brief, procs);
        } else {
            dumpApplicationMemoryUsage(fd, pw, prefix, opts, innerArgs, brief, procs, categoryPw);
        }
    }

    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:123:0x0337 */
    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:488:0x0630 */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX INFO: Multiple debug info for r14v6 long: [D('myTotalSwapPss' long), D('tmpLong' long[])] */
    /* JADX INFO: Multiple debug info for r7v18 long: [D('myTotalSwapPss' long), D('procMemsMap' android.util.SparseArray<com.android.server.am.ActivityManagerService$MemItem>)] */
    /* JADX INFO: Multiple debug info for r5v48 'tp'  com.android.internal.os.TransferPipe: [D('miscSwapPss' long[]), D('tp' com.android.internal.os.TransferPipe)] */
    /* JADX WARN: Type inference failed for: r28v0 */
    /* JADX WARN: Type inference failed for: r28v1 */
    /* JADX WARN: Type inference failed for: r28v12 */
    /* JADX WARN: Type inference failed for: r28v13 */
    /* JADX WARN: Type inference failed for: r28v19 */
    /* JADX WARNING: Code restructure failed: missing block: B:245:0x0660, code lost:
        r0 = th;
     */
    /* JADX WARNING: Removed duplicated region for block: B:113:0x02d0  */
    /* JADX WARNING: Removed duplicated region for block: B:150:0x0385  */
    /* JADX WARNING: Removed duplicated region for block: B:155:0x03a6  */
    /* JADX WARNING: Removed duplicated region for block: B:156:0x03be  */
    /* JADX WARNING: Removed duplicated region for block: B:159:0x03ec A[SYNTHETIC, Splitter:B:159:0x03ec] */
    /* JADX WARNING: Removed duplicated region for block: B:299:0x077b A[Catch:{ all -> 0x0804 }] */
    /* JADX WARNING: Removed duplicated region for block: B:306:0x07b5 A[Catch:{ all -> 0x07f0 }, LOOP:12: B:304:0x07b1->B:306:0x07b5, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:309:0x07de A[Catch:{ all -> 0x07f0 }] */
    /* JADX WARNING: Removed duplicated region for block: B:416:0x0ac4  */
    /* JADX WARNING: Removed duplicated region for block: B:433:0x0ba5  */
    /* JADX WARNING: Removed duplicated region for block: B:434:0x0be9  */
    /* JADX WARNING: Removed duplicated region for block: B:436:0x0bf4  */
    /* JADX WARNING: Removed duplicated region for block: B:467:0x0d91  */
    /* JADX WARNING: Removed duplicated region for block: B:506:0x07a2 A[EDGE_INSN: B:506:0x07a2->B:303:0x07a2 ?: BREAK  , SYNTHETIC] */
    private final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, MemoryUsageDumpOptions opts, String[] innerArgs, boolean brief, ArrayList<ProcessRecord> procs, PrintWriter categoryPw) {
        long[] dalvikSubitemPss;
        long[] dalvikSubitemSwapPss;
        Throwable th;
        long nativeProcTotalPss;
        MemoryUsageDumpOptions memoryUsageDumpOptions;
        PrintWriter printWriter;
        MemInfoReader memInfo;
        ActivityManagerService activityManagerService;
        String label;
        int memItemEnd;
        int memItemStart;
        ArrayList<MemItem> procMems;
        SparseArray<MemItem> procMemsMap;
        int N;
        int i;
        long[] dalvikSubitemPss2;
        Debug.MemoryInfo mi;
        long[] tmpLong;
        int j;
        int j2;
        IApplicationThread thread;
        int pid;
        int oomAdj;
        boolean hasActivities;
        long[] miscPss;
        ArrayList<MemItem>[] oomProcs;
        int i2;
        long[] tmpLong2;
        long[] oomSwapPss;
        long[] miscSwapPss;
        long[] dalvikSubitemPss3;
        long[] oomPss;
        SparseArray<MemItem> procMemsMap2;
        MemoryUsageDumpOptions memoryUsageDumpOptions2;
        long[] oomPss2;
        int pid2;
        Debug.MemoryInfo mi2;
        boolean hasSwapPss;
        long endTime;
        long startTime;
        long[] miscPss2;
        int reportType;
        long[] oomPss3;
        Debug.MemoryInfo mi3;
        int pid3;
        Throwable th2;
        long myTotalSwapPss;
        int oomAdj2;
        long[] dalvikSubitemPss4;
        Debug.MemoryInfo mi4;
        long[] miscSwapPss2;
        IOException e;
        long[] miscSwapPss3;
        RemoteException e2;
        TransferPipe tp;
        Throwable th3;
        PrintWriter printWriter2;
        String proc;
        int findPid;
        Throwable th4;
        ActivityManagerService activityManagerService2 = this;
        PrintWriter printWriter3 = pw;
        MemoryUsageDumpOptions memoryUsageDumpOptions3 = opts;
        ArrayList<ProcessRecord> arrayList = procs;
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        long[] tmpLong3 = new long[1];
        if (arrayList == null) {
            String proc2 = "N/A";
            if (innerArgs.length > 0) {
                String proc3 = innerArgs[0];
                if (proc3.charAt(0) != '-') {
                    ArrayList<ProcessCpuTracker.Stats> nativeProcs = new ArrayList<>();
                    updateCpuStatsNow();
                    try {
                        findPid = Integer.parseInt(innerArgs[0]);
                    } catch (NumberFormatException e3) {
                        findPid = -1;
                    }
                    synchronized (activityManagerService2.mProcessCpuTracker) {
                        try {
                            int N2 = activityManagerService2.mProcessCpuTracker.countStats();
                            for (int i3 = 0; i3 < N2; i3++) {
                                try {
                                    ProcessCpuTracker.Stats st = activityManagerService2.mProcessCpuTracker.getStats(i3);
                                    if (st.pid == findPid || (st.baseName != null && st.baseName.equals(innerArgs[0]))) {
                                        nativeProcs.add(st);
                                    }
                                } catch (Throwable th5) {
                                    th4 = th5;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th6) {
                                            th4 = th6;
                                        }
                                    }
                                    throw th4;
                                }
                            }
                        } catch (Throwable th7) {
                            th4 = th7;
                            while (true) {
                                break;
                            }
                            throw th4;
                        }
                    }
                    if (nativeProcs.size() > 0) {
                        ArrayList<ProcessCpuTracker.Stats> nativeProcs2 = nativeProcs;
                        long[] jArr = null;
                        dumpApplicationMemoryUsageHeader(pw, uptime, realtime, memoryUsageDumpOptions3.isCheckinRequest, memoryUsageDumpOptions3.isCompact);
                        Debug.MemoryInfo mi5 = null;
                        int i4 = nativeProcs2.size() - 1;
                        while (i4 >= 0) {
                            ProcessCpuTracker.Stats r = nativeProcs2.get(i4);
                            int pid4 = r.pid;
                            if (!memoryUsageDumpOptions3.isCheckinRequest && memoryUsageDumpOptions3.dumpDetails) {
                                printWriter3.println("\n** MEMINFO in pid " + pid4 + " [" + r.baseName + "] **");
                            }
                            if (mi5 == null) {
                                mi5 = new Debug.MemoryInfo();
                            }
                            if (memoryUsageDumpOptions3.dumpDetails || (!brief && !memoryUsageDumpOptions3.oomOnly)) {
                                Debug.getMemoryInfo(pid4, mi5);
                            } else {
                                mi5.dalvikPss = (int) Debug.getPss(pid4, tmpLong3, jArr);
                                mi5.dalvikPrivateDirty = (int) tmpLong3[0];
                            }
                            ActivityThread.dumpMemInfoTable(pw, mi5, memoryUsageDumpOptions3.isCheckinRequest, memoryUsageDumpOptions3.dumpFullDetails, memoryUsageDumpOptions3.dumpDalvik, memoryUsageDumpOptions3.dumpSummaryOnly, pid4, r.baseName, 0, 0, 0, 0, 0, 0);
                            if (memoryUsageDumpOptions3.isCheckinRequest) {
                                pw.println();
                            }
                            i4--;
                            memoryUsageDumpOptions3 = memoryUsageDumpOptions3;
                            nativeProcs2 = nativeProcs2;
                            jArr = jArr;
                            arrayList = arrayList;
                            printWriter3 = printWriter3;
                            tmpLong3 = tmpLong3;
                        }
                        return;
                    }
                    proc = proc3;
                    printWriter2 = printWriter3;
                } else {
                    proc = proc3;
                    printWriter2 = printWriter3;
                }
                proc2 = proc;
            } else {
                printWriter2 = printWriter3;
            }
            printWriter2.println("No process found for: " + proc2);
            return;
        }
        if (!brief && !memoryUsageDumpOptions3.oomOnly && (procs.size() == 1 || memoryUsageDumpOptions3.isCheckinRequest || memoryUsageDumpOptions3.packages)) {
            memoryUsageDumpOptions3.dumpDetails = true;
        }
        MemoryUsageDumpOptions memoryUsageDumpOptions4 = memoryUsageDumpOptions3;
        ArrayList<ProcessRecord> arrayList2 = arrayList;
        PrintWriter printWriter4 = printWriter3;
        long[] tmpLong4 = tmpLong3;
        dumpApplicationMemoryUsageHeader(pw, uptime, realtime, memoryUsageDumpOptions3.isCheckinRequest, memoryUsageDumpOptions3.isCompact);
        ArrayList<MemItem> procMems2 = new ArrayList<>();
        SparseArray<MemItem> procMemsMap3 = new SparseArray<>();
        if (memoryUsageDumpOptions4.dumpDalvik) {
            dalvikSubitemPss = new long[14];
        } else {
            dalvikSubitemPss = EmptyArray.LONG;
        }
        if (memoryUsageDumpOptions4.dumpDalvik) {
            dalvikSubitemSwapPss = new long[14];
        } else {
            dalvikSubitemSwapPss = EmptyArray.LONG;
        }
        long[] miscPss3 = new long[17];
        long[] miscSwapPss4 = new long[17];
        String[] strArr = DUMP_MEM_OOM_LABEL;
        long[] oomPss4 = new long[strArr.length];
        long[] oomSwapPss2 = new long[strArr.length];
        ArrayList<MemItem>[] oomProcs2 = new ArrayList[strArr.length];
        long[] miscSwapPss5 = 0;
        Debug.MemoryInfo mi6 = null;
        boolean z = true;
        long otherPss = 0;
        long otherSwapPss = 0;
        long totalPss = 0;
        long totalSwapPss = 0;
        long cachedPss = 0;
        long cachedSwapPss = 0;
        long nativeSwapPss = 0;
        long dalvikPss = 0;
        long nativePss = 0;
        int i5 = procs.size() - 1;
        long dalvikSwapPss = 0;
        boolean hasSwapPss2 = false;
        while (i5 >= 0) {
            ProcessRecord r2 = arrayList2.get(i5);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    thread = r2.thread;
                    pid = r2.pid;
                    oomAdj = r2.getSetAdjWithServices();
                    hasActivities = r2.hasActivities();
                } catch (Throwable th8) {
                    th = th8;
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (thread != null) {
                if (memoryUsageDumpOptions4.isCheckinRequest || !memoryUsageDumpOptions4.dumpDetails) {
                    oomPss2 = oomPss4;
                    pid2 = pid;
                } else {
                    StringBuilder sb = new StringBuilder();
                    oomPss2 = oomPss4;
                    sb.append("\n** MEMINFO in pid ");
                    pid2 = pid;
                    sb.append(pid2);
                    sb.append(" [");
                    sb.append(r2.processName);
                    sb.append("] **");
                    printWriter4.println(sb.toString());
                }
                if (mi6 == null) {
                    mi2 = new Debug.MemoryInfo();
                } else {
                    mi2 = mi6;
                }
                if (memoryUsageDumpOptions4.dumpDetails) {
                    oomSwapPss = oomSwapPss2;
                    miscPss2 = miscPss3;
                } else if (brief || memoryUsageDumpOptions4.oomOnly) {
                    long startTime2 = SystemClock.currentThreadTimeMillis();
                    oomSwapPss = oomSwapPss2;
                    miscPss2 = miscPss3;
                    mi2.dalvikPss = (int) Debug.getPss(pid2, tmpLong4, null);
                    long endTime2 = SystemClock.currentThreadTimeMillis();
                    mi2.dalvikPrivateDirty = (int) tmpLong4[0];
                    reportType = 3;
                    hasSwapPss = hasSwapPss2;
                    startTime = startTime2;
                    endTime = endTime2;
                    if (memoryUsageDumpOptions4.dumpDetails) {
                        i2 = i5;
                        oomProcs = oomProcs2;
                        miscSwapPss = miscSwapPss4;
                        pid3 = pid2;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions4;
                        tmpLong2 = tmpLong4;
                        mi3 = mi2;
                        miscPss = miscPss2;
                        oomPss3 = oomPss2;
                    } else if (memoryUsageDumpOptions4.localOnly) {
                        tmpLong2 = tmpLong4;
                        i2 = i5;
                        oomProcs = oomProcs2;
                        mi3 = mi2;
                        miscPss = miscPss2;
                        pid3 = pid2;
                        oomPss3 = oomPss2;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions4;
                        ActivityThread.dumpMemInfoTable(pw, mi3, memoryUsageDumpOptions4.isCheckinRequest, memoryUsageDumpOptions4.dumpFullDetails, memoryUsageDumpOptions4.dumpDalvik, memoryUsageDumpOptions4.dumpSummaryOnly, pid3, r2.processName, 0, 0, 0, 0, 0, 0);
                        if (memoryUsageDumpOptions2.isCheckinRequest) {
                            pw.println();
                            miscSwapPss = miscSwapPss4;
                        } else {
                            miscSwapPss = miscSwapPss4;
                        }
                    } else {
                        i2 = i5;
                        oomProcs = oomProcs2;
                        pid3 = pid2;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions4;
                        tmpLong2 = tmpLong4;
                        mi3 = mi2;
                        miscPss = miscPss2;
                        oomPss3 = oomPss2;
                        pw.flush();
                        try {
                            TransferPipe tp2 = new TransferPipe();
                            try {
                                miscSwapPss5 = miscSwapPss4;
                                tp = tp2;
                                try {
                                    thread.dumpMemInfo(tp2.getWriteFd(), mi3, memoryUsageDumpOptions2.isCheckinRequest, memoryUsageDumpOptions2.dumpFullDetails, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, memoryUsageDumpOptions2.dumpUnreachable, innerArgs);
                                    try {
                                        tp.go(fd, memoryUsageDumpOptions2.dumpUnreachable ? 30000 : MONITOR_CPU_MIN_TIME);
                                        try {
                                            tp.kill();
                                            miscSwapPss = miscSwapPss5;
                                        } catch (IOException e4) {
                                            e = e4;
                                            miscSwapPss2 = miscSwapPss5;
                                            miscSwapPss = miscSwapPss2;
                                            if (!memoryUsageDumpOptions2.isCheckinRequest) {
                                                printWriter4.println("Got IoException! " + e);
                                                pw.flush();
                                                miscSwapPss = miscSwapPss2;
                                            }
                                            long myTotalPss = (long) mi3.getTotalPss();
                                            long myTotalUss = (long) mi3.getTotalUss();
                                            long myTotalRss = (long) mi3.getTotalRss();
                                            long myTotalSwapPss2 = (long) mi3.getTotalSwappedOutPss();
                                            synchronized (this) {
                                            }
                                        } catch (RemoteException e5) {
                                            e2 = e5;
                                            miscSwapPss3 = miscSwapPss5;
                                            miscSwapPss = miscSwapPss3;
                                            if (!memoryUsageDumpOptions2.isCheckinRequest) {
                                                printWriter4.println("Got RemoteException! " + e2);
                                                pw.flush();
                                                miscSwapPss = miscSwapPss3;
                                            }
                                            long myTotalPss2 = (long) mi3.getTotalPss();
                                            long myTotalUss2 = (long) mi3.getTotalUss();
                                            long myTotalRss2 = (long) mi3.getTotalRss();
                                            long myTotalSwapPss22 = (long) mi3.getTotalSwappedOutPss();
                                            synchronized (this) {
                                            }
                                        }
                                    } catch (Throwable th9) {
                                        th3 = th9;
                                        tp.kill();
                                        throw th3;
                                    }
                                } catch (Throwable th10) {
                                    th3 = th10;
                                    tp.kill();
                                    throw th3;
                                }
                            } catch (Throwable th11) {
                                th3 = th11;
                                tp = tp2;
                                tp.kill();
                                throw th3;
                            }
                        } catch (IOException e6) {
                            e = e6;
                            miscSwapPss2 = miscSwapPss4;
                            miscSwapPss = miscSwapPss2;
                            if (!memoryUsageDumpOptions2.isCheckinRequest) {
                            }
                            long myTotalPss22 = (long) mi3.getTotalPss();
                            long myTotalUss22 = (long) mi3.getTotalUss();
                            long myTotalRss22 = (long) mi3.getTotalRss();
                            long myTotalSwapPss222 = (long) mi3.getTotalSwappedOutPss();
                            synchronized (this) {
                            }
                        } catch (RemoteException e7) {
                            e2 = e7;
                            miscSwapPss3 = miscSwapPss4;
                            miscSwapPss = miscSwapPss3;
                            if (!memoryUsageDumpOptions2.isCheckinRequest) {
                            }
                            long myTotalPss222 = (long) mi3.getTotalPss();
                            long myTotalUss222 = (long) mi3.getTotalUss();
                            long myTotalRss222 = (long) mi3.getTotalRss();
                            long myTotalSwapPss2222 = (long) mi3.getTotalSwappedOutPss();
                            synchronized (this) {
                            }
                        }
                    }
                    long myTotalPss2222 = (long) mi3.getTotalPss();
                    long myTotalUss2222 = (long) mi3.getTotalUss();
                    long myTotalRss2222 = (long) mi3.getTotalRss();
                    long myTotalSwapPss22222 = (long) mi3.getTotalSwappedOutPss();
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            if (r2.thread != null) {
                                try {
                                    int oomAdj3 = oomAdj;
                                    if (oomAdj3 == r2.getSetAdjWithServices()) {
                                        try {
                                            dalvikSubitemPss4 = dalvikSubitemPss;
                                        } catch (Throwable th12) {
                                            th2 = th12;
                                            while (true) {
                                                try {
                                                    break;
                                                } catch (Throwable th13) {
                                                    th2 = th13;
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th2;
                                        }
                                        try {
                                            r2.baseProcessTracker.addPss(myTotalPss2222, myTotalUss2222, myTotalRss2222, true, reportType, endTime - startTime, r2.pkgList.mPkgList);
                                            int ipkg = r2.pkgList.size() - 1;
                                            while (ipkg >= 0) {
                                                ProcessStats.ProcessStateHolder holder = r2.pkgList.valueAt(ipkg);
                                                try {
                                                    try {
                                                        StatsLog.write(18, r2.info.uid, holder.state.getName(), holder.state.getPackage(), myTotalPss2222, myTotalUss2222, myTotalRss2222, reportType, endTime - startTime, holder.appVersion);
                                                        ipkg--;
                                                        oomAdj3 = oomAdj3;
                                                        myTotalSwapPss22222 = myTotalSwapPss22222;
                                                    } catch (Throwable th14) {
                                                        th2 = th14;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th2;
                                                    }
                                                } catch (Throwable th15) {
                                                    th2 = th15;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th2;
                                                }
                                            }
                                            myTotalSwapPss = myTotalSwapPss22222;
                                            oomAdj2 = oomAdj3;
                                        } catch (Throwable th16) {
                                            th2 = th16;
                                            while (true) {
                                                break;
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th2;
                                        }
                                    } else {
                                        myTotalSwapPss = myTotalSwapPss22222;
                                        oomAdj2 = oomAdj3;
                                        dalvikSubitemPss4 = dalvikSubitemPss;
                                    }
                                } catch (Throwable th17) {
                                    th2 = th17;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            } else {
                                myTotalSwapPss = myTotalSwapPss22222;
                                dalvikSubitemPss4 = dalvikSubitemPss;
                                oomAdj2 = oomAdj;
                            }
                            try {
                            } catch (Throwable th18) {
                                th2 = th18;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th2;
                            }
                        } catch (Throwable th19) {
                            th2 = th19;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    if (!memoryUsageDumpOptions2.isCheckinRequest) {
                        totalPss += myTotalPss2222;
                        totalSwapPss += myTotalSwapPss;
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append(r2.processName);
                        sb2.append(" (pid ");
                        int pid5 = pid3;
                        sb2.append(pid5);
                        sb2.append(hasActivities ? " / activities)" : ")");
                        MemItem pssItem = new MemItem(sb2.toString(), r2.processName, myTotalPss2222, myTotalSwapPss, pid5, hasActivities);
                        procMems2 = procMems2;
                        procMems2.add(pssItem);
                        procMemsMap2 = procMemsMap3;
                        procMemsMap2.put(pid5, pssItem);
                        mi4 = mi3;
                        nativePss += (long) mi4.nativePss;
                        nativeSwapPss += (long) mi4.nativeSwappedOutPss;
                        dalvikPss += (long) mi4.dalvikPss;
                        dalvikSwapPss += (long) mi4.dalvikSwappedOutPss;
                        int j3 = 0;
                        while (j3 < dalvikSubitemPss4.length) {
                            dalvikSubitemPss4[j3] = dalvikSubitemPss4[j3] + ((long) mi4.getOtherPss(j3 + 17));
                            dalvikSubitemSwapPss[j3] = dalvikSubitemSwapPss[j3] + ((long) mi4.getOtherSwappedOutPss(j3 + 17));
                            j3++;
                            dalvikSubitemPss4 = dalvikSubitemPss4;
                            myTotalUss2222 = myTotalUss2222;
                            pid5 = pid5;
                        }
                        dalvikSubitemPss3 = dalvikSubitemPss4;
                        otherPss += (long) mi4.otherPss;
                        otherSwapPss += (long) mi4.otherSwappedOutPss;
                        for (int j4 = 0; j4 < 17; j4++) {
                            long mem = (long) mi4.getOtherPss(j4);
                            miscPss[j4] = miscPss[j4] + mem;
                            otherPss -= mem;
                            long mem2 = (long) mi4.getOtherSwappedOutPss(j4);
                            miscSwapPss[j4] = miscSwapPss[j4] + mem2;
                            otherSwapPss -= mem2;
                        }
                        if (oomAdj2 >= 900) {
                            cachedPss += myTotalPss2222;
                            cachedSwapPss += myTotalSwapPss;
                        }
                        int oomIndex = 0;
                        while (true) {
                            oomPss = oomPss3;
                            if (oomIndex >= oomPss.length) {
                                break;
                            }
                            if (oomIndex == oomPss.length - 1) {
                                break;
                            }
                            int[] iArr = DUMP_MEM_OOM_ADJ;
                            if (oomAdj2 >= iArr[oomIndex] && oomAdj2 < iArr[oomIndex + 1]) {
                                break;
                            }
                            oomIndex++;
                            oomPss3 = oomPss;
                        }
                        oomPss[oomIndex] = oomPss[oomIndex] + myTotalPss2222;
                        oomSwapPss[oomIndex] = oomSwapPss[oomIndex] + myTotalSwapPss;
                        if (oomProcs[oomIndex] == null) {
                            oomProcs[oomIndex] = new ArrayList<>();
                        }
                        oomProcs[oomIndex].add(pssItem);
                    } else {
                        procMems2 = procMems2;
                        procMemsMap2 = procMemsMap3;
                        dalvikSubitemPss3 = dalvikSubitemPss4;
                        mi4 = mi3;
                        oomPss = oomPss3;
                    }
                    mi6 = mi4;
                    hasSwapPss2 = hasSwapPss;
                } else {
                    oomSwapPss = oomSwapPss2;
                    miscPss2 = miscPss3;
                }
                long startTime3 = SystemClock.currentThreadTimeMillis();
                Debug.getMemoryInfo(pid2, mi2);
                long endTime3 = SystemClock.currentThreadTimeMillis();
                hasSwapPss = mi2.hasSwappedOutPss;
                startTime = startTime3;
                endTime = endTime3;
                reportType = 4;
                if (memoryUsageDumpOptions4.dumpDetails) {
                }
                long myTotalPss22222 = (long) mi3.getTotalPss();
                long myTotalUss22222 = (long) mi3.getTotalUss();
                long myTotalRss22222 = (long) mi3.getTotalRss();
                long myTotalSwapPss222222 = (long) mi3.getTotalSwappedOutPss();
                synchronized (this) {
                }
                if (!brief) {
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter.print("Total RAM: ");
                        printWriter.print(stringifyKBSize(memInfo.getTotalSizeKb()));
                        printWriter.print(" (status ");
                        int i6 = activityManagerService.mLastMemoryLevel;
                        if (i6 == 0) {
                            printWriter.println("normal)");
                        } else if (i6 == 1) {
                            printWriter.println("moderate)");
                        } else if (i6 == 2) {
                            printWriter.println("low)");
                        } else if (i6 != 3) {
                            printWriter.print(i6);
                            printWriter.println(")");
                        } else {
                            printWriter.println("critical)");
                        }
                        printWriter.print(" Free RAM: ");
                        printWriter.print(stringifyKBSize(cachedPss + memInfo.getCachedSizeKb() + memInfo.getFreeSizeKb()));
                        printWriter.print(" (");
                        printWriter.print(stringifyKBSize(cachedPss));
                        printWriter.print(" cached pss + ");
                        printWriter.print(stringifyKBSize(memInfo.getCachedSizeKb()));
                        printWriter.print(" cached kernel + ");
                        printWriter.print(stringifyKBSize(memInfo.getFreeSizeKb()));
                        printWriter.println(" free)");
                    } else {
                        printWriter.print("ram,");
                        printWriter.print(memInfo.getTotalSizeKb());
                        printWriter.print(",");
                        printWriter.print(cachedPss + memInfo.getCachedSizeKb() + memInfo.getFreeSizeKb());
                        printWriter.print(",");
                        printWriter.println(totalPss - cachedPss);
                    }
                }
                long lostRAM = ((((memInfo.getTotalSizeKb() - (totalPss - totalSwapPss)) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb();
                if (memoryUsageDumpOptions.isCompact) {
                    printWriter.print(" Used RAM: ");
                    printWriter.print(stringifyKBSize((totalPss - cachedPss) + memInfo.getKernelUsedSizeKb()));
                    printWriter.print(" (");
                    printWriter.print(stringifyKBSize(totalPss - cachedPss));
                    printWriter.print(" used pss + ");
                    printWriter.print(stringifyKBSize(memInfo.getKernelUsedSizeKb()));
                    printWriter.print(" kernel)\n");
                    printWriter.print(" Lost RAM: ");
                    printWriter.println(stringifyKBSize(lostRAM));
                } else {
                    printWriter.print("lostram,");
                    printWriter.println(lostRAM);
                }
                if (brief) {
                    if (memInfo.getZramTotalSizeKb() != 0) {
                        if (!memoryUsageDumpOptions.isCompact) {
                            printWriter.print("     ZRAM: ");
                            printWriter.print(stringifyKBSize(memInfo.getZramTotalSizeKb()));
                            printWriter.print(" physical used for ");
                            printWriter.print(stringifyKBSize(memInfo.getSwapTotalSizeKb() - memInfo.getSwapFreeSizeKb()));
                            printWriter.print(" in swap (");
                            printWriter.print(stringifyKBSize(memInfo.getSwapTotalSizeKb()));
                            printWriter.println(" total swap)");
                        } else {
                            printWriter.print("zram,");
                            printWriter.print(memInfo.getZramTotalSizeKb());
                            printWriter.print(",");
                            printWriter.print(memInfo.getSwapTotalSizeKb());
                            printWriter.print(",");
                            printWriter.println(memInfo.getSwapFreeSizeKb());
                        }
                    }
                    long[] ksm = getKsmInfo();
                    if (!memoryUsageDumpOptions.isCompact) {
                        if (!(ksm[1] == 0 && ksm[0] == 0 && ksm[2] == 0 && ksm[3] == 0)) {
                            printWriter.print("      KSM: ");
                            printWriter.print(stringifyKBSize(ksm[1]));
                            printWriter.print(" saved from shared ");
                            printWriter.print(stringifyKBSize(ksm[0]));
                            printWriter.print("           ");
                            printWriter.print(stringifyKBSize(ksm[2]));
                            printWriter.print(" unshared; ");
                            printWriter.print(stringifyKBSize(ksm[3]));
                            printWriter.println(" volatile");
                        }
                        printWriter.print("   Tuning: ");
                        printWriter.print(ActivityManager.staticGetMemoryClass());
                        printWriter.print(" (large ");
                        printWriter.print(ActivityManager.staticGetLargeMemoryClass());
                        printWriter.print("), oom ");
                        printWriter.print(stringifySize(activityManagerService.mProcessList.getMemLevel(999), 1024));
                        printWriter.print(", restore limit ");
                        printWriter.print(stringifyKBSize(activityManagerService.mProcessList.getCachedRestoreThresholdKb()));
                        if (ActivityManager.isLowRamDeviceStatic()) {
                            printWriter.print(" (low-ram)");
                        }
                        if (ActivityManager.isHighEndGfx()) {
                            printWriter.print(" (high-end-gfx)");
                        }
                        pw.println();
                        return;
                    }
                    printWriter.print("ksm,");
                    printWriter.print(ksm[1]);
                    printWriter.print(",");
                    printWriter.print(ksm[0]);
                    printWriter.print(",");
                    printWriter.print(ksm[2]);
                    printWriter.print(",");
                    printWriter.println(ksm[3]);
                    printWriter.print("tuning,");
                    printWriter.print(ActivityManager.staticGetMemoryClass());
                    printWriter.print(',');
                    printWriter.print(ActivityManager.staticGetLargeMemoryClass());
                    printWriter.print(',');
                    printWriter.print(activityManagerService.mProcessList.getMemLevel(999) / 1024);
                    if (ActivityManager.isLowRamDeviceStatic()) {
                        printWriter.print(",low-ram");
                    }
                    if (ActivityManager.isHighEndGfx()) {
                        printWriter.print(",high-end-gfx");
                    }
                    pw.println();
                    return;
                }
                return;
            }
            i2 = i5;
            oomProcs = oomProcs2;
            miscSwapPss = miscSwapPss4;
            dalvikSubitemPss3 = dalvikSubitemPss;
            oomPss = oomPss4;
            memoryUsageDumpOptions2 = memoryUsageDumpOptions4;
            tmpLong2 = tmpLong4;
            miscPss = miscPss3;
            oomSwapPss = oomSwapPss2;
            procMemsMap2 = procMemsMap3;
            i5 = i2 - 1;
            arrayList2 = procs;
            memoryUsageDumpOptions4 = memoryUsageDumpOptions2;
            procMemsMap3 = procMemsMap2;
            oomPss4 = oomPss;
            dalvikSubitemPss = dalvikSubitemPss3;
            miscSwapPss4 = miscSwapPss;
            oomSwapPss2 = oomSwapPss;
            tmpLong4 = tmpLong2;
            oomProcs2 = oomProcs;
            miscPss3 = miscPss;
            z = true;
            printWriter4 = pw;
            miscSwapPss5 = miscSwapPss;
        }
        long[] dalvikSubitemPss5 = dalvikSubitemPss;
        long[] tmpLong5 = tmpLong4;
        SparseArray<MemItem> procMemsMap4 = procMemsMap3;
        if (!memoryUsageDumpOptions4.isCheckinRequest && procs.size() > 1 && !memoryUsageDumpOptions4.packages) {
            updateCpuStatsNow();
            synchronized (activityManagerService2.mProcessCpuTracker) {
                try {
                    int N3 = activityManagerService2.mProcessCpuTracker.countStats();
                    int i7 = 0;
                    nativeProcTotalPss = 0;
                    Debug.MemoryInfo mi7 = null;
                    while (i7 < N3) {
                        try {
                            ProcessCpuTracker.Stats st2 = activityManagerService2.mProcessCpuTracker.getStats(i7);
                            if (st2.vsize <= 0 || procMemsMap4.indexOfKey(st2.pid) >= 0) {
                                N = N3;
                                i = i7;
                                procMems = procMems2;
                                procMemsMap = procMemsMap4;
                                dalvikSubitemPss2 = dalvikSubitemPss5;
                            } else {
                                if (mi7 == null) {
                                    try {
                                        mi = new Debug.MemoryInfo();
                                    } catch (Throwable th20) {
                                        th = th20;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th21) {
                                                th = th21;
                                            }
                                        }
                                        throw th;
                                    }
                                } else {
                                    mi = mi7;
                                }
                                if (!brief) {
                                    try {
                                        if (!memoryUsageDumpOptions4.oomOnly) {
                                            Debug.getMemoryInfo(st2.pid, mi);
                                            i = i7;
                                            tmpLong = tmpLong5;
                                            long myTotalPss3 = (long) mi.getTotalPss();
                                            tmpLong5 = tmpLong;
                                            long myTotalSwapPss3 = (long) mi.getTotalSwappedOutPss();
                                            totalPss += myTotalPss3;
                                            totalSwapPss += myTotalSwapPss3;
                                            long nativeProcTotalPss2 = nativeProcTotalPss + myTotalPss3;
                                            try {
                                                N = N3;
                                                StringBuilder sb3 = new StringBuilder();
                                                try {
                                                    sb3.append(st2.name);
                                                    sb3.append(" (pid ");
                                                    sb3.append(st2.pid);
                                                    sb3.append(")");
                                                    procMemsMap = procMemsMap4;
                                                } catch (Throwable th22) {
                                                    th = th22;
                                                    while (true) {
                                                        break;
                                                    }
                                                    throw th;
                                                }
                                            } catch (Throwable th23) {
                                                th = th23;
                                                while (true) {
                                                    break;
                                                }
                                                throw th;
                                            }
                                            try {
                                                MemItem pssItem2 = new MemItem(sb3.toString(), st2.name, myTotalPss3, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                                procMems2.add(pssItem2);
                                                nativePss += (long) mi.nativePss;
                                                nativeSwapPss += (long) mi.nativeSwappedOutPss;
                                                dalvikPss += (long) mi.dalvikPss;
                                                dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                                j = 0;
                                                while (true) {
                                                    dalvikSubitemPss2 = dalvikSubitemPss5;
                                                    try {
                                                        if (j < dalvikSubitemPss2.length) {
                                                            break;
                                                        }
                                                        try {
                                                            dalvikSubitemPss2[j] = dalvikSubitemPss2[j] + ((long) mi.getOtherPss(j + 17));
                                                            dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + ((long) mi.getOtherSwappedOutPss(j + 17));
                                                            j++;
                                                            st2 = st2;
                                                            procMems2 = procMems2;
                                                            dalvikSubitemPss5 = dalvikSubitemPss2;
                                                        } catch (Throwable th24) {
                                                            th = th24;
                                                            while (true) {
                                                                break;
                                                            }
                                                            throw th;
                                                        }
                                                    } catch (Throwable th25) {
                                                        th = th25;
                                                        while (true) {
                                                            break;
                                                        }
                                                        throw th;
                                                    }
                                                }
                                                procMems = procMems2;
                                                otherPss += (long) mi.otherPss;
                                                otherSwapPss += (long) mi.otherSwappedOutPss;
                                                for (j2 = 0; j2 < 17; j2++) {
                                                    long mem3 = (long) mi.getOtherPss(j2);
                                                    miscPss3[j2] = miscPss3[j2] + mem3;
                                                    otherPss -= mem3;
                                                    long mem4 = (long) mi.getOtherSwappedOutPss(j2);
                                                    miscSwapPss4[j2] = miscSwapPss4[j2] + mem4;
                                                    otherSwapPss -= mem4;
                                                }
                                                oomPss4[0] = oomPss4[0] + myTotalPss3;
                                                oomSwapPss2[0] = oomSwapPss2[0] + myTotalSwapPss3;
                                                if (oomProcs2[0] == null) {
                                                    oomProcs2[0] = new ArrayList<>();
                                                }
                                                oomProcs2[0].add(pssItem2);
                                                mi7 = mi;
                                                nativeProcTotalPss = nativeProcTotalPss2;
                                            } catch (Throwable th26) {
                                                th = th26;
                                                while (true) {
                                                    break;
                                                }
                                                throw th;
                                            }
                                        }
                                    } catch (Throwable th27) {
                                        th = th27;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                }
                                try {
                                    i = i7;
                                    tmpLong = tmpLong5;
                                } catch (Throwable th28) {
                                    th = th28;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                                try {
                                    mi.nativePss = (int) Debug.getPss(st2.pid, tmpLong, null);
                                    mi.nativePrivateDirty = (int) tmpLong[0];
                                    long myTotalPss32 = (long) mi.getTotalPss();
                                    tmpLong5 = tmpLong;
                                    long myTotalSwapPss32 = (long) mi.getTotalSwappedOutPss();
                                    totalPss += myTotalPss32;
                                    totalSwapPss += myTotalSwapPss32;
                                    long nativeProcTotalPss22 = nativeProcTotalPss + myTotalPss32;
                                    N = N3;
                                    StringBuilder sb32 = new StringBuilder();
                                    sb32.append(st2.name);
                                    sb32.append(" (pid ");
                                    sb32.append(st2.pid);
                                    sb32.append(")");
                                    procMemsMap = procMemsMap4;
                                    MemItem pssItem22 = new MemItem(sb32.toString(), st2.name, myTotalPss32, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                    procMems2.add(pssItem22);
                                    nativePss += (long) mi.nativePss;
                                    nativeSwapPss += (long) mi.nativeSwappedOutPss;
                                    dalvikPss += (long) mi.dalvikPss;
                                    dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                    j = 0;
                                    while (true) {
                                        dalvikSubitemPss2 = dalvikSubitemPss5;
                                        if (j < dalvikSubitemPss2.length) {
                                        }
                                        dalvikSubitemPss2[j] = dalvikSubitemPss2[j] + ((long) mi.getOtherPss(j + 17));
                                        dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + ((long) mi.getOtherSwappedOutPss(j + 17));
                                        j++;
                                        st2 = st2;
                                        procMems2 = procMems2;
                                        dalvikSubitemPss5 = dalvikSubitemPss2;
                                    }
                                    procMems = procMems2;
                                    otherPss += (long) mi.otherPss;
                                    otherSwapPss += (long) mi.otherSwappedOutPss;
                                    while (j2 < 17) {
                                    }
                                    oomPss4[0] = oomPss4[0] + myTotalPss32;
                                    oomSwapPss2[0] = oomSwapPss2[0] + myTotalSwapPss32;
                                    if (oomProcs2[0] == null) {
                                    }
                                    oomProcs2[0].add(pssItem22);
                                    mi7 = mi;
                                    nativeProcTotalPss = nativeProcTotalPss22;
                                } catch (Throwable th29) {
                                    th = th29;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                            }
                            i7 = i + 1;
                            activityManagerService2 = this;
                            dalvikSubitemPss5 = dalvikSubitemPss2;
                            N3 = N;
                            procMemsMap4 = procMemsMap;
                            procMems2 = procMems;
                        } catch (Throwable th30) {
                            th = th30;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    }
                    try {
                    } catch (Throwable th31) {
                        th = th31;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                } catch (Throwable th32) {
                    th = th32;
                    while (true) {
                        break;
                    }
                    throw th;
                }
            }
            ArrayList<MemItem> catMems = new ArrayList<>();
            catMems.add(new MemItem("Native", "Native", nativePss, nativeSwapPss, -1));
            catMems.add(new MemItem("Dalvik", "Dalvik", dalvikPss, dalvikSwapPss, -2));
            catMems.add(new MemItem("Unknown", "Unknown", otherPss, otherSwapPss, -3));
            for (int j5 = 0; j5 < 17; j5++) {
                String label2 = Debug.MemoryInfo.getOtherLabel(j5);
                catMems.add(new MemItem(label2, label2, miscPss3[j5], miscSwapPss4[j5], j5));
            }
            if (dalvikSubitemPss5.length > 0) {
                Iterator<MemItem> it = catMems.iterator();
                while (it.hasNext()) {
                    MemItem memItem = it.next();
                    if (memItem.id == -2) {
                        memItemStart = 0;
                        memItemEnd = 3;
                    } else if (memItem.id == 0) {
                        memItemStart = 4;
                        memItemEnd = 8;
                    } else if (memItem.id == 10) {
                        memItemStart = 9;
                        memItemEnd = 11;
                    } else if (memItem.id == 12) {
                        memItemStart = 12;
                        memItemEnd = 13;
                    }
                    memItem.subitems = new ArrayList<>();
                    for (int j6 = memItemStart; j6 <= memItemEnd; j6++) {
                        String name = Debug.MemoryInfo.getOtherLabel(j6 + 17);
                        memItem.subitems.add(new MemItem(name, name, dalvikSubitemPss5[j6], dalvikSubitemSwapPss[j6], j6));
                    }
                }
            }
            ArrayList<MemItem> oomMems = new ArrayList<>();
            for (int j7 = 0; j7 < oomPss4.length; j7++) {
                if (oomPss4[j7] != 0) {
                    if (memoryUsageDumpOptions4.isCompact) {
                        label = DUMP_MEM_OOM_COMPACT_LABEL[j7];
                    } else {
                        label = DUMP_MEM_OOM_LABEL[j7];
                    }
                    MemItem item = new MemItem(label, label, oomPss4[j7], oomSwapPss2[j7], DUMP_MEM_OOM_ADJ[j7]);
                    item.subitems = oomProcs2[j7];
                    oomMems.add(item);
                }
            }
            memoryUsageDumpOptions4.dumpSwapPss = memoryUsageDumpOptions4.dumpSwapPss && hasSwapPss2 && totalSwapPss != 0;
            if (brief || memoryUsageDumpOptions4.oomOnly || memoryUsageDumpOptions4.isCompact) {
                memoryUsageDumpOptions = memoryUsageDumpOptions4;
            } else {
                pw.println();
                pw.println("Total PSS by process:");
                memoryUsageDumpOptions = memoryUsageDumpOptions4;
                dumpMemItems(pw, "  ", "proc", procMems2, true, memoryUsageDumpOptions4.isCompact, memoryUsageDumpOptions4.dumpSwapPss);
                pw.println();
            }
            if (!memoryUsageDumpOptions.isCompact) {
                printWriter = pw;
                printWriter.println("Total PSS by OOM adjustment:");
            } else {
                printWriter = pw;
            }
            dumpMemItems(pw, "  ", "oom", oomMems, false, memoryUsageDumpOptions.isCompact, memoryUsageDumpOptions.dumpSwapPss);
            if (!brief && !memoryUsageDumpOptions.oomOnly) {
                PrintWriter out = categoryPw != null ? categoryPw : printWriter;
                if (!memoryUsageDumpOptions.isCompact) {
                    out.println();
                    out.println("Total PSS by category:");
                }
                dumpMemItems(out, "  ", "cat", catMems, true, memoryUsageDumpOptions.isCompact, memoryUsageDumpOptions.dumpSwapPss);
            }
            if (!memoryUsageDumpOptions.isCompact) {
                pw.println();
            }
            memInfo = new MemInfoReader();
            memInfo.readMemInfo();
            if (nativeProcTotalPss > 0) {
                activityManagerService = this;
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        long cachedKb = memInfo.getCachedSizeKb();
                        long freeKb = memInfo.getFreeSizeKb();
                        long zramKb = memInfo.getZramTotalSizeKb();
                        long kernelKb = memInfo.getKernelUsedSizeKb();
                        EventLogTags.writeAmMeminfo(cachedKb * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, nativeProcTotalPss * 1024);
                        activityManagerService.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, nativeProcTotalPss);
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } else {
                activityManagerService = this;
            }
            if (!brief) {
            }
            long lostRAM2 = ((((memInfo.getTotalSizeKb() - (totalPss - totalSwapPss)) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb();
            if (memoryUsageDumpOptions.isCompact) {
            }
            if (brief) {
            }
        }
    }

    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:126:0x0369 */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX INFO: Multiple debug info for r12v46 'pid'  int: [D('pid' int), D('miscSwapPss' long[])] */
    /* JADX WARN: Type inference failed for: r20v0 */
    /* JADX WARN: Type inference failed for: r20v1 */
    /* JADX WARN: Type inference failed for: r20v3 */
    /* JADX WARN: Type inference failed for: r20v20 */
    /* JADX WARN: Type inference failed for: r20v21 */
    /* JADX WARNING: Code restructure failed: missing block: B:238:0x0714, code lost:
        r0 = th;
     */
    /* JADX WARNING: Removed duplicated region for block: B:119:0x02f3  */
    /* JADX WARNING: Removed duplicated region for block: B:147:0x0427  */
    /* JADX WARNING: Removed duplicated region for block: B:150:0x0458 A[SYNTHETIC, Splitter:B:150:0x0458] */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x081c A[Catch:{ all -> 0x088f }] */
    /* JADX WARNING: Removed duplicated region for block: B:290:0x0854 A[LOOP:12: B:288:0x0850->B:290:0x0854, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:293:0x087d  */
    /* JADX WARNING: Removed duplicated region for block: B:375:0x0abf  */
    /* JADX WARNING: Removed duplicated region for block: B:376:0x0afb  */
    /* JADX WARNING: Removed duplicated region for block: B:379:0x0b3f  */
    private final void dumpApplicationMemoryUsage(FileDescriptor fd, MemoryUsageDumpOptions opts, String[] innerArgs, boolean brief, ArrayList<ProcessRecord> procs) {
        long[] jArr;
        long[] dalvikSubitemSwapPss;
        long cachedPss;
        ProtoOutputStream proto;
        Throwable th;
        MemInfoReader memInfo;
        long cachedPss2;
        String label;
        int memItemEnd;
        int memItemStart;
        long cachedPss3;
        int N;
        SparseArray<MemItem> procMemsMap;
        Debug.MemoryInfo mi;
        long[] tmpLong;
        long myTotalPss;
        long myTotalSwapPss;
        long nativeProcTotalPss;
        int j;
        int j2;
        IApplicationThread thread;
        int pid;
        int oomAdj;
        boolean hasActivities;
        ArrayList<MemItem> procMems;
        long realtimeMs;
        long[] tmpLong2;
        long[] oomPss;
        long[] oomSwapPss;
        boolean hasSwapPss;
        long[] miscSwapPss;
        int i;
        ArrayList<MemItem>[] oomProcs;
        long[] miscPss;
        ProtoOutputStream proto2;
        Debug.MemoryInfo mi2;
        SparseArray<MemItem> procMemsMap2;
        MemoryUsageDumpOptions memoryUsageDumpOptions;
        long[] oomPss2;
        long[] oomSwapPss2;
        Debug.MemoryInfo mi3;
        long endTime;
        long startTime;
        int reportType;
        long realtimeMs2;
        ArrayList<MemItem>[] oomProcs2;
        long[] oomSwapPss3;
        boolean z;
        ArrayList<MemItem> procMems2;
        int pid2;
        SparseArray<MemItem> procMemsMap3;
        Throwable th2;
        Debug.MemoryInfo mi4;
        int oomAdj2;
        ProcessRecord r;
        long cachedPss4;
        long cachedPss5;
        SparseArray<MemItem> procMemsMap4;
        IOException e;
        SparseArray<MemItem> procMemsMap5;
        RemoteException e2;
        Throwable th3;
        int findPid;
        Throwable th4;
        int findPid2;
        MemoryUsageDumpOptions memoryUsageDumpOptions2 = opts;
        long uptimeMs = SystemClock.uptimeMillis();
        long realtimeMs3 = SystemClock.elapsedRealtime();
        long[] tmpLong3 = new long[1];
        if (procs == null) {
            if (innerArgs.length > 0) {
                String proc = innerArgs[0];
                if (proc.charAt(0) != '-') {
                    ArrayList<ProcessCpuTracker.Stats> nativeProcs = new ArrayList<>();
                    updateCpuStatsNow();
                    try {
                        findPid = Integer.parseInt(innerArgs[0]);
                    } catch (NumberFormatException e3) {
                        findPid = -1;
                    }
                    synchronized (this.mProcessCpuTracker) {
                        try {
                            int N2 = this.mProcessCpuTracker.countStats();
                            int i2 = 0;
                            while (i2 < N2) {
                                try {
                                    ProcessCpuTracker.Stats st = this.mProcessCpuTracker.getStats(i2);
                                    try {
                                        if (st.pid != findPid) {
                                            if (st.baseName != null) {
                                                findPid2 = findPid;
                                                try {
                                                    if (st.baseName.equals(innerArgs[0])) {
                                                    }
                                                } catch (Throwable th5) {
                                                    th4 = th5;
                                                    while (true) {
                                                        try {
                                                            break;
                                                        } catch (Throwable th6) {
                                                            th4 = th6;
                                                        }
                                                    }
                                                    throw th4;
                                                }
                                            } else {
                                                findPid2 = findPid;
                                            }
                                            i2++;
                                            N2 = N2;
                                            proc = proc;
                                            findPid = findPid2;
                                        } else {
                                            findPid2 = findPid;
                                        }
                                        nativeProcs.add(st);
                                        i2++;
                                        N2 = N2;
                                        proc = proc;
                                        findPid = findPid2;
                                    } catch (Throwable th7) {
                                        th4 = th7;
                                        while (true) {
                                            break;
                                        }
                                        throw th4;
                                    }
                                } catch (Throwable th8) {
                                    th4 = th8;
                                    while (true) {
                                        break;
                                    }
                                    throw th4;
                                }
                            }
                            try {
                            } catch (Throwable th9) {
                                th4 = th9;
                                while (true) {
                                    break;
                                }
                                throw th4;
                            }
                        } catch (Throwable th10) {
                            th4 = th10;
                            while (true) {
                                break;
                            }
                            throw th4;
                        }
                    }
                    if (nativeProcs.size() > 0) {
                        ProtoOutputStream proto3 = new ProtoOutputStream(fd);
                        proto3.write(1112396529665L, uptimeMs);
                        proto3.write(1112396529666L, realtimeMs3);
                        Debug.MemoryInfo mi5 = null;
                        int i3 = nativeProcs.size() - 1;
                        while (i3 >= 0) {
                            ProcessCpuTracker.Stats r2 = nativeProcs.get(i3);
                            int pid3 = r2.pid;
                            long nToken = proto3.start(2246267895811L);
                            proto3.write(1120986464257L, pid3);
                            proto3.write(1138166333442L, r2.baseName);
                            if (mi5 == null) {
                                mi5 = new Debug.MemoryInfo();
                            }
                            if (memoryUsageDumpOptions2.dumpDetails || (!brief && !memoryUsageDumpOptions2.oomOnly)) {
                                Debug.getMemoryInfo(pid3, mi5);
                            } else {
                                mi5.dalvikPss = (int) Debug.getPss(pid3, tmpLong3, null);
                                mi5.dalvikPrivateDirty = (int) tmpLong3[0];
                            }
                            ActivityThread.dumpMemInfoTable(proto3, mi5, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, 0, 0, 0, 0, 0, 0);
                            proto3.end(nToken);
                            i3--;
                            realtimeMs3 = realtimeMs3;
                            uptimeMs = uptimeMs;
                        }
                        proto3.flush();
                        return;
                    }
                }
            }
            Log.d(TAG, "No process found for: " + innerArgs[0]);
            return;
        }
        if (!brief && !memoryUsageDumpOptions2.oomOnly && (procs.size() == 1 || memoryUsageDumpOptions2.isCheckinRequest || memoryUsageDumpOptions2.packages)) {
            memoryUsageDumpOptions2.dumpDetails = true;
        }
        ProtoOutputStream proto4 = new ProtoOutputStream(fd);
        proto4.write(1112396529665L, uptimeMs);
        long realtimeMs4 = realtimeMs3;
        proto4.write(1112396529666L, realtimeMs4);
        ArrayList<MemItem> procMems3 = new ArrayList<>();
        SparseArray<MemItem> procMemsMap6 = new SparseArray<>();
        if (memoryUsageDumpOptions2.dumpDalvik) {
            jArr = new long[14];
        } else {
            jArr = EmptyArray.LONG;
        }
        long[] dalvikSubitemPss = jArr;
        if (memoryUsageDumpOptions2.dumpDalvik) {
            dalvikSubitemSwapPss = new long[14];
        } else {
            dalvikSubitemSwapPss = EmptyArray.LONG;
        }
        long[] miscPss2 = new long[17];
        long[] miscSwapPss2 = new long[17];
        String[] strArr = DUMP_MEM_OOM_LABEL;
        long[] oomPss3 = new long[strArr.length];
        long[] dalvikSubitemPss2 = new long[strArr.length];
        ArrayList<MemItem>[] oomProcs3 = new ArrayList[strArr.length];
        Debug.MemoryInfo mi6 = null;
        SparseArray<MemItem> procMemsMap7 = 1;
        long dalvikPss = 0;
        long dalvikSwapPss = 0;
        long otherPss = 0;
        long otherSwapPss = 0;
        long totalPss = 0;
        long totalSwapPss = 0;
        long cachedPss6 = 0;
        long cachedSwapPss = 0;
        boolean hasSwapPss2 = false;
        long nativeSwapPss = 0;
        long nativePss = 0;
        for (int i4 = procs.size() - 1; i4 >= 0; i4 = i - 1) {
            ProcessRecord r3 = procs.get(i4);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    thread = r3.thread;
                    pid = r3.pid;
                    oomAdj = r3.getSetAdjWithServices();
                    hasActivities = r3.hasActivities();
                } catch (Throwable th11) {
                    th = th11;
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (thread == null) {
                miscPss = miscPss2;
                oomProcs = oomProcs3;
                oomSwapPss = dalvikSubitemPss2;
                tmpLong2 = tmpLong3;
                procMems = procMems3;
                realtimeMs = realtimeMs4;
                miscSwapPss = miscSwapPss2;
                proto2 = proto4;
                i = i4;
                oomSwapPss2 = dalvikSubitemPss;
                hasSwapPss = hasSwapPss2;
                mi2 = mi6;
                memoryUsageDumpOptions = memoryUsageDumpOptions2;
                procMemsMap2 = procMemsMap6;
                oomPss2 = oomPss3;
            } else {
                if (mi6 == null) {
                    i = i4;
                    mi3 = new Debug.MemoryInfo();
                } else {
                    i = i4;
                    mi3 = mi6;
                }
                if (memoryUsageDumpOptions2.dumpDetails) {
                    oomProcs2 = oomProcs3;
                    oomSwapPss3 = dalvikSubitemPss2;
                    procMems2 = procMems3;
                    realtimeMs2 = realtimeMs4;
                    miscSwapPss = miscSwapPss2;
                    pid2 = pid;
                    z = false;
                } else if (brief || memoryUsageDumpOptions2.oomOnly) {
                    long startTime2 = SystemClock.currentThreadTimeMillis();
                    oomProcs2 = oomProcs3;
                    oomSwapPss3 = dalvikSubitemPss2;
                    procMems2 = procMems3;
                    miscSwapPss = miscSwapPss2;
                    pid2 = pid;
                    mi3.dalvikPss = (int) Debug.getPss(pid2, tmpLong3, null);
                    long endTime2 = SystemClock.currentThreadTimeMillis();
                    realtimeMs2 = realtimeMs4;
                    z = false;
                    mi3.dalvikPrivateDirty = (int) tmpLong3[0];
                    reportType = 3;
                    endTime = endTime2;
                    startTime = startTime2;
                    hasSwapPss = hasSwapPss2;
                    if (memoryUsageDumpOptions2.dumpDetails) {
                        miscPss = miscPss2;
                        oomPss = oomPss3;
                        procMemsMap3 = procMemsMap6;
                        tmpLong2 = tmpLong3;
                        procMems = procMems2;
                        oomSwapPss = oomSwapPss3;
                        oomProcs = oomProcs2;
                        realtimeMs = realtimeMs2;
                    } else if (memoryUsageDumpOptions2.localOnly) {
                        long aToken = proto4.start(2246267895812L);
                        long mToken = proto4.start(1146756268033L);
                        proto4.write(1120986464257L, pid2);
                        proto4.write(1138166333442L, r3.processName);
                        ActivityThread.dumpMemInfoTable(proto4, mi3, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, 0, 0, 0, 0, 0, 0);
                        proto4.end(mToken);
                        proto4.end(aToken);
                        miscPss = miscPss2;
                        tmpLong2 = tmpLong3;
                        procMems = procMems2;
                        oomSwapPss = oomSwapPss3;
                        oomProcs = oomProcs2;
                        realtimeMs = realtimeMs2;
                        procMemsMap3 = procMemsMap6;
                        oomPss = oomPss3;
                    } else {
                        try {
                            ByteTransferPipe tp = new ByteTransferPipe();
                            try {
                                oomProcs = oomProcs2;
                                oomSwapPss = oomSwapPss3;
                                miscPss = miscPss2;
                                oomPss = oomPss3;
                                tmpLong2 = tmpLong3;
                                procMemsMap7 = procMemsMap6;
                                realtimeMs = realtimeMs2;
                                procMems = procMems2;
                                try {
                                    thread.dumpMemInfoProto(tp.getWriteFd(), mi3, memoryUsageDumpOptions2.dumpFullDetails, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, memoryUsageDumpOptions2.dumpUnreachable, innerArgs);
                                    proto4.write(2246267895812L, tp.get());
                                    try {
                                        tp.kill();
                                        procMemsMap3 = procMemsMap7;
                                    } catch (IOException e4) {
                                        e = e4;
                                        procMemsMap4 = procMemsMap7;
                                        Log.e(TAG, "Got IOException!", e);
                                        procMemsMap3 = procMemsMap4;
                                        long myTotalPss2 = (long) mi3.getTotalPss();
                                        long myTotalUss = (long) mi3.getTotalUss();
                                        long myTotalRss = (long) mi3.getTotalRss();
                                        long myTotalSwapPss2 = (long) mi3.getTotalSwappedOutPss();
                                        synchronized (this) {
                                        }
                                    } catch (RemoteException e5) {
                                        e2 = e5;
                                        procMemsMap5 = procMemsMap7;
                                        Log.e(TAG, "Got RemoteException!", e2);
                                        procMemsMap3 = procMemsMap5;
                                        long myTotalPss22 = (long) mi3.getTotalPss();
                                        long myTotalUss2 = (long) mi3.getTotalUss();
                                        long myTotalRss2 = (long) mi3.getTotalRss();
                                        long myTotalSwapPss22 = (long) mi3.getTotalSwappedOutPss();
                                        synchronized (this) {
                                        }
                                    }
                                } catch (Throwable th12) {
                                    th3 = th12;
                                    tp.kill();
                                    throw th3;
                                }
                            } catch (Throwable th13) {
                                th3 = th13;
                                tp.kill();
                                throw th3;
                            }
                        } catch (IOException e6) {
                            e = e6;
                            miscPss = miscPss2;
                            tmpLong2 = tmpLong3;
                            procMems = procMems2;
                            oomSwapPss = oomSwapPss3;
                            oomProcs = oomProcs2;
                            realtimeMs = realtimeMs2;
                            procMemsMap4 = procMemsMap6;
                            oomPss = oomPss3;
                            Log.e(TAG, "Got IOException!", e);
                            procMemsMap3 = procMemsMap4;
                            long myTotalPss222 = (long) mi3.getTotalPss();
                            long myTotalUss22 = (long) mi3.getTotalUss();
                            long myTotalRss22 = (long) mi3.getTotalRss();
                            long myTotalSwapPss222 = (long) mi3.getTotalSwappedOutPss();
                            synchronized (this) {
                            }
                        } catch (RemoteException e7) {
                            e2 = e7;
                            miscPss = miscPss2;
                            tmpLong2 = tmpLong3;
                            procMems = procMems2;
                            oomSwapPss = oomSwapPss3;
                            oomProcs = oomProcs2;
                            realtimeMs = realtimeMs2;
                            procMemsMap5 = procMemsMap6;
                            oomPss = oomPss3;
                            Log.e(TAG, "Got RemoteException!", e2);
                            procMemsMap3 = procMemsMap5;
                            long myTotalPss2222 = (long) mi3.getTotalPss();
                            long myTotalUss222 = (long) mi3.getTotalUss();
                            long myTotalRss222 = (long) mi3.getTotalRss();
                            long myTotalSwapPss2222 = (long) mi3.getTotalSwappedOutPss();
                            synchronized (this) {
                            }
                        }
                    }
                    long myTotalPss22222 = (long) mi3.getTotalPss();
                    long myTotalUss2222 = (long) mi3.getTotalUss();
                    long myTotalRss2222 = (long) mi3.getTotalRss();
                    long myTotalSwapPss22222 = (long) mi3.getTotalSwappedOutPss();
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            if (r3.thread != null) {
                                try {
                                    int oomAdj3 = oomAdj;
                                    if (oomAdj3 == r3.getSetAdjWithServices()) {
                                        try {
                                            r3.baseProcessTracker.addPss(myTotalPss22222, myTotalUss2222, myTotalRss2222, true, reportType, endTime - startTime, r3.pkgList.mPkgList);
                                            int ipkg = r3.pkgList.size() - 1;
                                            while (ipkg >= 0) {
                                                ProcessStats.ProcessStateHolder holder = r3.pkgList.valueAt(ipkg);
                                                try {
                                                    try {
                                                        try {
                                                            StatsLog.write(18, r3.info.uid, holder.state.getName(), holder.state.getPackage(), myTotalPss22222, myTotalUss2222, myTotalRss2222, reportType, endTime - startTime, holder.appVersion);
                                                            ipkg--;
                                                            r3 = r3;
                                                            proto4 = proto4;
                                                            oomAdj3 = oomAdj3;
                                                            mi3 = mi3;
                                                        } catch (Throwable th14) {
                                                            th2 = th14;
                                                            while (true) {
                                                                try {
                                                                    break;
                                                                } catch (Throwable th15) {
                                                                    th2 = th15;
                                                                }
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            throw th2;
                                                        }
                                                    } catch (Throwable th16) {
                                                        th2 = th16;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th2;
                                                    }
                                                } catch (Throwable th17) {
                                                    th2 = th17;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th2;
                                                }
                                            }
                                            oomAdj2 = oomAdj3;
                                            proto2 = proto4;
                                            mi4 = mi3;
                                            r = r3;
                                        } catch (Throwable th18) {
                                            th2 = th18;
                                            while (true) {
                                                break;
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th2;
                                        }
                                    } else {
                                        oomAdj2 = oomAdj3;
                                        proto2 = proto4;
                                        mi4 = mi3;
                                        r = r3;
                                    }
                                } catch (Throwable th19) {
                                    th2 = th19;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            } else {
                                proto2 = proto4;
                                mi4 = mi3;
                                r = r3;
                                oomAdj2 = oomAdj;
                            }
                            try {
                            } catch (Throwable th20) {
                                th2 = th20;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th2;
                            }
                        } catch (Throwable th21) {
                            th2 = th21;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    memoryUsageDumpOptions = opts;
                    if (!memoryUsageDumpOptions.isCheckinRequest) {
                        totalPss += myTotalPss22222;
                        totalSwapPss += myTotalSwapPss22222;
                        StringBuilder sb = new StringBuilder();
                        sb.append(r.processName);
                        sb.append(" (pid ");
                        sb.append(pid2);
                        sb.append(hasActivities ? " / activities)" : ")");
                        MemItem pssItem = new MemItem(sb.toString(), r.processName, myTotalPss22222, myTotalSwapPss22222, pid2, hasActivities);
                        ArrayList<MemItem> procMems4 = procMems;
                        procMems4.add(pssItem);
                        procMemsMap2 = procMemsMap3;
                        procMemsMap2.put(pid2, pssItem);
                        mi2 = mi4;
                        nativePss += (long) mi2.nativePss;
                        nativeSwapPss += (long) mi2.nativeSwappedOutPss;
                        dalvikPss += (long) mi2.dalvikPss;
                        dalvikSwapPss += (long) mi2.dalvikSwappedOutPss;
                        int j3 = 0;
                        while (true) {
                            oomSwapPss2 = dalvikSubitemPss;
                            if (j3 >= oomSwapPss2.length) {
                                break;
                            }
                            oomSwapPss2[j3] = oomSwapPss2[j3] + ((long) mi2.getOtherPss(j3 + 17));
                            dalvikSubitemSwapPss[j3] = dalvikSubitemSwapPss[j3] + ((long) mi2.getOtherSwappedOutPss(j3 + 17));
                            j3++;
                            r = r;
                            pid2 = pid2;
                            myTotalRss2222 = myTotalRss2222;
                            procMems4 = procMems4;
                            dalvikSubitemPss = oomSwapPss2;
                        }
                        procMems = procMems4;
                        otherPss += (long) mi2.otherPss;
                        otherSwapPss += (long) mi2.otherSwappedOutPss;
                        for (int j4 = 0; j4 < 17; j4++) {
                            long mem = (long) mi2.getOtherPss(j4);
                            miscPss[j4] = miscPss[j4] + mem;
                            otherPss -= mem;
                            long mem2 = (long) mi2.getOtherSwappedOutPss(j4);
                            miscSwapPss[j4] = miscSwapPss[j4] + mem2;
                            otherSwapPss -= mem2;
                        }
                        if (oomAdj2 >= 900) {
                            cachedSwapPss += myTotalSwapPss22222;
                            cachedPss4 = cachedPss6 + myTotalPss22222;
                        } else {
                            cachedPss4 = cachedPss6;
                        }
                        int oomIndex = 0;
                        while (true) {
                            oomPss2 = oomPss;
                            if (oomIndex >= oomPss2.length) {
                                cachedPss5 = cachedPss4;
                                break;
                            }
                            if (oomIndex == oomPss2.length - 1) {
                                cachedPss5 = cachedPss4;
                                break;
                            }
                            int[] iArr = DUMP_MEM_OOM_ADJ;
                            cachedPss5 = cachedPss4;
                            if (oomAdj2 >= iArr[oomIndex] && oomAdj2 < iArr[oomIndex + 1]) {
                                break;
                            }
                            oomIndex++;
                            oomPss = oomPss2;
                            cachedPss4 = cachedPss5;
                        }
                        oomPss2[oomIndex] = oomPss2[oomIndex] + myTotalPss22222;
                        oomSwapPss[oomIndex] = oomSwapPss[oomIndex] + myTotalSwapPss22222;
                        if (oomProcs[oomIndex] == null) {
                            oomProcs[oomIndex] = new ArrayList<>();
                        }
                        oomProcs[oomIndex].add(pssItem);
                        cachedPss6 = cachedPss5;
                    } else {
                        procMemsMap2 = procMemsMap3;
                        mi2 = mi4;
                        oomPss2 = oomPss;
                        oomSwapPss2 = dalvikSubitemPss;
                        cachedPss6 = cachedPss6;
                    }
                } else {
                    oomProcs2 = oomProcs3;
                    oomSwapPss3 = dalvikSubitemPss2;
                    procMems2 = procMems3;
                    realtimeMs2 = realtimeMs4;
                    miscSwapPss = miscSwapPss2;
                    pid2 = pid;
                    z = false;
                }
                long startTime3 = SystemClock.currentThreadTimeMillis();
                Debug.getMemoryInfo(pid2, mi3);
                reportType = 4;
                endTime = SystemClock.currentThreadTimeMillis();
                hasSwapPss = mi3.hasSwappedOutPss;
                startTime = startTime3;
                if (memoryUsageDumpOptions2.dumpDetails) {
                }
                long myTotalPss222222 = (long) mi3.getTotalPss();
                long myTotalUss22222 = (long) mi3.getTotalUss();
                long myTotalRss22222 = (long) mi3.getTotalRss();
                long myTotalSwapPss222222 = (long) mi3.getTotalSwappedOutPss();
                synchronized (this) {
                }
                if (brief) {
                    proto = proto4;
                    proto.write(1112396529672L, memInfo.getTotalSizeKb());
                    proto.write(1159641169929L, this.mLastMemoryLevel);
                    cachedPss2 = cachedPss;
                    proto.write(1112396529674L, cachedPss2);
                    proto.write(1112396529675L, memInfo.getCachedSizeKb());
                    proto.write(1112396529676L, memInfo.getFreeSizeKb());
                } else {
                    proto = proto4;
                    cachedPss2 = cachedPss;
                }
                long lostRAM = ((((memInfo.getTotalSizeKb() - (totalPss - totalSwapPss)) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb();
                proto.write(1112396529677L, totalPss - cachedPss2);
                proto.write(1112396529678L, memInfo.getKernelUsedSizeKb());
                proto.write(1112396529679L, lostRAM);
                if (!brief) {
                    if (memInfo.getZramTotalSizeKb() != 0) {
                        proto.write(1112396529680L, memInfo.getZramTotalSizeKb());
                        proto.write(1112396529681L, memInfo.getSwapTotalSizeKb() - memInfo.getSwapFreeSizeKb());
                        proto.write(1112396529682L, memInfo.getSwapTotalSizeKb());
                    }
                    long[] ksm = getKsmInfo();
                    proto.write(1112396529683L, ksm[1]);
                    proto.write(1112396529684L, ksm[0]);
                    proto.write(1112396529685L, ksm[2]);
                    proto.write(1112396529686L, ksm[3]);
                    proto.write(1120986464279L, ActivityManager.staticGetMemoryClass());
                    proto.write(1120986464280L, ActivityManager.staticGetLargeMemoryClass());
                    proto.write(1112396529689L, this.mProcessList.getMemLevel(999) / 1024);
                    proto.write(1112396529690L, this.mProcessList.getCachedRestoreThresholdKb());
                    proto.write(1133871366171L, ActivityManager.isLowRamDeviceStatic());
                    proto.write(1133871366172L, ActivityManager.isHighEndGfx());
                }
                proto.flush();
            }
            dalvikSubitemPss = oomSwapPss2;
            oomPss3 = oomPss2;
            memoryUsageDumpOptions2 = memoryUsageDumpOptions;
            procMemsMap6 = procMemsMap2;
            mi6 = mi2;
            proto4 = proto2;
            miscPss2 = miscPss;
            oomProcs3 = oomProcs;
            miscSwapPss2 = miscSwapPss;
            hasSwapPss2 = hasSwapPss;
            dalvikSubitemPss2 = oomSwapPss;
            tmpLong3 = tmpLong2;
            realtimeMs4 = realtimeMs;
            procMems3 = procMems;
            procMemsMap7 = 1;
        }
        long[] tmpLong4 = tmpLong3;
        ArrayList<MemItem> procMems5 = procMems3;
        cachedPss = cachedPss6;
        MemoryUsageDumpOptions memoryUsageDumpOptions3 = memoryUsageDumpOptions2;
        SparseArray<MemItem> procMemsMap8 = procMemsMap6;
        long nativeProcTotalPss2 = 0;
        if (procs.size() <= 1 || memoryUsageDumpOptions3.packages) {
            proto = proto4;
        } else {
            updateCpuStatsNow();
            synchronized (this.mProcessCpuTracker) {
                try {
                    int N3 = this.mProcessCpuTracker.countStats();
                    int i5 = 0;
                    Debug.MemoryInfo mi7 = null;
                    while (i5 < N3) {
                        try {
                            ProcessCpuTracker.Stats st2 = this.mProcessCpuTracker.getStats(i5);
                            if (st2.vsize <= 0 || procMemsMap8.indexOfKey(st2.pid) >= 0) {
                                N = N3;
                                cachedPss3 = cachedPss;
                                procMemsMap = procMemsMap8;
                            } else {
                                if (mi7 == null) {
                                    try {
                                        mi = new Debug.MemoryInfo();
                                    } catch (Throwable th22) {
                                        th = th22;
                                    }
                                } else {
                                    mi = mi7;
                                }
                                if (!brief) {
                                    try {
                                        if (!memoryUsageDumpOptions3.oomOnly) {
                                            Debug.getMemoryInfo(st2.pid, mi);
                                            cachedPss3 = cachedPss;
                                            procMemsMap = procMemsMap8;
                                            tmpLong = tmpLong4;
                                            myTotalPss = (long) mi.getTotalPss();
                                            tmpLong4 = tmpLong;
                                            myTotalSwapPss = (long) mi.getTotalSwappedOutPss();
                                            totalPss += myTotalPss;
                                            nativeProcTotalPss = nativeProcTotalPss2 + myTotalPss;
                                            N = N3;
                                            StringBuilder sb2 = new StringBuilder();
                                            try {
                                                sb2.append(st2.name);
                                                sb2.append(" (pid ");
                                                sb2.append(st2.pid);
                                                sb2.append(")");
                                                MemItem pssItem2 = new MemItem(sb2.toString(), st2.name, myTotalPss, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                                ArrayList<MemItem> procMems6 = procMems5;
                                                procMems6.add(pssItem2);
                                                nativePss += (long) mi.nativePss;
                                                nativeSwapPss += (long) mi.nativeSwappedOutPss;
                                                dalvikPss += (long) mi.dalvikPss;
                                                dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                                j = 0;
                                                while (j < dalvikSubitemPss.length) {
                                                    dalvikSubitemPss[j] = dalvikSubitemPss[j] + ((long) mi.getOtherPss(j + 17));
                                                    dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + ((long) mi.getOtherSwappedOutPss(j + 17));
                                                    j++;
                                                    st2 = st2;
                                                    procMems6 = procMems6;
                                                }
                                                procMems5 = procMems6;
                                                otherPss += (long) mi.otherPss;
                                                otherSwapPss += (long) mi.otherSwappedOutPss;
                                                for (j2 = 0; j2 < 17; j2++) {
                                                    long mem3 = (long) mi.getOtherPss(j2);
                                                    miscPss2[j2] = miscPss2[j2] + mem3;
                                                    otherPss -= mem3;
                                                    long mem4 = (long) mi.getOtherSwappedOutPss(j2);
                                                    miscSwapPss2[j2] = miscSwapPss2[j2] + mem4;
                                                    otherSwapPss -= mem4;
                                                }
                                                oomPss3[0] = oomPss3[0] + myTotalPss;
                                                dalvikSubitemPss2[0] = dalvikSubitemPss2[0] + myTotalSwapPss;
                                                if (oomProcs3[0] == null) {
                                                    oomProcs3[0] = new ArrayList<>();
                                                }
                                                oomProcs3[0].add(pssItem2);
                                                mi7 = mi;
                                                nativeProcTotalPss2 = nativeProcTotalPss;
                                            } catch (Throwable th23) {
                                                th = th23;
                                                while (true) {
                                                    try {
                                                        break;
                                                    } catch (Throwable th24) {
                                                        th = th24;
                                                    }
                                                }
                                                throw th;
                                            }
                                        }
                                    } catch (Throwable th25) {
                                        th = th25;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                }
                                try {
                                    cachedPss3 = cachedPss;
                                    procMemsMap = procMemsMap8;
                                    tmpLong = tmpLong4;
                                    try {
                                        mi.nativePss = (int) Debug.getPss(st2.pid, tmpLong, null);
                                        mi.nativePrivateDirty = (int) tmpLong[0];
                                        myTotalPss = (long) mi.getTotalPss();
                                        tmpLong4 = tmpLong;
                                        myTotalSwapPss = (long) mi.getTotalSwappedOutPss();
                                        totalPss += myTotalPss;
                                        nativeProcTotalPss = nativeProcTotalPss2 + myTotalPss;
                                    } catch (Throwable th26) {
                                        th = th26;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th27) {
                                    th = th27;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                                try {
                                    N = N3;
                                    StringBuilder sb22 = new StringBuilder();
                                    sb22.append(st2.name);
                                    sb22.append(" (pid ");
                                    sb22.append(st2.pid);
                                    sb22.append(")");
                                    MemItem pssItem22 = new MemItem(sb22.toString(), st2.name, myTotalPss, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                    ArrayList<MemItem> procMems62 = procMems5;
                                } catch (Throwable th28) {
                                    th = th28;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                                try {
                                    procMems62.add(pssItem22);
                                    nativePss += (long) mi.nativePss;
                                    nativeSwapPss += (long) mi.nativeSwappedOutPss;
                                    dalvikPss += (long) mi.dalvikPss;
                                    dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                    j = 0;
                                    while (j < dalvikSubitemPss.length) {
                                    }
                                    procMems5 = procMems62;
                                    otherPss += (long) mi.otherPss;
                                    otherSwapPss += (long) mi.otherSwappedOutPss;
                                    while (j2 < 17) {
                                    }
                                    oomPss3[0] = oomPss3[0] + myTotalPss;
                                    dalvikSubitemPss2[0] = dalvikSubitemPss2[0] + myTotalSwapPss;
                                    if (oomProcs3[0] == null) {
                                    }
                                    oomProcs3[0].add(pssItem22);
                                    mi7 = mi;
                                    nativeProcTotalPss2 = nativeProcTotalPss;
                                } catch (Throwable th29) {
                                    th = th29;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                            }
                            i5++;
                            memoryUsageDumpOptions3 = opts;
                            procMemsMap8 = procMemsMap;
                            N3 = N;
                            cachedPss = cachedPss3;
                        } catch (Throwable th30) {
                            th = th30;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    }
                    try {
                    } catch (Throwable th31) {
                        th = th31;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                } catch (Throwable th32) {
                    th = th32;
                    while (true) {
                        break;
                    }
                    throw th;
                }
            }
            ArrayList<MemItem> catMems = new ArrayList<>();
            catMems.add(new MemItem("Native", "Native", nativePss, nativeSwapPss, -1));
            int dalvikId = -2;
            catMems.add(new MemItem("Dalvik", "Dalvik", dalvikPss, dalvikSwapPss, -2));
            catMems.add(new MemItem("Unknown", "Unknown", otherPss, otherSwapPss, -3));
            int j5 = 0;
            while (j5 < 17) {
                String label2 = Debug.MemoryInfo.getOtherLabel(j5);
                catMems.add(new MemItem(label2, label2, miscPss2[j5], miscSwapPss2[j5], j5));
                j5++;
                dalvikId = dalvikId;
            }
            if (dalvikSubitemPss.length > 0) {
                Iterator<MemItem> it = catMems.iterator();
                while (it.hasNext()) {
                    MemItem memItem = it.next();
                    if (memItem.id == -2) {
                        memItemStart = 0;
                        memItemEnd = 3;
                    } else if (memItem.id == 0) {
                        memItemStart = 4;
                        memItemEnd = 8;
                    } else if (memItem.id == 10) {
                        memItemStart = 9;
                        memItemEnd = 11;
                    } else if (memItem.id == 12) {
                        memItemStart = 12;
                        memItemEnd = 13;
                    }
                    memItem.subitems = new ArrayList<>();
                    for (int j6 = memItemStart; j6 <= memItemEnd; j6++) {
                        String name = Debug.MemoryInfo.getOtherLabel(j6 + 17);
                        memItem.subitems.add(new MemItem(name, name, dalvikSubitemPss[j6], dalvikSubitemSwapPss[j6], j6));
                    }
                }
            }
            ArrayList<MemItem> oomMems = new ArrayList<>();
            for (int j7 = 0; j7 < oomPss3.length; j7++) {
                if (oomPss3[j7] != 0) {
                    if (opts.isCompact) {
                        label = DUMP_MEM_OOM_COMPACT_LABEL[j7];
                    } else {
                        label = DUMP_MEM_OOM_LABEL[j7];
                    }
                    MemItem item = new MemItem(label, label, oomPss3[j7], dalvikSubitemPss2[j7], DUMP_MEM_OOM_ADJ[j7]);
                    item.subitems = oomProcs3[j7];
                    oomMems.add(item);
                }
            }
            opts.dumpSwapPss = opts.dumpSwapPss && hasSwapPss2 && totalSwapPss != 0;
            if (!opts.oomOnly) {
                dumpMemItems(proto4, 2246267895813L, "proc", procMems5, true, opts.dumpSwapPss);
            }
            dumpMemItems(proto4, 2246267895814L, "oom", oomMems, false, opts.dumpSwapPss);
            if (!brief && !opts.oomOnly) {
                dumpMemItems(proto4, 2246267895815L, "cat", catMems, true, opts.dumpSwapPss);
            }
            memInfo = new MemInfoReader();
            memInfo.readMemInfo();
            if (nativeProcTotalPss2 > 0) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        long cachedKb = memInfo.getCachedSizeKb();
                        long freeKb = memInfo.getFreeSizeKb();
                        long zramKb = memInfo.getZramTotalSizeKb();
                        long kernelKb = memInfo.getKernelUsedSizeKb();
                        EventLogTags.writeAmMeminfo(cachedKb * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, nativeProcTotalPss2 * 1024);
                        this.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, nativeProcTotalPss2);
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            if (brief) {
            }
            long lostRAM2 = ((((memInfo.getTotalSizeKb() - (totalPss - totalSwapPss)) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb();
            proto.write(1112396529677L, totalPss - cachedPss2);
            proto.write(1112396529678L, memInfo.getKernelUsedSizeKb());
            proto.write(1112396529679L, lostRAM2);
            if (!brief) {
            }
        }
        proto.flush();
    }

    private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss, long memtrack, String name) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(oomAdj, false));
        sb.append(' ');
        sb.append(ProcessList.makeProcStateString(procState));
        sb.append(' ');
        ProcessList.appendRamKb(sb, pss);
        sb.append(": ");
        sb.append(name);
        if (memtrack > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(memtrack));
            sb.append(" memtrack)");
        }
    }

    private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi) {
        appendBasicMemEntry(sb, mi.oomAdj, mi.procState, mi.pss, mi.memtrack, mi.name);
        sb.append(" (pid ");
        sb.append(mi.pid);
        sb.append(") ");
        sb.append(mi.adjType);
        sb.append('\n');
        if (mi.adjReason != null) {
            sb.append("                      ");
            sb.append(mi.adjReason);
            sb.append('\n');
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for r2v25, resolved type: int */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX INFO: Multiple debug info for r8v9 'fullJavaBuilder'  java.lang.StringBuilder: [D('stack' java.lang.StringBuilder), D('fullJavaBuilder' java.lang.StringBuilder)] */
    /* JADX WARN: Type inference failed for: r2v58 */
    /* JADX WARN: Type inference failed for: r2v60 */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x05ae, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x03bf, code lost:
        if (r38[3] == 0) goto L_0x0402;
     */
    public void reportMemUsage(ArrayList<ProcessMemInfo> memInfos) {
        List<ProcessCpuTracker.Stats> stats;
        int i;
        Throwable th;
        char c;
        int statsCount;
        StringBuilder stack;
        long totalPss;
        int lastOomAdj;
        StringBuilder tag;
        int N;
        int statsCount2;
        StringBuilder fullNativeBuilder;
        StringBuilder tag2;
        StringBuilder stack2;
        StringBuilder fullJavaBuilder;
        List<ProcessCpuTracker.Stats> stats2;
        SparseArray<ProcessMemInfo> infoMap = new SparseArray<>(memInfos.size());
        int N2 = memInfos.size();
        for (int i2 = 0; i2 < N2; i2++) {
            ProcessMemInfo mi = memInfos.get(i2);
            infoMap.put(mi.pid, mi);
        }
        updateCpuStatsNow();
        long[] memtrackTmp = new long[1];
        long[] swaptrackTmp = new long[2];
        synchronized (this.mProcessCpuTracker) {
            stats = this.mProcessCpuTracker.getStats($$Lambda$ActivityManagerService$XMDHDkKdzWb8nQlDZRKevGp6Oa8.INSTANCE);
        }
        int statsCount3 = stats.size();
        int i3 = 0;
        while (i3 < statsCount3) {
            ProcessCpuTracker.Stats st = stats.get(i3);
            long pss = Debug.getPss(st.pid, swaptrackTmp, memtrackTmp);
            if (pss <= 0) {
                stats2 = stats;
            } else if (infoMap.indexOfKey(st.pid) < 0) {
                ProcessMemInfo mi2 = new ProcessMemInfo(st.name, st.pid, JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -1, "native", null);
                mi2.pss = pss;
                stats2 = stats;
                mi2.swapPss = swaptrackTmp[1];
                mi2.memtrack = memtrackTmp[0];
                memInfos.add(mi2);
            } else {
                stats2 = stats;
            }
            i3++;
            stats = stats2;
        }
        List<ProcessCpuTracker.Stats> stats3 = stats;
        int N3 = memInfos.size();
        long totalSwapPss = 0;
        long totalMemtrack = 0;
        long totalPss2 = 0;
        for (int i4 = 0; i4 < N3; i4++) {
            ProcessMemInfo mi3 = memInfos.get(i4);
            if (mi3.pss == 0) {
                mi3.pss = Debug.getPss(mi3.pid, swaptrackTmp, memtrackTmp);
                mi3.swapPss = swaptrackTmp[1];
                mi3.memtrack = memtrackTmp[0];
            }
            totalPss2 += mi3.pss;
            totalSwapPss += mi3.swapPss;
            totalMemtrack += mi3.memtrack;
        }
        Collections.sort(memInfos, new Comparator<ProcessMemInfo>() {
            /* class com.android.server.am.ActivityManagerService.AnonymousClass24 */

            public int compare(ProcessMemInfo lhs, ProcessMemInfo rhs) {
                if (lhs.oomAdj != rhs.oomAdj) {
                    return lhs.oomAdj < rhs.oomAdj ? -1 : 1;
                }
                if (lhs.pss != rhs.pss) {
                    return lhs.pss < rhs.pss ? 1 : -1;
                }
                return 0;
            }
        });
        StringBuilder shortNativeBuilder = new StringBuilder(128);
        StringBuilder fullJavaBuilder2 = new StringBuilder(128);
        shortNativeBuilder.append("Low on memory -- ");
        appendMemBucket(shortNativeBuilder, totalPss2, "total", false);
        appendMemBucket(fullJavaBuilder2, totalPss2, "total", true);
        StringBuilder fullNativeBuilder2 = new StringBuilder(1024);
        StringBuilder shortNativeBuilder2 = new StringBuilder(1024);
        StringBuilder fullJavaBuilder3 = new StringBuilder(1024);
        long extraNativeRam = 0;
        long extraNativeMemtrack = 0;
        long cachedPss = 0;
        int N4 = memInfos.size();
        int i5 = 0;
        int lastOomAdj2 = Integer.MIN_VALUE;
        boolean firstLine = true;
        while (i5 < N4) {
            ProcessMemInfo mi4 = memInfos.get(i5);
            if (mi4.oomAdj >= 900) {
                cachedPss += mi4.pss;
            }
            if (mi4.oomAdj == -1000) {
                statsCount = statsCount3;
            } else if (mi4.oomAdj < 500 || mi4.oomAdj == 600 || mi4.oomAdj == 700) {
                if (lastOomAdj2 != mi4.oomAdj) {
                    lastOomAdj2 = mi4.oomAdj;
                    if (mi4.oomAdj <= 0) {
                        shortNativeBuilder.append(" / ");
                    }
                    if (mi4.oomAdj >= 0) {
                        if (firstLine) {
                            fullJavaBuilder2.append(":");
                            firstLine = false;
                        }
                        fullJavaBuilder2.append("\n\t at ");
                    } else {
                        fullJavaBuilder2.append("$");
                    }
                } else {
                    shortNativeBuilder.append(" ");
                    fullJavaBuilder2.append("$");
                }
                if (mi4.oomAdj <= 0) {
                    statsCount = statsCount3;
                    appendMemBucket(shortNativeBuilder, mi4.pss, mi4.name, false);
                } else {
                    statsCount = statsCount3;
                }
                appendMemBucket(fullJavaBuilder2, mi4.pss, mi4.name, true);
                if (mi4.oomAdj >= 0 && (i5 + 1 >= N4 || memInfos.get(i5 + 1).oomAdj != lastOomAdj2)) {
                    fullJavaBuilder2.append("(");
                    int k = 0;
                    while (true) {
                        int[] iArr = DUMP_MEM_OOM_ADJ;
                        if (k >= iArr.length) {
                            break;
                        }
                        if (iArr[k] == mi4.oomAdj) {
                            fullJavaBuilder2.append(DUMP_MEM_OOM_LABEL[k]);
                            fullJavaBuilder2.append(":");
                            fullJavaBuilder2.append(DUMP_MEM_OOM_ADJ[k]);
                        }
                        k++;
                    }
                    fullJavaBuilder2.append(")");
                }
            } else {
                statsCount = statsCount3;
            }
            appendMemInfo(fullNativeBuilder2, mi4);
            if (mi4.oomAdj != -1000) {
                if (extraNativeRam > 0) {
                    lastOomAdj = lastOomAdj2;
                    fullNativeBuilder = fullNativeBuilder2;
                    N = N4;
                    totalPss = totalPss2;
                    fullJavaBuilder = fullJavaBuilder3;
                    stack = fullJavaBuilder2;
                    statsCount2 = statsCount;
                    tag = shortNativeBuilder;
                    appendBasicMemEntry(shortNativeBuilder2, JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -1, extraNativeRam, extraNativeMemtrack, "(Other native)");
                    tag2 = shortNativeBuilder2;
                    tag2.append('\n');
                    extraNativeRam = 0;
                } else {
                    N = N4;
                    stack = fullJavaBuilder2;
                    lastOomAdj = lastOomAdj2;
                    fullJavaBuilder = fullJavaBuilder3;
                    totalPss = totalPss2;
                    statsCount2 = statsCount;
                    fullNativeBuilder = fullNativeBuilder2;
                    tag = shortNativeBuilder;
                    tag2 = shortNativeBuilder2;
                }
                stack2 = fullJavaBuilder;
                appendMemInfo(stack2, mi4);
            } else if (mi4.pss >= 512) {
                appendMemInfo(shortNativeBuilder2, mi4);
                N = N4;
                stack = fullJavaBuilder2;
                lastOomAdj = lastOomAdj2;
                stack2 = fullJavaBuilder3;
                totalPss = totalPss2;
                statsCount2 = statsCount;
                fullNativeBuilder = fullNativeBuilder2;
                tag = shortNativeBuilder;
                tag2 = shortNativeBuilder2;
            } else {
                extraNativeRam += mi4.pss;
                extraNativeMemtrack += mi4.memtrack;
                N = N4;
                stack = fullJavaBuilder2;
                lastOomAdj = lastOomAdj2;
                stack2 = fullJavaBuilder3;
                totalPss = totalPss2;
                statsCount2 = statsCount;
                fullNativeBuilder = fullNativeBuilder2;
                tag = shortNativeBuilder;
                tag2 = shortNativeBuilder2;
            }
            i5++;
            fullJavaBuilder3 = stack2;
            shortNativeBuilder2 = tag2;
            fullNativeBuilder2 = fullNativeBuilder;
            statsCount3 = statsCount2;
            stats3 = stats3;
            N4 = N;
            shortNativeBuilder = tag;
            lastOomAdj2 = lastOomAdj;
            totalPss2 = totalPss;
            fullJavaBuilder2 = stack;
        }
        fullJavaBuilder3.append("           ");
        ProcessList.appendRamKb(fullJavaBuilder3, totalPss2);
        fullJavaBuilder3.append(": TOTAL");
        if (totalMemtrack > 0) {
            fullJavaBuilder3.append(" (");
            fullJavaBuilder3.append(stringifyKBSize(totalMemtrack));
            fullJavaBuilder3.append(" memtrack)");
        }
        fullJavaBuilder3.append("\n");
        MemInfoReader memInfo = new MemInfoReader();
        memInfo.readMemInfo();
        long[] infos = memInfo.getRawInfo();
        StringBuilder memInfoBuilder = new StringBuilder(1024);
        Debug.getMemInfo(infos);
        memInfoBuilder.append("  MemInfo: ");
        memInfoBuilder.append(stringifyKBSize(infos[5]));
        memInfoBuilder.append(" slab, ");
        memInfoBuilder.append(stringifyKBSize(infos[4]));
        memInfoBuilder.append(" shmem, ");
        memInfoBuilder.append(stringifyKBSize(infos[12]));
        memInfoBuilder.append(" vm alloc, ");
        memInfoBuilder.append(stringifyKBSize(infos[13]));
        memInfoBuilder.append(" page tables ");
        memInfoBuilder.append(stringifyKBSize(infos[14]));
        memInfoBuilder.append(" kernel stack\n");
        memInfoBuilder.append("           ");
        memInfoBuilder.append(stringifyKBSize(infos[2]));
        memInfoBuilder.append(" buffers, ");
        memInfoBuilder.append(stringifyKBSize(infos[3]));
        memInfoBuilder.append(" cached, ");
        memInfoBuilder.append(stringifyKBSize(infos[11]));
        memInfoBuilder.append(" mapped, ");
        memInfoBuilder.append(stringifyKBSize(infos[1]));
        memInfoBuilder.append(" free\n");
        if (infos[10] != 0) {
            memInfoBuilder.append("  ZRAM: ");
            memInfoBuilder.append(stringifyKBSize(infos[10]));
            memInfoBuilder.append(" RAM, ");
            memInfoBuilder.append(stringifyKBSize(infos[8]));
            memInfoBuilder.append(" swap total, ");
            memInfoBuilder.append(stringifyKBSize(infos[9]));
            memInfoBuilder.append(" swap free\n");
        }
        long[] ksm = getKsmInfo();
        if (ksm[1] == 0) {
            c = 0;
            c = 0;
            i = 0;
            c = 0;
            if (ksm[0] == 0) {
                if (ksm[2] == 0) {
                }
            }
        } else {
            c = 0;
        }
        memInfoBuilder.append("  KSM: ");
        memInfoBuilder.append(stringifyKBSize(ksm[1]));
        memInfoBuilder.append(" saved from shared ");
        memInfoBuilder.append(stringifyKBSize(ksm[c]));
        memInfoBuilder.append("\n       ");
        memInfoBuilder.append(stringifyKBSize(ksm[2]));
        memInfoBuilder.append(" unshared; ");
        memInfoBuilder.append(stringifyKBSize(ksm[3]));
        memInfoBuilder.append(" volatile\n");
        i = c;
        memInfoBuilder.append("  Free RAM: ");
        memInfoBuilder.append(stringifyKBSize(cachedPss + memInfo.getCachedSizeKb() + memInfo.getFreeSizeKb()));
        memInfoBuilder.append("\n");
        memInfoBuilder.append("  Used RAM: ");
        memInfoBuilder.append(stringifyKBSize((totalPss2 - cachedPss) + memInfo.getKernelUsedSizeKb()));
        memInfoBuilder.append("\n");
        memInfoBuilder.append("  Lost RAM: ");
        memInfoBuilder.append(stringifyKBSize(((((memInfo.getTotalSizeKb() - (totalPss2 - totalSwapPss)) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb()));
        memInfoBuilder.append("\n");
        Slog.i(TAG, "Low on memory:");
        Slog.i(TAG, shortNativeBuilder2.toString());
        Slog.i(TAG, fullJavaBuilder3.toString());
        Slog.i(TAG, memInfoBuilder.toString());
        StringBuilder dropBuilder = new StringBuilder(1024);
        dropBuilder.append("Low on memory:");
        dropBuilder.append((CharSequence) fullJavaBuilder2);
        dropBuilder.append('\n');
        dropBuilder.append((CharSequence) fullNativeBuilder2);
        dropBuilder.append((CharSequence) fullJavaBuilder3);
        dropBuilder.append('\n');
        dropBuilder.append((CharSequence) memInfoBuilder);
        dropBuilder.append('\n');
        StringWriter catSw = new StringWriter();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                PrintWriter catPw = new FastPrintWriter(catSw, i, 256);
                String[] emptyArgs = new String[i];
                try {
                    catPw.println();
                } catch (Throwable th2) {
                    th = th2;
                    while (true) {
                        try {
                            break;
                        } catch (Throwable th3) {
                            th = th3;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                try {
                    dumpProcessesLocked(null, catPw, emptyArgs, 0, false, null, -1);
                    catPw.println();
                    this.mServices.newServiceDumperLocked(null, catPw, emptyArgs, 0, false, null).dumpLocked();
                    catPw.println();
                    this.mAtmInternal.dump("activities", (FileDescriptor) null, catPw, emptyArgs, 0, false, false, (String) null);
                    catPw.flush();
                } catch (Throwable th4) {
                    th = th4;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th5) {
                th = th5;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        dropBuilder.append(catSw.toString());
        StatsLog.write(81);
        addErrorToDropBox("lowmem", null, "system_server", null, null, null, shortNativeBuilder.toString(), dropBuilder.toString(), null, null);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long now = SystemClock.uptimeMillis();
                if (this.mLastMemUsageReportTime < now) {
                    this.mLastMemUsageReportTime = now;
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return;
        while (true) {
        }
    }

    static /* synthetic */ boolean lambda$reportMemUsage$3(ProcessCpuTracker.Stats st) {
        return st.vsize > 0;
    }

    private static boolean scanArgs(String[] args, String value) {
        if (args != null) {
            for (String arg : args) {
                if (value.equals(arg)) {
                    return true;
                }
            }
        }
        return false;
    }

    private final boolean removeDyingProviderLocked(ProcessRecord proc, ContentProviderRecord cpr, boolean always) {
        String[] names;
        boolean inLaunching = this.mLaunchingProviders.contains(cpr);
        if (!inLaunching || always) {
            synchronized (cpr) {
                cpr.launchingApp = null;
                cpr.notifyAll();
            }
            this.mProviderMap.removeProviderByClass(cpr.name, UserHandle.getUserId(cpr.uid));
            for (String str : cpr.info.authority.split(";")) {
                this.mProviderMap.removeProviderByName(str, UserHandle.getUserId(cpr.uid));
            }
            if (cpr.proc != null) {
                cpr.proc.pubProviders.remove(cpr.info.name);
            } else {
                ProcessRecord app = getProcessRecordLocked(cpr.info.processName, cpr.appInfo.uid, false);
                if (app != null) {
                    app.pubProviders.remove(cpr.info.name);
                }
            }
        }
        for (int i = cpr.connections.size() - 1; i >= 0; i--) {
            ContentProviderConnection conn = cpr.connections.get(i);
            if (!conn.waiting || !inLaunching || always) {
                ProcessRecord capp = conn.client;
                conn.dead = true;
                if (conn.stableCount > 0) {
                    if (!(capp.isPersistent() || capp.thread == null || capp.pid == 0 || capp.pid == MY_PID || ("com.huawei.android.launcher".equals(capp.info.packageName) && capp.getWindowProcessController().isHomeProcess()))) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("depends on provider ");
                        sb.append(cpr.name.flattenToShortString());
                        sb.append(" in dying proc ");
                        sb.append(proc != null ? proc.processName : "??");
                        sb.append(" (adj ");
                        sb.append(proc != null ? Integer.valueOf(proc.setAdj) : "??");
                        sb.append(")");
                        capp.kill(sb.toString(), true);
                    }
                } else if (capp.thread != null && conn.provider.provider != null) {
                    try {
                        capp.thread.unstableProviderDied(conn.provider.provider.asBinder());
                    } catch (RemoteException e) {
                    }
                    cpr.connections.remove(i);
                    if (conn.client.conProviders.remove(conn)) {
                        stopAssociationLocked(capp.uid, capp.processName, cpr.uid, cpr.appInfo.longVersionCode, cpr.name, cpr.info.processName);
                    }
                }
            }
        }
        if (inLaunching && always) {
            this.mLaunchingProviders.remove(cpr);
        }
        return inLaunching;
    }

    /* access modifiers changed from: protected */
    @GuardedBy({"this"})
    public boolean cleanUpApplicationRecordLocked(final ProcessRecord app, boolean restarting, boolean allowRestart, int index, boolean replacingPid) {
        boolean restart;
        Slog.d(TAG, "cleanUpApplicationRecord app: " + app.toShortString() + ", bad: " + app.bad + ", restarting: " + restarting + ", allowRestart: " + allowRestart);
        if (index >= 0) {
            removeLruProcessLocked(app);
            ProcessList.remove(app.pid);
        }
        this.mProcessesToGc.remove(app);
        this.mPendingPssProcesses.remove(app);
        ProcessList.abortNextPssTime(app.procStateMemTracker);
        if (app.crashDialog != null && !app.forceCrashReport) {
            app.crashDialog.dismiss();
            app.crashDialog = null;
        }
        if (app.anrDialog != null) {
            app.anrDialog.dismiss();
            app.anrDialog = null;
        }
        if (app.waitDialog != null) {
            app.waitDialog.dismiss();
            app.waitDialog = null;
        }
        app.setCrashing(false);
        app.setNotResponding(false);
        app.resetPackageList(this.mProcessStats);
        app.unlinkDeathRecipient();
        app.makeInactive(this.mProcessStats);
        app.waitingToKill = null;
        app.forcingToImportant = null;
        updateProcessForegroundLocked(app, false, 0, false);
        app.setHasForegroundActivities(false);
        app.hasShownUi = false;
        app.treatLikeActivity = false;
        app.hasAboveClient = false;
        app.setHasClientActivities(false);
        app.preloadStatus = 0;
        this.mServices.killServicesLocked(app, allowRestart);
        boolean restart2 = false;
        for (int i = app.pubProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = app.pubProviders.valueAt(i);
            boolean always = app.bad || !allowRestart;
            if ((removeDyingProviderLocked(app, cpr, always) || always) && cpr.hasConnectionOrHandle()) {
                restart2 = true;
            }
            cpr.provider = null;
            cpr.setProcess(null);
        }
        app.pubProviders.clear();
        boolean restart3 = cleanupAppInLaunchingProvidersLocked(app, false) ? true : restart2;
        if (!app.conProviders.isEmpty()) {
            for (int i2 = app.conProviders.size() - 1; i2 >= 0; i2--) {
                ContentProviderConnection conn = app.conProviders.get(i2);
                conn.provider.connections.remove(conn);
                stopAssociationLocked(app.uid, app.processName, conn.provider.uid, conn.provider.appInfo.longVersionCode, conn.provider.name, conn.provider.info.processName);
            }
            app.conProviders.clear();
        }
        skipCurrentReceiverLocked(app);
        for (int i3 = app.receivers.size() - 1; i3 >= 0; i3--) {
            removeReceiverLocked(app.receivers.valueAt(i3));
        }
        app.receivers.clear();
        BackupRecord backupTarget = this.mBackupTargets.get(app.userId);
        if (backupTarget != null && app.pid == backupTarget.app.pid) {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.d(TAG, "App " + backupTarget.appInfo + " died during backup");
            }
            this.mHandler.post(new Runnable() {
                /* class com.android.server.am.ActivityManagerService.AnonymousClass25 */

                @Override // java.lang.Runnable
                public void run() {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnectedForUser(app.userId, app.info.packageName);
                    } catch (RemoteException e) {
                    }
                }
            });
        }
        for (int i4 = this.mPendingProcessChanges.size() - 1; i4 >= 0; i4--) {
            ProcessChangeItem item = this.mPendingProcessChanges.get(i4);
            if (app.pid > 0 && item.pid == app.pid) {
                this.mPendingProcessChanges.remove(i4);
                this.mAvailProcessChanges.add(item);
            }
        }
        this.mUiHandler.obtainMessage(32, app.pid, app.info.uid, null).sendToTarget();
        if (restarting) {
            return false;
        }
        if (!app.isPersistent() || app.isolated) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.v(TAG, "Removing non-persistent process during cleanup: " + app);
            }
            if (!replacingPid) {
                this.mProcessList.removeProcessNameLocked(app.processName, app.uid, app);
            }
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(app.getWindowProcessController());
        } else if (!app.removed && this.mPersistentStartingProcesses.indexOf(app) < 0) {
            this.mPersistentStartingProcesses.add(app);
            restart = true;
            if ((ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) && this.mProcessesOnHold.contains(app)) {
                Slog.v(TAG, "Clean-up removing on hold: " + app);
            }
            this.mProcessesOnHold.remove(app);
            Flog.i(100, "cleanUpApplicationRecordLocked, pid: " + app.pid + ", restart: " + restart);
            this.mAtmInternal.onCleanUpApplicationRecord(app.getWindowProcessController());
            if (app.userId != 0 && !this.mUserController.isUserRunning(app.userId, 0)) {
                restart = false;
            }
            if (!restart && !app.isolated) {
                if (index < 0) {
                    ProcessList.remove(app.pid);
                }
                this.mProcessList.addProcessNameLocked(app);
                app.pendingStart = false;
                this.mProcessList.startProcessLocked(app, new HostingRecord("restart", app.processName));
                return true;
            } else if (app.pid > 0 || app.pid == MY_PID) {
                return false;
            } else {
                this.mPidsSelfLocked.remove(app);
                this.mHandler.removeMessages(20, app);
                this.mDAProxy.notifyProcessDied(app.pid, app.uid);
                this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
                if (app.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
                }
                app.setPid(0);
                return false;
            }
        }
        restart = restart3;
        Slog.v(TAG, "Clean-up removing on hold: " + app);
        this.mProcessesOnHold.remove(app);
        Flog.i(100, "cleanUpApplicationRecordLocked, pid: " + app.pid + ", restart: " + restart);
        this.mAtmInternal.onCleanUpApplicationRecord(app.getWindowProcessController());
        restart = false;
        if (!restart) {
        }
        if (app.pid > 0) {
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public boolean checkAppInLaunchingProvidersLocked(ProcessRecord app) {
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            if (this.mLaunchingProviders.get(i).launchingApp == app) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad) {
        Flog.i(103, "cleanupAppInLaunchingProvidersLocked app: " + app + ", alwaysBad: " + alwaysBad + ", app.bad: " + app.bad);
        boolean restart = false;
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = this.mLaunchingProviders.get(i);
            if (cpr.launchingApp == app) {
                if (alwaysBad || app.bad || !cpr.hasConnectionOrHandle()) {
                    removeDyingProviderLocked(app, cpr, true);
                } else {
                    restart = true;
                }
            }
        }
        return restart;
    }

    public List<ActivityManager.RunningServiceInfo> getServices(int maxNum, int flags) {
        List<ActivityManager.RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean canInteractAcrossUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allowed = this.mAtmInternal.isGetTasksAllowed("getServices", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(maxNum, flags, callingUid, allowed, canInteractAcrossUsers);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return runningServiceInfoLocked;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName name) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(name);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return runningServiceControlPanelLocked;
    }

    public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, boolean requireForeground, String callingPackage, int userId) throws TransactionTooLargeException {
        ComponentName res;
        IHwActivityManagerServiceEx iHwActivityManagerServiceEx = this.mHwAMSEx;
        int userId2 = iHwActivityManagerServiceEx.getCloneAppUserId(iHwActivityManagerServiceEx.getTargetFromIntentForClone(service), userId);
        enforceNotIsolatedCaller("startService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        } else if (userId2 <= 0 || this.mUserController.hasStartedUserState(userId2)) {
            if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                Slog.v(TAG, "*** startService: " + service + " type=" + resolvedType + " fg=" + requireForeground);
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    try {
                        res = this.mServices.startServiceLocked(caller, service, resolvedType, callingPid, callingUid, requireForeground, callingPackage, userId2);
                    } finally {
                        Binder.restoreCallingIdentity(origId);
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return res;
        } else {
            Slog.w(TAG, "Unable to start service " + service + " for userId:" + userId2 + " is stopped");
            return null;
        }
    }

    public int stopService(IApplicationThread caller, Intent service, String resolvedType, int userId) {
        int stopServiceLocked;
        IHwActivityManagerServiceEx iHwActivityManagerServiceEx = this.mHwAMSEx;
        int userId2 = iHwActivityManagerServiceEx.getCloneAppUserId(iHwActivityManagerServiceEx.getTargetFromIntentForClone(service), userId);
        enforceNotIsolatedCaller("stopService");
        if (service == null || !service.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    stopServiceLocked = this.mServices.stopServiceLocked(caller, service, resolvedType, userId2);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return stopServiceLocked;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public IBinder peekService(Intent service, String resolvedType, String callingPackage) {
        IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    peekServiceLocked = this.mServices.peekServiceLocked(service, resolvedType, callingPackage);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return peekServiceLocked;
        } else {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
    }

    public boolean stopServiceToken(ComponentName className, IBinder token, int startId) {
        boolean stopServiceTokenLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(className, token, startId);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return stopServiceTokenLocked;
    }

    public void setServiceForeground(ComponentName className, IBinder token, int id, Notification notification, int flags, int foregroundServiceType) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.setServiceForegroundLocked(className, token, id, notification, flags, foregroundServiceType);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public int getForegroundServiceType(ComponentName className, IBinder token) {
        int foregroundServiceTypeLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                foregroundServiceTypeLocked = this.mServices.getForegroundServiceTypeLocked(className, token);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return foregroundServiceTypeLocked;
    }

    public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, boolean requireFull, String name, String callerPackage) {
        return this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, requireFull ? 2 : 0, name, callerPackage);
    }

    /* access modifiers changed from: package-private */
    public boolean isSingleton(String componentProcessName, ApplicationInfo aInfo, String className, int flags) {
        boolean result = false;
        if (UserHandle.getAppId(aInfo.uid) >= 10000) {
            if ((flags & 1073741824) != 0) {
                if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", aInfo.uid) == 0) {
                    result = true;
                } else {
                    ComponentName comp = new ComponentName(aInfo.packageName, className);
                    String msg = "Permission Denial: Component " + comp.flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold android.permission.INTERACT_ACROSS_USERS";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            }
        } else if ("system".equals(componentProcessName)) {
            result = true;
        } else if ("com.huawei.indexsearch".equals(componentProcessName)) {
            result = true;
        } else if ((flags & 1073741824) != 0) {
            result = UserHandle.isSameApp(aInfo.uid, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE) || (aInfo.flags & 8) != 0;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "isSingleton(" + componentProcessName + ", " + aInfo + ", " + className + ", 0x" + Integer.toHexString(flags) + ") = " + result);
        }
        return result;
    }

    /* access modifiers changed from: package-private */
    public boolean isValidSingletonCall(int callingUid, int componentUid) {
        int componentAppId = UserHandle.getAppId(componentUid);
        return UserHandle.isSameApp(callingUid, componentUid) || componentAppId == 1000 || componentAppId == 1001 || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", componentUid) == 0;
    }

    public int bindService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String callingPackage, int userId) throws TransactionTooLargeException {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_BINDSERVICE);
        return bindIsolatedService(caller, token, service, resolvedType, connection, flags, null, callingPackage, userId);
    }

    public int bindIsolatedService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String instanceName, String callingPackage, int userId) throws TransactionTooLargeException {
        int bindServiceLocked;
        IHwActivityManagerServiceEx iHwActivityManagerServiceEx = this.mHwAMSEx;
        int userId2 = iHwActivityManagerServiceEx.getCloneAppUserId(iHwActivityManagerServiceEx.getTargetFromIntentForClone(service), userId);
        enforceNotIsolatedCaller("bindService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        } else if (userId2 <= 0 || this.mUserController.hasStartedUserState(userId2)) {
            if (instanceName != null) {
                for (int i = 0; i < instanceName.length(); i++) {
                    char c = instanceName.charAt(i);
                    if ((c < 'a' || c > 'z') && ((c < 'A' || c > 'Z') && !((c >= '0' && c <= '9') || c == '_' || c == '.'))) {
                        throw new IllegalArgumentException("Illegal instanceName");
                    }
                }
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    bindServiceLocked = this.mServices.bindServiceLocked(caller, token, service, resolvedType, connection, flags, instanceName, callingPackage, userId2);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return bindServiceLocked;
        } else {
            Slog.w(TAG, "Unable to bind service " + service + " for userId:" + userId2 + " is stopped");
            return 0;
        }
    }

    public void updateServiceGroup(IServiceConnection connection, int group, int importance) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.updateServiceGroupLocked(connection, group, importance);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean unbindService(IServiceConnection connection) {
        boolean unbindServiceLocked;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_UNBINDSERVICE);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                unbindServiceLocked = this.mServices.unbindServiceLocked(connection);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return unbindServiceLocked;
    }

    public void publishService(IBinder token, Intent intent, IBinder service) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (token instanceof ServiceRecord) {
                        this.mServices.publishServiceLocked((ServiceRecord) token, intent, service);
                    } else {
                        throw new IllegalArgumentException("Invalid service token");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void unbindFinished(IBinder token, Intent intent, boolean doRebind) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mServices.unbindFinishedLocked((ServiceRecord) token, intent, doRebind);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void serviceDoneExecuting(IBinder token, int type, int startId, int res) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (token instanceof ServiceRecord) {
                    this.mServices.serviceDoneExecutingLocked((ServiceRecord) token, type, startId, res);
                } else {
                    Slog.e(TAG, "serviceDoneExecuting: Invalid service token=" + token);
                    throw new IllegalArgumentException("Invalid service token");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean bindBackupAgent(String packageName, int backupMode, int targetUserId) {
        ApplicationInfo app;
        Throwable th;
        BackupRecord r;
        ComponentName hostingName;
        int oldBackupUid;
        int newBackupUid;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "bindBackupAgent: app=" + packageName + " mode=" + backupMode + " targetUserId=" + targetUserId + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "bindBackupAgent");
        try {
            app = AppGlobals.getPackageManager().getApplicationInfo(packageName, 1024, PackageManagerService.PLATFORM_PACKAGE_NAME.equals(packageName) ? 0 : targetUserId);
        } catch (RemoteException e) {
            app = null;
        }
        if (app == null) {
            Slog.w(TAG, "Unable to bind backup agent for " + packageName);
            return false;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                AppGlobals.getPackageManager().setPackageStoppedState(app.packageName, false, UserHandle.getUserId(app.uid));
                try {
                    r = new BackupRecord(app, backupMode, targetUserId);
                    if (backupMode == 0) {
                        hostingName = new ComponentName(app.packageName, app.backupAgentName);
                    } else {
                        hostingName = new ComponentName(PackageManagerService.PLATFORM_PACKAGE_NAME, "FullBackupAgent");
                    }
                } catch (Throwable th2) {
                    th = th2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                try {
                    ProcessRecord proc = startProcessLocked(app.processName, app, false, 0, new HostingRecord(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD, hostingName), false, false, false);
                    if (proc == null) {
                        try {
                            Slog.e(TAG, "Unable to start backup agent process " + r);
                            resetPriorityAfterLockedSection();
                            return false;
                        } catch (Throwable th3) {
                            th = th3;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else {
                        try {
                            if (UserHandle.isApp(app.uid) && backupMode == 1) {
                                proc.inFullBackup = true;
                            }
                            r.app = proc;
                            BackupRecord backupTarget = this.mBackupTargets.get(targetUserId);
                            oldBackupUid = backupTarget != null ? backupTarget.appInfo.uid : -1;
                            newBackupUid = proc.inFullBackup ? r.appInfo.uid : -1;
                            this.mBackupTargets.put(targetUserId, r);
                            updateOomAdjLocked(proc, true, "updateOomAdj_meh");
                            if (proc.thread != null) {
                                if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                    Slog.v(TAG, "Agent proc already running: " + proc);
                                }
                                try {
                                    proc.thread.scheduleCreateBackupAgent(app, compatibilityInfoForPackage(app), backupMode, targetUserId);
                                } catch (RemoteException e2) {
                                }
                            } else if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                Slog.v(TAG, "Agent proc not running, waiting for attach");
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th5) {
                    th = th5;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (RemoteException e3) {
            } catch (IllegalArgumentException e4) {
                Slog.w(TAG, "Failed trying to unstop package " + app.packageName + ": " + e4);
            } catch (Throwable th6) {
                th = th6;
            }
        }
        resetPriorityAfterLockedSection();
        JobSchedulerInternal js = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
        if (oldBackupUid != -1) {
            js.removeBackingUpUid(oldBackupUid);
        }
        if (newBackupUid != -1) {
            js.addBackingUpUid(newBackupUid);
        }
        return true;
    }

    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void clearPendingBackup(int userId) {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "clearPendingBackup: userId = " + userId + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBackupTargets.delete(userId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).clearAllBackingUpUids();
    }

    public void backupAgentCreated(String agentPackageName, IBinder agent, int userId) {
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "backupAgentCreated", null);
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "backupAgentCreated: " + agentPackageName + " = " + agent + " callingUserId = " + UserHandle.getCallingUserId() + " userId = " + userId2 + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                BackupRecord backupTarget = this.mBackupTargets.get(userId2);
                String backupAppName = backupTarget == null ? null : backupTarget.appInfo.packageName;
                if (agentPackageName != null) {
                    if (!agentPackageName.equals(backupAppName)) {
                    }
                }
                Slog.e(TAG, "Backup agent created for " + agentPackageName + " but not requested!");
                return;
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        long oldIdent = Binder.clearCallingIdentity();
        try {
            IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentConnectedForUser(userId2, agentPackageName, agent);
        } catch (RemoteException e) {
        } catch (Exception e2) {
            Slog.w(TAG, "Exception trying to deliver BackupAgent binding: ");
            e2.printStackTrace();
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(oldIdent);
            throw th;
        }
        Binder.restoreCallingIdentity(oldIdent);
    }

    public void unbindBackupAgent(ApplicationInfo appInfo) {
        int oldBackupUid;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "unbindBackupAgent: " + appInfo + " appInfo.uid = " + appInfo.uid + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "unbindBackupAgent");
        if (appInfo == null) {
            Slog.w(TAG, "unbind backup agent for null app");
            return;
        }
        int userId = UserHandle.getUserId(appInfo.uid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                BackupRecord backupTarget = this.mBackupTargets.get(userId);
                String backupAppName = backupTarget == null ? null : backupTarget.appInfo.packageName;
                if (backupAppName == null) {
                    try {
                        Slog.w(TAG, "Unbinding backup agent with no active backup");
                        return;
                    } finally {
                        this.mBackupTargets.delete(userId);
                    }
                } else if (!backupAppName.equals(appInfo.packageName)) {
                    Slog.e(TAG, "Unbind of " + appInfo + " but is not the current backup target");
                    this.mBackupTargets.delete(userId);
                    resetPriorityAfterLockedSection();
                    return;
                } else {
                    ProcessRecord proc = backupTarget.app;
                    updateOomAdjLocked(proc, true, "updateOomAdj_meh");
                    proc.inFullBackup = false;
                    oldBackupUid = backupTarget.appInfo.uid;
                    if (proc.thread != null) {
                        try {
                            proc.thread.scheduleDestroyBackupAgent(appInfo, compatibilityInfoForPackage(appInfo), userId);
                        } catch (Exception e) {
                            Slog.e(TAG, "Exception when unbinding backup agent:");
                            e.printStackTrace();
                        }
                    }
                    this.mBackupTargets.delete(userId);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        if (oldBackupUid != -1) {
            ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).removeBackingUpUid(oldBackupUid);
        }
    }

    private boolean isInstantApp(ProcessRecord record, String callerPackage, int uid) {
        if (UserHandle.getAppId(uid) < 10000) {
            return false;
        }
        if (record != null) {
            return record.info.isInstantApp();
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (callerPackage == null) {
            try {
                String[] packageNames = pm.getPackagesForUid(uid);
                if (packageNames == null || packageNames.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                callerPackage = packageNames[0];
            } catch (RemoteException e) {
                Slog.e(TAG, "Error looking up if " + callerPackage + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(uid, callerPackage);
        return pm.isInstantApp(callerPackage, UserHandle.getUserId(uid));
    }

    /* access modifiers changed from: package-private */
    public boolean isPendingBroadcastProcessLocked(int pid) {
        return (this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mOffloadBroadcastQueue.isPendingBroadcastProcessLocked(pid)) || isThirdPartyAppPendingBroadcastProcessLocked(pid) || isKeyAppPendingBroadcastProcessLocked(pid);
    }

    /* access modifiers changed from: package-private */
    public void skipPendingBroadcastLocked(int pid) {
        Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipPendingBroadcastLocked(pid);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean sendPendingBroadcastsLocked(ProcessRecord app) {
        boolean didSomething = false;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            didSomething |= queue.sendPendingBroadcastsLocked(app);
        }
        return didSomething;
    }

    public Intent registerReceiver(IApplicationThread caller, String callerPackage, IIntentReceiver receiver, IntentFilter filter, String permission, int userId, int flags) {
        Throwable th;
        ProcessRecord callerApp;
        String callerPackage2;
        int callingUid;
        int callingPid;
        boolean instantApp;
        int userId2;
        ArrayList<Intent> stickyIntents;
        ArrayList<Intent> allSticky;
        RemoteException e;
        int callingUid2;
        int userId3;
        ArrayList<Intent> stickyIntents2;
        Iterator<String> actions;
        int i;
        String action;
        ArrayList<Intent> stickyIntents3;
        enforceNotIsolatedCaller("registerReceiver");
        ArrayList<Intent> stickyIntents4 = null;
        int i2 = 0;
        boolean visibleToInstantApps = (flags & 1) != 0;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (caller != null) {
                    try {
                        ProcessRecord callerApp2 = getRecordForAppLocked(caller);
                        if (callerApp2 != null) {
                            if (callerApp2.info.uid != 1000 && !callerApp2.pkgList.containsKey(callerPackage)) {
                                if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(callerPackage)) {
                                    throw new SecurityException("Given caller package " + callerPackage + " is not running in process " + callerApp2);
                                }
                            }
                            callerPackage2 = callerPackage;
                            callerApp = callerApp2;
                            callingUid = callerApp2.info.uid;
                            callingPid = callerApp2.pid;
                        } else {
                            throw new SecurityException("Unable to find app for caller " + caller + " (pid=" + Binder.getCallingPid() + ") when registering receiver " + receiver);
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th3) {
                                th = th3;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } else {
                    try {
                        callerPackage2 = null;
                        callerApp = null;
                        callingUid = Binder.getCallingUid();
                        callingPid = Binder.getCallingPid();
                    } catch (Throwable th4) {
                        th = th4;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                try {
                    instantApp = isInstantApp(callerApp, callerPackage2, callingUid);
                    userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, true, 2, "registerReceiver", callerPackage2);
                } catch (Throwable th5) {
                    th = th5;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                try {
                    Iterator<String> actions2 = filter.actionsIterator();
                    if (actions2 == null) {
                        try {
                            ArrayList<String> noAction = new ArrayList<>(1);
                            noAction.add(null);
                            actions2 = noAction.iterator();
                        } catch (Throwable th6) {
                            th = th6;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    int[] userIds = {-1, UserHandle.getUserId(callingUid)};
                    while (actions2.hasNext()) {
                        try {
                            String action2 = actions2.next();
                            int length = userIds.length;
                            ArrayList<Intent> stickyIntents5 = stickyIntents4;
                            int i3 = i2;
                            while (i3 < length) {
                                try {
                                    ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(userIds[i3]);
                                    if (stickies != null) {
                                        action = action2;
                                        ArrayList<Intent> intents = stickies.get(action);
                                        i = length;
                                        if (intents != null) {
                                            if (stickyIntents5 == null) {
                                                actions = actions2;
                                                stickyIntents3 = new ArrayList<>();
                                            } else {
                                                actions = actions2;
                                                stickyIntents3 = stickyIntents5;
                                            }
                                            try {
                                                stickyIntents3.addAll(intents);
                                                stickyIntents5 = stickyIntents3;
                                            } catch (Throwable th7) {
                                                th = th7;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        } else {
                                            actions = actions2;
                                        }
                                    } else {
                                        action = action2;
                                        i = length;
                                        actions = actions2;
                                    }
                                    i3++;
                                    actions2 = actions;
                                    action2 = action;
                                    length = i;
                                } catch (Throwable th8) {
                                    th = th8;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            stickyIntents4 = stickyIntents5;
                            i2 = 0;
                        } catch (Throwable th9) {
                            th = th9;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th10) {
                    th = th10;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th11) {
                th = th11;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        ArrayList<Intent> allSticky2 = null;
        if (stickyIntents4 != null) {
            ContentResolver resolver = this.mContext.getContentResolver();
            int i4 = 0;
            int N = stickyIntents4.size();
            while (i4 < N) {
                Intent intent = stickyIntents4.get(i4);
                if (!instantApp || (intent.getFlags() & DumpState.DUMP_COMPILER_STATS) != 0) {
                    stickyIntents2 = stickyIntents4;
                    if (filter.match(resolver, intent, true, TAG) >= 0) {
                        if (allSticky2 == null) {
                            allSticky2 = new ArrayList<>();
                        }
                        allSticky2.add(intent);
                    }
                } else {
                    stickyIntents2 = stickyIntents4;
                }
                i4++;
                stickyIntents4 = stickyIntents2;
            }
            stickyIntents = stickyIntents4;
            allSticky = allSticky2;
        } else {
            stickyIntents = stickyIntents4;
            allSticky = null;
        }
        Intent sticky = allSticky != null ? allSticky.get(0) : null;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG, "Register receiver " + filter + ": " + sticky);
        }
        if (receiver == null) {
            return sticky;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (callerApp != null) {
                    try {
                        if (callerApp.thread == null || callerApp.thread.asBinder() != caller.asBinder()) {
                            resetPriorityAfterLockedSection();
                            return null;
                        }
                    } catch (Throwable th12) {
                        e = th12;
                        resetPriorityAfterLockedSection();
                        throw e;
                    }
                }
                ReceiverList rl = this.mRegisteredReceivers.get(receiver.asBinder());
                if (rl == null) {
                    try {
                        callingUid2 = callingUid;
                        try {
                            ReceiverList rl2 = new ReceiverList(this, callerApp, callingPid, callingUid, userId2, receiver);
                            if (IS_DEBUG_VERSION && getBgBroadcastQueue().getMtmBRManager() != null) {
                                getBgBroadcastQueue().getMtmBRManager().iawareCountDuplicatedReceiver(true, new ReceiverListEx(rl2), filter);
                            }
                            if (rl2.app != null) {
                                int totalReceiversForApp = rl2.app.receivers.size();
                                if (totalReceiversForApp >= 1000) {
                                    if (callingPid == MY_PID) {
                                        printReceivers(rl2.app.receivers, callerPackage2);
                                    }
                                    throw new IllegalStateException("Too many receivers, total of " + totalReceiversForApp + ", registered for pid: " + rl2.pid + ", callerPackage: " + callerPackage2);
                                }
                                rl2.app.receivers.add(rl2);
                            } else {
                                try {
                                    receiver.asBinder().linkToDeath(rl2, 0);
                                    rl2.linkedToDeath = true;
                                } catch (RemoteException e2) {
                                    resetPriorityAfterLockedSection();
                                    return sticky;
                                }
                            }
                            this.mRegisteredReceivers.put(receiver.asBinder(), rl2);
                            userId3 = userId2;
                            rl = rl2;
                        } catch (Throwable th13) {
                            e = th13;
                            resetPriorityAfterLockedSection();
                            throw e;
                        }
                    } catch (Throwable th14) {
                        e = th14;
                        resetPriorityAfterLockedSection();
                        throw e;
                    }
                } else {
                    callingUid2 = callingUid;
                    try {
                        if (rl.uid != callingUid2) {
                            throw new IllegalArgumentException("Receiver requested to register for uid " + callingUid2 + " was previously registered for uid " + rl.uid + " callerPackage is " + callerPackage2);
                        } else if (rl.pid == callingPid) {
                            userId3 = userId2;
                            if (rl.userId != userId3) {
                                throw new IllegalArgumentException("Receiver requested to register for user " + userId3 + " was previously registered for user " + rl.userId + " callerPackage is " + callerPackage2);
                            }
                        } else {
                            throw new IllegalArgumentException("Receiver requested to register for pid " + callingPid + " was previously registered for pid " + rl.pid + " callerPackage is " + callerPackage2);
                        }
                    } catch (Throwable th15) {
                        e = th15;
                        resetPriorityAfterLockedSection();
                        throw e;
                    }
                }
                try {
                } catch (Throwable th16) {
                    e = th16;
                    resetPriorityAfterLockedSection();
                    throw e;
                }
                try {
                    BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage2, permission, callingUid2, userId3, instantApp, visibleToInstantApps);
                    if (rl.containsFilter(filter)) {
                        Slog.w(TAG, "Receiver with filter " + filter + " already registered for pid " + rl.pid + ", callerPackage is " + callerPackage2);
                    } else {
                        if (getBgBroadcastQueue().getMtmBRManager() != null) {
                            getBgBroadcastQueue().getMtmBRManager().iawareCheckCombinedConditon(filter);
                        }
                        rl.add(bf);
                        if (!bf.debugCheck()) {
                            Slog.w(TAG, "==> For Dynamic broadcast");
                        }
                        this.mReceiverResolver.addFilter(bf);
                    }
                    if (allSticky != null) {
                        ArrayList receivers = new ArrayList();
                        receivers.add(bf);
                        int stickyCount = allSticky.size();
                        int i5 = 0;
                        while (i5 < stickyCount) {
                            Intent intent2 = allSticky.get(i5);
                            BroadcastQueue queue = broadcastQueueForIntent(intent2);
                            queue.enqueueParallelBroadcastLocked(new BroadcastRecord(queue, intent2, null, null, -1, -1, false, null, null, -1, null, receivers, null, 0, null, null, false, true, true, -1, false, false));
                            queue.scheduleBroadcastsLocked();
                            i5++;
                            rl = rl;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    return sticky;
                } catch (Throwable th17) {
                    e = th17;
                    resetPriorityAfterLockedSection();
                    throw e;
                }
            } catch (Throwable th18) {
                e = th18;
                resetPriorityAfterLockedSection();
                throw e;
            }
        }
    }

    private void printReceivers(ArraySet<ReceiverList> receivers, String callerPackage) {
        Iterator<ReceiverList> it = receivers.iterator();
        while (it.hasNext()) {
            Iterator it2 = it.next().iterator();
            while (it2.hasNext()) {
                IntentFilter filter = (IntentFilter) it2.next();
                if (filter != null) {
                    Iterator<String> actions = filter.actionsIterator();
                    StringBuffer sb = new StringBuffer();
                    sb.append("actions: [");
                    if (actions != null) {
                        while (actions.hasNext()) {
                            sb.append(actions.next() + ",");
                        }
                    }
                    sb.append("]");
                    Slog.e(TAG, "register too many " + sb.toString() + ", callerPackage:" + callerPackage);
                }
            }
        }
    }

    public void unregisterReceiver(IIntentReceiver receiver) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_UNREGISTERRECEIVER);
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG, "Unregister receiver: " + receiver);
        }
        long origId = Binder.clearCallingIdentity();
        boolean doTrim = false;
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ReceiverList rl = this.mRegisteredReceivers.get(receiver.asBinder());
                    if (rl != null) {
                        BroadcastRecord r = rl.curBroadcast;
                        if (r != null && r == r.queue.getMatchingOrderedReceiver(r) && r.queue.finishReceiverLocked(r, r.resultCode, r.resultData, r.resultExtras, r.resultAbort, false)) {
                            doTrim = true;
                            r.queue.processNextBroadcast(false);
                        }
                        if (rl.app != null) {
                            rl.app.receivers.remove(rl);
                        }
                        removeReceiverLocked(rl);
                        if (rl.linkedToDeath) {
                            rl.linkedToDeath = false;
                            rl.receiver.asBinder().unlinkToDeath(rl, 0);
                        }
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            if (doTrim) {
                trimApplications("updateOomAdj_finishReceiver");
                return;
            }
            Binder.restoreCallingIdentity(origId);
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    /* access modifiers changed from: package-private */
    public void removeReceiverLocked(ReceiverList rl) {
        this.mRegisteredReceivers.remove(rl.receiver.asBinder());
        for (int i = rl.size() - 1; i >= 0; i--) {
            this.mReceiverResolver.removeFilter((BroadcastFilter) rl.get(i));
        }
        if (IS_DEBUG_VERSION && getBgBroadcastQueue().getMtmBRManager() != null) {
            getBgBroadcastQueue().getMtmBRManager().iawareCountDuplicatedReceiver(false, new ReceiverListEx(rl), null);
        }
    }

    private final void sendPackageBroadcastLocked(int cmd, String[] packages, int userId) {
        this.mProcessList.sendPackageBroadcastLocked(cmd, packages, userId);
    }

    private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType, int callingUid, int[] users) {
        int pmFlags;
        int pmFlags2;
        int[] iArr = users;
        int pmFlags3 = 268436480;
        boolean scannedFirstReceivers = false;
        try {
            int length = iArr.length;
            int i = 0;
            List<ResolveInfo> receivers = null;
            HashSet<ComponentName> singleUserReceivers = null;
            int i2 = 0;
            while (i2 < length) {
                try {
                    int user = iArr[i2];
                    if (callingUid == 2000) {
                        try {
                            if (this.mUserController.hasUserRestriction("no_debugging_features", user) && !isPermittedShellBroadcast(intent)) {
                                pmFlags = pmFlags3;
                                i2++;
                                iArr = users;
                                pmFlags3 = pmFlags;
                                i = 0;
                            }
                        } catch (RemoteException e) {
                            return receivers;
                        }
                    }
                    try {
                        try {
                            List<ResolveInfo> newReceivers = AppGlobals.getPackageManager().queryIntentReceivers(intent, resolvedType, pmFlags3, user).getList();
                            if (!(user == 0 || newReceivers == null)) {
                                int i3 = i;
                                while (i3 < newReceivers.size()) {
                                    try {
                                        if ((newReceivers.get(i3).activityInfo.flags & 536870912) != 0) {
                                            newReceivers.remove(i3);
                                            i3--;
                                        }
                                        i3++;
                                    } catch (RemoteException e2) {
                                        return receivers;
                                    }
                                }
                            }
                            if (newReceivers != null && newReceivers.size() == 0) {
                                newReceivers = null;
                            }
                            if (receivers == null) {
                                pmFlags = pmFlags3;
                                receivers = newReceivers;
                            } else if (newReceivers != null) {
                                if (!scannedFirstReceivers) {
                                    scannedFirstReceivers = true;
                                    int i4 = 0;
                                    while (i4 < receivers.size()) {
                                        ResolveInfo ri = receivers.get(i4);
                                        if ((ri.activityInfo.flags & 1073741824) != 0) {
                                            pmFlags2 = pmFlags3;
                                            try {
                                                ComponentName cn = new ComponentName(ri.activityInfo.packageName, ri.activityInfo.name);
                                                if (singleUserReceivers == null) {
                                                    singleUserReceivers = new HashSet<>();
                                                }
                                                singleUserReceivers.add(cn);
                                            } catch (RemoteException e3) {
                                                return receivers;
                                            }
                                        } else {
                                            pmFlags2 = pmFlags3;
                                        }
                                        i4++;
                                        pmFlags3 = pmFlags2;
                                    }
                                    pmFlags = pmFlags3;
                                } else {
                                    pmFlags = pmFlags3;
                                }
                                for (int i5 = 0; i5 < newReceivers.size(); i5++) {
                                    ResolveInfo ri2 = newReceivers.get(i5);
                                    if ((ri2.activityInfo.flags & 1073741824) != 0) {
                                        ComponentName cn2 = new ComponentName(ri2.activityInfo.packageName, ri2.activityInfo.name);
                                        if (singleUserReceivers == null) {
                                            singleUserReceivers = new HashSet<>();
                                        }
                                        if (!singleUserReceivers.contains(cn2)) {
                                            singleUserReceivers.add(cn2);
                                            receivers.add(ri2);
                                        }
                                    } else {
                                        receivers.add(ri2);
                                    }
                                }
                            } else {
                                pmFlags = pmFlags3;
                            }
                            i2++;
                            iArr = users;
                            pmFlags3 = pmFlags;
                            i = 0;
                        } catch (RemoteException e4) {
                            return receivers;
                        }
                    } catch (RemoteException e5) {
                        return receivers;
                    }
                } catch (RemoteException e6) {
                    return receivers;
                }
            }
            return receivers;
        } catch (RemoteException e7) {
            return null;
        }
    }

    private boolean isPermittedShellBroadcast(Intent intent) {
        return INTENT_REMOTE_BUGREPORT_FINISHED.equals(intent.getAction());
    }

    private void checkBroadcastFromSystem(Intent intent, ProcessRecord callerApp, String callerPackage, int callingUid, boolean isProtectedBroadcast, List receivers) {
        if ((intent.getFlags() & DumpState.DUMP_CHANGES) == 0) {
            String action = intent.getAction();
            if (!isProtectedBroadcast && !"android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) && !"com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MEDIA_BUTTON".equals(action) && !"android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) && !"com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MASTER_CLEAR".equals(action) && !"android.intent.action.FACTORY_RESET".equals(action) && !"android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) && !"android.appwidget.action.APPWIDGET_UPDATE".equals(action) && !"android.location.HIGH_POWER_REQUEST_CHANGE".equals(action) && !"com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) && !"android.text.style.SUGGESTION_PICKED".equals(action) && !"android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) && !"android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
                if (!(intent.getPackage() == null && intent.getComponent() == null)) {
                    if (receivers != null && receivers.size() != 0) {
                        boolean allProtected = true;
                        int i = receivers.size() - 1;
                        while (true) {
                            if (i < 0) {
                                break;
                            }
                            Object target = receivers.get(i);
                            if (target instanceof ResolveInfo) {
                                ResolveInfo ri = (ResolveInfo) target;
                                if (ri.activityInfo.exported && ri.activityInfo.permission == null) {
                                    allProtected = false;
                                    break;
                                }
                            } else if (((BroadcastFilter) target).requiredPermission == null) {
                                allProtected = false;
                                break;
                            }
                            i--;
                        }
                        if (allProtected) {
                            return;
                        }
                    } else {
                        return;
                    }
                }
                if (callerApp != null) {
                    Log.w(TAG, "Sending non-protected broadcast " + action + " from system " + callerApp.toShortString() + " pkg " + callerPackage);
                    return;
                }
                Log.w(TAG, "Sending non-protected broadcast " + action + " from system uid " + UserHandle.formatUid(callingUid) + " pkg " + callerPackage);
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int realCallingUid, int realCallingPid, int userId) {
        return broadcastIntentLocked(callerApp, callerPackage, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, appOp, bOptions, ordered, sticky, callingPid, callingUid, realCallingUid, realCallingPid, userId, false);
    }

    /* JADX INFO: Can't fix incorrect switch cases order, some code will duplicate */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:251:0x069b, code lost:
        if (r4.equals("android.intent.action.PACKAGES_SUSPENDED") != false) goto L_0x06c1;
     */
    /* JADX WARNING: Removed duplicated region for block: B:331:0x0977  */
    /* JADX WARNING: Removed duplicated region for block: B:333:0x0986  */
    /* JADX WARNING: Removed duplicated region for block: B:373:0x0aa1  */
    /* JADX WARNING: Removed duplicated region for block: B:374:0x0aa9  */
    /* JADX WARNING: Removed duplicated region for block: B:377:0x0ab9  */
    /* JADX WARNING: Removed duplicated region for block: B:378:0x0ac0  */
    /* JADX WARNING: Removed duplicated region for block: B:381:0x0ac8  */
    /* JADX WARNING: Removed duplicated region for block: B:397:0x0b09  */
    /* JADX WARNING: Removed duplicated region for block: B:410:0x0b2f  */
    /* JADX WARNING: Removed duplicated region for block: B:411:0x0b76  */
    /* JADX WARNING: Removed duplicated region for block: B:413:0x0b7b  */
    /* JADX WARNING: Removed duplicated region for block: B:416:0x0b89  */
    /* JADX WARNING: Removed duplicated region for block: B:417:0x0b8b  */
    /* JADX WARNING: Removed duplicated region for block: B:420:0x0b9c  */
    /* JADX WARNING: Removed duplicated region for block: B:421:0x0b9e  */
    /* JADX WARNING: Removed duplicated region for block: B:424:0x0bcd  */
    /* JADX WARNING: Removed duplicated region for block: B:425:0x0bcf  */
    /* JADX WARNING: Removed duplicated region for block: B:428:0x0bda  */
    /* JADX WARNING: Removed duplicated region for block: B:429:0x0bdc  */
    /* JADX WARNING: Removed duplicated region for block: B:432:0x0bea  */
    /* JADX WARNING: Removed duplicated region for block: B:433:0x0bec  */
    /* JADX WARNING: Removed duplicated region for block: B:436:0x0bf5 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:443:0x0c29  */
    /* JADX WARNING: Removed duplicated region for block: B:444:0x0c2e  */
    /* JADX WARNING: Removed duplicated region for block: B:447:0x0c33 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:469:0x0ce2  */
    /* JADX WARNING: Removed duplicated region for block: B:513:0x0dbf  */
    /* JADX WARNING: Removed duplicated region for block: B:515:0x0dc6  */
    /* JADX WARNING: Removed duplicated region for block: B:519:0x0dda  */
    /* JADX WARNING: Removed duplicated region for block: B:520:0x0df0  */
    /* JADX WARNING: Removed duplicated region for block: B:522:0x0df8  */
    /* JADX WARNING: Removed duplicated region for block: B:548:0x0ecf  */
    /* JADX WARNING: Removed duplicated region for block: B:80:0x0255  */
    /* JADX WARNING: Removed duplicated region for block: B:99:0x030a  */
    @GuardedBy({"this"})
    public final int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int realCallingUid, int realCallingPid, int userId, boolean allowBackgroundActivityStarts) {
        int i;
        Intent intent2;
        boolean allowBackgroundActivityStarts2;
        int i2;
        BroadcastOptions brOptions;
        boolean isCallerSystem;
        boolean timeoutExempt;
        BroadcastOptions brOptions2;
        int i3;
        int i4;
        String[] strArr;
        Intent intent3;
        int i5;
        String action;
        int timeFormatPreferenceMsgValue;
        int[] users;
        List receivers;
        String str;
        String action2;
        List<BroadcastFilter> registeredReceivers;
        BroadcastQueue processQueue;
        BroadcastOptions brOptions3;
        boolean replacePending;
        int NR;
        BroadcastOptions brOptions4;
        boolean replacePending2;
        int NR2;
        List<BroadcastFilter> registeredReceivers2;
        String str2;
        ProcessRecord processRecord;
        int i6;
        List receivers2;
        int ir;
        int userId2;
        ProcessRecord processRecord2;
        String str3;
        int ir2;
        String[] skipPackages;
        int ir3;
        int ir4;
        String pkgName;
        IIntentReceiver iIntentReceiver;
        BroadcastQueue processQueue2;
        ArrayMap<String, ArrayList<Intent>> stickies;
        ArrayList<Intent> list;
        char c;
        String action3;
        int uid;
        UidRecord uidRec;
        int i7;
        boolean z;
        Intent intent4;
        int i8;
        int userId3;
        Intent intent5;
        String ssp;
        int i9;
        int userId4 = this.mHwAMSEx.getCloneAppUserId(intent.getAction(), userId);
        Intent intent6 = new Intent(intent);
        boolean callerInstantApp = isInstantApp(callerApp, callerPackage, callingUid);
        if (callerInstantApp) {
            intent6.setFlags(intent6.getFlags() & -2097153);
        }
        intent6.addFlags(16);
        if (!this.mProcessesReady && (intent6.getFlags() & DumpState.DUMP_APEX) == 0) {
            intent6.addFlags(1073741824);
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
            StringBuilder sb = new StringBuilder();
            sb.append(sticky ? "Broadcast sticky: " : "Broadcast: ");
            sb.append(intent6);
            sb.append(" ordered=");
            sb.append(ordered);
            sb.append(" userid=");
            sb.append(userId4);
            Slog.v(TAG, sb.toString());
        }
        if (resultTo != null && !ordered) {
            Slog.w(TAG, "Broadcast " + intent6 + " not ordered but result callback requested!");
        }
        int userId5 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId4, true, 0, INetd.IF_FLAG_BROADCAST, callerPackage);
        if (userId5 == -1 || this.mUserController.isUserOrItsParentRunning(userId5)) {
            intent2 = intent6;
            i = callingUid;
        } else {
            i = callingUid;
            if (i == 1000 && (intent6.getFlags() & DumpState.DUMP_APEX) != 0) {
                intent2 = intent6;
            } else if (!"android.intent.action.ACTION_SHUTDOWN".equals(intent6.getAction())) {
                Slog.w(TAG, "Skipping broadcast of " + intent6 + ": user " + userId5 + " and its parent (if any) are stopped");
                return -2;
            } else {
                intent2 = intent6;
            }
        }
        String action4 = intent2.getAction();
        if (bOptions != null) {
            BroadcastOptions brOptions5 = new BroadcastOptions(bOptions);
            if (brOptions5.getTemporaryAppWhitelistDuration() > 0) {
                i9 = realCallingPid;
                if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", i9, realCallingUid, -1, true) == 0) {
                    i2 = callingPid;
                } else {
                    String msg = "Permission Denial: " + intent2.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + i + ") requires android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            } else {
                i2 = callingPid;
                i9 = realCallingPid;
            }
            if (brOptions5.isDontSendToRestrictedApps() && !isUidActiveLocked(i) && isBackgroundRestrictedNoCheck(i, callerPackage)) {
                Slog.i(TAG, "Not sending broadcast " + action4 + " - app " + callerPackage + " has background restrictions");
                return -96;
            } else if (!brOptions5.allowsBackgroundActivityStarts()) {
                allowBackgroundActivityStarts2 = allowBackgroundActivityStarts;
                brOptions = brOptions5;
            } else if (checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i9, realCallingUid, -1, true) == 0) {
                brOptions = brOptions5;
                allowBackgroundActivityStarts2 = true;
            } else {
                String msg2 = "Permission Denial: " + intent2.getAction() + " broadcast from " + callerPackage + " (pid=" + i2 + ", uid=" + i + ") requires android.permission.START_ACTIVITIES_FROM_BACKGROUND";
                Slog.w(TAG, msg2);
                throw new SecurityException(msg2);
            }
        } else {
            i2 = callingPid;
            allowBackgroundActivityStarts2 = allowBackgroundActivityStarts;
            brOptions = null;
        }
        try {
            boolean isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action4);
            int appId = UserHandle.getAppId(callingUid);
            if (!(appId == 0 || appId == 1027 || appId == 1068 || appId == 1073)) {
                switch (appId) {
                    case 1000:
                    case NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE /* 1001 */:
                    case 1002:
                        break;
                    default:
                        isCallerSystem = callerApp != null && callerApp.isPersistent();
                        break;
                }
                if (!isCallerSystem) {
                    if (isProtectedBroadcast) {
                        String msg3 = "Permission Denial: not allowed to send broadcast " + action4 + " from pid=" + i2 + ", uid=" + i;
                        Slog.w(TAG, msg3);
                        throw new SecurityException(msg3);
                    } else if ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(action4) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action4)) {
                        if (callerPackage == null) {
                            String msg4 = "Permission Denial: not allowed to send broadcast " + action4 + " from unknown caller.";
                            Slog.w(TAG, msg4);
                            throw new SecurityException(msg4);
                        } else if (intent2.getComponent() == null) {
                            intent2.setPackage(callerPackage);
                        } else if (!intent2.getComponent().getPackageName().equals(callerPackage)) {
                            String msg5 = "Permission Denial: not allowed to send broadcast " + action4 + " to " + intent2.getComponent().getPackageName() + " from " + callerPackage;
                            Slog.w(TAG, msg5);
                            throw new SecurityException(msg5);
                        }
                    }
                }
                boolean timeoutExempt2 = false;
                if (action4 == null) {
                    if (getBackgroundLaunchBroadcasts().contains(action4)) {
                        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                            Slog.i(TAG, "Broadcast action " + action4 + " forcing include-background");
                        }
                        intent2.addFlags(DumpState.DUMP_SERVICE_PERMISSIONS);
                    }
                    char c2 = 5;
                    int cmd = 2;
                    switch (action4.hashCode()) {
                        case -2098526293:
                            if (action4.equals("android.hardware.action.NEW_VIDEO")) {
                                c = 15;
                                break;
                            }
                            c = 65535;
                            break;
                        case -2074848843:
                            if (action4.equals("android.intent.action.CLEAR_DNS_CACHE")) {
                                c = '\f';
                                break;
                            }
                            c = 65535;
                            break;
                        case -1749672628:
                            if (action4.equals("android.intent.action.UID_REMOVED")) {
                                c = 0;
                                break;
                            }
                            c = 65535;
                            break;
                        case -1403934493:
                            if (action4.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                c = 3;
                                break;
                            }
                            c = 65535;
                            break;
                        case -1338021860:
                            if (action4.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                c = 4;
                                break;
                            }
                            c = 65535;
                            break;
                        case -1001645458:
                            if (action4.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                c = 5;
                                break;
                            }
                            c = 65535;
                            break;
                        case -810471698:
                            if (action4.equals("android.intent.action.PACKAGE_REPLACED")) {
                                c = 7;
                                break;
                            }
                            c = 65535;
                            break;
                        case 172491798:
                            if (action4.equals("android.intent.action.PACKAGE_CHANGED")) {
                                c = 2;
                                break;
                            }
                            c = 65535;
                            break;
                        case 183904262:
                            if (action4.equals("android.intent.action.PROXY_CHANGE")) {
                                c = '\r';
                                break;
                            }
                            c = 65535;
                            break;
                        case 267468725:
                            if (action4.equals("android.intent.action.PACKAGE_DATA_CLEARED")) {
                                c = '\t';
                                break;
                            }
                            c = 65535;
                            break;
                        case 502473491:
                            if (action4.equals("android.intent.action.TIMEZONE_CHANGED")) {
                                c = '\n';
                                break;
                            }
                            c = 65535;
                            break;
                        case 505380757:
                            if (action4.equals("android.intent.action.TIME_SET")) {
                                c = 11;
                                break;
                            }
                            c = 65535;
                            break;
                        case 525384130:
                            if (action4.equals("android.intent.action.PACKAGE_REMOVED")) {
                                c = 1;
                                break;
                            }
                            c = 65535;
                            break;
                        case 555021408:
                            if (action4.equals("com.android.launcher.action.INSTALL_SHORTCUT")) {
                                c = 17;
                                break;
                            }
                            c = 65535;
                            break;
                        case 789737439:
                            if (action4.equals("android.intent.action.PRE_BOOT_COMPLETED")) {
                                c = 18;
                                break;
                            }
                            c = 65535;
                            break;
                        case 920338478:
                            if (action4.equals("android.hardware.action.NEW_PICTURE")) {
                                c = 14;
                                break;
                            }
                            c = 65535;
                            break;
                        case 1290767157:
                            if (action4.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                c = 6;
                                break;
                            }
                            c = 65535;
                            break;
                        case 1544582882:
                            if (action4.equals("android.intent.action.PACKAGE_ADDED")) {
                                c = '\b';
                                break;
                            }
                            c = 65535;
                            break;
                        case 1622791997:
                            if (action4.equals(BROADCAST_GESTURE_ACTION)) {
                                c = 19;
                                break;
                            }
                            c = 65535;
                            break;
                        case 1862858502:
                            if (action4.equals("android.security.action.TRUST_STORE_CHANGED")) {
                                c = 16;
                                break;
                            }
                            c = 65535;
                            break;
                        default:
                            c = 65535;
                            break;
                    }
                    switch (c) {
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            i3 = 1073741824;
                            if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", i2, i, -1, true) == 0) {
                                switch (action4.hashCode()) {
                                    case -1749672628:
                                        if (action4.equals("android.intent.action.UID_REMOVED")) {
                                            c2 = 0;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case -1403934493:
                                        if (action4.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                            c2 = 1;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case -1338021860:
                                        if (action4.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                            c2 = 2;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case -1001645458:
                                        break;
                                    case 172491798:
                                        if (action4.equals("android.intent.action.PACKAGE_CHANGED")) {
                                            c2 = 4;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case 525384130:
                                        if (action4.equals("android.intent.action.PACKAGE_REMOVED")) {
                                            c2 = 3;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    case 1290767157:
                                        if (action4.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                            c2 = 6;
                                            break;
                                        }
                                        c2 = 65535;
                                        break;
                                    default:
                                        c2 = 65535;
                                        break;
                                }
                                switch (c2) {
                                    case 0:
                                        strArr = requiredPermissions;
                                        action3 = action4;
                                        brOptions2 = brOptions;
                                        timeFormatPreferenceMsgValue = -1;
                                        i4 = 1;
                                        intent3 = intent2;
                                        int uid2 = getUidFromIntent(intent3);
                                        if (uid2 >= 0) {
                                            this.mBatteryStatsService.removeUid(uid2);
                                            if (!intent3.getBooleanExtra("android.intent.extra.REPLACING", false)) {
                                                this.mAppOpsService.uidRemoved(uid2);
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                        break;
                                    case 1:
                                        strArr = requiredPermissions;
                                        action3 = action4;
                                        Intent intent7 = intent2;
                                        brOptions2 = brOptions;
                                        int i10 = 1;
                                        String[] list2 = intent7.getStringArrayExtra("android.intent.extra.changed_package_list");
                                        if (list2 == null || list2.length <= 0) {
                                            timeFormatPreferenceMsgValue = -1;
                                            i4 = 1;
                                            intent3 = intent7;
                                            break;
                                        } else {
                                            int i11 = 0;
                                            while (i11 < list2.length) {
                                                forceStopPackageLocked(list2[i11], -1, false, true, true, false, false, userId5, "storage unmount");
                                                i11++;
                                                userId5 = userId5;
                                                i10 = i10;
                                                intent7 = intent7;
                                            }
                                            i4 = i10;
                                            timeFormatPreferenceMsgValue = -1;
                                            this.mAtmInternal.cleanupRecentTasksForUser(-1);
                                            sendPackageBroadcastLocked(i4, list2, userId5);
                                            intent3 = intent7;
                                            break;
                                        }
                                        break;
                                    case 2:
                                        strArr = requiredPermissions;
                                        action3 = action4;
                                        brOptions2 = brOptions;
                                        this.mAtmInternal.cleanupRecentTasksForUser(-1);
                                        timeFormatPreferenceMsgValue = -1;
                                        i4 = 1;
                                        intent3 = intent2;
                                        break;
                                    case 3:
                                    case 4:
                                        Uri data = intent2.getData();
                                        if (data != null) {
                                            String ssp2 = data.getSchemeSpecificPart();
                                            if (ssp2 != null) {
                                                boolean removed = "android.intent.action.PACKAGE_REMOVED".equals(action4);
                                                boolean replacing = intent2.getBooleanExtra("android.intent.extra.REPLACING", false);
                                                boolean killProcess = !intent2.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false);
                                                boolean fullUninstall = removed && !replacing;
                                                if (removed) {
                                                    if (!killProcess) {
                                                        strArr = requiredPermissions;
                                                        action3 = action4;
                                                        intent5 = intent2;
                                                        userId3 = userId5;
                                                        ssp = ssp2;
                                                        brOptions2 = brOptions;
                                                    } else if (!this.mHwAMSEx.isApplyPersistAppPatch(ssp2, intent2.getIntExtra("android.intent.extra.UID", -1), userId5, false, false, null, action4)) {
                                                        brOptions2 = brOptions;
                                                        action3 = action4;
                                                        intent5 = intent2;
                                                        userId3 = userId5;
                                                        strArr = requiredPermissions;
                                                        ssp = ssp2;
                                                        forceStopPackageLocked(ssp2, UserHandle.getAppId(intent2.getIntExtra("android.intent.extra.UID", -1)), false, true, true, false, fullUninstall, userId3, removed ? "pkg removed" : "pkg changed");
                                                    } else {
                                                        strArr = requiredPermissions;
                                                        action3 = action4;
                                                        intent5 = intent2;
                                                        userId3 = userId5;
                                                        ssp = ssp2;
                                                        brOptions2 = brOptions;
                                                    }
                                                    if (killProcess) {
                                                        cmd = 0;
                                                    }
                                                    i7 = 1;
                                                    z = false;
                                                    userId5 = userId3;
                                                    sendPackageBroadcastLocked(cmd, new String[]{ssp}, userId5);
                                                    if (fullUninstall) {
                                                        intent4 = intent5;
                                                        i8 = -1;
                                                        this.mAppOpsService.packageRemoved(intent4.getIntExtra("android.intent.extra.UID", -1), ssp);
                                                        this.mUgmInternal.removeUriPermissionsForPackage(ssp, userId5, true, false);
                                                        this.mAtmInternal.removeRecentTasksByPackageName(ssp, userId5);
                                                        this.mServices.forceStopPackageLocked(ssp, userId5);
                                                        this.mAtmInternal.onPackageUninstalled(ssp);
                                                        this.mBatteryStatsService.notePackageUninstalled(ssp);
                                                    } else {
                                                        intent4 = intent5;
                                                        i8 = -1;
                                                    }
                                                } else {
                                                    strArr = requiredPermissions;
                                                    action3 = action4;
                                                    brOptions2 = brOptions;
                                                    i8 = -1;
                                                    i7 = 1;
                                                    z = false;
                                                    intent4 = intent2;
                                                    if (killProcess) {
                                                        this.mProcessList.killPackageProcessesLocked(ssp2, UserHandle.getAppId(intent4.getIntExtra("android.intent.extra.UID", -1)), userId5, -10000, "change " + ssp2);
                                                    }
                                                    cleanupDisabledPackageComponentsLocked(ssp2, userId5, intent4.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
                                                }
                                                timeFormatPreferenceMsgValue = i8;
                                                i4 = i7;
                                                intent3 = intent4;
                                                break;
                                            } else {
                                                strArr = requiredPermissions;
                                                action3 = action4;
                                                brOptions2 = brOptions;
                                                timeFormatPreferenceMsgValue = -1;
                                                i4 = 1;
                                                intent3 = intent2;
                                                break;
                                            }
                                        } else {
                                            strArr = requiredPermissions;
                                            action3 = action4;
                                            brOptions2 = brOptions;
                                            timeFormatPreferenceMsgValue = -1;
                                            i4 = 1;
                                            intent3 = intent2;
                                            break;
                                        }
                                    case 5:
                                    case 6:
                                        this.mAtmInternal.onPackagesSuspendedChanged(intent2.getStringArrayExtra("android.intent.extra.changed_package_list"), "android.intent.action.PACKAGES_SUSPENDED".equals(intent2.getAction()), intent2.getIntExtra("android.intent.extra.user_handle", -10000));
                                        strArr = requiredPermissions;
                                        action3 = action4;
                                        intent3 = intent2;
                                        brOptions2 = brOptions;
                                        timeFormatPreferenceMsgValue = -1;
                                        i4 = 1;
                                        break;
                                    default:
                                        strArr = requiredPermissions;
                                        action3 = action4;
                                        intent3 = intent2;
                                        brOptions2 = brOptions;
                                        timeFormatPreferenceMsgValue = -1;
                                        i4 = 1;
                                        break;
                                }
                                i5 = callingPid;
                                i = callingUid;
                                break;
                            } else {
                                String msg6 = "Permission Denial: " + intent2.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ") requires android.permission.BROADCAST_PACKAGE_REMOVED";
                                Slog.w(TAG, msg6);
                                throw new SecurityException(msg6);
                            }
                            break;
                        case 7:
                            i3 = 1073741824;
                            Uri data2 = intent2.getData();
                            if (data2 == null) {
                                strArr = requiredPermissions;
                                i5 = i2;
                                action3 = action4;
                                intent3 = intent2;
                                i4 = 1;
                                brOptions2 = brOptions;
                                timeFormatPreferenceMsgValue = -1;
                                break;
                            } else {
                                String ssp3 = data2.getSchemeSpecificPart();
                                if (ssp3 == null) {
                                    strArr = requiredPermissions;
                                    i5 = i2;
                                    action3 = action4;
                                    intent3 = intent2;
                                    i4 = 1;
                                    brOptions2 = brOptions;
                                    timeFormatPreferenceMsgValue = -1;
                                    break;
                                } else {
                                    ApplicationInfo aInfo = null;
                                    try {
                                        aInfo = AppGlobals.getPackageManager().getApplicationInfo(ssp3, 1024, userId5);
                                    } catch (RemoteException e) {
                                    }
                                    if (aInfo != null) {
                                        updateAssociationForApp(aInfo);
                                        this.mAtmInternal.onPackageReplaced(aInfo);
                                        this.mServices.updateServiceApplicationInfoLocked(aInfo);
                                        sendPackageBroadcastLocked(3, new String[]{ssp3}, userId5);
                                        strArr = requiredPermissions;
                                        i5 = i2;
                                        action3 = action4;
                                        intent3 = intent2;
                                        i4 = 1;
                                        brOptions2 = brOptions;
                                        timeFormatPreferenceMsgValue = -1;
                                        break;
                                    } else {
                                        Slog.w(TAG, "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=" + ssp3 + " data=" + data2);
                                        return 0;
                                    }
                                }
                            }
                        case '\b':
                            i3 = 1073741824;
                            Uri data3 = intent2.getData();
                            if (data3 != null) {
                                String ssp4 = data3.getSchemeSpecificPart();
                                if (ssp4 != null) {
                                    this.mAtmInternal.onPackageAdded(ssp4, intent2.getBooleanExtra("android.intent.extra.REPLACING", false));
                                    try {
                                        try {
                                            ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(ssp4, 1024, 0);
                                            this.mBatteryStatsService.notePackageInstalled(ssp4, ai != null ? ai.longVersionCode : 0);
                                        } catch (RemoteException e2) {
                                        }
                                    } catch (RemoteException e3) {
                                    }
                                    strArr = requiredPermissions;
                                    i5 = i2;
                                    action3 = action4;
                                    intent3 = intent2;
                                    brOptions2 = brOptions;
                                    timeFormatPreferenceMsgValue = -1;
                                    i4 = 1;
                                    break;
                                } else {
                                    strArr = requiredPermissions;
                                    i5 = i2;
                                    action3 = action4;
                                    intent3 = intent2;
                                    brOptions2 = brOptions;
                                    timeFormatPreferenceMsgValue = -1;
                                    i4 = 1;
                                    break;
                                }
                            } else {
                                strArr = requiredPermissions;
                                i5 = i2;
                                action3 = action4;
                                intent3 = intent2;
                                brOptions2 = brOptions;
                                timeFormatPreferenceMsgValue = -1;
                                i4 = 1;
                                break;
                            }
                        case '\t':
                            Uri data4 = intent2.getData();
                            if (data4 != null) {
                                String ssp5 = data4.getSchemeSpecificPart();
                                if (ssp5 != null) {
                                    this.mAtmInternal.onPackageDataCleared(ssp5);
                                    i5 = i2;
                                    action3 = action4;
                                    intent3 = intent2;
                                    strArr = requiredPermissions;
                                    brOptions2 = brOptions;
                                    timeFormatPreferenceMsgValue = -1;
                                    i4 = 1;
                                    i3 = 1073741824;
                                    break;
                                } else {
                                    i5 = i2;
                                    action3 = action4;
                                    intent3 = intent2;
                                    strArr = requiredPermissions;
                                    brOptions2 = brOptions;
                                    timeFormatPreferenceMsgValue = -1;
                                    i4 = 1;
                                    i3 = 1073741824;
                                    break;
                                }
                            } else {
                                i5 = i2;
                                action3 = action4;
                                intent3 = intent2;
                                strArr = requiredPermissions;
                                brOptions2 = brOptions;
                                timeFormatPreferenceMsgValue = -1;
                                i4 = 1;
                                i3 = 1073741824;
                                break;
                            }
                        case '\n':
                            this.mHandler.sendEmptyMessage(13);
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            brOptions2 = brOptions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                        case 11:
                            int timeFormatPreferenceMsgValue2 = intent2.getIntExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", -1);
                            if (timeFormatPreferenceMsgValue2 != -1) {
                                this.mHandler.sendMessage(this.mHandler.obtainMessage(41, timeFormatPreferenceMsgValue2, 0));
                            }
                            BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
                            synchronized (stats) {
                                stats.noteCurrentTimeChangedLocked();
                            }
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            brOptions2 = brOptions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                        case '\f':
                            this.mHandler.sendEmptyMessage(CLEAR_DNS_CACHE_MSG);
                            brOptions2 = brOptions;
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                        case '\r':
                            MainHandler mainHandler = this.mHandler;
                            mainHandler.sendMessage(mainHandler.obtainMessage(29));
                            brOptions2 = brOptions;
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                        case 14:
                        case 15:
                            intent2.addFlags(1073741824);
                            brOptions2 = brOptions;
                            action3 = action4;
                            intent3 = intent2;
                            i3 = 1073741824;
                            strArr = requiredPermissions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i5 = i2;
                            break;
                        case 16:
                            this.mHandler.sendEmptyMessage(HANDLE_TRUST_STORAGE_UPDATE_MSG);
                            brOptions2 = brOptions;
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                        case 17:
                            Log.w(TAG, "Broadcast " + action4 + " no longer supported. It will not be delivered.");
                            return 0;
                        case 18:
                            timeoutExempt2 = true;
                            brOptions2 = brOptions;
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                        case FaceAcquiredInfo.FACE_OBSCURED /* 19 */:
                            WindowManagerService windowManagerService = this.mWindowManager;
                            if (windowManagerService != null) {
                                windowManagerService.handleGestureActionForBlur(windowManagerService, intent2);
                                brOptions2 = brOptions;
                                i5 = i2;
                                action3 = action4;
                                intent3 = intent2;
                                strArr = requiredPermissions;
                                timeFormatPreferenceMsgValue = -1;
                                i4 = 1;
                                i3 = 1073741824;
                                break;
                            } else {
                                brOptions2 = brOptions;
                                i5 = i2;
                                action3 = action4;
                                intent3 = intent2;
                                strArr = requiredPermissions;
                                timeFormatPreferenceMsgValue = -1;
                                i4 = 1;
                                i3 = 1073741824;
                                break;
                            }
                        default:
                            brOptions2 = brOptions;
                            i5 = i2;
                            action3 = action4;
                            intent3 = intent2;
                            strArr = requiredPermissions;
                            timeFormatPreferenceMsgValue = -1;
                            i4 = 1;
                            i3 = 1073741824;
                            break;
                    }
                    action = action3;
                    if (!(!("android.intent.action.PACKAGE_ADDED".equals(action) || "android.intent.action.PACKAGE_REMOVED".equals(action) || "android.intent.action.PACKAGE_REPLACED".equals(action)) || (uid = getUidFromIntent(intent3)) == timeFormatPreferenceMsgValue || (uidRec = this.mProcessList.getUidRecordLocked(uid)) == null)) {
                        uidRec.updateHasInternetPermission();
                    }
                    timeoutExempt = timeoutExempt2;
                } else {
                    brOptions2 = brOptions;
                    i5 = i2;
                    intent3 = intent2;
                    strArr = requiredPermissions;
                    timeFormatPreferenceMsgValue = -1;
                    i4 = 1;
                    i3 = 1073741824;
                    action = action4;
                    timeoutExempt = false;
                }
                if (sticky) {
                    if (checkPermission("android.permission.BROADCAST_STICKY", i5, i) != 0) {
                        String msg7 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + i5 + ", uid=" + i + " requires android.permission.BROADCAST_STICKY";
                        Slog.w(TAG, msg7);
                        throw new SecurityException(msg7);
                    } else if (strArr != null && strArr.length > 0) {
                        Slog.w(TAG, "Can't broadcast sticky intent " + intent3 + " and enforce permissions " + Arrays.toString(requiredPermissions));
                        return timeFormatPreferenceMsgValue;
                    } else if (intent3.getComponent() == null) {
                        if (!(userId5 == timeFormatPreferenceMsgValue || (stickies = this.mStickyBroadcasts.get(timeFormatPreferenceMsgValue)) == null || (list = stickies.get(intent3.getAction())) == null)) {
                            int N = list.size();
                            for (int i12 = 0; i12 < N; i12++) {
                                if (intent3.filterEquals(list.get(i12))) {
                                    throw new IllegalArgumentException("Sticky broadcast " + intent3 + " for user " + userId5 + " conflicts with existing global broadcast");
                                }
                            }
                        }
                        ArrayMap<String, ArrayList<Intent>> stickies2 = this.mStickyBroadcasts.get(userId5);
                        if (stickies2 == null) {
                            stickies2 = new ArrayMap<>();
                            this.mStickyBroadcasts.put(userId5, stickies2);
                        }
                        ArrayList<Intent> list3 = stickies2.get(intent3.getAction());
                        if (list3 == null) {
                            list3 = new ArrayList<>();
                            stickies2.put(intent3.getAction(), list3);
                        }
                        int stickiesCount = list3.size();
                        int i13 = 0;
                        while (true) {
                            if (i13 < stickiesCount) {
                                if (intent3.filterEquals(list3.get(i13))) {
                                    list3.set(i13, new Intent(intent3));
                                } else {
                                    i13++;
                                }
                            }
                        }
                        if (i13 >= stickiesCount) {
                            list3.add(new Intent(intent3));
                        }
                    } else {
                        throw new SecurityException("Sticky broadcasts can't target a specific component");
                    }
                }
                if (userId5 != timeFormatPreferenceMsgValue) {
                    users = this.mUserController.getStartedUserArray();
                } else {
                    int[] users2 = new int[i4];
                    users2[0] = userId5;
                    users = users2;
                }
                receivers = null;
                List<BroadcastFilter> registeredReceivers3 = null;
                if ((intent3.getFlags() & i3) != 0) {
                    str = resolvedType;
                    receivers = collectReceiverComponents(intent3, str, i, users);
                } else {
                    str = resolvedType;
                }
                if (intent3.getComponent() == null) {
                    action2 = action;
                    registeredReceivers = null;
                } else if (userId5 == timeFormatPreferenceMsgValue && i == 2000) {
                    int i14 = 0;
                    while (i14 < users.length) {
                        if (!this.mUserController.hasUserRestriction("no_debugging_features", users[i14])) {
                            List<BroadcastFilter> registeredReceiversForUser = this.mReceiverResolver.queryIntent(intent3, str, false, users[i14]);
                            if (registeredReceivers3 == null) {
                                registeredReceivers3 = registeredReceiversForUser;
                            } else if (registeredReceiversForUser != null) {
                                registeredReceivers3.addAll(registeredReceiversForUser);
                            }
                        }
                        i14++;
                        action = action;
                    }
                    action2 = action;
                    registeredReceivers = registeredReceivers3;
                } else {
                    action2 = action;
                    registeredReceivers = this.mReceiverResolver.queryIntent(intent3, str, false, userId5);
                }
                if ((registeredReceivers != null || registeredReceivers.size() <= 0) && (receivers == null || receivers.size() <= 0)) {
                    iIntentReceiver = resultTo;
                    if (iIntentReceiver == null) {
                        brOptions3 = brOptions2;
                        processQueue = null;
                        replacePending = (intent3.getFlags() & 536870912) != 0;
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append("sendBroadcast,caller:");
                        sb2.append(callerApp == null ? callerPackage : callerApp);
                        sb2.append(",act:");
                        sb2.append(intent3.getAction());
                        sb2.append(",rep:");
                        sb2.append(replacePending);
                        sb2.append(",ord:");
                        sb2.append(ordered);
                        sb2.append(",cmp:");
                        sb2.append(intent3.getComponent() != null);
                        sb2.append(",mftNum:");
                        sb2.append(receivers == null ? 0 : receivers.size());
                        sb2.append(",rgtNum:");
                        sb2.append(registeredReceivers == null ? 0 : registeredReceivers.size());
                        sb2.append((callerApp == null || callerPackage != null || !"android.intent.action.MEDIA_MOUNTED".equals(intent3.getAction())) ? "" : "called by: " + Debug.getCallers(8));
                        Flog.i(104, sb2.toString());
                        NR = registeredReceivers != null ? registeredReceivers.size() : 0;
                        if (!ordered || NR <= 0) {
                            replacePending2 = replacePending;
                            str2 = callerPackage;
                            processRecord = callerApp;
                            brOptions4 = brOptions3;
                            i6 = 1;
                            registeredReceivers2 = registeredReceivers;
                            NR2 = NR;
                        } else {
                            if (isCallerSystem) {
                                replacePending2 = replacePending;
                                brOptions4 = brOptions3;
                                checkBroadcastFromSystem(intent3, callerApp, callerPackage, callingUid, isProtectedBroadcast, registeredReceivers);
                            } else {
                                replacePending2 = replacePending;
                                brOptions4 = brOptions3;
                            }
                            BroadcastQueue queue = processQueue != null ? processQueue : getProcessBroadcastQueue(callerApp, callerPackage, intent3);
                            i6 = 1;
                            str2 = callerPackage;
                            processRecord = callerApp;
                            BroadcastRecord r = new BroadcastRecord(queue, intent3, callerApp, callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions4, registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId5, allowBackgroundActivityStarts2, timeoutExempt);
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slog.v(TAG, "Enqueueing parallel broadcast " + r);
                            }
                            this.mHwAMSEx.checkAndPrintTestModeLog(registeredReceivers, intent3.getAction(), "broadcastIntentLocked", "接收短信");
                            if (!(replacePending2 && queue.replaceParallelBroadcastLocked(r) != null)) {
                                queue.enqueueParallelBroadcastLocked(r);
                                queue.scheduleBroadcastsLocked();
                            }
                            registeredReceivers2 = null;
                            NR2 = 0;
                        }
                        int ir5 = 0;
                        if (receivers != null) {
                            String[] skipPackages2 = null;
                            if ("android.intent.action.PACKAGE_ADDED".equals(intent3.getAction()) || "android.intent.action.PACKAGE_RESTARTED".equals(intent3.getAction()) || "android.intent.action.PACKAGE_DATA_CLEARED".equals(intent3.getAction())) {
                                Uri data5 = intent3.getData();
                                if (!(data5 == null || (pkgName = data5.getSchemeSpecificPart()) == null)) {
                                    String[] strArr2 = new String[i6];
                                    strArr2[0] = pkgName;
                                    skipPackages2 = strArr2;
                                }
                            } else if ("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(intent3.getAction())) {
                                skipPackages2 = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                            }
                            if (skipPackages2 == null || skipPackages2.length <= 0) {
                                ir2 = 0;
                            } else {
                                int length = skipPackages2.length;
                                int i15 = 0;
                                while (i15 < length) {
                                    String skipPackage = skipPackages2[i15];
                                    if (skipPackage != null) {
                                        int NT = receivers.size();
                                        int it = 0;
                                        while (it < NT) {
                                            if (receivers.get(it).activityInfo.packageName.equals(skipPackage)) {
                                                receivers.remove(it);
                                                it--;
                                                NT--;
                                            }
                                            it++;
                                            ir5 = ir5;
                                            skipPackages2 = skipPackages2;
                                        }
                                        ir3 = ir5;
                                        skipPackages = skipPackages2;
                                        ir4 = 1;
                                    } else {
                                        ir3 = ir5;
                                        skipPackages = skipPackages2;
                                        ir4 = i6;
                                    }
                                    i15++;
                                    skipPackages2 = skipPackages;
                                    i6 = ir4;
                                    ir5 = ir3;
                                }
                                ir2 = ir5;
                            }
                            int NT2 = receivers.size();
                            int it2 = 0;
                            ResolveInfo curt = null;
                            BroadcastFilter curr = null;
                            int ir6 = ir2;
                            while (it2 < NT2 && ir6 < NR2) {
                                if (curt == null) {
                                    curt = receivers.get(it2);
                                }
                                if (curr == null) {
                                    curr = registeredReceivers2.get(ir6);
                                }
                                if (curr.getPriority() >= curt.priority) {
                                    receivers.add(it2, curr);
                                    ir6++;
                                    curr = null;
                                    it2++;
                                    NT2++;
                                } else {
                                    it2++;
                                    curt = null;
                                }
                            }
                            receivers2 = receivers;
                            ir = ir6;
                        } else {
                            ir = 0;
                            receivers2 = receivers;
                        }
                        while (ir < NR2) {
                            if (receivers2 == null) {
                                receivers2 = new ArrayList();
                            }
                            receivers2.add(registeredReceivers2.get(ir));
                            ir++;
                        }
                        if (isCallerSystem) {
                            processRecord2 = processRecord;
                            userId2 = userId5;
                            str3 = str2;
                            checkBroadcastFromSystem(intent3, callerApp, callerPackage, callingUid, isProtectedBroadcast, receivers2);
                        } else {
                            userId2 = userId5;
                            processRecord2 = processRecord;
                            str3 = str2;
                        }
                        if ((receivers2 == null && receivers2.size() > 0) || resultTo != null) {
                            BroadcastQueue queue2 = processQueue != null ? processQueue : getProcessBroadcastQueue(processRecord2, str3, intent3);
                            BroadcastRecord r2 = new BroadcastRecord(queue2, intent3, callerApp, callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions4, receivers2, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId2, allowBackgroundActivityStarts2, timeoutExempt);
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slog.v(TAG, "Enqueueing ordered broadcast " + r2);
                            }
                            this.mHwAMSEx.checkAndPrintTestModeLog(receivers2, intent3.getAction(), "broadcastIntentLocked", "接收短信");
                            BroadcastRecord oldRecord = replacePending2 ? queue2.replaceOrderedBroadcastLocked(r2) : null;
                            if (oldRecord == null) {
                                queue2.enqueueOrderedBroadcastLocked(r2);
                                queue2.scheduleBroadcastsLocked();
                            } else if (oldRecord.resultTo != null) {
                                try {
                                    broadcastQueueForIntent(oldRecord.intent).performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo, oldRecord.intent, 0, null, null, false, false, oldRecord.userId);
                                } catch (RemoteException e4) {
                                    Slog.w(TAG, "Failure [" + queue2.mQueueName + "] sending broadcast result of " + intent3, e4);
                                }
                            }
                            return 0;
                        } else if (intent3.getComponent() == null || intent3.getPackage() != null) {
                            return 0;
                        } else {
                            if ((intent3.getFlags() & i3) != 0) {
                                return 0;
                            }
                            addBroadcastStatLocked(intent3.getAction(), callerPackage, 0, 0, 0);
                            return 0;
                        }
                    }
                } else {
                    iIntentReceiver = resultTo;
                }
                processQueue2 = getProcessBroadcastQueue(callerApp, callerPackage, intent3);
                if (processQueue2.getMtmBRManager() == null) {
                    brOptions3 = brOptions2;
                    processQueue2.getMtmBRManager().iawareFilterBroadcast(intent3, new ProcessRecordEx(callerApp), callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, new BroadcastOptionsEx(brOptions3), receivers, BroadcastFilterEx.getBfExList(registeredReceivers), new IIntentReceiverEx(iIntentReceiver), resultCode, resultData, resultExtras, ordered, sticky, false, userId5, allowBackgroundActivityStarts2, timeoutExempt);
                } else {
                    brOptions3 = brOptions2;
                }
                processQueue = processQueue2;
                if ((intent3.getFlags() & 536870912) != 0) {
                }
                StringBuilder sb22 = new StringBuilder();
                sb22.append("sendBroadcast,caller:");
                sb22.append(callerApp == null ? callerPackage : callerApp);
                sb22.append(",act:");
                sb22.append(intent3.getAction());
                sb22.append(",rep:");
                sb22.append(replacePending);
                sb22.append(",ord:");
                sb22.append(ordered);
                sb22.append(",cmp:");
                sb22.append(intent3.getComponent() != null);
                sb22.append(",mftNum:");
                sb22.append(receivers == null ? 0 : receivers.size());
                sb22.append(",rgtNum:");
                sb22.append(registeredReceivers == null ? 0 : registeredReceivers.size());
                if (callerApp == null) {
                }
                sb22.append((callerApp == null || callerPackage != null || !"android.intent.action.MEDIA_MOUNTED".equals(intent3.getAction())) ? "" : "called by: " + Debug.getCallers(8));
                Flog.i(104, sb22.toString());
                if (registeredReceivers != null) {
                }
                if (!ordered) {
                }
                replacePending2 = replacePending;
                str2 = callerPackage;
                processRecord = callerApp;
                brOptions4 = brOptions3;
                i6 = 1;
                registeredReceivers2 = registeredReceivers;
                NR2 = NR;
                int ir52 = 0;
                if (receivers != null) {
                }
                while (ir < NR2) {
                }
                if (isCallerSystem) {
                }
                if (receivers2 == null) {
                }
                if (intent3.getComponent() == null) {
                }
                return 0;
            }
            isCallerSystem = true;
            if (!isCallerSystem) {
            }
            boolean timeoutExempt22 = false;
            if (action4 == null) {
            }
            if (sticky) {
            }
            if (userId5 != timeFormatPreferenceMsgValue) {
            }
            receivers = null;
            List<BroadcastFilter> registeredReceivers32 = null;
            if ((intent3.getFlags() & i3) != 0) {
            }
            if (intent3.getComponent() == null) {
            }
            if (registeredReceivers != null) {
            }
            iIntentReceiver = resultTo;
            if (iIntentReceiver == null) {
            }
            processQueue2 = getProcessBroadcastQueue(callerApp, callerPackage, intent3);
            if (processQueue2.getMtmBRManager() == null) {
            }
            processQueue = processQueue2;
            if ((intent3.getFlags() & 536870912) != 0) {
            }
            StringBuilder sb222 = new StringBuilder();
            sb222.append("sendBroadcast,caller:");
            sb222.append(callerApp == null ? callerPackage : callerApp);
            sb222.append(",act:");
            sb222.append(intent3.getAction());
            sb222.append(",rep:");
            sb222.append(replacePending);
            sb222.append(",ord:");
            sb222.append(ordered);
            sb222.append(",cmp:");
            sb222.append(intent3.getComponent() != null);
            sb222.append(",mftNum:");
            sb222.append(receivers == null ? 0 : receivers.size());
            sb222.append(",rgtNum:");
            sb222.append(registeredReceivers == null ? 0 : registeredReceivers.size());
            if (callerApp == null) {
            }
            sb222.append((callerApp == null || callerPackage != null || !"android.intent.action.MEDIA_MOUNTED".equals(intent3.getAction())) ? "" : "called by: " + Debug.getCallers(8));
            Flog.i(104, sb222.toString());
            if (registeredReceivers != null) {
            }
            if (!ordered) {
            }
            replacePending2 = replacePending;
            str2 = callerPackage;
            processRecord = callerApp;
            brOptions4 = brOptions3;
            i6 = 1;
            registeredReceivers2 = registeredReceivers;
            NR2 = NR;
            int ir522 = 0;
            if (receivers != null) {
            }
            while (ir < NR2) {
            }
            if (isCallerSystem) {
            }
            if (receivers2 == null) {
            }
            if (intent3.getComponent() == null) {
            }
            return 0;
        } catch (RemoteException e5) {
            Slog.w(TAG, "Remote exception", e5);
            return 0;
        }
    }

    private int getUidFromIntent(Intent intent) {
        if (intent == null) {
            return -1;
        }
        Bundle intentExtras = intent.getExtras();
        if (intent.hasExtra("android.intent.extra.UID")) {
            return intentExtras.getInt("android.intent.extra.UID");
        }
        return -1;
    }

    /* access modifiers changed from: package-private */
    public final void rotateBroadcastStatsIfNeededLocked() {
        long now = SystemClock.elapsedRealtime();
        BroadcastStats broadcastStats = this.mCurBroadcastStats;
        if (broadcastStats == null || broadcastStats.mStartRealtime + 86400000 < now) {
            this.mLastBroadcastStats = this.mCurBroadcastStats;
            BroadcastStats broadcastStats2 = this.mLastBroadcastStats;
            if (broadcastStats2 != null) {
                broadcastStats2.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    /* access modifiers changed from: package-private */
    public final void addBroadcastStatLocked(String action, String srcPackage, int receiveCount, int skipCount, long dispatchTime) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(action, srcPackage, receiveCount, skipCount, dispatchTime);
    }

    /* access modifiers changed from: package-private */
    public final void addBackgroundCheckViolationLocked(String action, String targetPackage) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(action, targetPackage);
    }

    /* access modifiers changed from: package-private */
    public final Intent verifyBroadcastLocked(Intent intent) {
        int callingUid;
        if (intent == null || !intent.hasFileDescriptors()) {
            int flags = intent.getFlags();
            if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
                Slog.e(TAG, "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
                throw new IllegalStateException("Cannot broadcast before boot completed");
            } else if ((33554432 & flags) == 0) {
                if (!((flags & DumpState.DUMP_CHANGES) == 0 || (callingUid = Binder.getCallingUid()) == 0 || callingUid == 2000)) {
                    Slog.w(TAG, "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + Binder.getCallingUid());
                    intent.removeFlags(DumpState.DUMP_CHANGES);
                }
                return intent;
            } else {
                throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public final int broadcastIntent(IApplicationThread caller, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        Throwable th;
        Throwable th2;
        String str;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_BROADCASTINTENT, new Object[]{intent});
        enforceNotIsolatedCaller("broadcastIntent");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                Intent intent2 = verifyBroadcastLocked(intent);
                try {
                    ProcessRecord callerApp = getRecordForAppLocked(caller);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    if (callerApp != null) {
                        try {
                            str = callerApp.info.packageName;
                        } catch (Throwable th3) {
                            th2 = th3;
                        }
                    } else {
                        str = null;
                    }
                    try {
                        int broadcastIntentLocked = broadcastIntentLocked(callerApp, str, intent2, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, appOp, bOptions, serialized, sticky, callingPid, callingUid, callingUid, callingPid, userId);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return broadcastIntentLocked;
                    } catch (Throwable th4) {
                        th2 = th4;
                        Binder.restoreCallingIdentity(origId);
                        throw th2;
                    }
                } catch (Throwable th5) {
                    th = th5;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th6) {
                th = th6;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public int broadcastIntentInPackage(String packageName, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId, boolean allowBackgroundActivityStarts) {
        Throwable th;
        Intent intent2;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mHwAMSEx.removePackageStopFlag(packageName, uid, resolvedType, resultCode, requiredPermission, bOptions, userId);
                intent2 = intent;
                try {
                    Intent intent3 = verifyBroadcastLocked(intent2);
                    try {
                        long origId = Binder.clearCallingIdentity();
                        try {
                            int broadcastIntentLocked = broadcastIntentLocked(null, packageName, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermission == null ? null : new String[]{requiredPermission}, -1, bOptions, serialized, sticky, -1, uid, realCallingUid, realCallingPid, userId, allowBackgroundActivityStarts);
                            resetPriorityAfterLockedSection();
                            return broadcastIntentLocked;
                        } finally {
                            Binder.restoreCallingIdentity(origId);
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                intent2 = intent;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void unbroadcastIntent(IApplicationThread caller, Intent intent, int userId) {
        if (intent == null || !intent.hasFileDescriptors()) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 0, "removeStickyBroadcast", null);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.BROADCAST_STICKY") == 0) {
                        ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(userId2);
                        if (stickies != null) {
                            ArrayList<Intent> list = stickies.get(intent.getAction());
                            if (list != null) {
                                int N = list.size();
                                int i = 0;
                                while (true) {
                                    if (i >= N) {
                                        break;
                                    } else if (intent.filterEquals(list.get(i))) {
                                        list.remove(i);
                                        break;
                                    } else {
                                        i++;
                                    }
                                }
                                if (list.size() <= 0) {
                                    stickies.remove(intent.getAction());
                                }
                            }
                            if (stickies.size() <= 0) {
                                this.mStickyBroadcasts.remove(userId2);
                            }
                        }
                    } else {
                        String msg = "Permission Denial: unbroadcastIntent() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.BROADCAST_STICKY";
                        Slog.w(TAG, msg);
                        throw new SecurityException(msg);
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    /* access modifiers changed from: package-private */
    public void backgroundServicesFinishedLocked(int userId) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.backgroundServicesFinishedLocked(userId);
        }
    }

    public void finishReceiver(IBinder who, int resultCode, String resultData, Bundle resultExtras, boolean resultAbort, int flags) {
        Throwable th;
        BroadcastRecord r;
        BroadcastQueue queue;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG, "Finish receiver: " + who);
        }
        if (resultExtras == null || !resultExtras.hasFileDescriptors()) {
            long origId = Binder.clearCallingIdentity();
            boolean doNext = false;
            BroadcastRecord r2 = null;
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if ((flags & 4096) != 0) {
                            BroadcastQueue keyQueue = (flags & 268435456) != 0 ? this.mFgKeyAppBroadcastQueue : this.mBgKeyAppBroadcastQueue;
                            if (keyQueue != null) {
                                r2 = keyQueue.getMatchingOrderedReceiver(who);
                            }
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slog.v(TAG, "Finish receiver find key broadcast: " + r2);
                            }
                            r = r2;
                        } else if ((flags & 8192) != 0) {
                            BroadcastQueue thirdPartyQueue = (flags & 268435456) != 0 ? this.mFgThirdAppBroadcastQueue : this.mBgThirdAppBroadcastQueue;
                            if (thirdPartyQueue != null) {
                                r2 = thirdPartyQueue.getMatchingOrderedReceiver(who);
                            }
                            r = r2;
                        } else {
                            if (isOnOffloadQueue(flags)) {
                                queue = this.mOffloadBroadcastQueue;
                            } else {
                                queue = (flags & 268435456) != 0 ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
                            }
                            r = queue.getMatchingOrderedReceiver(who);
                        }
                        if (r != null) {
                            try {
                                doNext = r.queue.finishReceiverLocked(r, resultCode, resultData, resultExtras, resultAbort, true);
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        if (doNext) {
                            r.queue.processNextBroadcastLocked(false, true);
                        }
                        trimApplicationsLocked("updateOomAdj_finishReceiver");
                        resetPriorityAfterLockedSection();
                    } catch (Throwable th3) {
                        th = th3;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:53:0x016d  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x016f  */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x0184  */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x01d3 A[SYNTHETIC, Splitter:B:74:0x01d3] */
    /* JADX WARNING: Removed duplicated region for block: B:83:0x01e8  */
    /* JADX WARNING: Removed duplicated region for block: B:88:0x0211 A[Catch:{ all -> 0x022f }] */
    public boolean startInstrumentation(ComponentName className, String profileFile, int flags, Bundle arguments, IInstrumentationWatcher watcher, IUiAutomationConnection uiAutomationConnection, int userId, String abiOverride) {
        Throwable th;
        ApplicationInfo ai;
        InstrumentationInfo ii;
        String defProcess;
        boolean disableHiddenApiChecks;
        enforceNotIsolatedCaller("startInstrumentation");
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        int userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 2, "startInstrumentation", null);
        if (arguments == null || !arguments.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    InstrumentationInfo ii2 = null;
                    try {
                        ii2 = this.mContext.getPackageManager().getInstrumentationInfo(className, 1024);
                        ai = AppGlobals.getPackageManager().getApplicationInfo(ii2.targetPackage, 1024, userId2);
                        ii = ii2;
                    } catch (PackageManager.NameNotFoundException e) {
                        ii = ii2;
                        ai = null;
                    } catch (RemoteException e2) {
                        ii = ii2;
                        ai = null;
                    }
                    if (ii == null) {
                        try {
                            reportStartInstrumentationFailureLocked(watcher, className, "Unable to find instrumentation info for: " + className);
                            resetPriorityAfterLockedSection();
                            return false;
                        } catch (Throwable th2) {
                            th = th2;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else if (ai == null) {
                        reportStartInstrumentationFailureLocked(watcher, className, "Unable to find instrumentation target package: " + ii.targetPackage);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (!ai.hasCode()) {
                        reportStartInstrumentationFailureLocked(watcher, className, "Instrumentation target has no code: " + ii.targetPackage);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else {
                        int match = this.mContext.getPackageManager().checkSignatures(ii.targetPackage, ii.packageName);
                        if (match >= 0 || match == -1) {
                            ActiveInstrumentation activeInstr = new ActiveInstrumentation(this);
                            activeInstr.mClass = className;
                            String defProcess2 = ai.processName;
                            if (ii.targetProcesses == null) {
                                activeInstr.mTargetProcesses = new String[]{ai.processName};
                            } else if (ii.targetProcesses.equals("*")) {
                                activeInstr.mTargetProcesses = new String[0];
                            } else {
                                activeInstr.mTargetProcesses = ii.targetProcesses.split(",");
                                defProcess = activeInstr.mTargetProcesses[0];
                                activeInstr.mTargetInfo = ai;
                                activeInstr.mProfileFile = profileFile;
                                activeInstr.mArguments = arguments;
                                activeInstr.mWatcher = watcher;
                                activeInstr.mUiAutomationConnection = uiAutomationConnection;
                                activeInstr.mResultClass = className;
                                activeInstr.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid) != 0;
                                disableHiddenApiChecks = !ai.usesNonSdkApi() || (flags & 1) != 0;
                                if (disableHiddenApiChecks) {
                                    enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                                }
                                boolean mountExtStorageFull = !isCallerShell() && (flags & 2) != 0;
                                long origId = Binder.clearCallingIdentity();
                                forceStopPackageLocked(ii.targetPackage, -1, true, false, true, true, false, userId2, "start instr");
                                if (this.mUsageStatsService == null) {
                                    try {
                                        try {
                                            this.mUsageStatsService.reportEvent(ii.targetPackage, userId2, 6);
                                        } catch (Throwable th3) {
                                            th = th3;
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                ProcessRecord app = addAppLocked(ai, defProcess, false, disableHiddenApiChecks, mountExtStorageFull, abiOverride);
                                app.setActiveInstrumentation(activeInstr);
                                activeInstr.mFinished = false;
                                activeInstr.mRunningProcesses.add(app);
                                if (!this.mActiveInstrumentation.contains(activeInstr)) {
                                    this.mActiveInstrumentation.add(activeInstr);
                                }
                                Binder.restoreCallingIdentity(origId);
                                resetPriorityAfterLockedSection();
                                return true;
                            }
                            defProcess = defProcess2;
                            activeInstr.mTargetInfo = ai;
                            activeInstr.mProfileFile = profileFile;
                            activeInstr.mArguments = arguments;
                            activeInstr.mWatcher = watcher;
                            activeInstr.mUiAutomationConnection = uiAutomationConnection;
                            activeInstr.mResultClass = className;
                            activeInstr.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid) != 0;
                            if (!ai.usesNonSdkApi()) {
                            }
                            if (disableHiddenApiChecks) {
                            }
                            if (!isCallerShell()) {
                            }
                            long origId2 = Binder.clearCallingIdentity();
                            try {
                                forceStopPackageLocked(ii.targetPackage, -1, true, false, true, true, false, userId2, "start instr");
                                if (this.mUsageStatsService == null) {
                                }
                            } catch (Throwable th5) {
                                th = th5;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                            try {
                                ProcessRecord app2 = addAppLocked(ai, defProcess, false, disableHiddenApiChecks, mountExtStorageFull, abiOverride);
                                app2.setActiveInstrumentation(activeInstr);
                                activeInstr.mFinished = false;
                                activeInstr.mRunningProcesses.add(app2);
                                if (!this.mActiveInstrumentation.contains(activeInstr)) {
                                }
                                Binder.restoreCallingIdentity(origId2);
                                resetPriorityAfterLockedSection();
                                return true;
                            } catch (Throwable th6) {
                                th = th6;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            String msg = "Permission Denial: starting instrumentation " + className + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingPid() + " not allowed because package " + ii.packageName + " does not have a signature matching the target " + ii.targetPackage;
                            reportStartInstrumentationFailureLocked(watcher, className, msg);
                            throw new SecurityException(msg);
                        }
                    }
                } catch (Throwable th7) {
                    th = th7;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
    }

    private boolean isCallerShell() {
        int callingUid = Binder.getCallingUid();
        return callingUid == 2000 || callingUid == 0;
    }

    private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher, ComponentName cn, String report) {
        Slog.w(TAG, report);
        if (watcher != null) {
            Bundle results = new Bundle();
            results.putString("id", "ActivityManagerService");
            results.putString("Error", report);
            this.mInstrumentationReporter.reportStatus(watcher, cn, -1, results);
        }
    }

    /* access modifiers changed from: package-private */
    public void addInstrumentationResultsLocked(ProcessRecord app, Bundle results) {
        ActiveInstrumentation instr = app.getActiveInstrumentation();
        if (instr == null) {
            Slog.w(TAG, "finishInstrumentation called on non-instrumented: " + app);
        } else if (!instr.mFinished && results != null) {
            if (instr.mCurResults == null) {
                instr.mCurResults = new Bundle(results);
            } else {
                instr.mCurResults.putAll(results);
            }
        }
    }

    public void addInstrumentationResults(IApplicationThread target, Bundle results) {
        UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        Slog.w(TAG, "addInstrumentationResults: no app for " + target);
                        return;
                    }
                    long origId = Binder.clearCallingIdentity();
                    addInstrumentationResultsLocked(app, results);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results) {
        ActiveInstrumentation instr = app.getActiveInstrumentation();
        if (instr == null) {
            Slog.w(TAG, "finishInstrumentation called on non-instrumented: " + app);
            return;
        }
        if (!instr.mFinished) {
            if (instr.mWatcher != null) {
                Bundle finalResults = instr.mCurResults;
                if (finalResults == null) {
                    finalResults = results;
                } else if (!(instr.mCurResults == null || results == null)) {
                    finalResults.putAll(results);
                }
                this.mInstrumentationReporter.reportFinished(instr.mWatcher, instr.mClass, resultCode, finalResults);
            }
            if (instr.mUiAutomationConnection != null) {
                this.mAppOpsService.setAppOpsServiceDelegate(null);
                getPackageManagerInternalLocked().setCheckPermissionDelegate((PackageManagerInternal.CheckPermissionDelegate) null);
                this.mHandler.obtainMessage(56, instr.mUiAutomationConnection).sendToTarget();
            }
            instr.mFinished = true;
        }
        instr.removeProcess(app);
        app.setActiveInstrumentation(null);
        forceStopPackageLocked(app.info.packageName, -1, false, false, true, true, false, app.userId, "finished inst");
    }

    public void finishInstrumentation(IApplicationThread target, int resultCode, Bundle results) {
        UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        Slog.w(TAG, "finishInstrumentation: no app for " + target);
                        return;
                    }
                    long origId = Binder.clearCallingIdentity();
                    finishInstrumentationLocked(app, resultCode, results);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public ActivityManager.StackInfo getFocusedStackInfo() throws RemoteException {
        return this.mActivityTaskManager.getFocusedStackInfo();
    }

    public Configuration getConfiguration() {
        return this.mActivityTaskManager.getConfiguration();
    }

    public void suppressResizeConfigChanges(boolean suppress) throws RemoteException {
        this.mActivityTaskManager.suppressResizeConfigChanges(suppress);
    }

    public void updatePersistentConfiguration(Configuration values) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()");
        if (values != null) {
            Slog.i(TAG, "updatePersistentConfiguration values:" + values + " caller:" + getCallingPid());
            this.mActivityTaskManager.updatePersistentConfiguration(values, this.mUserController.getCurrentUserId());
            return;
        }
        throw new NullPointerException("Configuration must not be null");
    }

    private void enforceWriteSettingsPermission(String func) {
        int uid = Binder.getCallingUid();
        if (uid != 0) {
            Context context = this.mContext;
            if (!Settings.checkAndNoteWriteSettingsOperation(context, uid, Settings.getPackageNameForUid(context, uid), false)) {
                String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + uid + " requires android.permission.WRITE_SETTINGS";
                Slog.w(TAG, msg);
                throw new SecurityException(msg);
            }
        }
    }

    public boolean updateConfiguration(Configuration values) {
        Slog.i(TAG, "updateConfiguration values:" + values + " caller:" + getCallingPid());
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_UPDATECONFIGURATION);
        return this.mActivityTaskManager.updateConfiguration(values);
    }

    public int getLaunchedFromUid(IBinder activityToken) {
        return this.mActivityTaskManager.getLaunchedFromUid(activityToken);
    }

    public String getLaunchedFromPackage(IBinder activityToken) {
        return this.mActivityTaskManager.getLaunchedFromPackage(activityToken);
    }

    /* access modifiers changed from: package-private */
    public boolean isReceivingBroadcastLocked(ProcessRecord app, ArraySet<BroadcastQueue> receivingQueues) {
        int N = app.curReceivers.size();
        if (N > 0) {
            for (int i = 0; i < N; i++) {
                receivingQueues.add(app.curReceivers.valueAt(i).queue);
            }
            return true;
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        for (BroadcastQueue queue : broadcastQueueArr) {
            BroadcastRecord r = queue.mPendingBroadcast;
            if (r != null && r.curApp == app) {
                receivingQueues.add(queue);
            }
        }
        return true ^ receivingQueues.isEmpty();
    }

    /* access modifiers changed from: package-private */
    public Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState, int targetUid, long targetVersionCode, ComponentName targetComponent, String targetProcess) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components;
        SparseArray<ArrayMap<String, Association>> sourceUids;
        ArrayMap<String, Association> sourceProcesses;
        if (!this.mTrackingAssociations) {
            return null;
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components2 = this.mAssociations.get(targetUid);
        if (components2 == null) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components3 = new ArrayMap<>();
            this.mAssociations.put(targetUid, components3);
            components = components3;
        } else {
            components = components2;
        }
        SparseArray<ArrayMap<String, Association>> sourceUids2 = components.get(targetComponent);
        if (sourceUids2 == null) {
            SparseArray<ArrayMap<String, Association>> sourceUids3 = new SparseArray<>();
            components.put(targetComponent, sourceUids3);
            sourceUids = sourceUids3;
        } else {
            sourceUids = sourceUids2;
        }
        ArrayMap<String, Association> sourceProcesses2 = sourceUids.get(sourceUid);
        if (sourceProcesses2 == null) {
            ArrayMap<String, Association> sourceProcesses3 = new ArrayMap<>();
            sourceUids.put(sourceUid, sourceProcesses3);
            sourceProcesses = sourceProcesses3;
        } else {
            sourceProcesses = sourceProcesses2;
        }
        Association ass = sourceProcesses.get(sourceProcess);
        if (ass == null) {
            ass = new Association(sourceUid, sourceProcess, targetUid, targetComponent, targetProcess);
            sourceProcesses.put(sourceProcess, ass);
        }
        ass.mCount++;
        ass.mNesting++;
        if (ass.mNesting == 1) {
            long uptimeMillis = SystemClock.uptimeMillis();
            ass.mLastStateUptime = uptimeMillis;
            ass.mStartTime = uptimeMillis;
            ass.mLastState = sourceState;
        }
        return ass;
    }

    /* access modifiers changed from: package-private */
    public void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid, long targetVersionCode, ComponentName targetComponent, String targetProcess) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components;
        SparseArray<ArrayMap<String, Association>> sourceUids;
        ArrayMap<String, Association> sourceProcesses;
        if (this.mTrackingAssociations && (components = this.mAssociations.get(targetUid)) != null && (sourceUids = components.get(targetComponent)) != null && (sourceProcesses = sourceUids.get(sourceUid)) != null) {
            Association ass = sourceProcesses.get(sourceProcess);
            if (ass == null) {
                return;
            }
            if (ass.mNesting > 0) {
                ass.mNesting--;
                if (ass.mNesting == 0) {
                    long uptime = SystemClock.uptimeMillis();
                    ass.mTime += uptime - ass.mStartTime;
                    long[] jArr = ass.mStateTimes;
                    int i = ass.mLastState + 0;
                    jArr[i] = jArr[i] + (uptime - ass.mLastStateUptime);
                    ass.mLastState = 23;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void noteUidProcessState(int uid, int state) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        int N1;
        ActivityManagerService activityManagerService = this;
        activityManagerService.mBatteryStatsService.noteUidProcessState(uid, state);
        activityManagerService.mAppOpsService.updateUidProcState(uid, state);
        if (activityManagerService.mTrackingAssociations) {
            int i1 = 0;
            int N12 = activityManagerService.mAssociations.size();
            while (i1 < N12) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
                int i2 = 0;
                int N2 = targetComponents2.size();
                while (i2 < N2) {
                    ArrayMap<String, Association> sourceProcesses = targetComponents2.valueAt(i2).get(uid);
                    if (sourceProcesses != null) {
                        int i4 = 0;
                        int N4 = sourceProcesses.size();
                        while (i4 < N4) {
                            Association ass = sourceProcesses.valueAt(i4);
                            if (ass.mNesting >= 1) {
                                long uptime = SystemClock.uptimeMillis();
                                long[] jArr = ass.mStateTimes;
                                int i = ass.mLastState + 0;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                jArr[i] = jArr[i] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = state;
                                ass.mLastStateUptime = uptime;
                            } else {
                                N1 = N12;
                                targetComponents = targetComponents2;
                            }
                            i4++;
                            N12 = N1;
                            targetComponents2 = targetComponents;
                        }
                    }
                    i2++;
                    N12 = N12;
                    targetComponents2 = targetComponents2;
                }
                i1++;
                activityManagerService = this;
            }
        }
    }

    /* access modifiers changed from: private */
    public static final class RecordPssRunnable implements Runnable {
        private final File mHeapdumpFile;
        private final ProcessRecord mProc;
        private final ActivityManagerService mService;

        RecordPssRunnable(ActivityManagerService service, ProcessRecord proc, File heapdumpFile) {
            this.mService = service;
            this.mProc = proc;
            this.mHeapdumpFile = heapdumpFile;
        }

        @Override // java.lang.Runnable
        public void run() {
            this.mService.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
            ParcelFileDescriptor fd = null;
            try {
                this.mHeapdumpFile.delete();
                fd = ParcelFileDescriptor.open(this.mHeapdumpFile, 771751936);
                IApplicationThread thread = this.mProc.thread;
                if (thread != null) {
                    try {
                        if (ActivityManagerDebugConfig.DEBUG_PSS) {
                            Slog.d(ActivityManagerService.TAG, "Requesting dump heap from " + this.mProc + " to " + this.mHeapdumpFile);
                        }
                        thread.dumpHeap(true, false, false, this.mHeapdumpFile.toString(), fd, (RemoteCallback) null);
                    } catch (RemoteException e) {
                    }
                }
                if (fd != null) {
                    try {
                        fd.close();
                    } catch (IOException e2) {
                    }
                }
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
                if (fd != null) {
                    fd.close();
                }
            } catch (Throwable th) {
                if (fd != null) {
                    try {
                        fd.close();
                    } catch (IOException e4) {
                    }
                }
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss, long rss, int statType, long pssDuration, long now) {
        long j;
        if (proc.info != null) {
            this.mDAProxy.addPssToMap(proc.info.packageName, proc.processName, proc.info.uid, proc.pid, procState, pss, uss, swapPss, this.mTestPssMode);
        }
        EventLogTags.writeAmPss(proc.pid, proc.uid, proc.processName, pss * 1024, uss * 1024, swapPss * 1024, rss * 1024, statType, procState, pssDuration);
        proc.lastPssTime = now;
        proc.baseProcessTracker.addPss(pss, uss, rss, true, statType, pssDuration, proc.pkgList.mPkgList);
        for (int ipkg = proc.pkgList.mPkgList.size() - 1; ipkg >= 0; ipkg--) {
            ProcessStats.ProcessStateHolder holder = proc.pkgList.valueAt(ipkg);
            StatsLog.write(18, proc.info.uid, holder.state.getName(), holder.state.getPackage(), pss, uss, rss, statType, pssDuration, holder.appVersion);
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            StringBuilder sb = new StringBuilder();
            sb.append("pss of ");
            sb.append(proc.toShortString());
            sb.append(": ");
            j = pss;
            sb.append(j);
            sb.append(" lastPss=");
            sb.append(proc.lastPss);
            sb.append(" state=");
            sb.append(ProcessList.makeProcStateString(procState));
            Slog.d(TAG, sb.toString());
        } else {
            j = pss;
        }
        if (proc.initialIdlePss == 0) {
            proc.initialIdlePss = j;
        }
        proc.lastPss = j;
        proc.lastSwapPss = swapPss;
        if (procState >= 15) {
            proc.lastCachedPss = j;
            proc.lastCachedSwapPss = swapPss;
        }
        SparseArray<Pair<Long, String>> watchUids = (SparseArray) this.mMemWatchProcesses.getMap().get(proc.processName);
        Long check = null;
        if (watchUids != null) {
            Pair<Long, String> val = watchUids.get(proc.uid);
            if (val == null) {
                val = watchUids.get(0);
            }
            if (val != null) {
                check = (Long) val.first;
            }
        }
        if (check != null && j * 1024 >= check.longValue() && proc.thread != null && this.mMemWatchDumpProcName == null) {
            boolean isDebuggable = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
            if (!isDebuggable && (proc.info.flags & 2) != 0) {
                isDebuggable = true;
            }
            if (isDebuggable) {
                Slog.w(TAG, "Process " + proc + " exceeded pss limit " + check + "; reporting");
                startHeapDumpLocked(proc, false);
                return;
            }
            Slog.w(TAG, "Process " + proc + " exceeded pss limit " + check + ", but debugging not enabled");
        }
    }

    private void startHeapDumpLocked(ProcessRecord proc, boolean isUserInitiated) {
        File heapdumpFile = DumpHeapProvider.getJavaFile();
        this.mMemWatchDumpProcName = proc.processName;
        this.mMemWatchDumpFile = heapdumpFile.toString();
        this.mMemWatchDumpPid = proc.pid;
        this.mMemWatchDumpUid = proc.uid;
        this.mMemWatchIsUserInitiated = isUserInitiated;
        BackgroundThread.getHandler().post(new RecordPssRunnable(this, proc, heapdumpFile));
    }

    /* access modifiers changed from: package-private */
    public boolean requestPssLocked(ProcessRecord proc, int procState) {
        if (this.mPendingPssProcesses.contains(proc)) {
            return false;
        }
        if (this.mPendingPssProcesses.size() == 0) {
            long deferral = (this.mPssDeferralTime <= 0 || this.mActivityStartingNesting.get() <= 0) ? 0 : this.mPssDeferralTime;
            if (ActivityManagerDebugConfig.DEBUG_PSS && deferral > 0) {
                Slog.d(TAG, "requestPssLocked() deferring PSS request by " + deferral + " ms");
            }
            this.mBgHandler.sendEmptyMessageDelayed(1, deferral);
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            Slog.d(TAG, "Requesting pss of: " + proc);
        }
        proc.pssProcState = procState;
        proc.pssStatType = 0;
        this.mPendingPssProcesses.add(proc);
        return true;
    }

    private void deferPssIfNeededLocked() {
        if (this.mPendingPssProcesses.size() > 0) {
            this.mBgHandler.removeMessages(1);
            this.mBgHandler.sendEmptyMessageDelayed(1, this.mPssDeferralTime);
        }
    }

    /* access modifiers changed from: private */
    /* access modifiers changed from: public */
    private void deferPssForActivityStart() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mPssDeferralTime > 0) {
                    if (ActivityManagerDebugConfig.DEBUG_PSS) {
                        Slog.d(TAG, "Deferring PSS collection for activity start");
                    }
                    deferPssIfNeededLocked();
                    this.mActivityStartingNesting.getAndIncrement();
                    this.mBgHandler.sendEmptyMessageDelayed(3, this.mPssDeferralTime);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void requestPssAllProcsLocked(long now, boolean always, boolean memLowered) {
        long j;
        if (!always) {
            long j2 = this.mLastFullPssTime;
            if (memLowered) {
                j = this.mConstants.FULL_PSS_LOWERED_INTERVAL;
            } else {
                j = this.mConstants.FULL_PSS_MIN_INTERVAL;
            }
            if (now < j2 + j) {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            Slog.d(TAG, "Requesting pss of all procs!  memLowered=" + memLowered);
        }
        this.mLastFullPssTime = now;
        this.mFullPssPending = true;
        for (int i = this.mPendingPssProcesses.size() - 1; i >= 0; i--) {
            ProcessList.abortNextPssTime(this.mPendingPssProcesses.get(i).procStateMemTracker);
        }
        this.mPendingPssProcesses.ensureCapacity(this.mProcessList.getLruSizeLocked());
        this.mPendingPssProcesses.clear();
        for (int i2 = this.mProcessList.getLruSizeLocked() - 1; i2 >= 0; i2--) {
            ProcessRecord app = this.mProcessList.mLruProcesses.get(i2);
            if (!(app.thread == null || app.getCurProcState() == 21 || (!memLowered && ((!always || now <= app.lastStateTime + 1000) && now <= app.lastStateTime + 1200000)))) {
                app.pssProcState = app.setProcState;
                app.pssStatType = always ? 2 : 1;
                app.nextPssTime = ProcessList.computeNextPssTime(app.getCurProcState(), app.procStateMemTracker, this.mTestPssMode, this.mAtmInternal.isSleeping(), now);
                this.mPendingPssProcesses.add(app);
            }
        }
        if (!this.mBgHandler.hasMessages(1)) {
            this.mBgHandler.sendEmptyMessage(1);
        }
    }

    public void setTestPssMode(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mTestPssMode = enabled;
                if (enabled) {
                    requestPssAllProcsLocked(SystemClock.uptimeMillis(), true, true);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcLocked(ProcessRecord app) {
        try {
            app.lastRequestedGc = SystemClock.uptimeMillis();
            if (app.thread == null) {
                return;
            }
            if (app.reportLowMemory) {
                app.reportLowMemory = false;
                app.thread.scheduleLowMemory();
                return;
            }
            app.thread.processInBackground();
        } catch (Exception e) {
        }
    }

    private final boolean canGcNowLocked() {
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        for (BroadcastQueue q : broadcastQueueArr) {
            if (!q.mParallelBroadcasts.isEmpty() || !q.mDispatcher.isEmpty()) {
                return false;
            }
        }
        return this.mAtmInternal.canGcNow();
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:17:0x0047 A[EDGE_INSN: B:17:0x0047->B:16:0x0047 ?: BREAK  , SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:7:0x0017  */
    public final void performAppGcsLocked() {
        ProcessRecord proc;
        if (this.mProcessesToGc.size() > 0 && canGcNowLocked()) {
            while (true) {
                if (this.mProcessesToGc.size() <= 0) {
                    proc = this.mProcessesToGc.remove(0);
                    if (proc.getCurRawAdj() > 200 || proc.reportLowMemory) {
                        break;
                    }
                    if (this.mProcessesToGc.size() <= 0) {
                        break;
                    }
                }
            }
            if (proc.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis()) {
                performAppGcLocked(proc);
                scheduleAppGcsLocked();
                return;
            }
            addProcessToGcListLocked(proc);
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcsIfAppropriateLocked() {
        if (canGcNowLocked()) {
            performAppGcsLocked();
        } else {
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public final void scheduleAppGcsLocked() {
        this.mHandler.removeMessages(5);
        if (this.mProcessesToGc.size() > 0) {
            Message msg = this.mHandler.obtainMessage(5);
            long when = this.mProcessesToGc.get(0).lastRequestedGc + this.mConstants.GC_MIN_INTERVAL;
            long now = SystemClock.uptimeMillis();
            if (when < this.mConstants.GC_TIMEOUT + now) {
                when = now + this.mConstants.GC_TIMEOUT;
            }
            this.mHandler.sendMessageAtTime(msg, when);
        }
    }

    /* access modifiers changed from: package-private */
    public final void addProcessToGcListLocked(ProcessRecord proc) {
        boolean added = false;
        int i = this.mProcessesToGc.size() - 1;
        while (true) {
            if (i < 0) {
                break;
            } else if (this.mProcessesToGc.get(i).lastRequestedGc < proc.lastRequestedGc) {
                added = true;
                this.mProcessesToGc.add(i + 1, proc);
                break;
            } else {
                i--;
            }
        }
        if (!added) {
            this.mProcessesToGc.add(0, proc);
        }
    }

    /* access modifiers changed from: package-private */
    public final void scheduleAppGcLocked(ProcessRecord app) {
        if (app.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis() && !this.mProcessesToGc.contains(app)) {
            addProcessToGcListLocked(app);
            scheduleAppGcsLocked();
        }
    }

    /* JADX INFO: Multiple debug info for r12v11 'uptimeSince'  long: [D('cpuLimit' int), D('uptimeSince' long)] */
    /* access modifiers changed from: package-private */
    public final void checkExcessivePowerUsageLocked() {
        long curUptime;
        boolean doCpuKills;
        long j;
        long uptimeSince;
        ProcessRecord app;
        int cpuLimit;
        Throwable th;
        ActivityManagerService activityManagerService = this;
        updateCpuStatsNow();
        BatteryStatsImpl stats = activityManagerService.mBatteryStatsService.getActiveStatistics();
        long j2 = 0;
        boolean doCpuKills2 = activityManagerService.mLastPowerCheckUptime != 0;
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince2 = curUptime2 - activityManagerService.mLastPowerCheckUptime;
        activityManagerService.mLastPowerCheckUptime = curUptime2;
        int i = activityManagerService.mProcessList.mLruProcesses.size();
        while (i > 0) {
            int i2 = i - 1;
            ProcessRecord app2 = activityManagerService.mProcessList.mLruProcesses.get(i2);
            if (app2.setProcState < 15) {
                j = j2;
                doCpuKills = doCpuKills2;
                curUptime = curUptime2;
                uptimeSince = uptimeSince2;
            } else if (app2.lastCpuTime <= j2) {
                j = j2;
                doCpuKills = doCpuKills2;
                curUptime = curUptime2;
                uptimeSince = uptimeSince2;
            } else {
                long cputimeUsed = app2.curCpuTime - app2.lastCpuTime;
                if (ActivityManagerDebugConfig.DEBUG_POWER) {
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("CPU for ");
                    app2.toShortString(sb);
                    sb.append(": over ");
                    TimeUtils.formatDuration(uptimeSince2, sb);
                    sb.append(" used ");
                    TimeUtils.formatDuration(cputimeUsed, sb);
                    sb.append(" (");
                    sb.append((cputimeUsed * SINGLE_DISPATCH_THRESHOLD_MS) / uptimeSince2);
                    sb.append("%)");
                    Slog.i(TAG, sb.toString());
                }
                if (doCpuKills2) {
                    j = 0;
                    if (uptimeSince2 > 0) {
                        long checkDur = curUptime2 - app2.getWhenUnimportant();
                        doCpuKills = doCpuKills2;
                        curUptime = curUptime2;
                        if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL) {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_1;
                        } else if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL * 2 || app2.setProcState <= 15) {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_2;
                        } else if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL * 3) {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_3;
                        } else {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_4;
                        }
                        if ((SINGLE_DISPATCH_THRESHOLD_MS * cputimeUsed) / uptimeSince2 >= ((long) cpuLimit)) {
                            synchronized (stats) {
                                try {
                                    app = app2;
                                    uptimeSince = uptimeSince2;
                                    try {
                                        stats.reportExcessiveCpuLocked(app2.info.uid, app2.processName, uptimeSince2, cputimeUsed);
                                    } catch (Throwable th2) {
                                        th = th2;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th3) {
                                                th = th3;
                                            }
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                            }
                            app.kill("excessive cpu " + cputimeUsed + " during " + uptimeSince + " dur=" + checkDur + " limit=" + cpuLimit, true);
                            if (app.baseProcessTracker != null) {
                                app.baseProcessTracker.reportExcessiveCpu(app.pkgList.mPkgList);
                            }
                            for (int ipkg = app.pkgList.size() - 1; ipkg >= 0; ipkg--) {
                                ProcessStats.ProcessStateHolder holder = app.pkgList.valueAt(ipkg);
                                if (!(holder == null || holder.state == null)) {
                                    StatsLog.write(16, app.info.uid, holder.state.getName(), holder.state.getPackage(), holder.appVersion);
                                }
                            }
                        } else {
                            app = app2;
                            uptimeSince = uptimeSince2;
                        }
                        app.lastCpuTime = app.curCpuTime;
                    } else {
                        app = app2;
                        doCpuKills = doCpuKills2;
                        curUptime = curUptime2;
                    }
                } else {
                    app = app2;
                    doCpuKills = doCpuKills2;
                    curUptime = curUptime2;
                    j = 0;
                }
                uptimeSince = uptimeSince2;
                app.lastCpuTime = app.curCpuTime;
            }
            activityManagerService = this;
            uptimeSince2 = uptimeSince;
            i = i2;
            j2 = j;
            doCpuKills2 = doCpuKills;
            curUptime2 = curUptime;
        }
    }

    private boolean isEphemeralLocked(int uid) {
        String[] packages = this.mContext.getPackageManager().getPackagesForUid(uid);
        if (packages == null || packages.length != 1) {
            return false;
        }
        return getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packages[0]);
    }

    /* JADX INFO: Multiple debug info for r0v6 'pendingChange'  com.android.server.am.UidRecord$ChangeItem: [D('pendingChange' com.android.server.am.UidRecord$ChangeItem), D('NA' int)] */
    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public final void enqueueUidChangeLocked(UidRecord uidRec, int uid, int change) {
        UidRecord.ChangeItem pendingChange;
        UidRecord.ChangeItem pendingChange2;
        if (uidRec == null || uidRec.pendingChange == null) {
            if (this.mPendingUidChanges.size() == 0) {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    Slog.i(TAG, "*** Enqueueing dispatch uid changed!");
                }
                this.mUiHandler.obtainMessage(53).sendToTarget();
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int NA = this.mAvailUidChanges.size();
                    if (NA > 0) {
                        pendingChange2 = this.mAvailUidChanges.remove(NA - 1);
                        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                            Slog.i(TAG, "Retrieving available item: " + pendingChange2);
                        }
                    } else {
                        pendingChange2 = new UidRecord.ChangeItem();
                        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                            Slog.i(TAG, "Allocating new item: " + pendingChange2);
                        }
                    }
                    pendingChange = pendingChange2;
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            if (uidRec != null) {
                uidRec.pendingChange = pendingChange;
                if ((change & 1) != 0 && !uidRec.idle) {
                    change |= 2;
                }
            } else if (uid < 0) {
                throw new IllegalArgumentException("No UidRecord or uid");
            }
            pendingChange.uidRecord = uidRec;
            pendingChange.uid = uidRec != null ? uidRec.uid : uid;
            this.mPendingUidChanges.add(pendingChange);
        } else {
            pendingChange = uidRec.pendingChange;
            if ((change & 6) == 0) {
                change |= pendingChange.change & 6;
            }
            if ((change & 24) == 0) {
                change |= pendingChange.change & 24;
            }
            if ((change & 1) != 0) {
                change &= -13;
                if (!uidRec.idle) {
                    change |= 2;
                }
            }
        }
        pendingChange.change = change;
        pendingChange.processState = uidRec != null ? uidRec.setProcState : 21;
        pendingChange.ephemeral = uidRec != null ? uidRec.ephemeral : isEphemeralLocked(uid);
        pendingChange.procStateSeq = uidRec != null ? uidRec.curProcStateSeq : 0;
        if (uidRec != null) {
            uidRec.lastReportedChange = change;
            uidRec.updateLastDispatchedProcStateSeq(change);
        }
        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
        if (powerManagerInternal != null) {
            if ((change & 4) != 0) {
                powerManagerInternal.uidActive(pendingChange.uid);
            }
            if ((change & 2) != 0) {
                this.mLocalPowerManager.uidIdle(pendingChange.uid);
            }
            if ((change & 1) != 0) {
                this.mLocalPowerManager.uidGone(pendingChange.uid);
            } else {
                this.mLocalPowerManager.updateUidProcState(pendingChange.uid, pendingChange.processState);
            }
        }
    }

    private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName, String authority) {
        UserState userState;
        if (app != null && app.getCurProcState() <= 7 && (userState = this.mUserController.getStartedUserState(app.userId)) != null) {
            long now = SystemClock.elapsedRealtime();
            Long lastReported = userState.mProviderLastReportedFg.get(authority);
            if (lastReported == null || lastReported.longValue() < now - 60000) {
                if (this.mSystemReady) {
                    this.mUsageStatsService.reportContentProviderUsage(authority, providerPkgName, app.userId);
                }
                userState.mProviderLastReportedFg.put(authority, Long.valueOf(now));
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void setProcessTrackerStateLocked(ProcessRecord proc, int memFactor, long now) {
        if (proc.thread != null && proc.baseProcessTracker != null) {
            proc.baseProcessTracker.setState(proc.getReportedProcState(), memFactor, now, proc.pkgList.mPkgList);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateProcessForegroundLocked(ProcessRecord proc, boolean isForeground, int fgServiceTypes, boolean oomAdj) {
        if (isForeground != proc.hasForegroundServices() || proc.getForegroundServiceTypes() != fgServiceTypes) {
            proc.setHasForegroundServices(isForeground, fgServiceTypes);
            ArrayList<ProcessRecord> curProcs = (ArrayList) this.mForegroundPackages.get(proc.info.packageName, proc.info.uid);
            if (isForeground) {
                if (curProcs == null) {
                    curProcs = new ArrayList<>();
                    this.mForegroundPackages.put(proc.info.packageName, proc.info.uid, curProcs);
                }
                if (!curProcs.contains(proc)) {
                    curProcs.add(proc);
                    this.mBatteryStatsService.noteEvent(32770, proc.info.packageName, proc.info.uid);
                }
            } else if (curProcs != null && curProcs.remove(proc)) {
                this.mBatteryStatsService.noteEvent(16386, proc.info.packageName, proc.info.uid);
                if (curProcs.size() <= 0) {
                    this.mForegroundPackages.remove(proc.info.packageName, proc.info.uid);
                }
            }
            proc.setReportedForegroundServiceTypes(fgServiceTypes);
            ProcessChangeItem item = enqueueProcessChangeItemLocked(proc.pid, proc.info.uid);
            item.changes = 2;
            item.foregroundServiceTypes = fgServiceTypes;
            if (oomAdj) {
                updateOomAdjLocked("updateOomAdj_uiVisibility");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord getTopAppLocked() {
        int uid;
        String pkg;
        String str;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        ProcessRecord r = null;
        WindowProcessController wpc = activityTaskManagerInternal != null ? activityTaskManagerInternal.getTopApp() : null;
        if (wpc != null) {
            r = (ProcessRecord) wpc.mOwner;
        }
        if (r != null) {
            pkg = r.processName;
            uid = r.info.uid;
        } else {
            pkg = null;
            uid = -1;
        }
        if (uid != this.mCurResumedUid || (pkg != (str = this.mCurResumedPackage) && (pkg == null || !pkg.equals(str)))) {
            long identity = Binder.clearCallingIdentity();
            try {
                if (this.mCurResumedPackage != null) {
                    this.mBatteryStatsService.noteEvent(16387, this.mCurResumedPackage, this.mCurResumedUid);
                }
                this.mCurResumedPackage = pkg;
                this.mCurResumedUid = uid;
                if (this.mCurResumedPackage != null) {
                    this.mBatteryStatsService.noteEvent(32771, this.mCurResumedPackage, this.mCurResumedUid);
                }
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
        return r;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean updateOomAdjLocked(ProcessRecord app, boolean oomAdjAll, String oomAdjReason) {
        return this.mOomAdjuster.updateOomAdjLocked(app, oomAdjAll, oomAdjReason);
    }

    /* access modifiers changed from: package-private */
    public static final class ProcStatsRunnable implements Runnable {
        private final ProcessStatsService mProcessStats;
        private final ActivityManagerService mService;

        ProcStatsRunnable(ActivityManagerService service, ProcessStatsService mProcessStats2) {
            this.mService = service;
            this.mProcessStats = mProcessStats2;
        }

        @Override // java.lang.Runnable
        public void run() {
            synchronized (this.mService) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    this.mProcessStats.writeStateAsyncLocked();
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }
    }

    /* JADX INFO: Multiple debug info for r8v8 'trackerMemFactor'  int: [D('memFactor' int), D('trackerMemFactor' int)] */
    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final boolean updateLowMemStateLocked(int numCached, int numEmpty, int numTrimming) {
        int memFactor;
        int i;
        int fgTrimLevel;
        int memFactor2;
        int trackerMemFactor;
        int memFactor3;
        int curLevel;
        int N = this.mProcessList.getLruSizeLocked();
        long now = SystemClock.uptimeMillis();
        LowMemDetector lowMemDetector = this.mLowMemDetector;
        if (lowMemDetector != null && lowMemDetector.isAvailable()) {
            memFactor = this.mLowMemDetector.getMemFactor();
        } else if (numCached > this.mConstants.CUR_TRIM_CACHED_PROCESSES || numEmpty > this.mConstants.CUR_TRIM_EMPTY_PROCESSES) {
            memFactor = 0;
        } else {
            int numCachedAndEmpty = numCached + numEmpty;
            if (numCachedAndEmpty <= 3) {
                memFactor = 3;
            } else if (numCachedAndEmpty <= 5) {
                memFactor = 2;
            } else {
                memFactor = 1;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
            Slog.d(TAG, "oom: memFactor=" + memFactor + " last=" + this.mLastMemoryLevel + " allowLow=" + this.mAllowLowerMemLevel + " numProcs=" + this.mProcessList.getLruSizeLocked() + " last=" + this.mLastNumProcesses);
        }
        if (memFactor > this.mLastMemoryLevel && (!this.mAllowLowerMemLevel || this.mProcessList.getLruSizeLocked() >= this.mLastNumProcesses)) {
            memFactor = this.mLastMemoryLevel;
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                Slog.d(TAG, "Keeping last mem factor!");
            }
        }
        int trackerMemFactor2 = memFactor;
        int memFactor4 = this.mLastMemoryLevel;
        if (trackerMemFactor2 != memFactor4) {
            EventLogTags.writeAmMemFactor(trackerMemFactor2, memFactor4);
            StatsLog.write(15, trackerMemFactor2);
        }
        this.mLastMemoryLevel = trackerMemFactor2;
        this.mLastNumProcesses = this.mProcessList.getLruSizeLocked();
        ProcessStatsService processStatsService = this.mProcessStats;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        boolean z = true;
        if (activityTaskManagerInternal != null && activityTaskManagerInternal.isSleeping()) {
            z = false;
        }
        boolean allChanged = processStatsService.setMemFactorLocked(trackerMemFactor2, z, now);
        int trackerMemFactor3 = this.mProcessStats.getMemFactorLocked();
        if (trackerMemFactor2 != 0) {
            int minFactor = trackerMemFactor3;
            if (this.mLowRamStartTime == 0) {
                this.mLowRamStartTime = now;
            }
            if (trackerMemFactor2 == 2) {
                fgTrimLevel = 10;
            } else if (trackerMemFactor2 != 3) {
                fgTrimLevel = 5;
            } else {
                fgTrimLevel = 15;
            }
            int factor = numTrimming / 3;
            int minFactor2 = 2;
            if (this.mAtmInternal.getHomeProcess() != null) {
                minFactor2 = 2 + 1;
            }
            if (this.mAtmInternal.getPreviousProcess() != null) {
                minFactor2++;
            }
            if (factor < minFactor2) {
                factor = minFactor2;
            }
            int i2 = N - 1;
            int curLevel2 = 80;
            int step = 0;
            while (i2 >= 0) {
                ProcessRecord app = this.mProcessList.mLruProcesses.get(i2);
                if (allChanged || app.procStateChanged) {
                    memFactor2 = trackerMemFactor2;
                    memFactor3 = minFactor;
                    setProcessTrackerStateLocked(app, memFactor3, now);
                    trackerMemFactor = minFactor2;
                    app.procStateChanged = false;
                } else {
                    memFactor2 = trackerMemFactor2;
                    memFactor3 = minFactor;
                    trackerMemFactor = minFactor2;
                }
                if (app.getCurProcState() < 15 || app.killedByAm) {
                    if (app.getCurProcState() != 14 || app.killedByAm) {
                        if (app.getCurProcState() < 8 && !app.systemNoUi) {
                            curLevel = curLevel2;
                        } else if (app.hasPendingUiClean()) {
                            curLevel = curLevel2;
                            if (app.trimMemoryLevel < 20 && app.thread != null) {
                                try {
                                    if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                        Slog.v(TAG, "Trimming memory of bg-ui " + app.processName + " to 20");
                                    }
                                    app.thread.scheduleTrimMemory(20);
                                } catch (RemoteException e) {
                                }
                            }
                            app.setPendingUiClean(false);
                        } else {
                            curLevel = curLevel2;
                        }
                        if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
                            try {
                                if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    Slog.v(TAG, "Trimming memory of fg " + app.processName + " to " + fgTrimLevel);
                                }
                                app.thread.scheduleTrimMemory(fgTrimLevel);
                            } catch (RemoteException e2) {
                            }
                        }
                        app.trimMemoryLevel = fgTrimLevel;
                    } else {
                        if (app.trimMemoryLevel < 40 && app.thread != null) {
                            try {
                                if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    Slog.v(TAG, "Trimming memory of heavy-weight " + app.processName + " to 40");
                                }
                                app.thread.scheduleTrimMemory(40);
                            } catch (RemoteException e3) {
                            }
                        }
                        app.trimMemoryLevel = 40;
                        curLevel = curLevel2;
                    }
                    curLevel2 = curLevel;
                } else {
                    if (app.trimMemoryLevel < curLevel2 && app.thread != null) {
                        try {
                            if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.v(TAG, "Trimming memory of " + app.processName + " to " + curLevel2);
                            }
                            app.thread.scheduleTrimMemory(curLevel2);
                        } catch (RemoteException e4) {
                        }
                    }
                    app.trimMemoryLevel = curLevel2;
                    step++;
                    if (step >= factor) {
                        if (curLevel2 == 60) {
                            curLevel2 = 40;
                        } else if (curLevel2 == 80) {
                            curLevel2 = 60;
                        }
                        step = 0;
                    }
                }
                i2--;
                minFactor2 = trackerMemFactor;
                minFactor = memFactor3;
                trackerMemFactor2 = memFactor2;
            }
        } else {
            long j = this.mLowRamStartTime;
            if (j != 0) {
                this.mLowRamTimeSinceLastIdle += now - j;
                this.mLowRamStartTime = 0;
            }
            for (int i3 = N - 1; i3 >= 0; i3--) {
                ProcessRecord app2 = this.mProcessList.mLruProcesses.get(i3);
                if (allChanged || app2.procStateChanged) {
                    setProcessTrackerStateLocked(app2, trackerMemFactor3, now);
                    app2.procStateChanged = false;
                }
                if (app2.getCurProcState() < 8 && !app2.systemNoUi) {
                    i = 0;
                } else if (app2.hasPendingUiClean()) {
                    if (app2.trimMemoryLevel < 20) {
                        if (app2.thread != null) {
                            try {
                                if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    StringBuilder sb = new StringBuilder();
                                    sb.append("Trimming memory of ui hidden ");
                                    sb.append(app2.processName);
                                    sb.append(" to ");
                                    try {
                                        sb.append(20);
                                        Slog.v(TAG, sb.toString());
                                    } catch (RemoteException e5) {
                                    }
                                }
                                app2.thread.scheduleTrimMemory(20);
                            } catch (RemoteException e6) {
                            }
                        }
                    }
                    i = 0;
                    app2.setPendingUiClean(false);
                } else {
                    i = 0;
                }
                app2.trimMemoryLevel = i;
            }
        }
        return allChanged;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void updateOomAdjLocked(String oomAdjReason) {
        this.mOomAdjuster.updateOomAdjLocked(oomAdjReason);
    }

    /* JADX INFO: finally extract failed */
    public void makePackageIdle(String packageName, int userId) {
        IPackageManager pm;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "makePackageIdle", null);
            long callingId = Binder.clearCallingIdentity();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    IPackageManager pm2 = AppGlobals.getPackageManager();
                    int pkgUid = -1;
                    try {
                        pkgUid = pm2.getPackageUid(packageName, 268443648, 0);
                    } catch (RemoteException e) {
                    }
                    int i = -1;
                    if (pkgUid != -1) {
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        int appId = UserHandle.getAppId(pkgUid);
                        int i2 = this.mProcessList.mActiveUids.size() - 1;
                        while (i2 >= 0) {
                            UidRecord uidRec = this.mProcessList.mActiveUids.valueAt(i2);
                            if (uidRec.lastBackgroundTime <= 0 || uidRec.idle) {
                                pm = pm2;
                            } else if (UserHandle.getAppId(uidRec.uid) != appId) {
                                pm = pm2;
                            } else if (userId2 == i || userId2 == UserHandle.getUserId(uidRec.uid)) {
                                EventLogTags.writeAmUidIdle(uidRec.uid);
                                uidRec.idle = true;
                                uidRec.setIdle = true;
                                StringBuilder sb = new StringBuilder();
                                pm = pm2;
                                sb.append("Idling uid ");
                                sb.append(UserHandle.formatUid(uidRec.uid));
                                sb.append(" from package ");
                                sb.append(packageName);
                                sb.append(" user ");
                                sb.append(userId2);
                                Slog.w(TAG, sb.toString());
                                doStopUidLocked(uidRec.uid, uidRec);
                            } else {
                                pm = pm2;
                            }
                            i2--;
                            pm2 = pm;
                            i = -1;
                        }
                        try {
                            if (this.mLocalPowerManager != null) {
                                this.mLocalPowerManager.finishUidChanges();
                            }
                            Binder.restoreCallingIdentity(callingId);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    } else {
                        throw new IllegalArgumentException("Unknown package name " + packageName);
                    }
                } catch (Throwable th) {
                    if (this.mLocalPowerManager != null) {
                        this.mLocalPowerManager.finishUidChanges();
                    }
                    Binder.restoreCallingIdentity(callingId);
                    throw th;
                }
            }
            return;
        }
        String msg = "Permission Denial: makePackageIdle() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    /* access modifiers changed from: package-private */
    public final void idleUids() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOomAdjuster.idleUidsLocked();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    @VisibleForTesting
    public void incrementProcStateSeqAndNotifyAppsLocked() {
        int blockState;
        if (this.mWaitForNetworkTimeoutMs > 0) {
            ArrayList<Integer> blockingUids = null;
            for (int i = this.mProcessList.mActiveUids.size() - 1; i >= 0; i--) {
                UidRecord uidRec = this.mProcessList.mActiveUids.valueAt(i);
                if (this.mInjector.isNetworkRestrictedForUid(uidRec.uid) && UserHandle.isApp(uidRec.uid) && uidRec.hasInternetPermission && uidRec.setProcState != uidRec.getCurProcState() && (blockState = getBlockStateForUid(uidRec)) != 0) {
                    synchronized (uidRec.networkStateLock) {
                        ProcessList processList = this.mProcessList;
                        long j = processList.mProcStateSeqCounter + 1;
                        processList.mProcStateSeqCounter = j;
                        uidRec.curProcStateSeq = j;
                        if (blockState == 1) {
                            if (blockingUids == null) {
                                blockingUids = new ArrayList<>();
                            }
                            blockingUids.add(Integer.valueOf(uidRec.uid));
                        } else {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(TAG_NETWORK, "uid going to background, notifying all blocking threads for uid: " + uidRec);
                            }
                            if (uidRec.waitingForNetwork) {
                                uidRec.networkStateLock.notifyAll();
                            }
                        }
                    }
                }
            }
            if (blockingUids != null) {
                for (int i2 = this.mProcessList.mLruProcesses.size() - 1; i2 >= 0; i2--) {
                    ProcessRecord app = this.mProcessList.mLruProcesses.get(i2);
                    if (blockingUids.contains(Integer.valueOf(app.uid)) && !app.killedByAm && app.thread != null) {
                        UidRecord uidRec2 = this.mProcessList.getUidRecordLocked(app.uid);
                        try {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(TAG_NETWORK, "Informing app thread that it needs to block: " + uidRec2);
                            }
                            if (uidRec2 != null) {
                                app.thread.setNetworkBlockSeq(uidRec2.curProcStateSeq);
                            }
                        } catch (RemoteException e) {
                        }
                    }
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public int getBlockStateForUid(UidRecord uidRec) {
        boolean isAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.getCurProcState()) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.getCurProcState());
        boolean wasAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.setProcState) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.setProcState);
        if (!wasAllowed && isAllowed) {
            return 1;
        }
        if (!wasAllowed || isAllowed) {
            return 0;
        }
        return 2;
    }

    /* access modifiers changed from: package-private */
    public final void runInBackgroundDisabled(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mProcessList.getUidRecordLocked(uid);
                if (uidRec == null) {
                    doStopUidLocked(uid, null);
                } else if (uidRec.idle) {
                    doStopUidLocked(uidRec.uid, uidRec);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void doStopUidLocked(int uid, UidRecord uidRec) {
        this.mServices.stopInBackgroundLocked(uid);
        enqueueUidChangeLocked(uidRec, uid, 2);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void tempWhitelistForPendingIntentLocked(int callerPid, int callerUid, int targetUid, long duration, String tag) {
        if (ActivityManagerDebugConfig.DEBUG_WHITELISTS) {
            Slog.d(TAG, "tempWhitelistForPendingIntentLocked(" + callerPid + ", " + callerUid + ", " + targetUid + ", " + duration + ")");
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord pr = this.mPidsSelfLocked.get(callerPid);
            if (pr == null) {
                Slog.w(TAG, "tempWhitelistForPendingIntentLocked() no ProcessRecord for pid " + callerPid);
            } else if (pr.whitelistManager || checkPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", callerPid, callerUid) == 0) {
                tempWhitelistUidLocked(targetUid, duration, tag);
            } else {
                if (ActivityManagerDebugConfig.DEBUG_WHITELISTS) {
                    Slog.d(TAG, "tempWhitelistForPendingIntentLocked() for target " + targetUid + ": pid " + callerPid + " is not allowed");
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public void tempWhitelistUidLocked(int targetUid, long duration, String tag) {
        this.mPendingTempWhitelist.put(targetUid, new PendingTempWhitelist(targetUid, duration, tag));
        setUidTempWhitelistStateLocked(targetUid, true);
        this.mUiHandler.obtainMessage(68).sendToTarget();
    }

    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: package-private */
    public void pushTempWhitelist() {
        int N;
        PendingTempWhitelist[] list;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingTempWhitelist.size();
                list = new PendingTempWhitelist[N];
                for (int i = 0; i < N; i++) {
                    list[i] = this.mPendingTempWhitelist.valueAt(i);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        for (int i2 = 0; i2 < N; i2++) {
            PendingTempWhitelist ptw = list[i2];
            this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(ptw.targetUid, ptw.duration, true, ptw.tag);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i3 = 0; i3 < N; i3++) {
                    PendingTempWhitelist ptw2 = list[i3];
                    int index = this.mPendingTempWhitelist.indexOfKey(ptw2.targetUid);
                    if (index >= 0 && this.mPendingTempWhitelist.valueAt(index) == ptw2) {
                        this.mPendingTempWhitelist.removeAt(index);
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void setAppIdTempWhitelistStateLocked(int appId, boolean onWhitelist) {
        this.mOomAdjuster.setAppIdTempWhitelistStateLocked(appId, onWhitelist);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void setUidTempWhitelistStateLocked(int uid, boolean onWhitelist) {
        this.mOomAdjuster.setUidTempWhitelistStateLocked(uid, onWhitelist);
    }

    /* access modifiers changed from: package-private */
    public final void trimApplications(String oomAdjReason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                trimApplicationsLocked(oomAdjReason);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy({"this"})
    public final void trimApplicationsLocked(String oomAdjReason) {
        for (int i = this.mProcessList.mRemovedProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = this.mProcessList.mRemovedProcesses.get(i);
            if (!app.hasActivitiesOrRecentTasks() && app.curReceivers.isEmpty() && app.services.size() == 0) {
                StringBuilder sb = new StringBuilder();
                sb.append("Exiting empty application process ");
                sb.append(app.toShortString());
                sb.append(" (");
                sb.append(app.thread != null ? app.thread.asBinder() : null);
                sb.append(")\n");
                Slog.i(TAG, sb.toString());
                if (app.pid > 0 && app.pid != MY_PID) {
                    app.kill("empty", false);
                } else if (app.thread != null) {
                    try {
                        app.thread.scheduleExit();
                    } catch (Exception e) {
                    }
                }
                cleanUpApplicationRecordLocked(app, false, true, -1, false);
                this.mProcessList.mRemovedProcesses.remove(i);
                if (app.isPersistent()) {
                    addAppLocked(app.info, null, false, null);
                }
            }
        }
        updateOomAdjLocked(oomAdjReason);
    }

    public void signalPersistentProcesses(int sig) throws RemoteException {
        if (sig == 10) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") == 0) {
                        for (int i = this.mProcessList.mLruProcesses.size() - 1; i >= 0; i--) {
                            ProcessRecord r = this.mProcessList.mLruProcesses.get(i);
                            if (r.thread != null && r.isPersistent()) {
                                Process.sendSignal(r.pid, sig);
                            }
                        }
                    } else {
                        throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only SIGNAL_USR1 is allowed");
    }

    private void stopProfilerLocked(ProcessRecord proc, int profileType) {
        if (proc == null || proc == this.mProfileData.getProfileProc()) {
            proc = this.mProfileData.getProfileProc();
            profileType = this.mProfileType;
            clearProfilerLocked();
        }
        if (proc != null) {
            try {
                proc.thread.profilerControl(false, (ProfilerInfo) null, profileType);
            } catch (RemoteException e) {
                throw new IllegalStateException("Process disappeared");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void clearProfilerLocked() {
        if (!(this.mProfileData.getProfilerInfo() == null || this.mProfileData.getProfilerInfo().profileFd == null)) {
            try {
                this.mProfileData.getProfilerInfo().profileFd.close();
            } catch (IOException e) {
            }
        }
        this.mProfileData.setProfileApp(null);
        this.mProfileData.setProfileProc(null);
        this.mProfileData.setProfilerInfo(null);
    }

    public boolean profileControl(String process, int userId, boolean start, ProfilerInfo profilerInfo, int profileType) throws RemoteException {
        ParcelFileDescriptor fd;
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                        if (start) {
                            if (profilerInfo == null || profilerInfo.profileFd == null) {
                                throw new IllegalArgumentException("null profile info or fd");
                            }
                        }
                        ProcessRecord proc = null;
                        if (process != null) {
                            proc = findProcessLocked(process, userId, "profileControl");
                        }
                        if (start) {
                            if (proc == null || proc.thread == null) {
                                throw new IllegalArgumentException("Unknown process: " + process);
                            }
                        }
                        if (start) {
                            stopProfilerLocked(null, 0);
                            setProfileApp(proc.info, proc.processName, profilerInfo);
                            this.mProfileData.setProfileProc(proc);
                            this.mProfileType = profileType;
                            try {
                                fd = profilerInfo.profileFd.dup();
                            } catch (IOException e) {
                                fd = null;
                            }
                            profilerInfo.profileFd = fd;
                            proc.thread.profilerControl(start, profilerInfo, profileType);
                            try {
                                this.mProfileData.getProfilerInfo().profileFd.close();
                            } catch (IOException e2) {
                            }
                            this.mProfileData.getProfilerInfo().profileFd = null;
                            if (proc.pid == MY_PID) {
                                profilerInfo = null;
                            }
                        } else {
                            stopProfilerLocked(proc, profileType);
                            if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                                try {
                                    profilerInfo.profileFd.close();
                                } catch (IOException e3) {
                                }
                            }
                        }
                    } else {
                        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                try {
                    profilerInfo.profileFd.close();
                } catch (IOException e4) {
                }
            }
            return true;
        } catch (RemoteException e5) {
            throw new IllegalStateException("Process disappeared");
        } catch (Throwable th) {
            if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                try {
                    profilerInfo.profileFd.close();
                } catch (IOException e6) {
                }
            }
            throw th;
        }
    }

    private ProcessRecord findProcessLocked(String process, int userId, String callName) {
        SparseArray<ProcessRecord> procs;
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, callName, null);
        ProcessRecord proc = null;
        try {
            int pid = Integer.parseInt(process);
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(pid);
            }
        } catch (NumberFormatException e) {
        }
        if (proc != null || (procs = this.mProcessList.mProcessNames.getMap().get(process)) == null || procs.size() <= 0) {
            return proc;
        }
        ProcessRecord proc2 = procs.valueAt(0);
        if (userId2 == -1 || proc2.userId == userId2) {
            return proc2;
        }
        for (int i = 1; i < procs.size(); i++) {
            ProcessRecord thisProc = procs.valueAt(i);
            if (thisProc.userId == userId2) {
                return thisProc;
            }
        }
        return proc2;
    }

    /* JADX WARNING: Removed duplicated region for block: B:57:0x00bf A[SYNTHETIC, Splitter:B:57:0x00bf] */
    public boolean dumpHeap(String process, int userId, boolean managed, boolean mallocInfo, boolean runGc, String path, ParcelFileDescriptor fd, RemoteCallback finishCallback) {
        ParcelFileDescriptor fd2;
        RemoteException remoteException;
        ParcelFileDescriptor fd3;
        Throwable th;
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                    } else if (fd != null) {
                        try {
                            ProcessRecord proc = findProcessLocked(process, userId, "dumpHeap");
                            if (proc == null || proc.thread == null) {
                                throw new IllegalArgumentException("Unknown process: " + process);
                            }
                            if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                                if ((proc.info.flags & 2) == 0) {
                                    throw new SecurityException("Process not debuggable: " + proc);
                                }
                            }
                            proc.thread.dumpHeap(managed, mallocInfo, runGc, path, fd, finishCallback);
                            fd3 = null;
                            try {
                            } catch (Throwable th2) {
                                th = th2;
                                try {
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                } catch (RemoteException e) {
                                    try {
                                        throw new IllegalStateException("Process disappeared");
                                    } catch (Throwable e2) {
                                        fd2 = fd3;
                                        remoteException = e2;
                                        if (fd2 != null) {
                                            try {
                                                fd2.close();
                                            } catch (IOException e3) {
                                            }
                                        }
                                        throw remoteException;
                                    }
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            fd3 = fd;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else {
                        throw new IllegalArgumentException("null fd");
                    }
                } catch (Throwable th4) {
                    th = th4;
                    fd3 = fd;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            if (0 != 0) {
                try {
                    fd3.close();
                } catch (IOException e4) {
                }
            }
            return true;
        } catch (RemoteException e5) {
            fd3 = fd;
            throw new IllegalStateException("Process disappeared");
        } catch (Throwable th5) {
            fd2 = fd;
            remoteException = th5;
            if (fd2 != null) {
            }
            throw remoteException;
        }
    }

    public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize, String reportPackage) {
        String processName2;
        int uid2;
        String processName3;
        int uid3;
        if (processName != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
            processName2 = processName;
            uid2 = uid;
        } else {
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                if (proc != null) {
                    if (!Build.IS_DEBUGGABLE) {
                        if ((proc.info.flags & 2) == 0) {
                            throw new SecurityException("Not running a debuggable build");
                        }
                    }
                    processName3 = proc.processName;
                    uid3 = proc.uid;
                    if (reportPackage != null) {
                        if (!proc.pkgList.containsKey(reportPackage)) {
                            throw new SecurityException("Package " + reportPackage + " is not running in " + proc);
                        }
                    }
                } else {
                    throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
                }
            }
            processName2 = processName3;
            uid2 = uid3;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (maxMemSize > 0) {
                    this.mMemWatchProcesses.put(processName2, uid2, new Pair(Long.valueOf(maxMemSize), reportPackage));
                } else if (uid2 != 0) {
                    this.mMemWatchProcesses.remove(processName2, uid2);
                } else {
                    this.mMemWatchProcesses.getMap().remove(processName2);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void dumpHeapFinished(String path) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (Binder.getCallingPid() != this.mMemWatchDumpPid) {
                    Slog.w(TAG, "dumpHeapFinished: Calling pid " + Binder.getCallingPid() + " does not match last pid " + this.mMemWatchDumpPid);
                } else if (this.mMemWatchDumpFile == null || !this.mMemWatchDumpFile.equals(path)) {
                    Slog.w(TAG, "dumpHeapFinished: Calling path " + path + " does not match last path " + this.mMemWatchDumpFile);
                    resetPriorityAfterLockedSection();
                } else {
                    if (ActivityManagerDebugConfig.DEBUG_PSS) {
                        Slog.d(TAG, "Dump heap finished for " + path);
                    }
                    this.mHandler.sendEmptyMessage(50);
                    Runtime.getRuntime().gc();
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @Override // com.android.server.Watchdog.Monitor
    public void monitor() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void onCoreSettingsChange(Bundle settings) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessList.updateCoreSettingsLocked(settings);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean startUserInBackground(int userId) {
        return startUserInBackgroundWithListener(userId, null);
    }

    public boolean startUserInBackgroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.lambda$startUser$9$UserController(userId, false, unlockListener);
    }

    public boolean startUserInForegroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.lambda$startUser$9$UserController(userId, true, unlockListener);
    }

    public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener) {
        return this.mUserController.unlockUser(userId, token, secret, listener);
    }

    public boolean switchUser(int targetUserId) {
        Boolean ret = this.mHwAMSEx.switchUser(targetUserId);
        if (ret != null) {
            return ret.booleanValue();
        }
        UniPerf.getInstance().uniPerfEvent(4099, "", new int[0]);
        Slog.i(TAG, "switchUser " + targetUserId + ", callingUid = " + Binder.getCallingUid() + ", callingPid = " + Binder.getCallingPid());
        return this.mUserController.switchUser(targetUserId);
    }

    public int stopUser(int userId, boolean force, IStopUserCallback callback) {
        Slog.i(TAG, "stopUser " + userId + ", force = " + force + ", callingUid = " + Binder.getCallingUid() + ", callingPid = " + Binder.getCallingPid());
        return this.mUserController.stopUser(userId, force, callback, null);
    }

    public UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    /* access modifiers changed from: package-private */
    public String getStartedUserState(int userId) {
        return UserState.stateToString(this.mUserController.getStartedUserState(userId).state);
    }

    public boolean isUserRunning(int userId, int flags) {
        if (this.mUserController.isSameProfileGroup(userId, UserHandle.getCallingUserId()) || checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.isUserRunning(userId, flags);
        }
        String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.getStartedUserArray();
        }
        String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public void registerUserSwitchObserver(IUserSwitchObserver observer, String name) {
        this.mUserController.registerUserSwitchObserver(observer, name);
    }

    public void unregisterUserSwitchObserver(IUserSwitchObserver observer) {
        this.mUserController.unregisterUserSwitchObserver(observer);
    }

    /* access modifiers changed from: package-private */
    public ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId) {
        if (info == null) {
            return null;
        }
        ApplicationInfo newInfo = new ApplicationInfo(info);
        newInfo.initForUser(userId);
        return newInfo;
    }

    public boolean isUserStopped(int userId) {
        return this.mUserController.getStartedUserState(userId) == null;
    }

    /* access modifiers changed from: package-private */
    public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
        if (aInfo == null || (userId < 1 && aInfo.applicationInfo.uid < 100000)) {
            return aInfo;
        }
        ActivityInfo info = new ActivityInfo(aInfo);
        info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
        return info;
    }

    private boolean processSanityChecksLocked(ProcessRecord process) {
        if (process == null || process.thread == null) {
            return false;
        }
        if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (process.info.flags & 2) != 0) {
            return true;
        }
        return false;
    }

    public boolean startBinderTracking() throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = true;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    for (int i = 0; i < this.mProcessList.mLruProcesses.size(); i++) {
                        ProcessRecord process = this.mProcessList.mLruProcesses.get(i);
                        if (processSanityChecksLocked(process)) {
                            try {
                                process.thread.startBinderTracking();
                            } catch (RemoteException e) {
                                Log.v(TAG, "Process disappared");
                            }
                        }
                    }
                } else {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return true;
    }

    public boolean stopBinderTrackingAndDump(ParcelFileDescriptor fd) throws RemoteException {
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mBinderTransactionTrackingEnabled = false;
                    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                    } else if (fd != null) {
                        PrintWriter pw = new FastPrintWriter(new FileOutputStream(fd.getFileDescriptor()));
                        pw.println("Binder transaction traces for all processes.\n");
                        Iterator<ProcessRecord> it = this.mProcessList.mLruProcesses.iterator();
                        while (it.hasNext()) {
                            ProcessRecord process = it.next();
                            if (processSanityChecksLocked(process)) {
                                pw.println("Traces for process: " + process.processName);
                                pw.flush();
                                try {
                                    TransferPipe tp = new TransferPipe();
                                    try {
                                        process.thread.stopBinderTrackingAndDump(tp.getWriteFd());
                                        tp.go(fd.getFileDescriptor());
                                    } finally {
                                        tp.kill();
                                    }
                                } catch (IOException e) {
                                    pw.println("Failure while dumping IPC traces from " + process + ".  Exception: " + e);
                                    pw.flush();
                                } catch (RemoteException e2) {
                                    pw.println("Got a RemoteException while dumping IPC traces from " + process + ".  Exception: " + e2);
                                    pw.flush();
                                }
                            }
                        }
                        fd = null;
                    } else {
                        throw new IllegalArgumentException("null fd");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return true;
        } finally {
            if (fd != null) {
                try {
                    fd.close();
                } catch (IOException e3) {
                }
            }
        }
    }

    @VisibleForTesting
    public final class LocalService extends ActivityManagerInternal {
        public LocalService() {
        }

        public String checkContentProviderAccess(String authority, int userId) {
            return ActivityManagerService.this.checkContentProviderAccess(authority, userId);
        }

        public void onWakefulnessChanged(int wakefulness) {
            ActivityManagerService.this.onWakefulnessChanged(wakefulness);
        }

        public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
            return ActivityManagerService.this.startIsolatedProcess(entryPoint, entryPointArgs, processName, abiOverride, uid, crashHandler);
        }

        public void killForegroundAppsForUser(int userHandle) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList<>();
                    int NP = ActivityManagerService.this.mProcessList.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) ActivityManagerService.this.mProcessList.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (!app.isPersistent()) {
                                if (app.removed || (app.userId == userHandle && app.hasForegroundActivities())) {
                                    procs.add(app);
                                }
                            }
                        }
                    }
                    int N = procs.size();
                    for (int i = 0; i < N; i++) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(procs.get(i), false, true, "kill all fg");
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void setPendingIntentWhitelistDuration(IIntentSender target, IBinder whitelistToken, long duration) {
            ActivityManagerService.this.mPendingIntentController.setPendingIntentWhitelistDuration(target, whitelistToken, duration);
        }

        public void setPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder whitelistToken, int flags) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w(ActivityManagerService.TAG, "setPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).setAllowBgActivityStarts(whitelistToken, flags);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void clearPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder whitelistToken) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w(ActivityManagerService.TAG, "clearPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).clearAllowBgActivityStarts(whitelistToken);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void setDeviceIdleWhitelist(int[] allAppids, int[] exceptIdleAppids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleWhitelist = allAppids;
                    ActivityManagerService.this.mDeviceIdleExceptIdleWhitelist = exceptIdleAppids;
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updateDeviceIdleTempWhitelist(int[] appids, int changingAppId, boolean adding) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleTempWhitelist = appids;
                    ActivityManagerService.this.setAppIdTempWhitelistStateLocked(changingAppId, adding);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public int getUidProcessState(int uid) {
            return ActivityManagerService.this.getUidState(uid);
        }

        public boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        public void setHasOverlayUi(int pid, boolean hasOverlayUi) {
            ProcessRecord pr;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        pr = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                        if (pr == null) {
                            Slog.w(ActivityManagerService.TAG, "setHasOverlayUi called on unknown pid: " + pid);
                            return;
                        }
                    }
                    if (pr.hasOverlayUi() == hasOverlayUi) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return;
                    }
                    pr.setHasOverlayUi(hasOverlayUi);
                    ActivityManagerService.this.updateOomAdjLocked(pr, true, "updateOomAdj_uiVisibility");
                    ActivityManagerService.resetPriorityAfterLockedSection();
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void notifyNetworkPolicyRulesUpdated(int uid, long procStateSeq) {
            UidRecord record;
            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                Slog.d(ActivityManagerService.TAG_NETWORK, "Got update from NPMS for uid: " + uid + " seq: " + procStateSeq);
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    record = ActivityManagerService.this.mProcessList.getUidRecordLocked(uid);
                    if (record == null) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(ActivityManagerService.TAG_NETWORK, "No active uidRecord for uid: " + uid + " procStateSeq: " + procStateSeq);
                        }
                        return;
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            synchronized (record.networkStateLock) {
                if (record.lastNetworkUpdatedProcStateSeq >= procStateSeq) {
                    if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                        Slog.d(ActivityManagerService.TAG_NETWORK, "procStateSeq: " + procStateSeq + " has already been handled for uid: " + uid);
                    }
                    return;
                }
                record.lastNetworkUpdatedProcStateSeq = procStateSeq;
                if (record.curProcStateSeq > procStateSeq) {
                    if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                        Slog.d(ActivityManagerService.TAG_NETWORK, "No need to handle older seq no., Uid: " + uid + ", curProcstateSeq: " + record.curProcStateSeq + ", procStateSeq: " + procStateSeq);
                    }
                    return;
                }
                if (record.waitingForNetwork) {
                    if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                        Slog.d(ActivityManagerService.TAG_NETWORK, "Notifying all blocking threads for uid: " + uid + ", procStateSeq: " + procStateSeq);
                    }
                    record.networkStateLock.notifyAll();
                }
            }
        }

        public int handleUserForClone(String name, int userId) {
            return ActivityManagerService.this.mHwAMSEx.getCloneAppUserId(name, userId);
        }

        public boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean canStartMoreUsers() {
            return ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(switchingFromSystemUserMessage);
        }

        public void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(switchingToSystemUserMessage);
        }

        public int getMaxRunningUsers() {
            return ActivityManagerService.this.mUserController.mMaxRunningUsers;
        }

        public boolean isUidActive(int uid) {
            boolean isUidActiveLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    isUidActiveLocked = ActivityManagerService.this.isUidActiveLocked(uid);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return isUidActiveLocked;
        }

        public void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
            ActivityManagerService.this.setRunningRemoteAnimation(pid, runningRemoteAnimation);
        }

        public List<ProcessMemoryState> getMemoryStateForProcesses() {
            List<ProcessMemoryState> processMemoryStates = new ArrayList<>();
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                int size = ActivityManagerService.this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    ProcessRecord r = ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                    processMemoryStates.add(new ProcessMemoryState(r.uid, r.pid, r.processName, r.curAdj));
                }
            }
            return processMemoryStates;
        }

        public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, int allowMode, String name, String callerPackage) {
            return ActivityManagerService.this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, allowMode, name, callerPackage);
        }

        public void enforceCallingPermission(String permission, String func) {
            ActivityManagerService.this.enforceCallingPermission(permission, func);
        }

        public int getCurrentUserId() {
            return ActivityManagerService.this.mUserController.getCurrentUserIdLU();
        }

        public boolean isUserRunning(int userId, int flags) {
            return ActivityManagerService.this.mUserController.isUserRunning(userId, flags);
        }

        public void trimApplications() {
            ActivityManagerService.this.trimApplications("updateOomAdj_activityChange");
        }

        public void killProcessesForRemovedTask(ArrayList<Object> procsToKill) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < procsToKill.size(); i++) {
                        ProcessRecord pr = (ProcessRecord) ((WindowProcessController) procsToKill.get(i)).mOwner;
                        if (pr != null) {
                            if (pr.curAdj >= 900 && (pr.info.flags & 1) != 0 && (pr.info.hwFlags & DumpState.DUMP_APEX) == 0 && (ActivityManagerService.this.mCustAms == null || (ActivityManagerService.this.mCustAms != null && ActivityManagerService.this.mCustAms.notKillProcessWhenRemoveTask(pr, ActivityManagerService.this.mContext.getContentResolver())))) {
                                Slog.d(ActivityManagerService.TAG, " the process " + pr.processName + " adj >= 900");
                                try {
                                    if (pr.thread != null) {
                                        pr.thread.scheduleTrimMemory(80);
                                    }
                                } catch (RemoteException e) {
                                    Slog.e(ActivityManagerService.TAG, "killProcessesForRemovedTask RemoteException");
                                }
                                pr.trimMemoryLevel = 80;
                            } else if (pr.setSchedGroup != 0 || !pr.curReceivers.isEmpty()) {
                                pr.waitingToKill = "remove task";
                            } else {
                                pr.kill("remove task", true);
                            }
                        }
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void killProcess(String processName, int uid, String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ProcessRecord proc = ActivityManagerService.this.getProcessRecordLocked(processName, uid, true);
                    if (proc != null) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(proc, false, true, reason);
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        /* JADX INFO: finally extract failed */
        public boolean hasRunningActivity(int uid, String packageName) {
            if (packageName == null) {
                return false;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < ActivityManagerService.this.mProcessList.mLruProcesses.size(); i++) {
                        ProcessRecord pr = ActivityManagerService.this.mProcessList.mLruProcesses.get(i);
                        if (pr.uid == uid) {
                            if (pr.getWindowProcessController().hasRunningActivity(packageName)) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                return true;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void updateOomAdj() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateOomAdjLocked("updateOomAdj_meh");
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updateCpuStats() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateCpuStats();
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updateBatteryStats(ComponentName activity, int uid, int userId, boolean resumed) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateBatteryStats(activity, uid, userId, resumed);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updateActivityUsageStats(ComponentName activity, int userId, int event, IBinder appToken, ComponentName taskRoot) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateActivityUsageStats(activity, userId, event, appToken, taskRoot);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void updateForegroundTimeIfOnBattery(String packageName, int uid, long cpuTimeDiff) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mBatteryStatsService.isOnBattery()) {
                        BatteryStatsImpl bsi = ActivityManagerService.this.mBatteryStatsService.getActiveStatistics();
                        synchronized (bsi) {
                            BatteryStatsImpl.Uid.Proc ps = bsi.getProcessStatsLocked(uid, packageName);
                            if (ps != null) {
                                ps.addForegroundTimeLocked(cpuTimeDiff);
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void sendForegroundProfileChanged(int userId) {
            ActivityManagerService.this.mUserController.sendForegroundProfileChanged(userId);
        }

        public boolean shouldConfirmCredentials(int userId) {
            return ActivityManagerService.this.mUserController.shouldConfirmCredentials(userId);
        }

        public int[] getCurrentProfileIds() {
            return ActivityManagerService.this.mUserController.getCurrentProfileIds();
        }

        public UserInfo getCurrentUser() {
            return ActivityManagerService.this.mUserController.getCurrentUser();
        }

        public void ensureNotSpecialUser(int userId) {
            ActivityManagerService.this.mUserController.ensureNotSpecialUser(userId);
        }

        public boolean isCurrentProfile(int userId) {
            return ActivityManagerService.this.mUserController.isCurrentProfile(userId);
        }

        public boolean hasStartedUserState(int userId) {
            return ActivityManagerService.this.mUserController.hasStartedUserState(userId);
        }

        public void finishUserSwitch(Object uss) {
            ActivityManagerService.this.mUserController.finishUserSwitch((UserState) uss);
        }

        public void scheduleAppGcs() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.scheduleAppGcsLocked();
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public int getTaskIdForActivity(IBinder token, boolean onlyRoot) {
            int taskForActivity;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    taskForActivity = ActivityManagerService.this.getTaskForActivity(token, onlyRoot);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return taskForActivity;
        }

        public ActivityPresentationInfo getActivityPresentationInfo(IBinder token) {
            int displayId = -1;
            try {
                displayId = ActivityManagerService.this.mActivityTaskManager.getActivityDisplayId(token);
            } catch (RemoteException e) {
            }
            return new ActivityPresentationInfo(ActivityManagerService.this.mActivityTaskManager.getTaskForActivity(token, false), displayId, ActivityManagerService.this.mActivityTaskManager.getActivityClassForToken(token));
        }

        public void setBooting(boolean booting) {
            ActivityManagerService.this.mBooting = booting;
        }

        public boolean isBooting() {
            return ActivityManagerService.this.mBooting;
        }

        public void setBooted(boolean booted) {
            ActivityManagerService.this.mBooted = booted;
        }

        public boolean isBooted() {
            return ActivityManagerService.this.mBooted;
        }

        public void finishBooting() {
            ActivityManagerService.this.finishBooting();
        }

        public void tempWhitelistForPendingIntent(int callerPid, int callerUid, int targetUid, long duration, String tag) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.tempWhitelistForPendingIntentLocked(callerPid, callerUid, targetUid, duration, tag);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public int broadcastIntentInPackage(String packageName, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId, boolean allowBackgroundActivityStarts) {
            int broadcastIntentInPackage;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    broadcastIntentInPackage = ActivityManagerService.this.broadcastIntentInPackage(packageName, uid, realCallingUid, realCallingPid, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermission, bOptions, serialized, sticky, userId, allowBackgroundActivityStarts);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
            return broadcastIntentInPackage;
        }

        public ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, int userId, boolean allowBackgroundActivityStarts) throws TransactionTooLargeException {
            Throwable th;
            int userId2 = ActivityManagerService.this.mHwAMSEx.getCloneAppUserId(ActivityManagerService.this.mHwAMSEx.getTargetFromIntentForClone(service), userId);
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("startServiceInPackage: ");
                        sb.append(service);
                        sb.append(" type=");
                        try {
                            sb.append(resolvedType);
                            Slog.v(ActivityManagerService.TAG, sb.toString());
                        } catch (Throwable th2) {
                            th = th2;
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    long origId = Binder.clearCallingIdentity();
                    try {
                        ComponentName res = ActivityManagerService.this.mServices.startServiceLocked(null, service, resolvedType, -1, uid, fgRequired, callingPackage, userId2, allowBackgroundActivityStarts);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return res;
                    } finally {
                        Binder.restoreCallingIdentity(origId);
                    }
                } catch (Throwable th3) {
                    th = th3;
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void disconnectActivityFromServices(Object connectionHolder, Object conns) {
            ActivityServiceConnectionsHolder holder = (ActivityServiceConnectionsHolder) connectionHolder;
            HashSet<ConnectionRecord> toDisconnect = (HashSet) conns;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Iterator<ConnectionRecord> it = toDisconnect.iterator();
                    while (it.hasNext()) {
                        ActivityManagerService.this.mServices.removeConnectionLocked(it.next(), null, holder);
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void cleanUpServices(int userId, ComponentName component, Intent baseIntent) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mServices.cleanUpServices(userId, component, baseIntent);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
            return ActivityManagerService.this.getActivityInfoForUser(aInfo, userId);
        }

        public void ensureBootCompleted() {
            ActivityManagerService.this.ensureBootCompleted();
        }

        public void updateOomLevelsForDisplay(int displayId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mWindowManager != null) {
                        ActivityManagerService.this.mProcessList.applyDisplaySize(ActivityManagerService.this.mWindowManager);
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public boolean isActivityStartsLoggingEnabled() {
            return ActivityManagerService.this.mConstants.mFlagActivityStartsLoggingEnabled;
        }

        public boolean isBackgroundActivityStartsEnabled() {
            return ActivityManagerService.this.mConstants.mFlagBackgroundActivityStartsEnabled;
        }

        public void reportCurKeyguardUsageEvent(boolean keyguardShowing) {
            int i;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService activityManagerService = ActivityManagerService.this;
                    if (keyguardShowing) {
                        i = 17;
                    } else {
                        i = 18;
                    }
                    activityManagerService.reportGlobalUsageEventLocked(i);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
            return ActivityManagerService.this.inputDispatchingTimedOut(pid, aboveSystem, reason);
        }

        public boolean inputDispatchingTimedOut(Object proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, Object parentProc, boolean aboveSystem, String reason) {
            return ActivityManagerService.this.inputDispatchingTimedOut((ProcessRecord) proc, activityShortComponentName, aInfo, parentShortComponentName, (WindowProcessController) parentProc, aboveSystem, reason);
        }

        public void broadcastGlobalConfigurationChanged(int changes, boolean initLocale) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
                    intent.addFlags(1881145344);
                    ActivityManagerService.this.broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    if ((changes & 4) != 0) {
                        Intent intent2 = new Intent("android.intent.action.LOCALE_CHANGED");
                        intent2.addFlags(287309824);
                        if (initLocale || !ActivityManagerService.this.mProcessesReady) {
                            intent2.addFlags(1073741824);
                        }
                        ActivityManagerService.this.broadcastIntentLocked(null, null, intent2, null, null, 0, null, null, null, -1, null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                    if (!initLocale && isSplitConfigurationChange(changes)) {
                        Intent intent3 = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                        intent3.addFlags(553648128);
                        ActivityManagerService.this.broadcastIntentLocked(null, null, intent3, null, null, 0, null, null, new String[]{"android.permission.INSTALL_PACKAGES"}, -1, null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        private boolean isSplitConfigurationChange(int configDiff) {
            return (configDiff & 4100) != 0;
        }

        public void broadcastCloseSystemDialogs(String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(1342177280);
                    if (reason != null) {
                        intent.putExtra(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
                    }
                    ActivityManagerService.this.broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.killAllBackgroundProcessesExcept(minTargetSdk, maxProcState);
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public void preloadApp(ApplicationInfo info) {
            if (ActivityManagerService.this.mProcessesReady) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.preloadApplicationLocked(info);
                    } finally {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                }
            }
        }

        public void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, String hostingType, ComponentName hostingName) {
            Throwable th;
            Throwable th2;
            try {
                if (Trace.isTagEnabled(64)) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("startProcess:");
                    try {
                        sb.append(processName);
                        Trace.traceBegin(64, sb.toString());
                    } catch (Throwable th3) {
                        th = th3;
                        Trace.traceEnd(64);
                        throw th;
                    }
                }
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        try {
                            ActivityManagerService.this.startProcessLocked(processName, info, knownToBeDead, 0, new HostingRecord(hostingType, hostingName), false, false, true);
                            try {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                Trace.traceEnd(64);
                            } catch (Throwable th4) {
                                th = th4;
                                Trace.traceEnd(64);
                                throw th;
                            }
                        } catch (Throwable th5) {
                            th2 = th5;
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    } catch (Throwable th6) {
                        th2 = th6;
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th2;
                    }
                }
            } catch (Throwable th7) {
                th = th7;
                Trace.traceEnd(64);
                throw th;
            }
        }

        public void setDebugFlagsForStartingActivity(ActivityInfo aInfo, int startFlags, ProfilerInfo profilerInfo, Object wmLock) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (wmLock) {
                        if ((startFlags & 2) != 0) {
                            try {
                                ActivityManagerService.this.setDebugApp(aInfo.processName, true, false);
                            } catch (Throwable th) {
                                throw th;
                            }
                        }
                        if ((startFlags & 8) != 0) {
                            ActivityManagerService.this.setNativeDebuggingAppLocked(aInfo.applicationInfo, aInfo.processName);
                        }
                        if ((startFlags & 4) != 0) {
                            ActivityManagerService.this.setTrackAllocationApp(aInfo.applicationInfo, aInfo.processName);
                        }
                        if (profilerInfo != null) {
                            ActivityManagerService.this.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo);
                        }
                        wmLock.notify();
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        public int getStorageMountMode(int pid, int uid) {
            int i;
            if (uid == 2000 || uid == 0) {
                return 6;
            }
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord pr = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                i = pr == null ? 0 : pr.mountMode;
            }
            return i;
        }

        public boolean getHaveTryCloneProUserUnlock() {
            return ActivityManagerService.this.mUserController.mHaveTryCloneProUserUnlock;
        }

        public boolean isAppForeground(int uid) {
            return ActivityManagerService.this.isAppForeground(uid);
        }

        public boolean isAppBad(ApplicationInfo info) {
            return ActivityManagerService.this.isAppBad(info);
        }

        public void clearPendingBackup(int userId) {
            ActivityManagerService.this.clearPendingBackup(userId);
        }

        public void prepareForPossibleShutdown() {
            ActivityManagerService.this.prepareForPossibleShutdown();
        }

        /* JADX INFO: finally extract failed */
        public boolean hasRunningForegroundService(int uid, int foregroundServicetype) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < ActivityManagerService.this.mProcessList.mLruProcesses.size(); i++) {
                        ProcessRecord pr = ActivityManagerService.this.mProcessList.mLruProcesses.get(i);
                        if (pr.uid == uid) {
                            if ((pr.getForegroundServiceTypes() & foregroundServicetype) != 0) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                return true;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void registerProcessObserver(IProcessObserver processObserver) {
            ActivityManagerService.this.registerProcessObserver(processObserver);
        }

        public void unregisterProcessObserver(IProcessObserver processObserver) {
            ActivityManagerService.this.unregisterProcessObserver(processObserver);
        }
    }

    /* JADX INFO: finally extract failed */
    /* access modifiers changed from: package-private */
    public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
        ProcessRecord proc;
        long timeout;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(pid);
                    }
                    timeout = proc != null ? proc.getInputDispatchingTimeout() : MONITOR_CPU_MIN_TIME;
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            if (inputDispatchingTimedOut(proc, null, null, null, null, aboveSystem, reason)) {
                return -1;
            }
            return timeout;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }

    /* access modifiers changed from: package-private */
    public boolean inputDispatchingTimedOut(ProcessRecord proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, WindowProcessController parentProcess, boolean aboveSystem, String reason) {
        String annotation;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            if (reason == null) {
                annotation = "Input dispatching timed out";
            } else {
                annotation = "Input dispatching timed out (" + reason + ")";
            }
            if (proc != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (proc.isDebugging()) {
                            return false;
                        }
                        if (proc.getActiveInstrumentation() != null) {
                            Bundle info = new Bundle();
                            info.putString("shortMsg", "keyDispatchingTimedOut");
                            info.putString("longMsg", annotation);
                            finishInstrumentationLocked(proc, 0, info);
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                resetPriorityAfterLockedSection();
                proc.appNotResponding(activityShortComponentName, aInfo, parentShortComponentName, parentProcess, aboveSystem, annotation);
            }
            return true;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }

    public void waitForNetworkStateUpdate(long procStateSeq) {
        UidRecord record;
        int callingUid = Binder.getCallingUid();
        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
            Slog.d(TAG_NETWORK, "Called from " + callingUid + " to wait for seq: " + procStateSeq);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                record = this.mProcessList.getUidRecordLocked(callingUid);
                if (record == null) {
                    return;
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        synchronized (record.networkStateLock) {
            if (record.lastDispatchedProcStateSeq < procStateSeq) {
                if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                    Slog.d(TAG_NETWORK, "Uid state change for seq no. " + procStateSeq + " is not dispatched to NPMS yet, so don't wait. Uid: " + callingUid + " lastProcStateSeqDispatchedToObservers: " + record.lastDispatchedProcStateSeq);
                }
            } else if (record.curProcStateSeq > procStateSeq) {
                if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                    Slog.d(TAG_NETWORK, "Ignore the wait requests for older seq numbers. Uid: " + callingUid + ", curProcStateSeq: " + record.curProcStateSeq + ", procStateSeq: " + procStateSeq);
                }
            } else if (record.lastNetworkUpdatedProcStateSeq >= procStateSeq) {
                if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                    Slog.d(TAG_NETWORK, "Network rules have been already updated for seq no. " + procStateSeq + ", so no need to wait. Uid: " + callingUid + ", lastProcStateSeqWithUpdatedNetworkState: " + record.lastNetworkUpdatedProcStateSeq);
                }
            } else {
                try {
                    if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                        Slog.d(TAG_NETWORK, "Starting to wait for the network rules update. Uid: " + callingUid + " procStateSeq: " + procStateSeq);
                    }
                    long startTime = SystemClock.uptimeMillis();
                    record.waitingForNetwork = true;
                    record.networkStateLock.wait(this.mWaitForNetworkTimeoutMs);
                    record.waitingForNetwork = false;
                    long totalTime = SystemClock.uptimeMillis() - startTime;
                    if (totalTime >= this.mWaitForNetworkTimeoutMs || ActivityManagerDebugConfig.DEBUG_NETWORK) {
                        Slog.w(TAG_NETWORK, "Total time waited for network rules to get updated: " + totalTime + ". Uid: " + callingUid + " procStateSeq: " + procStateSeq + " UidRec: " + record + " validateUidRec: " + this.mValidateUids.get(callingUid));
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        }
    }

    public void waitForBroadcastIdle(PrintWriter pw) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        while (true) {
            boolean idle = true;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
                    for (BroadcastQueue queue : broadcastQueueArr) {
                        if (!queue.isIdle()) {
                            String msg = "Waiting for queue " + queue + " to become idle...";
                            pw.println(msg);
                            pw.println(queue.describeState());
                            pw.flush();
                            Slog.v(TAG, msg);
                            queue.cancelDeferrals();
                            idle = false;
                        }
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            if (idle) {
                pw.println("All broadcast queues are idle!");
                pw.flush();
                Slog.v(TAG, "All broadcast queues are idle!");
                return;
            }
            SystemClock.sleep(1000);
        }
    }

    /* JADX INFO: finally extract failed */
    public void killPackageDependents(String packageName, int userId) {
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (packageName != null) {
            long callingId = Binder.clearCallingIdentity();
            int pkgUid = -1;
            try {
                pkgUid = AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, userId);
            } catch (RemoteException e) {
            }
            if (userId == -1 || pkgUid != -1) {
                try {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            ProcessList processList = this.mProcessList;
                            int appId = UserHandle.getAppId(pkgUid);
                            processList.killPackageProcessesLocked(packageName, appId, userId, 0, "dep: " + packageName);
                        } catch (Throwable th) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(callingId);
                }
            } else {
                throw new IllegalArgumentException("Cannot kill dependents of non-existing package " + packageName);
            }
        } else {
            throw new NullPointerException("Cannot kill the dependents of a package without its name.");
        }
    }

    public int restartUserInBackground(int userId) {
        return this.mUserController.restartUser(userId, false);
    }

    public void scheduleApplicationInfoChanged(List<String> packageNames, int userId) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long origId = Binder.clearCallingIdentity();
                try {
                    updateApplicationInfoLocked(packageNames, userId);
                } finally {
                    Binder.restoreCallingIdentity(origId);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* JADX INFO: finally extract failed */
    public void updateSystemUiContext() {
        PackageManagerInternal packageManagerInternal;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                packageManagerInternal = getPackageManagerInternalLocked();
            } catch (Throwable packageManagerInternal2) {
                resetPriorityAfterLockedSection();
                throw packageManagerInternal2;
            }
        }
        resetPriorityAfterLockedSection();
        ActivityThread.currentActivityThread().handleSystemApplicationInfoChanged(packageManagerInternal.getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1024, Binder.getCallingUid(), 0));
    }

    /* access modifiers changed from: package-private */
    public void updateApplicationInfoLocked(List<String> packagesToUpdate, int userId) {
        boolean updateFrameworkRes = packagesToUpdate.contains(PackageManagerService.PLATFORM_PACKAGE_NAME);
        if (updateFrameworkRes) {
            PackageParser.readConfigUseRoundIcon((Resources) null);
        }
        this.mProcessList.updateApplicationInfoLocked(packagesToUpdate, userId, updateFrameworkRes || packagesToUpdate.contains("androidhwext"));
        if (updateFrameworkRes) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            DisplayManagerInternal display = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (display != null) {
                Objects.requireNonNull(display);
                executor.execute(new Runnable(display) {
                    /* class com.android.server.am.$$Lambda$gATL8uvTPRd405IfefK1RL9bNqA */
                    private final /* synthetic */ DisplayManagerInternal f$0;

                    {
                        this.f$0 = r1;
                    }

                    @Override // java.lang.Runnable
                    public final void run() {
                        this.f$0.onOverlayChanged();
                    }
                });
            }
            WindowManagerService windowManagerService = this.mWindowManager;
            if (windowManagerService != null) {
                Objects.requireNonNull(windowManagerService);
                executor.execute(new Runnable(windowManagerService) {
                    /* class com.android.server.am.$$Lambda$5hokEl5hcign5FXeGZdl53qh2zg */
                    private final /* synthetic */ WindowManagerService f$0;

                    {
                        this.f$0 = r1;
                    }

                    @Override // java.lang.Runnable
                    public final void run() {
                        this.f$0.onOverlayChanged();
                    }
                });
            }
        }
    }

    public void attachAgent(String process, String path) {
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord proc = findProcessLocked(process, 0, "attachAgent");
                    if (proc == null || proc.thread == null) {
                        throw new IllegalArgumentException("Unknown process: " + process);
                    }
                    if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                        if ((proc.info.flags & 2) == 0) {
                            throw new SecurityException("Process not debuggable: " + proc);
                        }
                    }
                    proc.thread.attachAgent(path);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } catch (RemoteException e) {
            throw new IllegalStateException("Process disappeared");
        }
    }

    public void prepareForPossibleShutdown() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mUsageStatsService != null) {
                    this.mUsageStatsService.prepareForPossibleShutdown();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @VisibleForTesting
    public static class Injector {
        private NetworkManagementInternal mNmi;

        public Context getContext() {
            return null;
        }

        public AppOpsService getAppOpsService(File file, Handler handler) {
            return new AppOpsService(file, handler);
        }

        public Handler getUiHandler(ActivityManagerService service) {
            Objects.requireNonNull(service);
            return new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int uid) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(uid);
            }
            return false;
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (NetworkManagementInternal) LocalServices.getService(NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }
    }

    public void startDelegateShellPermissionIdentity(int delegateUid, String[] permissions) {
        if (UserHandle.getCallingAppId() == 2000 || UserHandle.getCallingAppId() == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (this.mAppOpsService.getAppOpsServiceDelegate() != getPackageManagerInternalLocked().getCheckPermissionDelegate()) {
                        throw new IllegalStateException("Bad shell delegate state");
                    } else if (this.mAppOpsService.getAppOpsServiceDelegate() == null) {
                        int instrCount = this.mActiveInstrumentation.size();
                        for (int i = 0; i < instrCount; i++) {
                            ActiveInstrumentation instr = this.mActiveInstrumentation.get(i);
                            if (instr.mTargetInfo.uid == delegateUid) {
                                if (instr.mUiAutomationConnection != null) {
                                    ShellDelegate shellDelegate = new ShellDelegate(instr.mTargetInfo.packageName, delegateUid, permissions);
                                    this.mAppOpsService.setAppOpsServiceDelegate(shellDelegate);
                                    getPackageManagerInternalLocked().setCheckPermissionDelegate(shellDelegate);
                                    resetPriorityAfterLockedSection();
                                    return;
                                } else {
                                    throw new SecurityException("Shell can delegate its permissions only to an instrumentation started from the shell");
                                }
                            }
                        }
                        resetPriorityAfterLockedSection();
                    } else if (this.mAppOpsService.getAppOpsServiceDelegate() instanceof ShellDelegate) {
                        ShellDelegate delegate = this.mAppOpsService.getAppOpsServiceDelegate();
                        if (delegate.getDelegateUid() == delegateUid) {
                            delegate.setPermissions(permissions);
                            return;
                        }
                        throw new SecurityException("Shell can delegate permissions only to one instrumentation at a time");
                    } else {
                        throw new IllegalStateException("Bad shell delegate state");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
        } else {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
    }

    public void stopDelegateShellPermissionIdentity() {
        if (UserHandle.getCallingAppId() == 2000 || UserHandle.getCallingAppId() == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAppOpsService.setAppOpsServiceDelegate(null);
                    getPackageManagerInternalLocked().setCheckPermissionDelegate((PackageManagerInternal.CheckPermissionDelegate) null);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only the shell can delegate its permissions");
    }

    private class ShellDelegate implements AppOpsManagerInternal.CheckOpsDelegate, PackageManagerInternal.CheckPermissionDelegate {
        private String[] mPermissions;
        private final String mTargetPackageName;
        private final int mTargetUid;

        ShellDelegate(String targetPacakgeName, int targetUid, String[] permissions) {
            this.mTargetPackageName = targetPacakgeName;
            this.mTargetUid = targetUid;
            this.mPermissions = permissions;
        }

        /* access modifiers changed from: package-private */
        public int getDelegateUid() {
            return this.mTargetUid;
        }

        /* access modifiers changed from: package-private */
        public void setPermissions(String[] permissions) {
            this.mPermissions = permissions;
        }

        public int checkOperation(int code, int uid, String packageName, boolean raw, QuadFunction<Integer, Integer, String, Boolean, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetOp(code)) {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(uid), packageName, Boolean.valueOf(raw))).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ((Integer) superImpl.apply(Integer.valueOf(code), 2000, NotificationShellCmd.NOTIFICATION_PACKAGE, Boolean.valueOf(raw))).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int checkAudioOperation(int code, int usage, int uid, String packageName, QuadFunction<Integer, Integer, Integer, String, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetOp(code)) {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(usage), Integer.valueOf(uid), packageName)).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(usage), 2000, NotificationShellCmd.NOTIFICATION_PACKAGE)).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int noteOperation(int code, int uid, String packageName, TriFunction<Integer, Integer, String, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetOp(code)) {
                return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(uid), packageName)).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ActivityManagerService.this.mAppOpsService.noteProxyOperation(code, 2000, NotificationShellCmd.NOTIFICATION_PACKAGE, uid, packageName);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int checkPermission(String permName, String pkgName, int userId, TriFunction<String, String, Integer, Integer> superImpl) {
            if (!this.mTargetPackageName.equals(pkgName) || !isTargetPermission(permName)) {
                return ((Integer) superImpl.apply(permName, pkgName, Integer.valueOf(userId))).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return ((Integer) superImpl.apply(permName, NotificationShellCmd.NOTIFICATION_PACKAGE, Integer.valueOf(userId))).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        public int checkUidPermission(String permName, int uid, BiFunction<String, Integer, Integer> superImpl) {
            if (uid != this.mTargetUid || !isTargetPermission(permName)) {
                return superImpl.apply(permName, Integer.valueOf(uid)).intValue();
            }
            long identity = Binder.clearCallingIdentity();
            try {
                return superImpl.apply(permName, 2000).intValue();
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }

        private boolean isTargetOp(int code) {
            String permission;
            if (this.mPermissions == null || (permission = AppOpsManager.opToPermission(code)) == null) {
                return true;
            }
            return isTargetPermission(permission);
        }

        private boolean isTargetPermission(String permission) {
            String[] strArr = this.mPermissions;
            return strArr == null || ArrayUtils.contains(strArr, permission);
        }
    }

    /* access modifiers changed from: package-private */
    public void maybeTriggerWatchdog() {
    }

    private boolean isOnOffloadQueue(int flags) {
        return this.mEnableOffloadQueue && (Integer.MIN_VALUE & flags) != 0;
    }

    public ParcelFileDescriptor getLifeMonitor() {
        ParcelFileDescriptor dup;
        if (isCallerShell()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (this.mLifeMonitorFds == null) {
                        this.mLifeMonitorFds = ParcelFileDescriptor.createPipe();
                    }
                    dup = this.mLifeMonitorFds[0].dup();
                    try {
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (IOException e) {
                    Slog.w(TAG, "Unable to create pipe", e);
                    resetPriorityAfterLockedSection();
                    return null;
                }
            }
            resetPriorityAfterLockedSection();
            return dup;
        }
        throw new SecurityException("Only shell can call it");
    }

    /* JADX WARN: Type inference failed for: r0v0, types: [com.android.server.am.ActivityManagerService$HwInnerActivityManagerService, android.os.IBinder] */
    /* JADX WARNING: Unknown variable types count: 1 */
    public IBinder getHwInnerService() {
        return this.mHwInnerService;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ActivityManagerService getAMSForLock() {
        return this;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean removeProcessLockedInner(ProcessRecord app, int pid, IBinder thread, boolean callerWillRestart, boolean allowRestart, String reason) {
        if (app == null) {
            return false;
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord curProc = this.mPidsSelfLocked.get(pid);
            if (curProc != app) {
                Slog.w(TAG, "Spurious death for " + app + ", curProc for " + pid + ": " + curProc);
                return false;
            }
        }
        String name = app.processName;
        int uid = app.uid;
        ProcessRecord old = (ProcessRecord) this.mProcessList.mProcessNames.get(name, uid);
        if (old != app) {
            Slog.w(TAG, "Ignoring remove of inactive process: " + app + ", old: " + old);
            return false;
        }
        this.mProcessList.removeProcessNameLocked(name, uid);
        if (app.pid != pid || app.thread == null || thread == null || app.thread.asBinder() != thread) {
            Slog.i(TAG, "Process " + app.processName + " (pid " + pid + ") has changed: ");
            return false;
        }
        this.mPidsSelfLocked.remove(app);
        this.mHandler.removeMessages(20, app);
        handleAppDiedLocked(app, callerWillRestart, allowRestart);
        if (!app.isPersistent() || app.isolated || callerWillRestart) {
            return true;
        }
        removeLruProcessLocked(app);
        addAppLocked(app.info, null, false, null);
        return true;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean finishDisabledPackageActivitiesLocked(String packageName, boolean doit, boolean evenPersistent, int userId) {
        return this.mAtmInternal.onForceStopPackage(packageName, doit, evenPersistent, userId);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean bringDownDisabledPackageServicesLocked(String packageName, Set<String> filterByClasses, int userId, boolean evenPersistent, boolean doit) {
        return this.mServices.bringDownDisabledPackageServicesLocked(packageName, filterByClasses, userId, evenPersistent, doit);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public SparseArray<ArrayMap<String, ArrayList<Intent>>> getStickyBroadcasts() {
        return this.mStickyBroadcasts;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ProviderMap getProviderMap() {
        return this.mProviderMap;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ArrayList<ContentProviderRecord> getLaunchingProviders() {
        return this.mLaunchingProviders;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public BroadcastQueue[] getBroadcastQueues() {
        return this.mBroadcastQueues;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public BroadcastQueue getBgBroadcastQueue() {
        return this.mBgBroadcastQueue;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public void stopAssociationLockedInner(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent) {
        stopAssociationLocked(sourceUid, sourceProcess, targetUid, 0, targetComponent, null);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public void finishForceStopPackageLockedInner(String packageName, int uid) {
        finishForceStopPackageLocked(packageName, uid);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public AlarmManagerService getAlarmService() {
        return this.mAlms;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public int getAmsPid() {
        return MY_PID;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public UserController getUserController() {
        return this.mUserController;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public Context getUiContext() {
        return this.mUiContext;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean getActivityIdle() {
        return this.mActivityIdle;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean getSystemReady() {
        return this.mSystemReady;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public SystemServiceManager getServiceManager() {
        return this.mSystemServiceManager;
    }

    public TaskChangeNotificationController getHwTaskChangeController() {
        return null;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean isKeyguardLockedEx() {
        return false;
    }

    /* access modifiers changed from: package-private */
    public void setWhiteListProcessGroup(ProcessRecord app, ProcessRecord TOP_APP, boolean bConnectTopApp) {
        if (app != null && app.mCurSchedGroup != 0 && app != TOP_APP && !bConnectTopApp && this.mDAProxy.getCPUConfigGroupBG() == this.mDAProxy.isCPUConfigWhiteList(app.processName)) {
            app.mCurSchedGroup = 0;
        }
    }

    public void reportCamera(int uid, int status) {
        this.mDAProxy.reportCamera(uid, status);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public File dumpStackTracesInner(boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        return dumpStackTraces(firstPids, processCpuTracker, lastPids, nativePids);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean forceStopPackageLockedInner(String pkg, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        return forceStopPackageLocked(pkg, appId, callerWillRestart, purgeCache, doit, evenPersistent, uninstalling, userId, reason);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public HwDAMonitorProxy getDAMonitor() {
        return this.mDAProxy;
    }

    public boolean canCleanTaskRecord(String packageName) {
        return this.mHwAMSEx.canCleanTaskRecord(packageName);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public void startPersistApp(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        addAppLocked(info, customProcess, isolated, abiOverride);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public PackageManagerInternal getPackageManagerInternal() {
        return getPackageManagerInternalLocked();
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ProcessRecord getProcessRecord(String processName, int uid, boolean keepIfLarge) {
        return getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    public boolean handleANRFilterFIFO(int uid, int cmd) {
        return this.mHwAMSEx.handleANRFilterFIFO(uid, cmd);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public AppErrors getAppErrors() {
        return this.mAppErrors;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public Handler getUiHandler() {
        return this.mUiHandler;
    }

    public boolean zrHungSendEvent(String eventType, int pid, int uid, String packageName, String processName, String event) {
        return this.mHwAMSEx.zrHungSendEvent(eventType, pid, uid, packageName, processName, event);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public PidMap getPidsSelfLocked() {
        return this.mPidsSelfLocked;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ActivityManagerConstants getConstants() {
        return this.mConstants;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ProcessRecord newProcessRecordLockedEx(ApplicationInfo info, String customProcess, boolean isolated, int isolatedUid, HostingRecord hostingRecord) {
        return this.mProcessList.newProcessRecordLocked(info, customProcess, isolated, isolatedUid, hostingRecord);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public void updateLruProcessLockedEx(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        updateLruProcessLocked(app, activityChange, client);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public void updateOomAdjLockedEx(String oomAdjReason) {
        updateOomAdjLocked(oomAdjReason);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public void startProcessLockedEx(ProcessRecord app, HostingRecord hostingRecord, String abiOverride) {
        this.mProcessList.startProcessLocked(app, hostingRecord, abiOverride);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ProcessRecord getProcessRecordLockedEx(String processName, int uid, boolean keepIfLarge) {
        return getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean cleanupAppInLaunchingProvidersLockedEx(ProcessRecord app, boolean alwaysBad) {
        return cleanupAppInLaunchingProvidersLocked(app, alwaysBad);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public boolean removeProcessLockedEx(ProcessRecord app, boolean callerWillRestart, boolean allowRestart, String reason) {
        return this.mProcessList.removeProcessLocked(app, callerWillRestart, allowRestart, reason);
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public int getMyPid() {
        return MY_PID;
    }

    @Override // com.android.server.am.IHwActivityManagerInner
    public ArrayList<ProcessRecord> getLruProcesses() {
        return this.mProcessList.mLruProcesses;
    }

    public class HwInnerActivityManagerService extends IHwActivityManager.Stub {
        ActivityManagerService mAMS;

        HwInnerActivityManagerService(ActivityManagerService ams) {
            this.mAMS = ams;
        }

        private boolean checkPermissionForHAM() {
            int uid = UserHandle.getAppId(Binder.getCallingUid());
            if (uid == 1000) {
                return true;
            }
            Slog.e(ActivityManagerService.TAG, "Process Permission error! uid:" + uid);
            return false;
        }

        public void registerDAMonitorCallback(IHwDAMonitorCallback callback) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mDAProxy.registerDAMonitorCallback(callback);
            }
        }

        public void setCpusetSwitch(boolean enable, int subSwitch) {
            if (checkPermissionForHAM()) {
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                activityManagerService.mCpusetSwitch = enable;
                if (subSwitch >= 0) {
                    activityManagerService.mSubSwitch = subSwitch;
                }
                if (ActivityManagerService.this.mWindowManager != null) {
                    ActivityManagerService.this.mWindowManager.setRtgSchedSwitch(ActivityManagerService.this.isFeatureEnable(1048576));
                }
            }
        }

        public boolean cleanPackageRes(List<String> packageList, Map alarmTags, int targetUid, boolean cleanAlarm, boolean isNative, boolean hasPerceptAlarm) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.cleanPackageRes(packageList, alarmTags, targetUid, cleanAlarm, isNative, hasPerceptAlarm);
        }

        public void reportScreenRecord(int uid, int pid, int status) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mDAProxy.reportScreenRecord(uid, pid, status);
            }
        }

        public boolean handleANRFilterFIFO(int uid, int cmd) {
            return ActivityManagerService.this.mHwAMSEx.handleANRFilterFIFO(uid, cmd);
        }

        public void handleShowAppEyeAnrUi(int pid, int uid, String processName, String packageName) {
            ActivityManagerService.this.mHwAMSEx.zrHungSendEvent("handleshowdialog", pid, uid, packageName, processName, null);
        }

        public void setProcessRecForPid(int pid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.setProcessRecForPid(pid);
            }
        }

        public void requestProcessGroupChange(int pid, int oldGroup, int newGroup, int isLimit) {
            if (checkPermissionForHAM() && ActivityManagerService.this.mCpusetSwitch && ActivityManagerService.this.mOomAdjuster != null) {
                ActivityManagerService.this.mOomAdjuster.requestProcessGroupChange(pid, oldGroup, newGroup, isLimit);
            }
        }

        public List<String> getPidWithUiFromUid(int uid) {
            if (!checkPermissionForHAM()) {
                return null;
            }
            return ActivityManagerService.this.mHwAMSEx.getPidWithUiFromUid(uid);
        }

        public int preloadApplication(String packageName, int userId) {
            return ActivityManagerService.this.mHwAMSEx.preloadApplication(packageName, userId);
        }

        public int preloadAppForLauncher(String packageName, int userId, int preloadType) {
            return ActivityManagerService.this.mHwAMSEx.preloadAppForLauncher(packageName, userId, preloadType);
        }

        public boolean killProcessRecordFromIAware(ProcessInfo procInfo, boolean restartservice, boolean isAsynchronous, String reason, boolean checkAdj) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromIAwareInternal(procInfo, restartservice, isAsynchronous, reason, false, checkAdj);
        }

        public boolean killProcessRecordFromIAwareNative(ProcessInfo procInfo, boolean restartservice, boolean isAsynchronous, String reason) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromIAwareInternal(procInfo, restartservice, isAsynchronous, reason, true, true);
        }

        public boolean killProcessRecordFromMTM(ProcessInfo procInfo, boolean restartservice, String reason) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromMTM(procInfo, restartservice, reason);
        }

        public boolean cleanProcessResourceFast(String processName, int pid, IBinder thread, boolean restartService, boolean isNative) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.cleanProcessResourceFast(processName, pid, thread, restartService, isNative);
        }

        public boolean killProcessRecordFast(String processName, int pid, int uid, boolean restartservice, boolean isAsynchronous, String reason, boolean needCheckAdj) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFast(processName, pid, uid, restartservice, isAsynchronous, reason, needCheckAdj);
        }

        public boolean killNativeProcessRecordFast(String processName, int pid, int uid, boolean restartservice, boolean isAsynchronous, String reason) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killNativeProcessRecordFast(processName, pid, uid, restartservice, isAsynchronous, reason);
        }

        public boolean isProcessExistLocked(String processName, int uid) {
            if (checkPermissionForHAM() && ActivityManagerService.this.getProcessRecordLocked(processName, uid, true) != null) {
                return true;
            }
            return false;
        }

        public void removePackageAlarm(String pkg, List<String> tags, int targetUid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.removePackageAlarm(pkg, tags, targetUid);
            }
        }

        public boolean getProcessRecordFromMTM(ProcessInfo procInfo) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.getProcessRecordFromMTM(procInfo);
        }

        public void setAndRestoreMaxAdjIfNeed(List<String> adjCustPkg) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.setAndRestoreMaxAdjIfNeed(adjCustPkg);
            }
        }

        public void reportProcessDied(int pid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.reportProcessDied(pid);
            }
        }

        public void reportAssocDisable() {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.reportAssocDisable();
            }
        }

        public boolean canPickColor(String activity) {
            return ActivityManagerService.this.mHwAMSEx.canPickColor(activity);
        }

        public void registerServiceHooker(IBinder hooker, Intent filter) {
            ActivityManagerService.this.mHwAMSEx.registerServiceHooker(hooker, filter);
        }

        public void unregisterServiceHooker(IBinder hooker) {
            ActivityManagerService.this.mHwAMSEx.unregisterServiceHooker(hooker);
        }

        public void forceStopPackages(List<String> packagesNames, int userId) {
            ActivityManagerService.this.mHwAMSEx.forceStopPackages(packagesNames, userId);
        }
    }

    public boolean isExcludedInBGCheck(String pkg, String action) {
        return this.mDAProxy.isExcludedInBGCheck(pkg, action);
    }
}
