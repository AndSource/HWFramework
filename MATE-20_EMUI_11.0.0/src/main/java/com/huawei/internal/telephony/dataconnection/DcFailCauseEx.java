package com.huawei.internal.telephony.dataconnection;

import android.content.Context;
import com.android.internal.telephony.dataconnection.DcFailCause;
import com.huawei.annotation.HwSystemApi;
import java.util.HashMap;

public enum DcFailCauseEx {
    NONE(DcFailCause.NONE),
    OPERATOR_BARRED(DcFailCause.OPERATOR_BARRED),
    NAS_SIGNALLING(DcFailCause.NAS_SIGNALLING),
    LLC_SNDCP(DcFailCause.LLC_SNDCP),
    INSUFFICIENT_RESOURCES(DcFailCause.INSUFFICIENT_RESOURCES),
    MISSING_UNKNOWN_APN(DcFailCause.MISSING_UNKNOWN_APN),
    UNKNOWN_PDP_ADDRESS_TYPE(DcFailCause.UNKNOWN_PDP_ADDRESS_TYPE),
    USER_AUTHENTICATION(DcFailCause.USER_AUTHENTICATION),
    ACTIVATION_REJECT_GGSN(DcFailCause.ACTIVATION_REJECT_GGSN),
    ACTIVATION_REJECT_UNSPECIFIED(DcFailCause.ACTIVATION_REJECT_UNSPECIFIED),
    SERVICE_OPTION_NOT_SUPPORTED(DcFailCause.SERVICE_OPTION_NOT_SUPPORTED),
    SERVICE_OPTION_NOT_SUBSCRIBED(DcFailCause.SERVICE_OPTION_NOT_SUBSCRIBED),
    SERVICE_OPTION_OUT_OF_ORDER(DcFailCause.SERVICE_OPTION_OUT_OF_ORDER),
    NSAPI_IN_USE(DcFailCause.NSAPI_IN_USE),
    REGULAR_DEACTIVATION(DcFailCause.REGULAR_DEACTIVATION),
    QOS_NOT_ACCEPTED(DcFailCause.QOS_NOT_ACCEPTED),
    NETWORK_FAILURE(DcFailCause.NETWORK_FAILURE),
    UMTS_REACTIVATION_REQ(DcFailCause.UMTS_REACTIVATION_REQ),
    FEATURE_NOT_SUPP(DcFailCause.FEATURE_NOT_SUPP),
    TFT_SEMANTIC_ERROR(DcFailCause.TFT_SEMANTIC_ERROR),
    TFT_SYTAX_ERROR(DcFailCause.TFT_SYTAX_ERROR),
    UNKNOWN_PDP_CONTEXT(DcFailCause.UNKNOWN_PDP_CONTEXT),
    FILTER_SEMANTIC_ERROR(DcFailCause.FILTER_SEMANTIC_ERROR),
    FILTER_SYTAX_ERROR(DcFailCause.FILTER_SYTAX_ERROR),
    PDP_WITHOUT_ACTIVE_TFT(DcFailCause.PDP_WITHOUT_ACTIVE_TFT),
    ONLY_IPV4_ALLOWED(DcFailCause.ONLY_IPV4_ALLOWED),
    ONLY_IPV6_ALLOWED(DcFailCause.ONLY_IPV6_ALLOWED),
    ONLY_SINGLE_BEARER_ALLOWED(DcFailCause.ONLY_SINGLE_BEARER_ALLOWED),
    ESM_INFO_NOT_RECEIVED(DcFailCause.ESM_INFO_NOT_RECEIVED),
    PDN_CONN_DOES_NOT_EXIST(DcFailCause.PDN_CONN_DOES_NOT_EXIST),
    MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED(DcFailCause.MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED),
    MAX_ACTIVE_PDP_CONTEXT_REACHED(DcFailCause.MAX_ACTIVE_PDP_CONTEXT_REACHED),
    UNSUPPORTED_APN_IN_CURRENT_PLMN(DcFailCause.UNSUPPORTED_APN_IN_CURRENT_PLMN),
    INVALID_TRANSACTION_ID(DcFailCause.INVALID_TRANSACTION_ID),
    MESSAGE_INCORRECT_SEMANTIC(DcFailCause.MESSAGE_INCORRECT_SEMANTIC),
    INVALID_MANDATORY_INFO(DcFailCause.INVALID_MANDATORY_INFO),
    MESSAGE_TYPE_UNSUPPORTED(DcFailCause.MESSAGE_TYPE_UNSUPPORTED),
    MSG_TYPE_NONCOMPATIBLE_STATE(DcFailCause.MSG_TYPE_NONCOMPATIBLE_STATE),
    UNKNOWN_INFO_ELEMENT(DcFailCause.UNKNOWN_INFO_ELEMENT),
    CONDITIONAL_IE_ERROR(DcFailCause.CONDITIONAL_IE_ERROR),
    MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE(DcFailCause.MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE),
    PROTOCOL_ERRORS(DcFailCause.PROTOCOL_ERRORS),
    APN_TYPE_CONFLICT(DcFailCause.APN_TYPE_CONFLICT),
    INVALID_PCSCF_ADDR(DcFailCause.INVALID_PCSCF_ADDR),
    INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN(DcFailCause.INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN),
    EMM_ACCESS_BARRED(DcFailCause.EMM_ACCESS_BARRED),
    EMERGENCY_IFACE_ONLY(DcFailCause.EMERGENCY_IFACE_ONLY),
    IFACE_MISMATCH(DcFailCause.IFACE_MISMATCH),
    COMPANION_IFACE_IN_USE(DcFailCause.COMPANION_IFACE_IN_USE),
    IP_ADDRESS_MISMATCH(DcFailCause.IP_ADDRESS_MISMATCH),
    IFACE_AND_POL_FAMILY_MISMATCH(DcFailCause.IFACE_AND_POL_FAMILY_MISMATCH),
    EMM_ACCESS_BARRED_INFINITE_RETRY(DcFailCause.EMM_ACCESS_BARRED_INFINITE_RETRY),
    AUTH_FAILURE_ON_EMERGENCY_CALL(DcFailCause.AUTH_FAILURE_ON_EMERGENCY_CALL),
    NOT_ALLOWED_RADIO_TECHNOLOGY_IWLAN(DcFailCause.NOT_ALLOWED_RADIO_TECHNOLOGY_IWLAN),
    OEM_DCFAILCAUSE_1(DcFailCause.OEM_DCFAILCAUSE_1),
    OEM_DCFAILCAUSE_2(DcFailCause.OEM_DCFAILCAUSE_2),
    OEM_DCFAILCAUSE_3(DcFailCause.OEM_DCFAILCAUSE_3),
    OEM_DCFAILCAUSE_4(DcFailCause.OEM_DCFAILCAUSE_4),
    OEM_DCFAILCAUSE_5(DcFailCause.OEM_DCFAILCAUSE_5),
    OEM_DCFAILCAUSE_6(DcFailCause.OEM_DCFAILCAUSE_6),
    OEM_DCFAILCAUSE_7(DcFailCause.OEM_DCFAILCAUSE_7),
    OEM_DCFAILCAUSE_8(DcFailCause.OEM_DCFAILCAUSE_8),
    OEM_DCFAILCAUSE_9(DcFailCause.OEM_DCFAILCAUSE_9),
    OEM_DCFAILCAUSE_10(DcFailCause.OEM_DCFAILCAUSE_10),
    OEM_DCFAILCAUSE_11(DcFailCause.OEM_DCFAILCAUSE_11),
    OEM_DCFAILCAUSE_12(DcFailCause.OEM_DCFAILCAUSE_12),
    OEM_DCFAILCAUSE_13(DcFailCause.OEM_DCFAILCAUSE_13),
    OEM_DCFAILCAUSE_14(DcFailCause.OEM_DCFAILCAUSE_14),
    OEM_DCFAILCAUSE_15(DcFailCause.OEM_DCFAILCAUSE_15),
    REGISTRATION_FAIL(DcFailCause.REGISTRATION_FAIL),
    GPRS_REGISTRATION_FAIL(DcFailCause.GPRS_REGISTRATION_FAIL),
    SIGNAL_LOST(DcFailCause.SIGNAL_LOST),
    PREF_RADIO_TECH_CHANGED(DcFailCause.PREF_RADIO_TECH_CHANGED),
    RADIO_POWER_OFF(DcFailCause.RADIO_POWER_OFF),
    TETHERED_CALL_ACTIVE(DcFailCause.TETHERED_CALL_ACTIVE),
    ERROR_UNSPECIFIED(DcFailCause.ERROR_UNSPECIFIED),
    PDP_ACTIVE_LIMIT(DcFailCause.PDP_ACTIVE_LIMIT),
    UNKNOWN(DcFailCause.UNKNOWN),
    RADIO_NOT_AVAILABLE(DcFailCause.RADIO_NOT_AVAILABLE),
    UNACCEPTABLE_NETWORK_PARAMETER(DcFailCause.UNACCEPTABLE_NETWORK_PARAMETER),
    CONNECTION_TO_DATACONNECTIONAC_BROKEN(DcFailCause.CONNECTION_TO_DATACONNECTIONAC_BROKEN),
    LOST_CONNECTION(DcFailCause.LOST_CONNECTION),
    RESET_BY_FRAMEWORK(DcFailCause.RESET_BY_FRAMEWORK),
    NETWORK_RECONFIGURE(DcFailCause.NETWORK_RECONFIGURE);
    
    private static final HashMap<Integer, DcFailCauseEx> sErrorCodeToFailCauseMap = new HashMap<>();
    private final DcFailCause mFailCause;

    static {
        DcFailCauseEx[] values = values();
        for (DcFailCauseEx fc : values) {
            sErrorCodeToFailCauseMap.put(Integer.valueOf(fc.getErrorCode()), fc);
        }
    }

    private DcFailCauseEx(DcFailCause failCause) {
        this.mFailCause = failCause;
    }

    public int getErrorCode() {
        return this.mFailCause.getErrorCode();
    }

    @HwSystemApi
    public static DcFailCauseEx fromInt(int errorCode) {
        DcFailCauseEx fc = sErrorCodeToFailCauseMap.get(Integer.valueOf(errorCode));
        if (fc == null) {
            return UNKNOWN;
        }
        return fc;
    }

    @HwSystemApi
    public boolean isPermanentFailure(Context context, int subId) {
        return this.mFailCause.isPermanentFailure(context, subId);
    }
}
