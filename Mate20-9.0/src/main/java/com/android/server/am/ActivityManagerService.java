package com.android.server.am;

import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.ActivityOptions;
import android.app.ActivityThread;
import android.app.AlertDialog;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.ApplicationErrorReport;
import android.app.BroadcastOptions;
import android.app.ContentProviderHolder;
import android.app.Dialog;
import android.app.GrantedUriPermission;
import android.app.IActivityController;
import android.app.IApplicationThread;
import android.app.IAssistDataReceiver;
import android.app.IHwActivityNotifier;
import android.app.IInstrumentationWatcher;
import android.app.INotificationManager;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidObserver;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.PictureInPictureParams;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.RemoteAction;
import android.app.WaitResult;
import android.app.WindowConfiguration;
import android.app.admin.DevicePolicyCache;
import android.app.assist.AssistContent;
import android.app.assist.AssistStructure;
import android.app.backup.IBackupManager;
import android.app.servertransaction.ConfigurationChangeItem;
import android.app.usage.UsageStatsManagerInternal;
import android.common.HwFrameworkFactory;
import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ComponentName;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IContentProvider;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.ConfigurationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageManager;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.ParceledListSlice;
import android.content.pm.PathPermission;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.UserInfo;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.IHwConfiguration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.freeform.HwFreeFormManager;
import android.freeform.HwFreeFormUtils;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.graphics.Rect;
import android.hardware.display.DisplayManagerInternal;
import android.hdm.HwDeviceManager;
import android.hwtheme.HwThemeManager;
import android.iawareperf.UniPerf;
import android.metrics.LogMaker;
import android.net.NetworkPolicyManager;
import android.net.ProxyInfo;
import android.net.Uri;
import android.net.util.NetworkConstants;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.DropBoxManager;
import android.os.Environment;
import android.os.FactoryTest;
import android.os.FileObserver;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.IMWThirdpartyCallback;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.LocaleList;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PersistableBundle;
import android.os.PowerManager;
import android.os.PowerManagerInternal;
import android.os.Process;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.ShellCallback;
import android.os.StrictMode;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UpdateLock;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.storage.IStorageManager;
import android.os.storage.StorageManager;
import android.os.storage.StorageManagerInternal;
import android.provider.Settings;
import android.rms.HwSysResource;
import android.rms.iaware.AwareAppStartBinder;
import android.service.voice.IVoiceInteractionSession;
import android.service.voice.VoiceInteractionManagerInternal;
import android.telecom.TelecomManager;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.AtomicFile;
import android.util.DebugUtils;
import android.util.EventLog;
import android.util.Flog;
import android.util.HwPCUtils;
import android.util.HwSlog;
import android.util.Jlog;
import android.util.Log;
import android.util.LongSparseArray;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.StatsLog;
import android.util.TimeUtils;
import android.util.TimingsTraceLog;
import android.util.Xml;
import android.util.proto.ProtoOutputStream;
import android.util.proto.ProtoUtils;
import android.view.IRecentsAnimationRunner;
import android.view.LayoutInflater;
import android.view.RemoteAnimationAdapter;
import android.view.RemoteAnimationDefinition;
import android.view.View;
import android.view.WindowManager;
import android.view.autofill.AutofillManagerInternal;
import android.zrhung.IZrHung;
import android.zrhung.ZrHungData;
import com.android.internal.annotations.GuardedBy;
import com.android.internal.annotations.VisibleForTesting;
import com.android.internal.app.AssistUtils;
import com.android.internal.app.DumpHeapActivity;
import com.android.internal.app.IAppOpsCallback;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.IVoiceInteractor;
import com.android.internal.app.ProcessMap;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BinderInternal;
import com.android.internal.os.ByteTransferPipe;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.TransferPipe;
import com.android.internal.os.Zygote;
import com.android.internal.os.logging.MetricsLoggerWrapper;
import com.android.internal.policy.IKeyguardDismissCallback;
import com.android.internal.policy.KeyguardDismissCallback;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FastXmlSerializer;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.XmlUtils;
import com.android.server.AbsLocationManagerService;
import com.android.server.AlarmManagerService;
import com.android.server.AnimationThread;
import com.android.server.AppOpsService;
import com.android.server.AttributeCache;
import com.android.server.BatteryService;
import com.android.server.BinderCallsStatsService;
import com.android.server.DeviceIdleController;
import com.android.server.DisplayThread;
import com.android.server.EventLogTags;
import com.android.server.FgThread;
import com.android.server.GraphicsStatsService;
import com.android.server.HwServiceExFactory;
import com.android.server.HwServiceFactory;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalServices;
import com.android.server.LockGuard;
import com.android.server.NetworkManagementInternal;
import com.android.server.RescueParty;
import com.android.server.ServiceThread;
import com.android.server.SmartShrinker;
import com.android.server.SystemConfig;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiModeManagerService;
import com.android.server.UiThread;
import com.android.server.Watchdog;
import com.android.server.am.ActiveServices;
import com.android.server.am.ActivityStack;
import com.android.server.am.LaunchTimeTracker;
import com.android.server.am.MemoryStatUtil;
import com.android.server.am.PendingIntentRecord;
import com.android.server.am.UidRecord;
import com.android.server.am.UriPermission;
import com.android.server.audio.AudioService;
import com.android.server.backup.BackupAgentTimeoutParameters;
import com.android.server.connectivity.NetworkAgentInfo;
import com.android.server.firewall.IntentFirewall;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.job.JobSchedulerShellCommand;
import com.android.server.job.controllers.JobStatus;
import com.android.server.mtm.taskstatus.ProcessInfo;
import com.android.server.os.HwBootFail;
import com.android.server.pm.DumpState;
import com.android.server.pm.Installer;
import com.android.server.pm.PackageManagerService;
import com.android.server.pm.dex.DexManager;
import com.android.server.policy.PhoneWindowManager;
import com.android.server.slice.SliceClientPermissions;
import com.android.server.usage.AppStandbyController;
import com.android.server.utils.PriorityDump;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.PinnedStackWindowController;
import com.android.server.wm.SurfaceAnimationThread;
import com.android.server.wm.WindowManagerService;
import com.android.server.zrhung.IZRHungService;
import com.google.android.collect.Lists;
import com.google.android.collect.Maps;
import com.huawei.android.app.IHwActivityManager;
import com.huawei.android.app.IHwDAMonitorCallback;
import com.huawei.android.audio.HwAudioServiceManager;
import com.huawei.android.content.pm.HwPackageManager;
import com.huawei.android.content.pm.IHwPackageManager;
import com.huawei.pgmng.common.Utils;
import com.huawei.pgmng.log.LogPower;
import dalvik.system.VMRuntime;
import huawei.android.security.IHwBehaviorCollectManager;
import huawei.cust.HwCustUtils;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.ref.WeakReference;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import libcore.io.IoUtils;
import libcore.util.EmptyArray;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;

public class ActivityManagerService extends AbsActivityManager implements IHwActivityManagerInner, Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {
    public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    static final int ADD_POWERSAVE_TEMP_WHITELIST_APP_MSG = 97;
    static final int ALLOW_FULL_ONLY = 2;
    static final int ALLOW_NON_FULL = 0;
    static final int ALLOW_NON_FULL_IN_PROFILE = 1;
    private static final long ALL_DISPATCH_THRESHOLD_MS = 1000;
    static final boolean ANIMATE = true;
    static final long APP_SWITCH_DELAY_TIME = 5000;
    static final String APS_DISPLAY_RESOLUTION_CHANGING = "aps_display_resolution_changing";
    private static final String ATTR_CREATED_TIME = "createdTime";
    private static final String ATTR_MODE_FLAGS = "modeFlags";
    private static final String ATTR_PREFIX = "prefix";
    private static final String ATTR_SOURCE_PKG = "sourcePkg";
    private static final String ATTR_SOURCE_USER_ID = "sourceUserId";
    private static final String ATTR_TARGET_PKG = "targetPkg";
    private static final String ATTR_TARGET_USER_ID = "targetUserId";
    private static final String ATTR_URI = "uri";
    private static final String ATTR_USER_HANDLE = "userHandle";
    static final long BATTERY_STATS_TIME = 1800000;
    static final int BROADCAST_BG_TIMEOUT = ((int) (SCALE_ANR * 60000.0f));
    static final int BROADCAST_FG_TIMEOUT = ((int) (20000.0f * SCALE_ANR));
    static final int CANCEL_HEAVY_NOTIFICATION_MSG = 25;
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CHECK_SERVICE_PRECHECK_MSG = 96;
    static final int CHECK_SERVICE_TIMEOUT_MSG = 99;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int COLLECT_PSS_BG_MSG = 1;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT = 10000;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    static final int DELETE_DUMPHEAP_MSG = 51;
    static final int DISMISS_DIALOG_UI_MSG = 48;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PENDING_INTENT_CANCEL_MSG = 67;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_SCREEN_AWAKE_MSG = 64;
    static final int DISPATCH_SCREEN_KEYGUARD_MSG = 65;
    static final int DISPATCH_UIDS_CHANGED_UI_MSG = 53;
    static final int DROPBOX_MAX_SIZE = 196608;
    static final long[] DUMP_MEM_BUCKETS = {5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
    static final int[] DUMP_MEM_OOM_ADJ = {JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -900, -800, -700, 0, 100, 200, 300, 400, 500, 600, 700, 800, 900};
    static final String[] DUMP_MEM_OOM_COMPACT_LABEL = {"native", "sys", "pers", "persvc", "fore", "vis", "percept", "heavy", BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD, "servicea", "home", "prev", "serviceb", "cached"};
    static final String[] DUMP_MEM_OOM_LABEL = {"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Heavy Weight", "Backup", "A Services", "Home", "Previous", "B Services", "Cached"};
    static final String[] EMPTY_STRING_ARRAY = new String[0];
    private static final int ENABLE_TIME = 3000;
    static final int ENTER_ANIMATION_COMPLETE_MSG = 44;
    static final int FINALIZE_PENDING_INTENT_MSG = 23;
    static final int FINISH_BOOTING_MSG = 45;
    static final int FIRST_ACTIVITY_STACK_MSG = 100;
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int FIRST_COMPAT_MODE_MSG = 300;
    static final int FIRST_SUPERVISOR_STACK_MSG = 100;
    static final int FORCE_GC_ALL_MSG = 418;
    static final int FREEZE_DELAY = 1000;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int GC_DELAY = 210000;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    static final int IDLE_UIDS_MSG = 58;
    static final int IMMERSIVE_MODE_LOCK_MSG = 37;
    private static final int INSTRUMENTATION_FLAG_DISABLE_HIDDEN_API_CHECKS = 1;
    static final int INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT = ((int) (60000.0f * SCALE_ANR));
    private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    static final boolean IS_DEBUG_VERSION = (SystemProperties.getInt("ro.logsystem.usertype", 1) == 3);
    static final int KEY_DISPATCHING_TIMEOUT = ((int) (5000.0f * SCALE_ANR));
    static final int KILL_APPLICATION_MSG = 22;
    private static final int KSM_SHARED = 0;
    private static final int KSM_SHARING = 1;
    private static final int KSM_UNSHARED = 2;
    private static final int KSM_VOLATILE = 3;
    static final int LOG_STACK_STATE = 60;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 50;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    static final int MAX_PERSISTED_URI_GRANTS = 128;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    static final long MONITOR_CPU_MAX_TIME = 268435455;
    static final long MONITOR_CPU_MIN_TIME = 5000;
    static final boolean MONITOR_CPU_USAGE = true;
    static final boolean MONITOR_THREAD_CPU_USAGE = false;
    private static final String MTM_THREAD_NAME = "MultiTaskManagerService";
    static final int MY_PID = Process.myPid();
    private static final int NATIVE_DUMP_TIMEOUT_MS = 2000;
    private static final long NETWORK_ACCESS_TIMEOUT_DEFAULT_MS = 200;
    @VisibleForTesting
    static final int NETWORK_STATE_BLOCK = 1;
    @VisibleForTesting
    static final int NETWORK_STATE_NO_CHANGE = 0;
    @VisibleForTesting
    static final int NETWORK_STATE_UNBLOCK = 2;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PENDING_ASSIST_EXTRAS_LONG_TIMEOUT = 2000;
    static final int PENDING_ASSIST_EXTRAS_TIMEOUT = 500;
    static final int PENDING_AUTOFILL_ASSIST_STRUCTURE_TIMEOUT = 2000;
    private static final int PERSISTENT_MASK = 9;
    static final int PERSIST_URI_GRANTS_MSG = 38;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    static final int POST_HEAVY_NOTIFICATION_MSG = 24;
    private static final int[] PROCESS_STATE_STATS_FORMAT = {32, 544, 10272};
    static final int PROC_START_TIMEOUT = 10000;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    static final int PUSH_TEMP_WHITELIST_UI_MSG = 68;
    private static final String REASON_BACKGROUND = "kill background";
    private static final String REASON_STOP_BY_APP = "by app";
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int REPORT_TIME_TRACKER_MSG = 54;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    static final int RESET_SHOW_WALLPAPER = 600;
    protected static final float SCALE_ANR = (SCALE_ANR_PROP >= SCALE_ANR_VALID ? SCALE_ANR_PROP : SCALE_ANR_VALID);
    private static float SCALE_ANR_PROP = (mIsDebuggable ? ((float) SystemProperties.getInt("persist.scale.anr", 100)) / 100.0f : 1.0f);
    private static float SCALE_ANR_VALID = 0.2f;
    static final int SEND_LOCALE_TO_MOUNT_DAEMON_MSG = 47;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final String SERVICE_RECORD_KEY = "servicerecord";
    static final int SERVICE_TIMEOUT_MSG = 12;
    static final int SERVICE_WAIT_TIMEOUT = 5000;
    static final int SHOW_COMPAT_MODE_DIALOG_UI_MSG = 30;
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_FACTORY_ERROR_UI_MSG = 3;
    static final int SHOW_FINGERPRINT_ERROR_UI_MSG = 15;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHOW_UID_ERROR_UI_MSG = 14;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    private static final long SINGLE_DISPATCH_THRESHOLD_MS = 100;
    private static final int SLOW_UID_OBSERVER_THRESHOLD_MS = 20;
    static final int STOCK_PM_FLAGS = 1024;
    static final int STOP_FREEZE_SCREEN = 500;
    static final String SYSTEM_DEBUGGABLE = "ro.debuggable";
    private static final String SYSUI_COMPONENT_NAME = "com.android.systemui/.SystemUIService";
    public static final String TAG = "ActivityManager";
    private static final String TAG_BACKUP = "ActivityManager";
    private static final String TAG_BROADCAST = "ActivityManager";
    private static final String TAG_CLEANUP = "ActivityManager";
    private static final String TAG_CONFIGURATION = (TAG + ActivityManagerDebugConfig.POSTFIX_CONFIGURATION);
    private static final String TAG_FOCUS = "ActivityManager";
    private static final String TAG_IMMERSIVE = "ActivityManager";
    private static final String TAG_KEYGUARD = "ActivityManager_keyguard";
    private static final String TAG_LOCKTASK = "ActivityManager";
    private static final String TAG_LRU = "ActivityManager";
    private static final String TAG_MU = "ActivityManager_MU";
    private static final String TAG_NETWORK = "ActivityManager_Network";
    private static final String TAG_OOM_ADJ = "ActivityManager";
    private static final String TAG_POWER = "ActivityManager";
    private static final String TAG_PROCESSES = "ActivityManager";
    private static final String TAG_PROCESS_OBSERVERS = "ActivityManager";
    private static final String TAG_PROVIDER = "ActivityManager";
    private static final String TAG_PSS = "ActivityManager";
    private static final String TAG_RECENTS = "ActivityManager";
    private static final String TAG_SERVICE = "ActivityManager";
    private static final String TAG_STACK = "ActivityManager";
    private static final String TAG_SWITCH = "ActivityManager";
    private static final String TAG_UID_OBSERVERS = "ActivityManager";
    private static final String TAG_URI_GRANT = "uri-grant";
    private static final String TAG_URI_GRANTS = "uri-grants";
    private static final String TAG_URI_PERMISSION = "ActivityManager";
    private static final String TAG_VISIBILITY = (TAG + ActivityManagerDebugConfig.POSTFIX_VISIBILITY);
    static final boolean TAKE_FULLSCREEN_SCREENSHOTS = true;
    public static final int TOP_APP_PRIORITY_BOOST = -10;
    static final int TRIM_SERVICE_AFTER_BOOT = 98;
    static final int UPDATE_CONFIGURATION_MSG = 4;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final boolean VALIDATE_UID_STATES = true;
    static final int VR_MODE_CHANGE_MSG = 61;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
    private static final IZrHung mAppEyeBinderBlock = HwFrameworkFactory.getZrHung("appeye_ssbinderfull");
    static final boolean mIsDebuggable = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
    @GuardedBy("ActivityManagerService.class")
    private static SimpleDateFormat sAnrFileDateFormat;
    private static final ThreadLocal<Identity> sCallerIdentity = new ThreadLocal<>();
    static boolean sDisableForceGC = false;
    private static boolean sIsMygote;
    static KillHandler sKillHandler = null;
    static ServiceThread sKillThread = null;
    private static Set<String> sSkipFreezingWindowActivitys = new HashSet();
    private static String sTheRealBuildSerial = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
    private static ThreadPriorityBooster sThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
    final int GL_ES_VERSION;
    final ArrayList<ActiveInstrumentation> mActiveInstrumentation = new ArrayList<>();
    ProcessChangeItem[] mActiveProcessChanges;
    UidRecord.ChangeItem[] mActiveUidChanges;
    final SparseArray<UidRecord> mActiveUids;
    ComponentName mActiveVoiceInteractionServiceComponent;
    boolean mActivityIdle;
    /* access modifiers changed from: private */
    public final ActivityStartController mActivityStartController;
    int mAdjSeq;
    final SparseArray<ArrayMap<String, Integer>> mAllowAppSwitchUids;
    boolean mAllowLowerMemLevel;
    private AlarmManagerService mAlms;
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks;
    boolean mAlwaysFinishActivities;
    private Map<String, String> mAppAgentMap;
    ArrayMap<String, IBinder> mAppBindArgs;
    final AppErrors mAppErrors;
    final AppOpsService mAppOpsService;
    long mAppSwitchesAllowedTime;
    final AppWarnings mAppWarnings;
    private AssistUtils mAssistUtils;
    final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations;
    final ArrayList<ProcessChangeItem> mAvailProcessChanges;
    final ArrayList<UidRecord.ChangeItem> mAvailUidChanges;
    int[] mBackgroundAppIdWhitelist;
    ArraySet<String> mBackgroundLaunchBroadcasts;
    String mBackupAppName;
    BackupRecord mBackupTarget;
    final BatteryStatsService mBatteryStatsService;
    BroadcastQueue mBgBroadcastQueue;
    final Handler mBgHandler;
    BroadcastQueue mBgKeyAppBroadcastQueue;
    BroadcastQueue mBgThirdAppBroadcastQueue;
    private boolean mBinderTransactionTrackingEnabled;
    @GuardedBy("this")
    boolean mBootAnimationComplete;
    int mBootPhase;
    boolean mBooted;
    @GuardedBy("this")
    boolean mBooting;
    final BroadcastQueue[] mBroadcastQueues;
    @GuardedBy("this")
    boolean mCallFinishBooting;
    @GuardedBy("this")
    private boolean mCheckedForSetup;
    CompatModeDialog mCompatModeDialog;
    final CompatModePackages mCompatModePackages;
    private int mConfigurationSeq;
    final ActivityManagerConstants mConstants;
    final Context mContext;
    IActivityController mController;
    boolean mControllerIsAMonkey;
    CoreSettingsObserver mCoreSettingsObserver;
    protected boolean mCpusetSwitch = false;
    private AppTimeTracker mCurAppTimeTracker;
    BroadcastStats mCurBroadcastStats;
    OomAdjObserver mCurOomAdjObserver;
    int mCurOomAdjUid;
    private String mCurResumedPackage;
    private int mCurResumedUid;
    HwCustActivityManagerService mCustAms;
    HwDAMonitorProxy mDAProxy;
    String mDebugApp;
    boolean mDebugTransient;
    DevelopmentSettingsObserver mDevelopmentSettingsObserver;
    int[] mDeviceIdleExceptIdleWhitelist;
    int[] mDeviceIdleTempWhitelist;
    int[] mDeviceIdleWhitelist;
    String mDeviceOwnerName;
    boolean mDidAppSwitch;
    volatile int mFactoryTest;
    BroadcastQueue mFgBroadcastQueue;
    BroadcastQueue mFgKeyAppBroadcastQueue;
    BroadcastQueue mFgThirdAppBroadcastQueue;
    FontScaleSettingObserver mFontScaleSettingObserver;
    boolean mForceBackgroundCheck;
    boolean mForceResizableActivities;
    final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages;
    boolean mFullPssPending;
    float mFullscreenThumbnailScale;
    private final AtomicFile mGrantFile;
    @GuardedBy("this")
    private final SparseArray<ArrayMap<GrantUri, UriPermission>> mGrantedUriPermissions;
    final MainHandler mHandler;
    final ServiceThread mHandlerThread;
    boolean mHasHeavyWeightFeature;
    ProcessRecord mHeavyWeightProcess;
    final HiddenApiSettings mHiddenApiBlacklist;
    ProcessRecord mHomeProcess;
    IHwActivityManagerServiceEx mHwAMSEx;
    HwInnerActivityManagerService mHwInnerService;
    final SparseArray<ImportanceToken> mImportantProcesses;
    private final Injector mInjector;
    private Installer mInstaller;
    final InstrumentationReporter mInstrumentationReporter = new InstrumentationReporter();
    public final IntentFirewall mIntentFirewall;
    final HashMap<PendingIntentRecord.Key, WeakReference<PendingIntentRecord>> mIntentSenderRecords;
    boolean mIsHwLowRam;
    ArrayMap<String, IBinder> mIsolatedAppBindArgs;
    final SparseArray<ProcessRecord> mIsolatedProcesses;
    /* access modifiers changed from: private */
    public final KeyguardController mKeyguardController;
    private boolean mKeyguardShown;
    String mLastANRState;
    protected ActivityRecord mLastActivityRecord;
    private int mLastAppCrashedPid = -1;
    BroadcastStats mLastBroadcastStats;
    final AtomicLong mLastCpuTime;
    long mLastFullPssTime;
    long mLastIdleTime;
    long mLastMemUsageReportTime;
    int mLastMemoryLevel;
    int mLastNumProcesses;
    long mLastPowerCheckUptime;
    /* access modifiers changed from: private */
    public ActivityRecord mLastResumedActivity;
    long mLastWriteTime;
    @GuardedBy("this")
    boolean mLaunchWarningShown;
    final ArrayList<ContentProviderRecord> mLaunchingProviders;
    private final ClientLifecycleManager mLifecycleManager;
    DeviceIdleController.LocalService mLocalDeviceIdleController;
    PowerManagerInternal mLocalPowerManager;
    public final ThreadLocal<String> mLocalStopReason;
    private final LockTaskController mLockTaskController;
    long mLowRamStartTime;
    long mLowRamTimeSinceLastIdle;
    int mLruProcessActivityStart;
    int mLruProcessServiceStart;
    protected final ArrayList<ProcessRecord> mLruProcesses;
    int mLruSeq;
    String mMemWatchDumpFile;
    int mMemWatchDumpPid;
    String mMemWatchDumpProcName;
    int mMemWatchDumpUid;
    final ProcessMap<Pair<Long, String>> mMemWatchProcesses;
    String mNativeDebuggingApp;
    int mNewNumAServiceProcs;
    int mNewNumServiceProcs;
    int mNextIsolatedProcessUid;
    int mNumCachedHiddenProcs;
    int mNumNonCachedProcs;
    int mNumServiceProcs;
    volatile boolean mOnBattery;
    String mOrigDebugApp;
    boolean mOrigWaitForDebugger;
    PackageManagerInternal mPackageManagerInt;
    final ArrayList<PendingAssistExtras> mPendingAssistExtras;
    final ArrayList<ProcessChangeItem> mPendingProcessChanges;
    final ArrayList<ProcessRecord> mPendingPssProcesses;
    @GuardedBy("this")
    private final LongSparseArray<ProcessRecord> mPendingStarts;
    final SparseArray<PendingTempWhitelist> mPendingTempWhitelist;
    final ArrayList<UidRecord.ChangeItem> mPendingUidChanges;
    final boolean mPermissionReviewRequired;
    boolean mPersistentReady;
    final ArrayList<ProcessRecord> mPersistentStartingProcesses;
    final SparseArray<ProcessRecord> mPidsSelfLocked;
    ProcessRecord mPreviousProcess;
    long mPreviousProcessVisibleTime;
    private final PriorityDump.PriorityDumper mPriorityDumper;
    final Handler mProcStartHandler;
    final ServiceThread mProcStartHandlerThread;
    @GuardedBy("this")
    private long mProcStartSeqCounter;
    @GuardedBy("this")
    @VisibleForTesting
    long mProcStateSeqCounter;
    final CountDownLatch mProcessCpuInitLatch;
    final AtomicBoolean mProcessCpuMutexFree;
    final Thread mProcessCpuThread;
    final ProcessCpuTracker mProcessCpuTracker;
    protected final ProcessList mProcessList;
    protected final ProcessMap<ProcessRecord> mProcessNames;
    final RemoteCallbackList<IProcessObserver> mProcessObservers;
    private final long[] mProcessStateStatsLongs;
    final ProcessStatsService mProcessStats;
    final ArrayList<ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    final ArrayList<ProcessRecord> mProcessesToGc;
    String mProfileApp;
    ProcessRecord mProfileProc;
    int mProfileType;
    ProfilerInfo mProfilerInfo;
    final ProviderMap mProviderMap;
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver;
    private final RecentTasks mRecentTasks;
    final HashMap<IBinder, ReceiverList> mRegisteredReceivers;
    final ArrayList<ProcessRecord> mRemovedProcesses;
    IVoiceInteractionSession mRunningVoice;
    boolean mSafeMode;
    final List<ActivityManagerInternal.ScreenObserver> mScreenObservers;
    final ActiveServices mServices;
    private boolean mShouldFreeze;
    /* access modifiers changed from: private */
    public boolean mShowDialogs = true;
    boolean mShuttingDown;
    public boolean mSkipShowLauncher;
    /* access modifiers changed from: private */
    public boolean mSleeping;
    final ActivityStackSupervisor mStackSupervisor;
    final SparseArray<ArrayMap<String, ArrayList<Intent>>> mStickyBroadcasts;
    final StringBuilder mStringBuilder;
    private String[] mSupportedSystemLocales;
    boolean mSupportsFreeformWindowManagement;
    boolean mSupportsLeanbackOnly;
    boolean mSupportsMultiDisplay;
    boolean mSupportsMultiWindow;
    boolean mSupportsPictureInPicture;
    boolean mSupportsSplitScreenMultiWindow;
    boolean mSuppressResizeConfigChanges;
    boolean mSystemProvidersInstalled;
    volatile boolean mSystemReady;
    SystemServiceManager mSystemServiceManager;
    final ActivityThread mSystemThread;
    final TaskChangeNotificationController mTaskChangeNotificationController;
    private Configuration mTempConfig;
    boolean mTestPssMode;
    int mThumbnailHeight;
    int mThumbnailWidth;
    private final ArraySet<BroadcastQueue> mTmpBroadcastQueue;
    final long[] mTmpLong;
    private final UpdateConfigurationResult mTmpUpdateConfigurationResult;
    String mTopAction;
    ComponentName mTopComponent;
    String mTopData;
    int mTopProcessState;
    private ActivityRecord mTracedResumedActivity;
    String mTrackAllocationApp;
    boolean mTrackingAssociations;
    final Context mUiContext;
    final Handler mUiHandler;
    int mUidChangeDispatchCount;
    final RemoteCallbackList<IUidObserver> mUidObservers;
    final UpdateLock mUpdateLock;
    UsageStatsManagerInternal mUsageStatsService;
    private boolean mUseFifoUiScheduling = false;
    final UserController mUserController;
    /* access modifiers changed from: private */
    public boolean mUserIsMonkey;
    final SparseArray<UidRecord> mValidateUids;
    private int mViSessionId;
    PowerManager.WakeLock mVoiceWakeLock;
    int mVr2dDisplayId = -1;
    /* access modifiers changed from: private */
    public final VrController mVrController;
    boolean mWaitForDebugger;
    @VisibleForTesting
    long mWaitForNetworkTimeoutMs;
    private int mWakefulness;
    protected boolean mWarmColdSwitch = false;
    WindowManagerService mWindowManager;
    private volatile int mWtfClusterCount;
    private volatile long mWtfClusterStart;

    private final class AppDeathRecipient implements IBinder.DeathRecipient {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord app, int pid, IApplicationThread thread) {
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                Slog.v(ActivityManagerService.TAG, "New death recipient " + this + " for thread " + thread.asBinder());
            }
            this.mApp = app;
            this.mPid = pid;
            this.mAppThread = thread;
        }

        public void binderDied() {
            boolean isKilledByAm = this.mApp.killedByAm;
            boolean isForgroundActivities = this.mApp.foregroundActivities;
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                Slog.v(ActivityManagerService.TAG, "Death received in " + this + " for thread " + this.mAppThread.asBinder());
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            if (isKilledByAm || isForgroundActivities) {
                ActivityManagerService.this.mHwAMSEx.reportAppDiedMsg(this.mApp.userId, this.mApp.processName, -1, "BinderDiedElse");
            } else {
                ActivityManagerService.this.mHwAMSEx.reportAppDiedMsg(this.mApp.userId, this.mApp.processName, -1, "BinderDiedLMK");
            }
        }
    }

    static final class Association {
        int mCount;
        int mLastState = 20;
        long mLastStateUptime;
        int mNesting;
        final String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        long[] mStateTimes = new long[20];
        final ComponentName mTargetComponent;
        final String mTargetProcess;
        final int mTargetUid;
        long mTime;

        Association(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent, String targetProcess) {
            this.mSourceUid = sourceUid;
            this.mSourceProcess = sourceProcess;
            this.mTargetUid = targetUid;
            this.mTargetComponent = targetComponent;
            this.mTargetProcess = targetProcess;
        }
    }

    static class CpuBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto && DumpUtils.checkDumpAndUsageStatsPermission(CpuBinder.this.mActivityManagerService.mContext, "cpuinfo", pw)) {
                    synchronized (CpuBinder.this.mActivityManagerService.mProcessCpuTracker) {
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentLoad());
                        pw.print(CpuBinder.this.mActivityManagerService.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                    }
                }
            }
        };

        CpuBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
        }
    }

    static class DbBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", pw)) {
                this.mActivityManagerService.dumpDbInfo(fd, pw, args);
            }
        }
    }

    private final class DevelopmentSettingsObserver extends ContentObserver {
        private final ComponentName mBugreportStorageProvider = new ComponentName("com.android.shell", "com.android.shell.BugreportStorageProvider");
        private final Uri mUri = Settings.Global.getUriFor("development_settings_enabled");

        public DevelopmentSettingsObserver() {
            super(ActivityManagerService.this.mHandler);
            ActivityManagerService.this.mContext.getContentResolver().registerContentObserver(this.mUri, false, this, -1);
            onChange();
        }

        public void onChange(boolean selfChange, Uri uri, int userId) {
            if (this.mUri.equals(uri)) {
                onChange();
            }
        }

        public void onChange() {
            int i = 1;
            boolean enabled = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "development_settings_enabled", Build.IS_ENG ? 1 : 0) != 0;
            PackageManager packageManager = ActivityManagerService.this.mContext.getPackageManager();
            ComponentName componentName = this.mBugreportStorageProvider;
            if (!enabled) {
                i = 0;
            }
            packageManager.setComponentEnabledSetting(componentName, i, 0);
        }
    }

    @Deprecated
    public static class DumpStackFileObserver extends FileObserver {
        private static final int TRACE_DUMP_TIMEOUT_MS = 10000;
        private boolean mClosed;
        private final String mTracesPath;

        public DumpStackFileObserver(String tracesPath) {
            super(tracesPath, 8);
            this.mTracesPath = tracesPath;
        }

        public synchronized void onEvent(int event, String path) {
            this.mClosed = true;
            notify();
        }

        public long dumpWithTimeout(int pid, long timeout) {
            Process.sendSignal(pid, 3);
            long start = SystemClock.elapsedRealtime();
            long waitTime = Math.min(timeout, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
            synchronized (this) {
                try {
                    wait(waitTime);
                } catch (InterruptedException e) {
                    Slog.wtf(ActivityManagerService.TAG, e);
                }
            }
            long timeWaited = SystemClock.elapsedRealtime() - start;
            if (timeWaited >= timeout) {
                return timeWaited;
            }
            if (!this.mClosed) {
                Slog.w(ActivityManagerService.TAG, "Didn't see close of " + this.mTracesPath + " for pid " + pid + ". Attempting native stack collection.");
                Debug.dumpNativeBacktraceToFileTimeout(pid, this.mTracesPath, (int) (Math.min(2000, timeout - timeWaited) / 1000));
            }
            long end = SystemClock.elapsedRealtime();
            this.mClosed = false;
            return end - start;
        }
    }

    private final class FontScaleSettingObserver extends ContentObserver {
        private final Uri mFontScaleUri = Settings.System.getUriFor("font_scale");
        private final Uri mHideErrorDialogsUri = Settings.Global.getUriFor("hide_error_dialogs");

        public FontScaleSettingObserver() {
            super(ActivityManagerService.this.mHandler);
            ContentResolver resolver = ActivityManagerService.this.mContext.getContentResolver();
            resolver.registerContentObserver(this.mFontScaleUri, false, this, -1);
            resolver.registerContentObserver(this.mHideErrorDialogsUri, false, this, -1);
        }

        public void onChange(boolean selfChange, Uri uri, int userId) {
            if (this.mFontScaleUri.equals(uri)) {
                ActivityManagerService.this.updateFontScaleIfNeeded(userId);
            } else if (this.mHideErrorDialogsUri.equals(uri)) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ActivityManagerService.this.updateShouldShowDialogsLocked(ActivityManagerService.this.getGlobalConfiguration());
                    } catch (Throwable th) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            }
        }
    }

    public static class GrantUri {
        public boolean prefix;
        public final int sourceUserId;
        public final Uri uri;

        public GrantUri(int sourceUserId2, Uri uri2, boolean prefix2) {
            this.sourceUserId = sourceUserId2;
            this.uri = uri2;
            this.prefix = prefix2;
        }

        public int hashCode() {
            return (31 * ((31 * ((31 * 1) + this.sourceUserId)) + this.uri.hashCode())) + (this.prefix ? 1231 : 1237);
        }

        public boolean equals(Object o) {
            boolean z = false;
            if (!(o instanceof GrantUri)) {
                return false;
            }
            GrantUri other = (GrantUri) o;
            if (this.uri.equals(other.uri) && this.sourceUserId == other.sourceUserId && this.prefix == other.prefix) {
                z = true;
            }
            return z;
        }

        public String toString() {
            String result = this.uri.toString() + " [user " + this.sourceUserId + "]";
            if (!this.prefix) {
                return result;
            }
            return result + " [prefix]";
        }

        public String toSafeString() {
            String result = this.uri.toSafeString() + " [user " + this.sourceUserId + "]";
            if (!this.prefix) {
                return result;
            }
            return result + " [prefix]";
        }

        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1138166333442L, this.uri.toString());
            proto.write(1120986464257L, this.sourceUserId);
            proto.end(token);
        }

        public static GrantUri resolve(int defaultSourceUserHandle, Uri uri2) {
            if ("content".equals(uri2.getScheme())) {
                return new GrantUri(ContentProvider.getUserIdFromUri(uri2, defaultSourceUserHandle), ContentProvider.getUriWithoutUserId(uri2), false);
            }
            return new GrantUri(defaultSourceUserHandle, uri2, false);
        }
    }

    static class GraphicsBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", pw)) {
                Slog.i(ActivityManagerService.TAG, "gfxinfo dump() called by uid:" + Binder.getCallingUid() + " pid:" + Binder.getCallingPid());
                this.mActivityManagerService.dumpGraphicsHardwareUsage(fd, pw, args);
            }
        }
    }

    static class HiddenApiSettings extends ContentObserver {
        private boolean mBlacklistDisabled;
        private final Context mContext;
        private List<String> mExemptions = Collections.emptyList();
        private String mExemptionsStr;
        private int mLogSampleRate = -1;
        private int mPolicyP = -1;
        private int mPolicyPreP = -1;

        public HiddenApiSettings(Handler handler, Context context) {
            super(handler);
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_access_log_sampling_rate"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_policy_pre_p_apps"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_policy_p_apps"), false, this);
            update();
        }

        private void update() {
            List<String> list;
            String exemptions = Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(exemptions, this.mExemptionsStr)) {
                this.mExemptionsStr = exemptions;
                if ("*".equals(exemptions)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    if (TextUtils.isEmpty(exemptions)) {
                        list = Collections.emptyList();
                    } else {
                        list = Arrays.asList(exemptions.split(","));
                    }
                    this.mExemptions = list;
                }
                if (!Process.zygoteProcess.setApiBlacklistExemptions(this.mExemptions)) {
                    Slog.e(ActivityManagerService.TAG, "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            int logSampleRate = Settings.Global.getInt(this.mContext.getContentResolver(), "hidden_api_access_log_sampling_rate", -1);
            if (logSampleRate < 0 || logSampleRate > 65536) {
                logSampleRate = -1;
            }
            if (!(logSampleRate == -1 || logSampleRate == this.mLogSampleRate)) {
                this.mLogSampleRate = logSampleRate;
                Process.zygoteProcess.setHiddenApiAccessLogSampleRate(this.mLogSampleRate);
            }
            this.mPolicyPreP = getValidEnforcementPolicy("hidden_api_policy_pre_p_apps");
            this.mPolicyP = getValidEnforcementPolicy("hidden_api_policy_p_apps");
        }

        private int getValidEnforcementPolicy(String settingsKey) {
            int policy = Settings.Global.getInt(this.mContext.getContentResolver(), settingsKey, -1);
            if (ApplicationInfo.isValidHiddenApiEnforcementPolicy(policy)) {
                return policy;
            }
            return -1;
        }

        /* access modifiers changed from: package-private */
        public boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        /* access modifiers changed from: package-private */
        public int getPolicyForPrePApps() {
            return this.mPolicyPreP;
        }

        /* access modifiers changed from: package-private */
        public int getPolicyForPApps() {
            return this.mPolicyP;
        }

        public void onChange(boolean selfChange) {
            update();
        }
    }

    public class HwInnerActivityManagerService extends IHwActivityManager.Stub {
        ActivityManagerService mAMS;

        HwInnerActivityManagerService(ActivityManagerService ams) {
            this.mAMS = ams;
        }

        private boolean checkPermissionForHAM() {
            int uid = UserHandle.getAppId(Binder.getCallingUid());
            if (uid == 1000) {
                return true;
            }
            Slog.e(ActivityManagerService.TAG, "Process Permission error! uid:" + uid);
            return false;
        }

        public void registerDAMonitorCallback(IHwDAMonitorCallback callback) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mDAProxy.registerDAMonitorCallback(callback);
            }
        }

        public void setCpusetSwitch(boolean enable) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mCpusetSwitch = enable;
            }
        }

        public void setWarmColdSwitch(boolean enable) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mWarmColdSwitch = enable;
            }
        }

        public boolean cleanPackageRes(List<String> packageList, Map alarmTags, int targetUid, boolean cleanAlarm, boolean isNative, boolean hasPerceptAlarm) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.cleanPackageRes(packageList, alarmTags, targetUid, cleanAlarm, isNative, hasPerceptAlarm);
        }

        public boolean registerThirdPartyCallBack(IMWThirdpartyCallback aCallBackHandler) {
            return ActivityManagerService.this.mHwAMSEx.registerThirdPartyCallBack(aCallBackHandler);
        }

        public boolean unregisterThirdPartyCallBack(IMWThirdpartyCallback aCallBackHandler) {
            return ActivityManagerService.this.mHwAMSEx.unregisterThirdPartyCallBack(aCallBackHandler);
        }

        public void reportScreenRecord(int uid, int pid, int status) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mDAProxy.reportScreenRecord(uid, pid, status);
            }
        }

        public boolean isFreeFormVisible() {
            return ActivityManagerService.this.mHwAMSEx.isFreeFormVisible();
        }

        public void registerHwActivityNotifier(IHwActivityNotifier notifier, String reason) {
            ActivityManagerService.this.mHwAMSEx.registerHwActivityNotifier(notifier, reason);
        }

        public void unregisterHwActivityNotifier(IHwActivityNotifier notifier) {
            ActivityManagerService.this.mHwAMSEx.unregisterHwActivityNotifier(notifier);
        }

        public boolean handleANRFilterFIFO(int uid, int cmd) {
            return ActivityManagerService.this.mHwAMSEx.handleANRFilterFIFO(uid, cmd);
        }

        public void handleShowAppEyeAnrUi(int pid, int uid, String processName, String packageName) {
            ActivityManagerService.this.mHwAMSEx.zrHungSendEvent(IZRHungService.EVENT_HANDLESHOWANRDIALOG, pid, uid, packageName, processName, null);
        }

        public boolean isTaskVisible(int id) {
            return ActivityManagerService.this.mHwAMSEx.isTaskVisible(id);
        }

        public List<String> getPidWithUiFromUid(int uid) {
            if (!checkPermissionForHAM()) {
                return null;
            }
            return ActivityManagerService.this.mHwAMSEx.getPidWithUiFromUid(uid);
        }

        public int preloadApplication(String packageName, int userId) {
            return ActivityManagerService.this.mHwAMSEx.preloadApplication(packageName, userId);
        }

        public boolean killProcessRecordFromIAware(ProcessInfo procInfo, boolean restartservice, boolean isAsynchronous, String reason, boolean checkAdj) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromIAwareInternal(procInfo, restartservice, isAsynchronous, reason, false, checkAdj);
        }

        public boolean killProcessRecordFromIAwareNative(ProcessInfo procInfo, boolean restartservice, boolean isAsynchronous, String reason) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromIAwareInternal(procInfo, restartservice, isAsynchronous, reason, true, true);
        }

        public boolean killProcessRecordFromMTM(ProcessInfo procInfo, boolean restartservice, String reason) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFromMTM(procInfo, restartservice, reason);
        }

        public boolean cleanProcessResourceFast(String processName, int pid, IBinder thread, boolean restartService, boolean isNative) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.cleanProcessResourceFast(processName, pid, thread, restartService, isNative);
        }

        public boolean killProcessRecordFast(String processName, int pid, int uid, boolean restartservice, boolean isAsynchronous, String reason, boolean needCheckAdj) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killProcessRecordFast(processName, pid, uid, restartservice, isAsynchronous, reason, needCheckAdj);
        }

        public boolean killNativeProcessRecordFast(String processName, int pid, int uid, boolean restartservice, boolean isAsynchronous, String reason) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.killNativeProcessRecordFast(processName, pid, uid, restartservice, isAsynchronous, reason);
        }

        public boolean isProcessExistLocked(String processName, int uid) {
            boolean z = false;
            if (!checkPermissionForHAM()) {
                return false;
            }
            if (ActivityManagerService.this.getProcessRecordLocked(processName, uid, true) != null) {
                z = true;
            }
            return z;
        }

        public void removePackageAlarm(String pkg, List<String> tags, int targetUid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.removePackageAlarm(pkg, tags, targetUid);
            }
        }

        public boolean getProcessRecordFromMTM(ProcessInfo procInfo) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.getProcessRecordFromMTM(procInfo);
        }

        public void setAndRestoreMaxAdjIfNeed(List<String> adjCustPkg) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.setAndRestoreMaxAdjIfNeed(adjCustPkg);
            }
        }

        public void reportProcessDied(int pid) {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.reportProcessDied(pid);
            }
        }

        public void reportAssocDisable() {
            if (checkPermissionForHAM()) {
                ActivityManagerService.this.mHwAMSEx.reportAssocDisable();
            }
        }

        public ActivityInfo getLastResumedActivity() {
            int callingPid = Binder.getCallingPid();
            int callingUid = Binder.getCallingUid();
            ActivityInfo activityInfo = null;
            if (!(ActivityManagerService.this.checkPermission("android.permission.REAL_GET_TASKS", callingPid, callingUid) == 0)) {
                Slog.d(ActivityManagerService.TAG, "permission denied for, callingPid:" + callingPid + ", callingUid:" + callingUid + ", requires: android.Manifest.permission.REAL_GET_TASKS");
                return null;
            }
            if (ActivityManagerService.this.mLastResumedActivity != null) {
                activityInfo = ActivityManagerService.this.mLastResumedActivity.info;
            }
            return activityInfo;
        }

        public boolean isProcessExistPidsSelfLocked(String processName, int uid) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.isProcessExistPidsSelfLocked(processName, uid);
        }

        public int getTopTaskIdInDisplay(int displayId, String pkgName, boolean invisibleAlso) {
            if (!checkPermissionForHAM()) {
                return -1;
            }
            return ActivityManagerService.this.mHwAMSEx.getTopTaskIdInDisplay(displayId, pkgName, invisibleAlso);
        }

        public boolean isTaskSupportResize(int taskId, boolean isFullscreen, boolean isMaximized) {
            if (!checkPermissionForHAM()) {
                return false;
            }
            return ActivityManagerService.this.mHwAMSEx.isTaskSupportResize(taskId, isFullscreen, isMaximized);
        }

        public Rect getPCTopTaskBounds(int displayId) {
            if (!checkPermissionForHAM()) {
                return null;
            }
            return ActivityManagerService.this.mHwAMSEx.getPCTopTaskBounds(displayId);
        }

        public boolean isInMultiWindowMode() {
            return ActivityManagerService.this.mHwAMSEx.isInMultiWindowMode();
        }

        public boolean canPickColor(String activity) {
            return ActivityManagerService.this.mHwAMSEx.canPickColor(activity);
        }

        public void updateFreeFormOutLine(int state) {
            ActivityManagerService.this.mHwAMSEx.updateFreeFormOutLine(state);
        }

        public int getCaptionState(IBinder token) throws RemoteException {
            return ActivityManagerService.this.mHwAMSEx.getCaptionState(token);
        }

        public int getActivityWindowMode(IBinder token) throws RemoteException {
            return ActivityManagerService.this.mHwAMSEx.getActivityWindowMode(token);
        }

        public void dismissSplitScreenToFocusedStack() {
            ActivityManagerService.this.mHwAMSEx.dismissSplitScreenToFocusedStack();
        }

        public boolean enterCoordinationMode(Intent intent) {
            return ActivityManagerService.this.mHwAMSEx.enterCoordinationMode(intent);
        }

        public boolean exitCoordinationMode(boolean toTop) {
            return ActivityManagerService.this.mHwAMSEx.exitCoordinationModeInner(toTop, true);
        }
    }

    private class Identity {
        public final int pid;
        public final IBinder token;
        public final int uid;

        Identity(IBinder _token, int _pid, int _uid) {
            this.token = _token;
            this.pid = _pid;
            this.uid = _uid;
        }
    }

    abstract class ImportanceToken implements IBinder.DeathRecipient {
        final int pid;
        final String reason;
        final IBinder token;

        ImportanceToken(int _pid, IBinder _token, String _reason) {
            this.pid = _pid;
            this.token = _token;
            this.reason = _reason;
        }

        public String toString() {
            return "ImportanceToken { " + Integer.toHexString(System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long pToken = proto.start(fieldId);
            proto.write(1120986464257L, this.pid);
            if (this.token != null) {
                proto.write(1138166333442L, this.token.toString());
            }
            proto.write(1138166333443L, this.reason);
            proto.end(pToken);
        }
    }

    @VisibleForTesting
    public static class Injector {
        private NetworkManagementInternal mNmi;

        public Context getContext() {
            return null;
        }

        public AppOpsService getAppOpsService(File file, Handler handler) {
            return new AppOpsService(file, handler);
        }

        public Handler getUiHandler(ActivityManagerService service) {
            Objects.requireNonNull(service);
            return new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int uid) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(uid);
            }
            return false;
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (NetworkManagementInternal) LocalServices.getService(NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }
    }

    class IntentFirewallInterface implements IntentFirewall.AMSInterface {
        IntentFirewallInterface() {
        }

        public int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
            return ActivityManagerService.this.checkComponentPermission(permission, pid, uid, owningUid, exported);
        }

        public Object getAMSLock() {
            return ActivityManagerService.this;
        }
    }

    static class ItemMatcher {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        ItemMatcher() {
        }

        /* access modifiers changed from: package-private */
        public void build(String name) {
            ComponentName componentName = ComponentName.unflattenFromString(name);
            if (componentName != null) {
                if (this.components == null) {
                    this.components = new ArrayList<>();
                }
                this.components.add(componentName);
                this.all = false;
                return;
            }
            try {
                int objectId = Integer.parseInt(name, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList<>();
                }
                this.objects.add(Integer.valueOf(objectId));
                this.all = false;
            } catch (RuntimeException e) {
                if (this.strings == null) {
                    this.strings = new ArrayList<>();
                }
                this.strings.add(name);
                this.all = false;
            }
        }

        /* access modifiers changed from: package-private */
        public int build(String[] args, int opti) {
            while (opti < args.length) {
                String name = args[opti];
                if ("--".equals(name)) {
                    return opti + 1;
                }
                build(name);
                opti++;
            }
            return opti;
        }

        /* access modifiers changed from: package-private */
        public boolean match(Object object, ComponentName comp) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (this.components.get(i).equals(comp)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (System.identityHashCode(object) == this.objects.get(i2).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings != null) {
                String flat = comp.flattenToString();
                for (int i3 = 0; i3 < this.strings.size(); i3++) {
                    if (flat.contains(this.strings.get(i3))) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    final class KillHandler extends Handler {
        static final int KILL_PROCESS_GROUP_MSG = 4000;

        public KillHandler(Looper looper) {
            super(looper, null, true);
        }

        public void handleMessage(Message msg) {
            if (msg.what != KILL_PROCESS_GROUP_MSG) {
                super.handleMessage(msg);
                return;
            }
            Trace.traceBegin(64, "killProcessGroup");
            Process.killProcessGroup(msg.arg1, msg.arg2);
            Trace.traceEnd(64);
        }
    }

    public static final class Lifecycle extends SystemService {
        private final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            HwServiceFactory.IHwActivityManagerService iAMS = HwServiceFactory.getHwActivityManagerService();
            if (iAMS != null) {
                this.mService = iAMS.getInstance(context);
            } else {
                this.mService = new ActivityManagerService(context);
            }
        }

        public void onStart() {
            this.mService.start();
        }

        public void onBootPhase(int phase) {
            this.mService.mBootPhase = phase;
            if (phase == 500) {
                this.mService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            }
        }

        public void onCleanupUser(int userId) {
            this.mService.mBatteryStatsService.onCleanupUser(userId);
        }

        public ActivityManagerService getService() {
            return this.mService;
        }
    }

    @VisibleForTesting
    final class LocalService extends ActivityManagerInternal {
        LocalService() {
        }

        public void grantUriPermissionFromIntent(int callingUid, String targetPkg, Intent intent, int targetUserId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.grantUriPermissionFromIntentLocked(callingUid, targetPkg, intent, null, targetUserId);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public String checkContentProviderAccess(String authority, int userId) {
            return ActivityManagerService.this.checkContentProviderAccess(authority, userId);
        }

        public void onWakefulnessChanged(int wakefulness) {
            ActivityManagerService.this.onWakefulnessChanged(wakefulness);
        }

        public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
            return ActivityManagerService.this.startIsolatedProcess(entryPoint, entryPointArgs, processName, abiOverride, uid, crashHandler);
        }

        public ActivityManagerInternal.SleepToken acquireSleepToken(String tag, int displayId) {
            Preconditions.checkNotNull(tag);
            return ActivityManagerService.this.acquireSleepToken(tag, displayId);
        }

        public ComponentName getHomeActivityForUser(int userId) {
            ComponentName componentName;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityRecord homeActivity = ActivityManagerService.this.mStackSupervisor.getHomeActivityForUser(userId);
                    componentName = homeActivity == null ? null : homeActivity.realActivity;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return componentName;
        }

        public void onUserRemoved(int userId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.onUserStoppedLocked(userId);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            ActivityManagerService.this.mBatteryStatsService.onUserRemoved(userId);
            ActivityManagerService.this.mUserController.onUserRemoved(userId);
        }

        public void onLocalVoiceInteractionStarted(IBinder activity, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.onLocalVoiceInteractionStartedLocked(activity, voiceSession, voiceInteractor);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void notifyAppTransitionStarting(SparseIntArray reasons, long timestamp) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.getActivityMetricsLogger().notifyTransitionStarting(reasons, timestamp);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void notifyAppTransitionFinished() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.notifyAppTransitionDone();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void notifyAppTransitionCancelled() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.notifyAppTransitionDone();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public List<IBinder> getTopVisibleActivities() {
            List<IBinder> topVisibleActivities;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    topVisibleActivities = ActivityManagerService.this.mStackSupervisor.getTopVisibleActivities();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return topVisibleActivities;
        }

        public void notifyDockedStackMinimizedChanged(boolean minimized) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mStackSupervisor.setDockedStackMinimized(minimized);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killForegroundAppsForUser(int userHandle) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList<>();
                    int NP = ActivityManagerService.this.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) ActivityManagerService.this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (!app.persistent) {
                                if (app.removed) {
                                    procs.add(app);
                                } else if (app.userId == userHandle && app.foregroundActivities) {
                                    app.removed = true;
                                    procs.add(app);
                                }
                            }
                        }
                    }
                    int ip2 = procs.size();
                    for (int i = 0; i < ip2; i++) {
                        ActivityManagerService.this.removeProcessLocked(procs.get(i), false, true, "kill all fg");
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setPendingIntentWhitelistDuration(IIntentSender target, IBinder whitelistToken, long duration) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w(ActivityManagerService.TAG, "markAsSentFromNotification(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).setWhitelistDurationLocked(whitelistToken, duration);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setDeviceIdleWhitelist(int[] allAppids, int[] exceptIdleAppids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleWhitelist = allAppids;
                    ActivityManagerService.this.mDeviceIdleExceptIdleWhitelist = exceptIdleAppids;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateDeviceIdleTempWhitelist(int[] appids, int changingAppId, boolean adding) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mDeviceIdleTempWhitelist = appids;
                    ActivityManagerService.this.setAppIdTempWhitelistStateLocked(changingAppId, adding);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updatePersistentConfigurationForUser(Configuration values, int userId) {
            Preconditions.checkNotNull(values, "Configuration must not be null");
            Preconditions.checkArgumentNonnegative(userId, "userId " + userId + " not supported");
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    boolean unused = ActivityManagerService.this.updateConfigurationLocked(values, null, false, true, userId, false);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        /* JADX WARNING: Removed duplicated region for block: B:21:0x0059 A[SYNTHETIC, Splitter:B:21:0x0059] */
        public int startActivitiesAsPackage(String packageName, int userId, Intent[] intents, Bundle bOptions) {
            int packageUid;
            String str;
            int i;
            ActivityManagerService activityManagerService;
            ActivityManagerService activityManagerService2;
            Intent[] intentArr = intents;
            Preconditions.checkNotNull(intentArr, "intents");
            String[] resolvedTypes = new String[intentArr.length];
            long ident = Binder.clearCallingIdentity();
            int i2 = 0;
            while (i2 < intentArr.length) {
                try {
                    resolvedTypes[i2] = intentArr[i2].resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver());
                    i2++;
                } catch (RemoteException e) {
                    str = packageName;
                    i = userId;
                    Binder.restoreCallingIdentity(ident);
                    packageUid = 0;
                    activityManagerService = ActivityManagerService.this;
                    synchronized (activityManagerService) {
                    }
                } catch (Throwable th) {
                    th = th;
                    String str2 = packageName;
                    int i3 = userId;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            }
            str = packageName;
            i = userId;
            try {
                int packageUid2 = AppGlobals.getPackageManager().getPackageUid(str, 268435456, i);
                Binder.restoreCallingIdentity(ident);
                packageUid = packageUid2;
            } catch (RemoteException e2) {
                Binder.restoreCallingIdentity(ident);
                packageUid = 0;
                activityManagerService = ActivityManagerService.this;
                synchronized (activityManagerService) {
                }
            } catch (Throwable th2) {
                th = th2;
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
            activityManagerService = ActivityManagerService.this;
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    activityManagerService2 = activityManagerService;
                    try {
                        int startActivitiesInPackage = ActivityManagerService.this.mActivityStartController.startActivitiesInPackage(packageUid, str, intentArr, resolvedTypes, null, SafeActivityOptions.fromBundle(bOptions), i, false);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return startActivitiesInPackage;
                    } catch (Throwable th3) {
                        th = th3;
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    activityManagerService2 = activityManagerService;
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public int startActivityAsUser(IApplicationThread caller, String callerPacakge, Intent intent, Bundle options, int userId) {
            Intent intent2 = intent;
            return ActivityManagerService.this.startActivityAsUser(caller, callerPacakge, intent2, intent2.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), null, null, 0, 268435456, null, options, userId, false);
        }

        public int getUidProcessState(int uid) {
            return ActivityManagerService.this.getUidState(uid);
        }

        public void notifyKeyguardFlagsChanged(Runnable callback) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    boolean wasTransitionSet = ActivityManagerService.this.mWindowManager.getPendingAppTransition() != 0;
                    if (!wasTransitionSet) {
                        ActivityManagerService.this.mWindowManager.prepareAppTransition(0, false);
                    }
                    ActivityManagerService.this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                    if (!wasTransitionSet) {
                        ActivityManagerService.this.mWindowManager.executeAppTransition();
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            if (callback != null) {
                callback.run();
            }
        }

        public boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        public void notifyKeyguardTrustedChanged() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mKeyguardController.isKeyguardShowing(0)) {
                        ActivityManagerService.this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getPackageScreenCompatMode(String packageName) {
            return ActivityManagerService.this.mCompatModePackages.getPackageScreenCompatModeLocked(packageName);
        }

        /* JADX WARNING: Code restructure failed: missing block: B:18:0x0037, code lost:
            if (r2.hasOverlayUi != r8) goto L_0x003e;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:20:0x003a, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:21:0x003d, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:23:?, code lost:
            r2.hasOverlayUi = r8;
            r6.this$0.updateOomAdjLocked(r2, true);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:25:0x0047, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:26:0x004a, code lost:
            return;
         */
        public void setHasOverlayUi(int pid, boolean hasOverlayUi) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        ProcessRecord pr = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                        if (pr == null) {
                            Slog.w(ActivityManagerService.TAG, "setHasOverlayUi called on unknown pid: " + pid);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
            ActivityManagerService.this.setRunningRemoteAnimation(pid, runningRemoteAnimation);
        }

        /* JADX WARNING: Code restructure failed: missing block: B:12:0x0057, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:13:0x005a, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:16:0x005c, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            r2 = r1.networkStateLock;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:17:0x0061, code lost:
            monitor-enter(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:20:0x0066, code lost:
            if (r1.lastNetworkUpdatedProcStateSeq < r8) goto L_0x008d;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:22:0x006a, code lost:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x008b;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:23:0x006c, code lost:
            android.util.Slog.d(com.android.server.am.ActivityManagerService.TAG_NETWORK, "procStateSeq: " + r8 + " has already been handled for uid: " + r7);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:24:0x008b, code lost:
            monitor-exit(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:25:0x008c, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:26:0x008d, code lost:
            r1.lastNetworkUpdatedProcStateSeq = r8;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:27:0x0093, code lost:
            if (r1.curProcStateSeq <= r8) goto L_0x00c3;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:29:0x0097, code lost:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00c1;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:30:0x0099, code lost:
            android.util.Slog.d(com.android.server.am.ActivityManagerService.TAG_NETWORK, "No need to handle older seq no., Uid: " + r7 + ", curProcstateSeq: " + r1.curProcStateSeq + ", procStateSeq: " + r8);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:31:0x00c1, code lost:
            monitor-exit(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:32:0x00c2, code lost:
            return;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:34:0x00c5, code lost:
            if (r1.waitingForNetwork == false) goto L_0x00ee;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:36:0x00c9, code lost:
            if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00e9;
         */
        /* JADX WARNING: Code restructure failed: missing block: B:37:0x00cb, code lost:
            android.util.Slog.d(com.android.server.am.ActivityManagerService.TAG_NETWORK, "Notifying all blocking threads for uid: " + r7 + ", procStateSeq: " + r8);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:38:0x00e9, code lost:
            r1.networkStateLock.notifyAll();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:39:0x00ee, code lost:
            monitor-exit(r2);
         */
        /* JADX WARNING: Code restructure failed: missing block: B:40:0x00ef, code lost:
            return;
         */
        public void notifyNetworkPolicyRulesUpdated(int uid, long procStateSeq) {
            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                Slog.d(ActivityManagerService.TAG_NETWORK, "Got update from NPMS for uid: " + uid + " seq: " + procStateSeq);
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    UidRecord record = ActivityManagerService.this.mActiveUids.get(uid);
                    if (record == null) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(ActivityManagerService.TAG_NETWORK, "No active uidRecord for uid: " + uid + " procStateSeq: " + procStateSeq);
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        }

        public void notifyActiveVoiceInteractionServiceChanged(ComponentName component) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mActiveVoiceInteractionServiceComponent = component;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setVr2dDisplayId(int vr2dDisplayId) {
            if (ActivityManagerDebugConfig.DEBUG_STACK) {
                Slog.d(ActivityManagerService.TAG, "setVr2dDisplayId called for: " + vr2dDisplayId);
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mVr2dDisplayId = vr2dDisplayId;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int handleUserForClone(String name, int userId) {
            return ActivityManagerService.this.mHwAMSEx.getCloneAppUserId(name, userId);
        }

        public void saveANRState(String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    StringWriter sw = new StringWriter();
                    FastPrintWriter fastPrintWriter = new FastPrintWriter(sw, false, 1024);
                    fastPrintWriter.println("  ANR time: " + DateFormat.getDateTimeInstance().format(new Date()));
                    if (reason != null) {
                        fastPrintWriter.println("  Reason: " + reason);
                    }
                    fastPrintWriter.println();
                    ActivityManagerService.this.mActivityStartController.dump(fastPrintWriter, "  ", null);
                    fastPrintWriter.println();
                    fastPrintWriter.println("-------------------------------------------------------------------------------");
                    ActivityManagerService.this.dumpActivitiesLocked(null, fastPrintWriter, null, 0, true, false, null, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                    fastPrintWriter.println();
                    fastPrintWriter.close();
                    ActivityManagerService.this.mLastANRState = sw.toString();
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearSavedANRState() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mLastANRState = null;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setFocusedActivity(IBinder token) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.forTokenLocked(token);
                    if (r == null) {
                        throw new IllegalArgumentException("setFocusedActivity: No activity record matching token=" + token);
                    } else if (ActivityManagerService.this.mStackSupervisor.moveFocusableActivityStackToFrontLocked(r, "setFocusedActivity")) {
                        ActivityManagerService.this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }
        }

        /* JADX WARNING: Code restructure failed: missing block: B:17:0x003f, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:18:0x0042, code lost:
            return;
         */
        public void setAllowAppSwitches(String type, int uid, int userId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mUserController.isUserRunning(userId, 1)) {
                        ArrayMap<String, Integer> types = ActivityManagerService.this.mAllowAppSwitchUids.get(userId);
                        if (types == null) {
                            if (uid < 0) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                return;
                            } else {
                                types = new ArrayMap<>();
                                ActivityManagerService.this.mAllowAppSwitchUids.put(userId, types);
                            }
                        }
                        if (uid < 0) {
                            types.remove(type);
                        } else {
                            types.put(type, Integer.valueOf(uid));
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        }

        public boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean hasRunningActivity(int uid, String packageName) {
            if (packageName == null) {
                return false;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < ActivityManagerService.this.mLruProcesses.size(); i++) {
                        ProcessRecord processRecord = ActivityManagerService.this.mLruProcesses.get(i);
                        if (processRecord.uid == uid) {
                            for (int j = 0; j < processRecord.activities.size(); j++) {
                                if (packageName.equals(processRecord.activities.get(j).packageName)) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    return true;
                                }
                            }
                            continue;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        }

        public void registerScreenObserver(ActivityManagerInternal.ScreenObserver observer) {
            ActivityManagerService.this.mScreenObservers.add(observer);
        }

        public boolean canStartMoreUsers() {
            return ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(switchingFromSystemUserMessage);
        }

        public void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(switchingToSystemUserMessage);
        }

        public int getMaxRunningUsers() {
            return ActivityManagerService.this.mUserController.mMaxRunningUsers;
        }

        public boolean isCallerRecents(int callingUid) {
            return ActivityManagerService.this.getRecentTasks().isCallerRecents(callingUid);
        }

        public boolean isRecentsComponentHomeActivity(int userId) {
            return ActivityManagerService.this.getRecentTasks().isRecentsComponentHomeActivity(userId);
        }

        public void cancelRecentsAnimation(boolean restoreHomeStackPosition) {
            ActivityManagerService.this.cancelRecentsAnimation(restoreHomeStackPosition);
        }

        public boolean isUidActive(int uid) {
            boolean isUidActiveLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    isUidActiveLocked = ActivityManagerService.this.isUidActiveLocked(uid);
                } catch (Throwable th) {
                    while (true) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return isUidActiveLocked;
        }

        public List<ProcessMemoryState> getMemoryStateForProcesses() {
            SparseArray<ProcessRecord> sparseArray;
            int i;
            int size;
            List<ProcessMemoryState> processMemoryStates;
            LocalService localService = this;
            List<ProcessMemoryState> processMemoryStates2 = new ArrayList<>();
            SparseArray<ProcessRecord> sparseArray2 = ActivityManagerService.this.mPidsSelfLocked;
            synchronized (sparseArray2) {
                int i2 = 0;
                try {
                    int size2 = ActivityManagerService.this.mPidsSelfLocked.size();
                    while (i2 < size2) {
                        ProcessRecord r = ActivityManagerService.this.mPidsSelfLocked.valueAt(i2);
                        int pid = r.pid;
                        int uid = r.uid;
                        MemoryStatUtil.MemoryStat memoryStat = MemoryStatUtil.readMemoryStatFromFilesystem(uid, pid);
                        if (memoryStat == null) {
                            i = i2;
                            processMemoryStates = processMemoryStates2;
                            sparseArray = sparseArray2;
                            size = size2;
                        } else {
                            String str = r.processName;
                            int i3 = r.maxAdj;
                            long j = memoryStat.pgfault;
                            long j2 = memoryStat.pgmajfault;
                            size = size2;
                            ProcessRecord processRecord = r;
                            long j3 = memoryStat.rssInBytes;
                            i = i2;
                            long j4 = memoryStat.cacheInBytes;
                            List<ProcessMemoryState> processMemoryStates3 = processMemoryStates2;
                            sparseArray = sparseArray2;
                            try {
                                MemoryStatUtil.MemoryStat memoryStat2 = memoryStat;
                                ProcessMemoryState processMemoryState = new ProcessMemoryState(uid, str, i3, j, j2, j3, j4, memoryStat.swapInBytes);
                                processMemoryStates = processMemoryStates3;
                                processMemoryStates.add(processMemoryState);
                            } catch (Throwable th) {
                                th = th;
                                throw th;
                            }
                        }
                        i2 = i + 1;
                        processMemoryStates2 = processMemoryStates;
                        size2 = size;
                        sparseArray2 = sparseArray;
                        localService = this;
                    }
                    List<ProcessMemoryState> processMemoryStates4 = processMemoryStates2;
                    return processMemoryStates4;
                } catch (Throwable th2) {
                    th = th2;
                    List<ProcessMemoryState> list = processMemoryStates2;
                    sparseArray = sparseArray2;
                    throw th;
                }
            }
        }

        public void enforceCallerIsRecentsOrHasPermission(String permission, String func) {
            ActivityManagerService.this.enforceCallerIsRecentsOrHasPermission(permission, func);
        }

        public ActivityInfo getLastResumedActivity() {
            if (ActivityManagerService.this.mLastResumedActivity == null) {
                return null;
            }
            return ActivityManagerService.this.mLastResumedActivity.info;
        }

        public boolean exitCoordinationModeInner(boolean toTop, boolean changeMode) {
            return ActivityManagerService.this.mHwAMSEx.exitCoordinationModeInner(toTop, changeMode);
        }
    }

    final class MainHandler extends Handler {
        public MainHandler(Looper looper) {
            super(looper, null, true);
        }

        public void handleMessage(Message msg) {
            ProcessRecord r;
            ProcessRecord r2;
            ProcessRecord r3;
            ProcessRecord r4;
            String procName;
            int uid;
            long memLimit;
            ProcessRecord r5;
            Message message = msg;
            String reportPackage = null;
            boolean z = false;
            switch (message.what) {
                case 4:
                    Settings.System.putConfigurationForUser(ActivityManagerService.this.mContext.getContentResolver(), (Configuration) message.obj, message.arg1);
                    break;
                case 5:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.performAppGcsIfAppropriateLocked();
                        } catch (Throwable th) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 12:
                    ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) message.obj);
                    break;
                case 13:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int i = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                int i2 = i;
                                if (i2 >= 0) {
                                    r = ActivityManagerService.this.mLruProcesses.get(i2);
                                    if (r.thread != null) {
                                        r.thread.updateTimeZone();
                                    }
                                    i = i2 - 1;
                                }
                            }
                        } catch (RemoteException e) {
                            Slog.w(ActivityManagerService.TAG, "Failed to update time zone for: " + r.info.processName);
                        } catch (Throwable th2) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th2;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 20:
                    ProcessRecord app = (ProcessRecord) message.obj;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.processStartTimedOutLocked(app);
                        } catch (Throwable th3) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th3;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 22:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int appId = message.arg1;
                            int userId = message.arg2;
                            Bundle bundle = (Bundle) message.obj;
                            ActivityManagerService.this.forceStopPackageLocked(bundle.getString(AbsLocationManagerService.DEL_PKG), appId, false, false, true, false, false, userId, bundle.getString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY));
                        } catch (Throwable th4) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th4;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 23:
                    ((PendingIntentRecord) message.obj).completeFinalize();
                    break;
                case 24:
                    INotificationManager inm = NotificationManager.getService();
                    if (inm != null) {
                        ActivityRecord root = (ActivityRecord) message.obj;
                        ProcessRecord process = root.app;
                        if (process != null) {
                            try {
                                Context context = ActivityManagerService.this.mContext.createPackageContext(process.info.packageName, 0);
                                String text = ActivityManagerService.this.mContext.getString(17040165, new Object[]{context.getApplicationInfo().loadLabel(context.getPackageManager())});
                                try {
                                    inm.enqueueNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, PackageManagerService.PLATFORM_PACKAGE_NAME, null, 11, new Notification.Builder(context, SystemNotificationChannels.HEAVY_WEIGHT_APP).setSmallIcon(17303482).setWhen(0).setOngoing(true).setTicker(text).setColor(ActivityManagerService.this.mContext.getColor(17170784)).setContentTitle(text).setContentText(ActivityManagerService.this.mContext.getText(17040166)).setContentIntent(PendingIntent.getActivityAsUser(ActivityManagerService.this.mContext, 0, root.intent, 268435456, null, new UserHandle(root.userId))).build(), root.userId);
                                    break;
                                } catch (RuntimeException e2) {
                                    Slog.w(ActivityManagerService.TAG, "Error showing notification for heavy-weight app", e2);
                                    break;
                                } catch (RemoteException e3) {
                                    break;
                                }
                            } catch (PackageManager.NameNotFoundException e4) {
                                Slog.w(ActivityManagerService.TAG, "Unable to create context for heavy notification", e4);
                                break;
                            }
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                case 25:
                    INotificationManager inm2 = NotificationManager.getService();
                    if (inm2 != null) {
                        try {
                            inm2.cancelNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, null, 11, message.arg1);
                            break;
                        } catch (RuntimeException e5) {
                            Slog.w(ActivityManagerService.TAG, "Error canceling notification for service", e5);
                            break;
                        } catch (RemoteException e6) {
                            break;
                        }
                    } else {
                        return;
                    }
                case ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG /*27*/:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.checkExcessivePowerUsageLocked();
                            removeMessages(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG);
                            sendMessageDelayed(obtainMessage(ActivityManagerService.CHECK_EXCESSIVE_POWER_USE_MSG), ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                        } catch (Throwable th5) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th5;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 28:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int i3 = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                int i4 = i3;
                                if (i4 >= 0) {
                                    r2 = ActivityManagerService.this.mLruProcesses.get(i4);
                                    if (r2.thread != null) {
                                        r2.thread.clearDnsCache();
                                    }
                                    i3 = i4 - 1;
                                }
                            }
                        } catch (RemoteException e7) {
                            Slog.w(ActivityManagerService.TAG, "Failed to clear dns cache for: " + r2.info.processName);
                        } catch (Throwable th6) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th6;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 29:
                    ProxyInfo proxy = (ProxyInfo) message.obj;
                    String host = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    String port = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    String exclList = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    Uri pacFileUrl = Uri.EMPTY;
                    if (proxy != null) {
                        host = proxy.getHost();
                        port = Integer.toString(proxy.getPort());
                        exclList = proxy.getExclusionListAsString();
                        pacFileUrl = proxy.getPacFileUrl();
                    }
                    Uri pacFileUrl2 = pacFileUrl;
                    String exclList2 = exclList;
                    String port2 = port;
                    String host2 = host;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int i5 = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                int i6 = i5;
                                if (i6 >= 0) {
                                    r3 = ActivityManagerService.this.mLruProcesses.get(i6);
                                    if (r3.thread != null && !r3.isolated) {
                                        r3.thread.setHttpProxy(host2, port2, exclList2, pacFileUrl2);
                                    }
                                    i5 = i6 - 1;
                                }
                            }
                        } catch (RemoteException e8) {
                            Slog.w(ActivityManagerService.TAG, "Failed to update http proxy for: " + r3.info.processName);
                        } catch (Throwable th7) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th7;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 33:
                    final ArrayList<ProcessMemInfo> memInfos = (ArrayList) message.obj;
                    new Thread() {
                        public void run() {
                            ActivityManagerService.this.reportMemUsage(memInfos);
                        }
                    }.start();
                    break;
                case 37:
                    boolean nextState = message.arg1 != 0;
                    if (ActivityManagerService.this.mUpdateLock.isHeld() != nextState) {
                        if (ActivityManagerDebugConfig.DEBUG_IMMERSIVE) {
                            Slog.d(ActivityManagerService.TAG, "Applying new update lock state '" + nextState + "' for " + ((ActivityRecord) message.obj));
                        }
                        if (!nextState) {
                            ActivityManagerService.this.mUpdateLock.release();
                            break;
                        } else {
                            ActivityManagerService.this.mUpdateLock.acquire();
                            break;
                        }
                    }
                    break;
                case 38:
                    ActivityManagerService.this.writeGrantedUriPermissions();
                    break;
                case 41:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int i7 = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                int i8 = i7;
                                if (i8 >= 0) {
                                    r4 = ActivityManagerService.this.mLruProcesses.get(i8);
                                    if (r4.thread != null) {
                                        r4.thread.updateTimePrefs(message.arg1);
                                    }
                                    i7 = i8 - 1;
                                }
                            }
                        } catch (RemoteException e9) {
                            Slog.w(ActivityManagerService.TAG, "Failed to update preferences for: " + r4.info.processName);
                        } catch (Throwable th8) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th8;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 44:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityRecord r6 = ActivityRecord.forTokenLocked((IBinder) message.obj);
                            if (!(r6 == null || r6.app == null || r6.app.thread == null)) {
                                try {
                                    r6.app.thread.scheduleEnterAnimationComplete(r6.appToken);
                                } catch (RemoteException e10) {
                                }
                            }
                        } catch (Throwable th9) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th9;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 45:
                    if (message.arg1 != 0) {
                        Trace.traceBegin(64, "FinishBooting");
                        ActivityManagerService.this.finishBooting();
                        Trace.traceEnd(64);
                    }
                    if (message.arg2 != 0) {
                        ActivityManagerService.this.enableScreenAfterBoot();
                        break;
                    }
                    break;
                case 47:
                    try {
                        Locale l = (Locale) message.obj;
                        IStorageManager storageManager = IStorageManager.Stub.asInterface(ServiceManager.getService("mount"));
                        Log.d(ActivityManagerService.TAG, "Storing locale " + l.toLanguageTag() + " for decryption UI");
                        storageManager.setField("SystemLocale", l.toLanguageTag());
                        break;
                    } catch (Exception e11) {
                        Log.e(ActivityManagerService.TAG, "Error storing locale for decryption UI", e11);
                        break;
                    }
                case 49:
                    int uid2 = message.arg1;
                    byte[] firstPacket = (byte[]) message.obj;
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        int i9 = 0;
                        while (true) {
                            int i10 = i9;
                            if (i10 < ActivityManagerService.this.mPidsSelfLocked.size()) {
                                ProcessRecord p = ActivityManagerService.this.mPidsSelfLocked.valueAt(i10);
                                if (p.uid == uid2 && p.thread != null) {
                                    try {
                                        p.thread.notifyCleartextNetwork(firstPacket);
                                    } catch (RemoteException e12) {
                                    }
                                }
                                i9 = i10 + 1;
                            }
                        }
                    }
                    break;
                case HdmiCecKeycode.CEC_KEYCODE_PREVIOUS_CHANNEL /*50*/:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            procName = ActivityManagerService.this.mMemWatchDumpProcName;
                            uid = ActivityManagerService.this.mMemWatchDumpUid;
                            Pair<Long, String> val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(procName, uid);
                            if (val == null) {
                                val = (Pair) ActivityManagerService.this.mMemWatchProcesses.get(procName, 0);
                            }
                            if (val != null) {
                                memLimit = ((Long) val.first).longValue();
                                reportPackage = (String) val.second;
                            } else {
                                memLimit = 0;
                            }
                        } catch (Throwable th10) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th10;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    String procName2 = procName;
                    long memLimit2 = memLimit;
                    if (procName2 != null) {
                        if (ActivityManagerDebugConfig.DEBUG_PSS) {
                            Slog.d(ActivityManagerService.TAG, "Showing dump heap notification from " + procName2 + SliceClientPermissions.SliceAuthority.DELIMITER + uid);
                        }
                        Intent inm3 = NotificationManager.getService();
                        if (inm3 != null) {
                            String text2 = ActivityManagerService.this.mContext.getString(17039959, new Object[]{procName2});
                            Intent deleteIntent = new Intent();
                            deleteIntent.setAction("com.android.server.am.DELETE_DUMPHEAP");
                            Intent intent = new Intent();
                            intent.setClassName(PackageManagerService.PLATFORM_PACKAGE_NAME, DumpHeapActivity.class.getName());
                            intent.putExtra("process", procName2);
                            intent.putExtra("size", memLimit2);
                            if (reportPackage != null) {
                                intent.putExtra("direct_launch", reportPackage);
                            }
                            int userId2 = UserHandle.getUserId(uid);
                            Intent intent2 = deleteIntent;
                            try {
                                inm3.enqueueNotificationWithTag(PackageManagerService.PLATFORM_PACKAGE_NAME, PackageManagerService.PLATFORM_PACKAGE_NAME, null, 12, new Notification.Builder(ActivityManagerService.this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17303482).setWhen(0).setOngoing(true).setAutoCancel(true).setTicker(text2).setColor(ActivityManagerService.this.mContext.getColor(17170784)).setContentTitle(text2).setContentText(ActivityManagerService.this.mContext.getText(17039960)).setContentIntent(PendingIntent.getActivityAsUser(ActivityManagerService.this.mContext, 0, intent, 268435456, null, new UserHandle(userId2))).setDeleteIntent(PendingIntent.getBroadcastAsUser(ActivityManagerService.this.mContext, 0, deleteIntent, 0, UserHandle.SYSTEM)).build(), userId2);
                                break;
                            } catch (RuntimeException e13) {
                                Slog.w(ActivityManagerService.TAG, "Error showing notification for dump heap", e13);
                                break;
                            } catch (RemoteException e14) {
                                break;
                            }
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                case 51:
                    ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.mMemWatchDumpFile = null;
                            ActivityManagerService.this.mMemWatchDumpProcName = null;
                            ActivityManagerService.this.mMemWatchDumpPid = -1;
                            ActivityManagerService.this.mMemWatchDumpUid = -1;
                        } catch (Throwable th11) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th11;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 54:
                    ((AppTimeTracker) message.obj).deliverResult(ActivityManagerService.this.mContext);
                    break;
                case 56:
                    try {
                        ((IUiAutomationConnection) message.obj).shutdown();
                    } catch (RemoteException e15) {
                        RemoteException remoteException = e15;
                        Slog.w(ActivityManagerService.TAG, "Error shutting down UiAutomationConnection");
                    }
                    boolean unused = ActivityManagerService.this.mUserIsMonkey = false;
                    break;
                case 57:
                    ProcessRecord app2 = (ProcessRecord) message.obj;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.processContentProviderPublishTimedOutLocked(app2);
                        } catch (Throwable th12) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th12;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 58:
                    ActivityManagerService.this.idleUids();
                    break;
                case 61:
                    if (ActivityManagerService.this.mVrController.onVrModeChanged((ActivityRecord) message.obj)) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                boolean disableNonVrUi = ActivityManagerService.this.mVrController.shouldDisableNonVrUiLocked();
                                ActivityManagerService.this.mWindowManager.disableNonVrUi(disableNonVrUi);
                                if (disableNonVrUi) {
                                    ActivityManagerService.this.mStackSupervisor.removeStacksInWindowingModes(2);
                                }
                            } catch (Throwable th13) {
                                while (true) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th13;
                                    break;
                                }
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        break;
                    } else {
                        return;
                    }
                case ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG /*63*/:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int i11 = ActivityManagerService.this.mLruProcesses.size() - 1;
                            while (true) {
                                int i12 = i11;
                                if (i12 >= 0) {
                                    r5 = ActivityManagerService.this.mLruProcesses.get(i12);
                                    if (r5.thread != null) {
                                        r5.thread.handleTrustStorageUpdate();
                                    }
                                    i11 = i12 - 1;
                                }
                            }
                        } catch (RemoteException e16) {
                            Slog.w(ActivityManagerService.TAG, "Failed to handle trust storage update for: " + r5.info.processName);
                        } catch (Throwable th14) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th14;
                                break;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    break;
                case 64:
                    if (message.arg1 != 0) {
                        z = true;
                    }
                    boolean isAwake = z;
                    for (int i13 = ActivityManagerService.this.mScreenObservers.size() - 1; i13 >= 0; i13--) {
                        ActivityManagerService.this.mScreenObservers.get(i13).onAwakeStateChanged(isAwake);
                    }
                    break;
                case 65:
                    if (message.arg1 != 0) {
                        z = true;
                    }
                    boolean isShowing = z;
                    for (int i14 = ActivityManagerService.this.mScreenObservers.size() - 1; i14 >= 0; i14--) {
                        ActivityManagerService.this.mScreenObservers.get(i14).onKeyguardStateChanged(isShowing);
                    }
                    break;
                case 66:
                    ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) message.obj);
                    break;
                case 67:
                    RemoteCallbackList<IResultReceiver> callbacks = (RemoteCallbackList) message.obj;
                    int N = callbacks.beginBroadcast();
                    int i15 = 0;
                    while (true) {
                        int i16 = i15;
                        if (i16 >= N) {
                            callbacks.finishBroadcast();
                            break;
                        } else {
                            try {
                                callbacks.getBroadcastItem(i16).send(0, null);
                            } catch (RemoteException e17) {
                            }
                            i15 = i16 + 1;
                        }
                    }
                case 69:
                    ActivityManagerService.this.mServices.serviceForegroundCrash((ProcessRecord) message.obj, msg.getData().getCharSequence(ActivityManagerService.SERVICE_RECORD_KEY));
                    break;
                case 96:
                    ProcessRecord proc = (ProcessRecord) message.obj;
                    if (proc != null) {
                        Utils.handleTimeOut("startservice", proc.processName, String.valueOf(proc.pid));
                        Message timeoutMsg = obtainMessage(99);
                        timeoutMsg.obj = proc;
                        sendMessageDelayed(timeoutMsg, 5000);
                        break;
                    }
                    break;
                case 97:
                    if (ActivityManagerService.this.mLocalDeviceIdleController != null) {
                        ActivityManagerService.this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(message.arg1, (long) message.arg2, true, (String) message.obj);
                        break;
                    }
                    break;
                case 98:
                    ActivityManagerService.this.trimServicesAfterBoot();
                    break;
                case 99:
                    ProcessRecord proc2 = (ProcessRecord) message.obj;
                    if (proc2 != null) {
                        Utils.handleTimeOut("servicetimeout", proc2.processName, String.valueOf(proc2.pid));
                        break;
                    }
                    break;
                case ActivityManagerService.FORCE_GC_ALL_MSG /*418*/:
                    Log.i(ActivityManagerService.TAG, "forceGCAfterRebooting message received");
                    ActivityManagerService.this.mHwAMSEx.forceGCAfterRebooting();
                    break;
                case 500:
                    Slog.i(ActivityManagerService.TAG, "STOP_FREEZE_SCREEN");
                    ActivityManagerService.this.mWindowManager.stopFreezingScreen();
                    break;
                case 600:
                    Slog.i(ActivityManagerService.TAG, "RESET_SHOW_WALLPAPER");
                    ActivityManagerService.this.mWindowManager.mShouldShowWallpaper = false;
                    break;
            }
        }
    }

    static class MemBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpHigh(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                dump(fd, pw, new String[]{"-a"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fd, pw, "  ", args, false, null, asProto);
            }
        };

        MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        /* access modifiers changed from: protected */
        public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", pw)) {
                PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
            }
        }
    }

    static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc = false;
        final String label;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;
        final long swapPss;

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id, boolean _hasActivities) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = _hasActivities;
        }

        public MemItem(String _label, String _shortLabel, long _pss, long _swapPss, int _id) {
            this.label = _label;
            this.shortLabel = _shortLabel;
            this.pss = _pss;
            this.swapPss = _swapPss;
            this.id = _id;
            this.hasActivities = false;
        }
    }

    private static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }
    }

    static class NeededUriGrants extends ArrayList<GrantUri> {
        final int flags;
        final String targetPkg;
        final int targetUid;

        NeededUriGrants(String targetPkg2, int targetUid2, int flags2) {
            this.targetPkg = targetPkg2;
            this.targetUid = targetUid2;
            this.flags = flags2;
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1138166333441L, this.targetPkg);
            proto.write(1120986464258L, this.targetUid);
            proto.write(1120986464259L, this.flags);
            int N = size();
            for (int i = 0; i < N; i++) {
                ((GrantUri) get(i)).writeToProto(proto, 2246267895812L);
            }
            proto.end(token);
        }
    }

    interface OomAdjObserver {
        void onOomAdjMessage(String str);
    }

    public class PendingAssistExtras extends Binder implements Runnable {
        public final ActivityRecord activity;
        public AssistContent content = null;
        public final Bundle extras;
        public boolean haveResult = false;
        public final String hint;
        public final Intent intent;
        public boolean isHome;
        public final IAssistDataReceiver receiver;
        public Bundle receiverExtras;
        public Bundle result = null;
        public AssistStructure structure = null;
        public final int userHandle;

        public PendingAssistExtras(ActivityRecord _activity, Bundle _extras, Intent _intent, String _hint, IAssistDataReceiver _receiver, Bundle _receiverExtras, int _userHandle) {
            this.activity = _activity;
            this.extras = _extras;
            this.intent = _intent;
            this.hint = _hint;
            this.receiver = _receiver;
            this.receiverExtras = _receiverExtras;
            this.userHandle = _userHandle;
        }

        public void run() {
            Slog.w(ActivityManagerService.TAG, "getAssistContextExtras failed: timeout retrieving from " + this.activity);
            synchronized (this) {
                this.haveResult = true;
                notifyAll();
            }
            ActivityManagerService.this.pendingAssistExtrasTimedOut(this);
        }
    }

    static final class PendingTempWhitelist {
        final long duration;
        final String tag;
        final int targetUid;

        PendingTempWhitelist(int _targetUid, long _duration, String _tag) {
            this.targetUid = _targetUid;
            this.duration = _duration;
            this.tag = _tag;
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(1120986464257L, this.targetUid);
            proto.write(1112396529666L, this.duration);
            proto.write(1138166333443L, this.tag);
            proto.end(token);
        }
    }

    static class PermissionController extends IPermissionController.Stub {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(String permission, int pid, int uid) {
            return this.mActivityManagerService.checkPermission(permission, pid, uid) == 0;
        }

        public int noteOp(String op, int uid, String packageName) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(op), uid, packageName);
        }

        public String[] getPackagesForUid(int uid) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(uid);
        }

        public boolean isRuntimePermission(String permission) {
            boolean z = false;
            try {
                if ((this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(permission, 0).protectionLevel & 15) == 1) {
                    z = true;
                }
                return z;
            } catch (PackageManager.NameNotFoundException nnfe) {
                Slog.e(ActivityManagerService.TAG, "No such permission: " + permission, nnfe);
                return false;
            }
        }

        public int getPackageUid(String packageName, int flags) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(packageName, flags);
            } catch (PackageManager.NameNotFoundException e) {
                return -1;
            }
        }
    }

    static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        int changes;
        boolean foregroundActivities;
        int pid;
        int processState;
        int uid;

        ProcessChangeItem() {
        }
    }

    static class ProcessInfoService extends IProcessInfoService.Stub {
        final ActivityManagerService mActivityManagerService;

        ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] pids, int[] states) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] pids, int[] states, int[] scores) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, scores);
        }
    }

    final class UiHandler extends Handler {
        public UiHandler() {
            super(UiThread.get().getLooper(), null, true);
        }

        /* JADX WARNING: Code restructure failed: missing block: B:31:0x0077, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:57:0x018a, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
         */
        /* JADX WARNING: Code restructure failed: missing block: B:76:0x01e2, code lost:
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            r8.this$0.ensureBootCompleted();
         */
        public void handleMessage(Message msg) {
            int i = msg.what;
            if (i == 6) {
                Dialog d = null;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ProcessRecord app = (ProcessRecord) msg.obj;
                        if (msg.arg1 != 0) {
                            if (!app.waitedForDebugger) {
                                d = new AppWaitingForDebuggerDialog(ActivityManagerService.this, ActivityManagerService.this.mUiContext, app);
                                app.waitDialog = d;
                                app.waitedForDebugger = true;
                            }
                        } else if (app.waitDialog != null) {
                            app.waitDialog.dismiss();
                            app.waitDialog = null;
                        }
                    } catch (Throwable th) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                if (d != null) {
                    d.show();
                }
            } else if (i == 26) {
                HashMap<String, Object> data = (HashMap) msg.obj;
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        ProcessRecord proc = (ProcessRecord) data.get("app");
                        if (proc == null) {
                            Slog.e(ActivityManagerService.TAG, "App not found when showing strict mode dialog.");
                        } else if (proc.crashDialog != null) {
                            Slog.e(ActivityManagerService.TAG, "App already has strict mode dialog: " + proc);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else {
                            AppErrorResult res = (AppErrorResult) data.get(IZRHungService.PARA_RESULT);
                            if (!ActivityManagerService.this.mShowDialogs || ActivityManagerService.this.mSleeping || ActivityManagerService.this.mShuttingDown) {
                                res.set(0);
                            } else {
                                Dialog d2 = new StrictModeViolationDialog(ActivityManagerService.this.mUiContext, ActivityManagerService.this, res, proc);
                                d2.show();
                                proc.crashDialog = d2;
                            }
                        }
                    } catch (Throwable th2) {
                        while (true) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                }
            } else if (i == 48) {
                ((Dialog) msg.obj).dismiss();
            } else if (i == 53) {
                ActivityManagerService.this.dispatchUidsChanged();
            } else if (i == 68) {
                ActivityManagerService.this.pushTempWhitelist();
            } else if (i != 70) {
                switch (i) {
                    case 1:
                        ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(msg);
                        ActivityManagerService.this.ensureBootCompleted();
                        break;
                    case 2:
                        ActivityManagerService.this.mAppErrors.handleShowAnrUi(msg);
                        ActivityManagerService.this.ensureBootCompleted();
                        break;
                    case 3:
                        new FactoryErrorDialog(ActivityManagerService.this.mUiContext, msg.getData().getCharSequence("msg")).show();
                        ActivityManagerService.this.ensureBootCompleted();
                        break;
                    default:
                        switch (i) {
                            case 14:
                                if (ActivityManagerService.this.mShowDialogs) {
                                    AlertDialog d3 = new BaseErrorDialog(ActivityManagerService.this.mUiContext);
                                    d3.getWindow().setType(2010);
                                    d3.setCancelable(false);
                                    d3.setTitle(ActivityManagerService.this.mUiContext.getText(17039580));
                                    d3.setMessage(ActivityManagerService.this.mUiContext.getText(17041233));
                                    d3.setButton(-1, ActivityManagerService.this.mUiContext.getText(17039370), obtainMessage(48, d3));
                                    d3.show();
                                    break;
                                }
                                break;
                            case 15:
                                if (ActivityManagerService.this.mShowDialogs) {
                                    AlertDialog d4 = new BaseErrorDialog(ActivityManagerService.this.mUiContext);
                                    d4.getWindow().setType(2010);
                                    d4.setCancelable(false);
                                    d4.setTitle(ActivityManagerService.this.mUiContext.getText(17039580));
                                    d4.setMessage(ActivityManagerService.this.mUiContext.getText(17041232));
                                    d4.setButton(-1, ActivityManagerService.this.mUiContext.getText(17039370), obtainMessage(48, d4));
                                    d4.show();
                                    break;
                                }
                                break;
                            default:
                                switch (i) {
                                    case 30:
                                        synchronized (ActivityManagerService.this) {
                                            try {
                                                ActivityManagerService.boostPriorityForLockedSection();
                                                ActivityRecord ar = (ActivityRecord) msg.obj;
                                                if (ActivityManagerService.this.mCompatModeDialog != null) {
                                                    if (!ActivityManagerService.this.mCompatModeDialog.mAppInfo.packageName.equals(ar.info.applicationInfo.packageName)) {
                                                        ActivityManagerService.this.mCompatModeDialog.dismiss();
                                                        ActivityManagerService.this.mCompatModeDialog = null;
                                                        break;
                                                    } else {
                                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                                        return;
                                                    }
                                                }
                                            } catch (Throwable th3) {
                                                while (true) {
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                    throw th3;
                                                    break;
                                                }
                                            }
                                        }
                                        break;
                                    case 31:
                                        ActivityManagerService.this.dispatchProcessesChanged();
                                        break;
                                    case 32:
                                        ActivityManagerService.this.dispatchProcessDied(msg.arg1, msg.arg2);
                                        break;
                                }
                        }
                }
            } else {
                ActivityManagerService.this.dispatchOomAdjObserver((String) msg.obj);
            }
        }
    }

    static final class UidObserverRegistration {
        private static int[] ORIG_ENUMS = {4, 8, 2, 1};
        private static int[] PROTO_ENUMS = {3, 4, 2, 1};
        final int cutpoint;
        final SparseIntArray lastProcStates;
        int mMaxDispatchTime;
        int mSlowDispatchCount;
        final String pkg;
        final int uid;
        final int which;

        UidObserverRegistration(int _uid, String _pkg, int _which, int _cutpoint) {
            this.uid = _uid;
            this.pkg = _pkg;
            this.which = _which;
            this.cutpoint = _cutpoint;
            if (this.cutpoint >= 0) {
                this.lastProcStates = new SparseIntArray();
            } else {
                this.lastProcStates = null;
            }
        }

        /* access modifiers changed from: package-private */
        public void writeToProto(ProtoOutputStream proto, long fieldId) {
            ProtoOutputStream protoOutputStream = proto;
            long token = proto.start(fieldId);
            protoOutputStream.write(1120986464257L, this.uid);
            protoOutputStream.write(1138166333442L, this.pkg);
            ProtoUtils.writeBitWiseFlagsToProtoEnum(protoOutputStream, 2259152797699L, this.which, ORIG_ENUMS, PROTO_ENUMS);
            protoOutputStream.write(1120986464260L, this.cutpoint);
            if (this.lastProcStates != null) {
                int NI = this.lastProcStates.size();
                for (int i = 0; i < NI; i++) {
                    long pToken = protoOutputStream.start(2246267895813L);
                    protoOutputStream.write(1120986464257L, this.lastProcStates.keyAt(i));
                    protoOutputStream.write(1120986464258L, this.lastProcStates.valueAt(i));
                    protoOutputStream.end(pToken);
                }
            }
            protoOutputStream.end(token);
        }
    }

    private static final class UpdateConfigurationResult {
        boolean activityRelaunched;
        int changes;

        private UpdateConfigurationResult() {
        }

        /* access modifiers changed from: package-private */
        public void reset() {
            this.changes = 0;
            this.activityRelaunched = false;
        }
    }

    static {
        boolean z = true;
        if (System.getenv("MAPLE_RUNTIME") == null) {
            z = false;
        }
        sIsMygote = z;
        sSkipFreezingWindowActivitys.add("com.tencent.mobileqq/.activity.LoginActivity");
    }

    /* access modifiers changed from: package-private */
    public BroadcastQueue broadcastQueueForIntent(Intent intent) {
        boolean isFg = (intent.getFlags() & 268435456) != 0;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
            StringBuilder sb = new StringBuilder();
            sb.append("Broadcast intent ");
            sb.append(intent);
            sb.append(" on ");
            sb.append(isFg ? "foreground" : "background");
            sb.append(" queue");
            Slog.i(TAG, sb.toString());
        }
        return isFg ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
    }

    public boolean canShowErrorDialogs() {
        if (!this.mShowDialogs || this.mSleeping || this.mShuttingDown || this.mKeyguardController.isKeyguardOrAodShowing(0) || this.mUserController.hasUserRestriction("no_system_error_dialogs", this.mUserController.getCurrentUserId())) {
            return false;
        }
        return !UserManager.isDeviceInDemoMode(this.mContext) || !this.mUserController.getCurrentUser().isDemo();
    }

    /* access modifiers changed from: protected */
    public ActivityRecord getLastResumedActivity() {
        return this.mLastResumedActivity;
    }

    static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    /* access modifiers changed from: package-private */
    public Configuration getGlobalConfiguration() {
        return this.mStackSupervisor.getConfiguration();
    }

    /* JADX WARNING: type inference failed for: r1v2, types: [com.android.server.am.ProcessStatsService, android.os.IBinder] */
    /* JADX WARNING: type inference failed for: r1v7, types: [com.android.server.am.ActivityManagerService$PermissionController, android.os.IBinder] */
    /* JADX WARNING: type inference failed for: r1v8, types: [android.os.IBinder, com.android.server.am.ActivityManagerService$ProcessInfoService] */
    public void setSystemProcess() {
        try {
            ServiceManager.addService("activity", this, true, 21);
            ServiceManager.addService("procstats", this.mProcessStats);
            ServiceManager.addService("meminfo", new MemBinder(this), false, 2);
            ServiceManager.addService("gfxinfo", new GraphicsBinder(this));
            ServiceManager.addService("dbinfo", new DbBinder(this));
            ServiceManager.addService("cpuinfo", new CpuBinder(this), false, 1);
            ServiceManager.addService("permission", new PermissionController(this));
            ServiceManager.addService("processinfo", new ProcessInfoService(this));
            ApplicationInfo info = this.mContext.getPackageManager().getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1049600);
            this.mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = newProcessRecordLocked(info, info.processName, false, 0);
                    app.persistent = true;
                    app.pid = MY_PID;
                    app.maxAdj = -900;
                    app.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                    synchronized (this.mPidsSelfLocked) {
                        this.mPidsSelfLocked.put(app.pid, app);
                    }
                    updateLruProcessLocked(app, false, null);
                    updateOomAdjLocked();
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.startWatchingMode(HANDLE_TRUST_STORAGE_UPDATE_MSG, null, new IAppOpsCallback.Stub() {
                public void opChanged(int op, int uid, String packageName) {
                    if (op == ActivityManagerService.HANDLE_TRUST_STORAGE_UPDATE_MSG && packageName != null && ActivityManagerService.this.mAppOpsService.checkOperation(op, uid, packageName) != 0) {
                        ActivityManagerService.this.runInBackgroundDisabled(uid);
                    }
                }
            });
        } catch (PackageManager.NameNotFoundException e) {
            throw new RuntimeException("Unable to find android system package", e);
        }
    }

    public void setWindowManager(WindowManagerService wm) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mWindowManager = wm;
                this.mStackSupervisor.setWindowManager(wm);
                this.mLockTaskController.setWindowManager(wm);
                this.mWindowManager.registerPointerEventListener(this.mHwAMSEx.getPointerEventListener());
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setAlarmManager(AlarmManagerService service) {
        this.mAlms = service;
    }

    public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager) {
        this.mUsageStatsService = usageStatsManager;
    }

    public void startObservingNativeCrashes() {
        new NativeCrashListener(this).start();
    }

    public IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    @VisibleForTesting
    public ActivityManagerService(Injector injector) {
        this.mIsHwLowRam = SystemProperties.getBoolean("ro.config.hw_low_ram", false) || SystemProperties.getBoolean("ro.config.hw_smart_shrink", false);
        this.mBroadcastQueues = initialBroadcastQueue();
        this.mCustAms = (HwCustActivityManagerService) HwCustUtils.createObj(HwCustActivityManagerService.class, new Object[0]);
        this.mAllowAppSwitchUids = new SparseArray<>();
        this.mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"activities"}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", ActivityManagerService.SYSUI_COMPONENT_NAME}, asProto);
                }
            }

            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mPendingAssistExtras = new ArrayList<>();
        this.mProcessList = new ProcessList();
        this.mProcessNames = new ProcessMap<>();
        this.mIsolatedProcesses = new SparseArray<>();
        this.mNextIsolatedProcessUid = 0;
        this.mHeavyWeightProcess = null;
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mPidsSelfLocked = new SparseArray<>();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mRemovedProcesses = new ArrayList<>();
        this.mLruProcesses = new ArrayList<>();
        this.mLruProcessActivityStart = 0;
        this.mLruProcessServiceStart = 0;
        this.mProcessesToGc = new ArrayList<>();
        this.mPendingPssProcesses = new ArrayList<>();
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mActiveUids = new SparseArray<>();
        this.mValidateUids = new SparseArray<>();
        this.mIntentSenderRecords = new HashMap<>();
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            /* access modifiers changed from: protected */
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                if (filter.receiverList.receiver == null) {
                    Slog.w(ActivityManagerService.TAG, "  Receiver of filter's receiverList is null; packageName = " + filter.packageName);
                    return false;
                }
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(filter, match, userId);
                }
                return null;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* access modifiers changed from: protected */
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupAppName = null;
        this.mBackupTarget = null;
        this.mLaunchingProviders = new ArrayList<>();
        this.mGrantedUriPermissions = new SparseArray<>();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new SparseArray<>();
        this.mTempConfig = new Configuration();
        this.mTmpUpdateConfigurationResult = new UpdateConfigurationResult();
        this.mStringBuilder = new StringBuilder(256);
        this.mTopAction = "android.intent.action.MAIN";
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mLaunchWarningShown = false;
        this.mCheckedForSetup = false;
        this.mSleeping = false;
        this.mTopProcessState = 2;
        this.mWakefulness = 1;
        this.mKeyguardShown = false;
        this.mShuttingDown = false;
        this.mAdjSeq = 0;
        this.mLruSeq = 0;
        this.mNumNonCachedProcs = 0;
        this.mNumCachedHiddenProcs = 0;
        this.mNumServiceProcs = 0;
        this.mNewNumAServiceProcs = 0;
        this.mNewNumServiceProcs = 0;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap<>();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mController = null;
        this.mControllerIsAMonkey = false;
        this.mProfileApp = null;
        this.mProfileProc = null;
        this.mProfilerInfo = null;
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap<>();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mTmpLong = new long[3];
        this.mTmpBroadcastQueue = new ArraySet<>();
        this.mProcStateSeqCounter = 0;
        this.mProcStartSeqCounter = 0;
        this.mPendingStarts = new LongSparseArray<>();
        this.mScreenObservers = new ArrayList();
        this.mProcessObservers = new RemoteCallbackList<>();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList<>();
        this.mAvailProcessChanges = new ArrayList<>();
        this.mUidObservers = new RemoteCallbackList<>();
        this.mActiveUidChanges = new UidRecord.ChangeItem[5];
        this.mPendingUidChanges = new ArrayList<>();
        this.mAvailUidChanges = new ArrayList<>();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mUpdateLock = new UpdateLock("immersive");
        this.mBooted = false;
        this.mActivityIdle = false;
        this.mLastMemUsageReportTime = 0;
        this.mViSessionId = 1000;
        this.mLocalStopReason = new ThreadLocal<>();
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* JADX WARNING: Code restructure failed: missing block: B:100:0x01e7, code lost:
                r15 = com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:101:0x01e9, code lost:
                r14.append(r15);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:102:0x01ee, code lost:
                if (r7.pid == r3) goto L_0x01f3;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:103:0x01f0, code lost:
                r15 = "PID_CHANGED ";
             */
            /* JADX WARNING: Code restructure failed: missing block: B:104:0x01f3, code lost:
                r15 = com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:105:0x01f5, code lost:
                r14.append(r15);
                r14.append(" initState=");
                r14.append(r12);
                r14.append(" curState=");
                r14.append(r7.setProcState);
                r14.append(" ");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:106:0x0213, code lost:
                if (r7.lastPssTime == r29) goto L_0x0218;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:107:0x0215, code lost:
                r0 = "TIME_CHANGED";
             */
            /* JADX WARNING: Code restructure failed: missing block: B:108:0x0218, code lost:
                r0 = com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:109:0x021a, code lost:
                r14.append(r0);
                android.util.Slog.d(com.android.server.am.ActivityManagerService.TAG, r14.toString());
             */
            /* JADX WARNING: Code restructure failed: missing block: B:110:0x0224, code lost:
                monitor-exit(r11);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:111:0x0225, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:112:0x0229, code lost:
                r0 = th;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:113:0x022a, code lost:
                r3 = r15;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:115:?, code lost:
                monitor-exit(r11);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:116:0x022c, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:117:0x022f, code lost:
                throw r0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:118:0x0230, code lost:
                r0 = th;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:76:0x0174, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:77:0x0177, code lost:
                if (r7 == null) goto L_0x0232;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:78:0x0179, code lost:
                r31 = android.os.SystemClock.currentThreadTimeMillis();
                r33 = android.os.Debug.getPss(r15, r9, r0);
                r35 = android.os.SystemClock.currentThreadTimeMillis();
                r11 = r1.this$0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:79:0x0187, code lost:
                monitor-enter(r11);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:81:?, code lost:
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:82:0x018f, code lost:
                if (r33 == 0) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:84:0x0193, code lost:
                if (r7.thread == null) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:86:0x0197, code lost:
                if (r7.setProcState != r12) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:88:0x019b, code lost:
                if (r7.pid != r15) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:90:0x01a1, code lost:
                if (r7.lastPssTime != r29) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:91:0x01a3, code lost:
                r10 = r10 + 1;
                com.android.server.am.ProcessList.commitNextPssTime(r7.procStateMemTracker);
                r13 = r1.this$0;
                r18 = r9[0];
                r20 = r9[r3];
             */
            /* JADX WARNING: Code restructure failed: missing block: B:92:0x01b9, code lost:
                r3 = r15;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:94:?, code lost:
                r13.recordPssSampleLocked(r7, r12, r33, r18, r20, r9[2], r24, r35 - r31, android.os.SystemClock.uptimeMillis());
             */
            /* JADX WARNING: Code restructure failed: missing block: B:95:0x01c2, code lost:
                r3 = r15;
                com.android.server.am.ProcessList.abortNextPssTime(r7.procStateMemTracker);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:96:0x01ca, code lost:
                if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_PSS == false) goto L_0x0224;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:97:0x01cc, code lost:
                r14 = new java.lang.StringBuilder();
                r14.append("Skipped pss collection of ");
                r14.append(r3);
                r14.append(": ");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:98:0x01e2, code lost:
                if (r7.thread != null) goto L_0x01e7;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:99:0x01e4, code lost:
                r15 = "NO_THREAD ";
             */
            public void handleMessage(Message msg) {
                int pid;
                List<ProcessCpuTracker.Stats> stats;
                AnonymousClass3 r1 = this;
                char c = 1;
                if (msg.what == 1) {
                    long start = SystemClock.uptimeMillis();
                    MemInfoReader memInfo = null;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            if (ActivityManagerService.this.mFullPssPending) {
                                ActivityManagerService.this.mFullPssPending = false;
                                memInfo = new MemInfoReader();
                            }
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    long[] jArr = null;
                    if (memInfo != null) {
                        ActivityManagerService.this.updateCpuStatsNow();
                        synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                            stats = ActivityManagerService.this.mProcessCpuTracker.getStats($$Lambda$ActivityManagerService$3$poTyYzHinA8s8lAJy6Bb3JsBNo.INSTANCE);
                        }
                        int N = stats.size();
                        long nativeTotalPss = 0;
                        for (int j = 0; j < N; j++) {
                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                if (ActivityManagerService.this.mPidsSelfLocked.indexOfKey(stats.get(j).pid) < 0) {
                                    nativeTotalPss += Debug.getPss(stats.get(j).pid, null, null);
                                }
                            }
                        }
                        memInfo.readMemInfo();
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                    Slog.d(ActivityManagerService.TAG, "Collected native and kernel memory in " + (SystemClock.uptimeMillis() - start) + "ms");
                                }
                                long cachedKb = memInfo.getRealCachedSizeKb();
                                long freeKb = memInfo.getFreeSizeKb();
                                long zramKb = memInfo.getZramTotalSizeKb();
                                long kernelKb = memInfo.getKernelUsedSizeKb();
                                EventLogTags.writeAmMeminfo(cachedKb * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, nativeTotalPss * 1024);
                                ActivityManagerService.this.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, nativeTotalPss);
                            } catch (Throwable th) {
                                while (true) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                    long[] tmp = new long[3];
                    int num = 0;
                    while (true) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerService.this.mPendingPssProcesses.size() <= 0) {
                                    if (ActivityManagerService.this.mTestPssMode || ActivityManagerDebugConfig.DEBUG_PSS) {
                                        Slog.d(ActivityManagerService.TAG, "Collected pss of " + num + " processes in " + (SystemClock.uptimeMillis() - start) + "ms");
                                    }
                                    ActivityManagerService.this.mPendingPssProcesses.clear();
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    return;
                                }
                                ProcessRecord proc = ActivityManagerService.this.mPendingPssProcesses.remove(0);
                                int procState = proc.pssProcState;
                                int statType = proc.pssStatType;
                                long lastPssTime = proc.lastPssTime;
                                long now = SystemClock.uptimeMillis();
                                if (proc.thread == null || procState != proc.setProcState || lastPssTime + 1000 >= now) {
                                    ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                    proc = null;
                                    pid = 0;
                                } else {
                                    pid = proc.pid;
                                }
                            } catch (Throwable th2) {
                                while (true) {
                                    throw th2;
                                }
                            }
                        }
                        jArr = null;
                        r1 = this;
                        c = 1;
                    }
                }
            }

            static /* synthetic */ boolean lambda$handleMessage$0(ProcessCpuTracker.Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mSkipShowLauncher = false;
        this.mProcessStateStatsLongs = new long[1];
        this.mPersistentReady = false;
        this.mSupportedSystemLocales = null;
        this.mHwAMSEx = null;
        this.mHwInnerService = new HwInnerActivityManagerService(this);
        this.mDAProxy = new HwDAMonitorProxy();
        this.mInjector = injector;
        this.mContext = this.mInjector.getContext();
        this.mUiContext = null;
        this.GL_ES_VERSION = 0;
        this.mActivityStartController = null;
        this.mAppErrors = null;
        this.mAppWarnings = null;
        this.mAppOpsService = this.mInjector.getAppOpsService(null, null);
        this.mBatteryStatsService = null;
        this.mCompatModePackages = null;
        this.mConstants = null;
        this.mGrantFile = null;
        this.mHandler = null;
        this.mHandlerThread = null;
        this.mIntentFirewall = null;
        this.mKeyguardController = null;
        this.mPermissionReviewRequired = false;
        this.mProcessCpuThread = null;
        this.mProcessStats = null;
        this.mProviderMap = null;
        this.mRecentTasks = null;
        this.mServices = null;
        this.mStackSupervisor = null;
        this.mSystemThread = null;
        this.mTaskChangeNotificationController = null;
        this.mUiHandler = injector.getUiHandler(null);
        this.mUserController = null;
        this.mVrController = null;
        this.mLockTaskController = null;
        this.mLifecycleManager = null;
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
    }

    public ActivityManagerService(Context systemContext) {
        this.mIsHwLowRam = SystemProperties.getBoolean("ro.config.hw_low_ram", false) || SystemProperties.getBoolean("ro.config.hw_smart_shrink", false);
        this.mBroadcastQueues = initialBroadcastQueue();
        this.mCustAms = (HwCustActivityManagerService) HwCustUtils.createObj(HwCustActivityManagerService.class, new Object[0]);
        this.mAllowAppSwitchUids = new SparseArray<>();
        this.mPriorityDumper = new PriorityDump.PriorityDumper() {
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (!asProto) {
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"activities"}, asProto);
                    ActivityManagerService.this.doDump(fd, pw, new String[]{"service", ActivityManagerService.SYSUI_COMPONENT_NAME}, asProto);
                }
            }

            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mPendingAssistExtras = new ArrayList<>();
        this.mProcessList = new ProcessList();
        this.mProcessNames = new ProcessMap<>();
        this.mIsolatedProcesses = new SparseArray<>();
        this.mNextIsolatedProcessUid = 0;
        this.mHeavyWeightProcess = null;
        this.mBackgroundAppIdWhitelist = new int[]{1002};
        this.mPidsSelfLocked = new SparseArray<>();
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mRemovedProcesses = new ArrayList<>();
        this.mLruProcesses = new ArrayList<>();
        this.mLruProcessActivityStart = 0;
        this.mLruProcessServiceStart = 0;
        this.mProcessesToGc = new ArrayList<>();
        this.mPendingPssProcesses = new ArrayList<>();
        this.mBinderTransactionTrackingEnabled = false;
        this.mLastFullPssTime = SystemClock.uptimeMillis();
        this.mFullPssPending = false;
        this.mActiveUids = new SparseArray<>();
        this.mValidateUids = new SparseArray<>();
        this.mIntentSenderRecords = new HashMap<>();
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() {
            /* access modifiers changed from: protected */
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                if (filter.receiverList.receiver == null) {
                    Slog.w(ActivityManagerService.TAG, "  Receiver of filter's receiverList is null; packageName = " + filter.packageName);
                    return false;
                }
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter newResult(BroadcastFilter filter, int match, int userId) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(filter, match, userId);
                }
                return null;
            }

            /* access modifiers changed from: protected */
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* access modifiers changed from: protected */
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupAppName = null;
        this.mBackupTarget = null;
        this.mLaunchingProviders = new ArrayList<>();
        this.mGrantedUriPermissions = new SparseArray<>();
        this.mDeviceIdleWhitelist = new int[0];
        this.mDeviceIdleExceptIdleWhitelist = new int[0];
        this.mDeviceIdleTempWhitelist = new int[0];
        this.mPendingTempWhitelist = new SparseArray<>();
        this.mTempConfig = new Configuration();
        this.mTmpUpdateConfigurationResult = new UpdateConfigurationResult();
        this.mStringBuilder = new StringBuilder(256);
        this.mTopAction = "android.intent.action.MAIN";
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mLaunchWarningShown = false;
        this.mCheckedForSetup = false;
        this.mSleeping = false;
        this.mTopProcessState = 2;
        this.mWakefulness = 1;
        this.mKeyguardShown = false;
        this.mShuttingDown = false;
        this.mAdjSeq = 0;
        this.mLruSeq = 0;
        this.mNumNonCachedProcs = 0;
        this.mNumCachedHiddenProcs = 0;
        this.mNumServiceProcs = 0;
        this.mNewNumAServiceProcs = 0;
        this.mNewNumServiceProcs = 0;
        this.mAllowLowerMemLevel = false;
        this.mLastMemoryLevel = 0;
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mLowRamTimeSinceLastIdle = 0;
        this.mLowRamStartTime = 0;
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mForegroundPackages = new ProcessMap<>();
        this.mTestPssMode = false;
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mController = null;
        this.mControllerIsAMonkey = false;
        this.mProfileApp = null;
        this.mProfileProc = null;
        this.mProfilerInfo = null;
        this.mAppAgentMap = null;
        this.mProfileType = 0;
        this.mMemWatchProcesses = new ProcessMap<>();
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mTmpLong = new long[3];
        this.mTmpBroadcastQueue = new ArraySet<>();
        this.mProcStateSeqCounter = 0;
        this.mProcStartSeqCounter = 0;
        this.mPendingStarts = new LongSparseArray<>();
        this.mScreenObservers = new ArrayList();
        this.mProcessObservers = new RemoteCallbackList<>();
        this.mActiveProcessChanges = new ProcessChangeItem[5];
        this.mPendingProcessChanges = new ArrayList<>();
        this.mAvailProcessChanges = new ArrayList<>();
        this.mUidObservers = new RemoteCallbackList<>();
        this.mActiveUidChanges = new UidRecord.ChangeItem[5];
        this.mPendingUidChanges = new ArrayList<>();
        this.mAvailUidChanges = new ArrayList<>();
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mLastCpuTime = new AtomicLong(0);
        this.mProcessCpuMutexFree = new AtomicBoolean(true);
        this.mProcessCpuInitLatch = new CountDownLatch(1);
        this.mLastWriteTime = 0;
        this.mUpdateLock = new UpdateLock("immersive");
        this.mBooted = false;
        this.mActivityIdle = false;
        this.mLastMemUsageReportTime = 0;
        this.mViSessionId = 1000;
        this.mLocalStopReason = new ThreadLocal<>();
        this.mBgHandler = new Handler(BackgroundThread.getHandler().getLooper()) {
            /* JADX WARNING: Code restructure failed: missing block: B:100:0x01e7, code lost:
                r15 = com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:101:0x01e9, code lost:
                r14.append(r15);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:102:0x01ee, code lost:
                if (r7.pid == r3) goto L_0x01f3;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:103:0x01f0, code lost:
                r15 = "PID_CHANGED ";
             */
            /* JADX WARNING: Code restructure failed: missing block: B:104:0x01f3, code lost:
                r15 = com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:105:0x01f5, code lost:
                r14.append(r15);
                r14.append(" initState=");
                r14.append(r12);
                r14.append(" curState=");
                r14.append(r7.setProcState);
                r14.append(" ");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:106:0x0213, code lost:
                if (r7.lastPssTime == r29) goto L_0x0218;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:107:0x0215, code lost:
                r0 = "TIME_CHANGED";
             */
            /* JADX WARNING: Code restructure failed: missing block: B:108:0x0218, code lost:
                r0 = com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:109:0x021a, code lost:
                r14.append(r0);
                android.util.Slog.d(com.android.server.am.ActivityManagerService.TAG, r14.toString());
             */
            /* JADX WARNING: Code restructure failed: missing block: B:110:0x0224, code lost:
                monitor-exit(r11);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:111:0x0225, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:112:0x0229, code lost:
                r0 = th;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:113:0x022a, code lost:
                r3 = r15;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:115:?, code lost:
                monitor-exit(r11);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:116:0x022c, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:117:0x022f, code lost:
                throw r0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:118:0x0230, code lost:
                r0 = th;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:76:0x0174, code lost:
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:77:0x0177, code lost:
                if (r7 == null) goto L_0x0232;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:78:0x0179, code lost:
                r31 = android.os.SystemClock.currentThreadTimeMillis();
                r33 = android.os.Debug.getPss(r15, r9, r0);
                r35 = android.os.SystemClock.currentThreadTimeMillis();
                r11 = r1.this$0;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:79:0x0187, code lost:
                monitor-enter(r11);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:81:?, code lost:
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
             */
            /* JADX WARNING: Code restructure failed: missing block: B:82:0x018f, code lost:
                if (r33 == 0) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:84:0x0193, code lost:
                if (r7.thread == null) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:86:0x0197, code lost:
                if (r7.setProcState != r12) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:88:0x019b, code lost:
                if (r7.pid != r15) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:90:0x01a1, code lost:
                if (r7.lastPssTime != r29) goto L_0x01c2;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:91:0x01a3, code lost:
                r10 = r10 + 1;
                com.android.server.am.ProcessList.commitNextPssTime(r7.procStateMemTracker);
                r13 = r1.this$0;
                r18 = r9[0];
                r20 = r9[r3];
             */
            /* JADX WARNING: Code restructure failed: missing block: B:92:0x01b9, code lost:
                r3 = r15;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:94:?, code lost:
                r13.recordPssSampleLocked(r7, r12, r33, r18, r20, r9[2], r24, r35 - r31, android.os.SystemClock.uptimeMillis());
             */
            /* JADX WARNING: Code restructure failed: missing block: B:95:0x01c2, code lost:
                r3 = r15;
                com.android.server.am.ProcessList.abortNextPssTime(r7.procStateMemTracker);
             */
            /* JADX WARNING: Code restructure failed: missing block: B:96:0x01ca, code lost:
                if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_PSS == false) goto L_0x0224;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:97:0x01cc, code lost:
                r14 = new java.lang.StringBuilder();
                r14.append("Skipped pss collection of ");
                r14.append(r3);
                r14.append(": ");
             */
            /* JADX WARNING: Code restructure failed: missing block: B:98:0x01e2, code lost:
                if (r7.thread != null) goto L_0x01e7;
             */
            /* JADX WARNING: Code restructure failed: missing block: B:99:0x01e4, code lost:
                r15 = "NO_THREAD ";
             */
            public void handleMessage(Message msg) {
                int pid;
                List<ProcessCpuTracker.Stats> stats;
                AnonymousClass3 r1 = this;
                char c = 1;
                if (msg.what == 1) {
                    long start = SystemClock.uptimeMillis();
                    MemInfoReader memInfo = null;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            if (ActivityManagerService.this.mFullPssPending) {
                                ActivityManagerService.this.mFullPssPending = false;
                                memInfo = new MemInfoReader();
                            }
                        } finally {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    long[] jArr = null;
                    if (memInfo != null) {
                        ActivityManagerService.this.updateCpuStatsNow();
                        synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                            stats = ActivityManagerService.this.mProcessCpuTracker.getStats($$Lambda$ActivityManagerService$3$poTyYzHinA8s8lAJy6Bb3JsBNo.INSTANCE);
                        }
                        int N = stats.size();
                        long nativeTotalPss = 0;
                        for (int j = 0; j < N; j++) {
                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                if (ActivityManagerService.this.mPidsSelfLocked.indexOfKey(stats.get(j).pid) < 0) {
                                    nativeTotalPss += Debug.getPss(stats.get(j).pid, null, null);
                                }
                            }
                        }
                        memInfo.readMemInfo();
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                    Slog.d(ActivityManagerService.TAG, "Collected native and kernel memory in " + (SystemClock.uptimeMillis() - start) + "ms");
                                }
                                long cachedKb = memInfo.getRealCachedSizeKb();
                                long freeKb = memInfo.getFreeSizeKb();
                                long zramKb = memInfo.getZramTotalSizeKb();
                                long kernelKb = memInfo.getKernelUsedSizeKb();
                                EventLogTags.writeAmMeminfo(cachedKb * 1024, freeKb * 1024, zramKb * 1024, kernelKb * 1024, nativeTotalPss * 1024);
                                ActivityManagerService.this.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, nativeTotalPss);
                            } catch (Throwable th) {
                                while (true) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                    long[] tmp = new long[3];
                    int num = 0;
                    while (true) {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                if (ActivityManagerService.this.mPendingPssProcesses.size() <= 0) {
                                    if (ActivityManagerService.this.mTestPssMode || ActivityManagerDebugConfig.DEBUG_PSS) {
                                        Slog.d(ActivityManagerService.TAG, "Collected pss of " + num + " processes in " + (SystemClock.uptimeMillis() - start) + "ms");
                                    }
                                    ActivityManagerService.this.mPendingPssProcesses.clear();
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    return;
                                }
                                ProcessRecord proc = ActivityManagerService.this.mPendingPssProcesses.remove(0);
                                int procState = proc.pssProcState;
                                int statType = proc.pssStatType;
                                long lastPssTime = proc.lastPssTime;
                                long now = SystemClock.uptimeMillis();
                                if (proc.thread == null || procState != proc.setProcState || lastPssTime + 1000 >= now) {
                                    ProcessList.abortNextPssTime(proc.procStateMemTracker);
                                    proc = null;
                                    pid = 0;
                                } else {
                                    pid = proc.pid;
                                }
                            } catch (Throwable th2) {
                                while (true) {
                                    throw th2;
                                }
                            }
                        }
                        jArr = null;
                        r1 = this;
                        c = 1;
                    }
                }
            }

            static /* synthetic */ boolean lambda$handleMessage$0(ProcessCpuTracker.Stats st) {
                return st.vsize > 0 && st.uid < 10000;
            }
        };
        this.mSkipShowLauncher = false;
        this.mProcessStateStatsLongs = new long[1];
        this.mPersistentReady = false;
        this.mSupportedSystemLocales = null;
        this.mHwAMSEx = null;
        this.mHwInnerService = new HwInnerActivityManagerService(this);
        this.mDAProxy = new HwDAMonitorProxy();
        this.mHwAMSEx = HwServiceExFactory.getHwActivityManagerServiceEx(this, systemContext);
        LockGuard.installLock((Object) this, 6);
        this.mInjector = new Injector();
        this.mContext = systemContext;
        this.mFactoryTest = FactoryTest.getMode();
        this.mSystemThread = ActivityThread.currentActivityThread();
        this.mUiContext = this.mSystemThread.getSystemUiContext();
        Slog.i(TAG, "Memory class: " + ActivityManager.staticGetMemoryClass());
        this.mPermissionReviewRequired = this.mContext.getResources().getBoolean(17957000);
        this.mHandlerThread = new ServiceThread(TAG, -2, false);
        this.mHandlerThread.start();
        this.mHandler = new MainHandler(this.mHandlerThread.getLooper());
        this.mUiHandler = this.mInjector.getUiHandler(this);
        this.mProcStartHandlerThread = new ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread.start();
        this.mProcStartHandler = new Handler(this.mProcStartHandlerThread.getLooper());
        this.mConstants = new ActivityManagerConstants(this, this.mHandler);
        if (sKillHandler == null) {
            sKillThread = new ServiceThread("ActivityManager:kill", 10, true);
            sKillThread.start();
            sKillHandler = new KillHandler(sKillThread.getLooper());
        }
        HwBroadcastQueue hwBroadcastQueue = new HwBroadcastQueue(this, this.mHandler, "foreground", (long) BROADCAST_FG_TIMEOUT, false);
        this.mFgBroadcastQueue = hwBroadcastQueue;
        HwBroadcastQueue hwBroadcastQueue2 = new HwBroadcastQueue(this, this.mHandler, "background", (long) BROADCAST_BG_TIMEOUT, false);
        this.mBgBroadcastQueue = hwBroadcastQueue2;
        this.mBroadcastQueues[0] = this.mFgBroadcastQueue;
        this.mBroadcastQueues[1] = this.mBgBroadcastQueue;
        setThirdPartyAppBroadcastQueue(this.mBroadcastQueues);
        setKeyAppBroadcastQueue(this.mBroadcastQueues);
        HwServiceFactory.IHwActiveServices iActiveS = HwServiceFactory.getHwActiveServices();
        if (iActiveS != null) {
            this.mServices = iActiveS.getInstance(this);
        } else {
            this.mServices = new ActiveServices(this);
        }
        this.mProviderMap = new ProviderMap(this);
        this.mAppErrors = new AppErrors(this.mUiContext, this);
        File systemDir = new File(Environment.getDataDirectory(), "system");
        systemDir.mkdirs();
        AppWarnings appWarnings = new AppWarnings(this, this.mUiContext, this.mHandler, this.mUiHandler, systemDir);
        this.mAppWarnings = appWarnings;
        this.mBatteryStatsService = new BatteryStatsService(systemContext, systemDir, this.mHandler);
        this.mBatteryStatsService.getActiveStatistics().readLocked();
        this.mBatteryStatsService.scheduleWriteToDisk();
        this.mBatteryStatsService.setActivityService(this);
        this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : this.mBatteryStatsService.getActiveStatistics().getIsOnBattery();
        this.mBatteryStatsService.getActiveStatistics().setCallback(this);
        this.mProcessStats = new ProcessStatsService(this, new File(systemDir, "procstats"));
        HwServiceFactory.IHwAppOpsService iaos = HwServiceFactory.getHwAppOpsService();
        if (iaos == null) {
            this.mAppOpsService = this.mInjector.getAppOpsService(new File(systemDir, "appops.xml"), this.mHandler);
        } else {
            this.mAppOpsService = iaos.getInstance(new File(systemDir, "appops.xml"), this.mHandler);
        }
        this.mGrantFile = new AtomicFile(new File(systemDir, "urigrants.xml"), TAG_URI_GRANTS);
        this.mUserController = new UserController(this);
        this.mVrController = new VrController(this);
        this.GL_ES_VERSION = SystemProperties.getInt("ro.opengles.version", 0);
        if (SystemProperties.getInt("sys.use_fifo_ui", 0) != 0) {
            this.mUseFifoUiScheduling = true;
        }
        this.mTrackingAssociations = "1".equals(SystemProperties.get("debug.track-associations"));
        this.mTempConfig.setToDefaults();
        this.mTempConfig.setLocales(LocaleList.getDefault());
        this.mTempConfig.seq = 1;
        this.mConfigurationSeq = 1;
        this.mStackSupervisor = createStackSupervisor();
        this.mStackSupervisor.onConfigurationChanged(this.mTempConfig);
        this.mKeyguardController = this.mStackSupervisor.getKeyguardController();
        this.mCompatModePackages = new CompatModePackages(this, systemDir, this.mHandler);
        this.mIntentFirewall = new IntentFirewall(new IntentFirewallInterface(), this.mHandler);
        this.mTaskChangeNotificationController = new TaskChangeNotificationController(this, this.mStackSupervisor, this.mHandler);
        this.mActivityStartController = new ActivityStartController(this);
        this.mRecentTasks = createRecentTasks();
        this.mStackSupervisor.setRecentTasks(this.mRecentTasks);
        this.mLockTaskController = new LockTaskController(this.mContext, this.mStackSupervisor, this.mHandler);
        this.mLifecycleManager = new ClientLifecycleManager();
        this.mProcessCpuThread = new Thread("CpuTracker") {
            public void run() {
                synchronized (ActivityManagerService.this.mProcessCpuTracker) {
                    ActivityManagerService.this.mProcessCpuInitLatch.countDown();
                    ActivityManagerService.this.mProcessCpuTracker.init();
                }
                while (true) {
                    try {
                        synchronized (this) {
                            long now = SystemClock.uptimeMillis();
                            long nextCpuDelay = (ActivityManagerService.this.mLastCpuTime.get() + ActivityManagerService.MONITOR_CPU_MAX_TIME) - now;
                            long nextWriteDelay = (ActivityManagerService.this.mLastWriteTime + 1800000) - now;
                            if (nextWriteDelay < nextCpuDelay) {
                                nextCpuDelay = nextWriteDelay;
                            }
                            if (nextCpuDelay > 0) {
                                ActivityManagerService.this.mProcessCpuMutexFree.set(true);
                                wait(nextCpuDelay);
                            }
                        }
                    } catch (InterruptedException e) {
                    }
                    try {
                        ActivityManagerService.this.updateCpuStatsNow();
                    } catch (Exception e2) {
                        Slog.e(ActivityManagerService.TAG, "Unexpected exception collecting process stats", e2);
                    }
                }
            }
        };
        this.mHiddenApiBlacklist = new HiddenApiSettings(this.mHandler, this.mContext);
        Watchdog.getInstance().addMonitor(this);
        Watchdog.getInstance().addThread(this.mHandler);
        updateOomAdjLocked();
        IZrHung iZrHung = HwFrameworkFactory.getZrHung("appeye_frameworkblock");
        if (iZrHung != null) {
            ZrHungData data = new ZrHungData();
            data.put("monitor", this);
            iZrHung.check(data);
        }
    }

    /* access modifiers changed from: protected */
    public ActivityStackSupervisor createStackSupervisor() {
        ActivityStackSupervisor supervisor;
        HwServiceFactory.IHwActivityStackSupervisor iActivitySS = HwServiceFactory.getHwActivityStackSupervisor();
        if (iActivitySS != null) {
            supervisor = iActivitySS.getInstance(this, this.mHandler.getLooper());
        } else {
            supervisor = new ActivityStackSupervisor(this, this.mHandler.getLooper());
        }
        supervisor.initialize();
        return supervisor;
    }

    /* access modifiers changed from: protected */
    public RecentTasks createRecentTasks() {
        return new RecentTasks(this, this.mStackSupervisor);
    }

    /* access modifiers changed from: package-private */
    public RecentTasks getRecentTasks() {
        return this.mRecentTasks;
    }

    public void setSystemServiceManager(SystemServiceManager mgr) {
        this.mSystemServiceManager = mgr;
    }

    public void setInstaller(Installer installer) {
        this.mInstaller = installer;
    }

    /* access modifiers changed from: private */
    public void start() {
        Process.removeAllProcessGroups();
        this.mProcessCpuThread.start();
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish(this.mContext);
        Slog.d("AppOps", "AppOpsService published");
        LocalServices.addService(ActivityManagerInternal.class, new LocalService());
        try {
            this.mProcessCpuInitLatch.await();
        } catch (InterruptedException e) {
            Slog.wtf(TAG, "Interrupted wait during start", e);
            Thread.currentThread().interrupt();
            throw new IllegalStateException("Interrupted wait during start");
        }
    }

    /* access modifiers changed from: package-private */
    public void onUserStoppedLocked(int userId) {
        this.mRecentTasks.unloadUserDataFromMemoryLocked(userId);
        this.mAllowAppSwitchUids.remove(userId);
    }

    public void initPowerManagement() {
        this.mStackSupervisor.initPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
        this.mVoiceWakeLock = ((PowerManager) this.mContext.getSystemService("power")).newWakeLock(1, "*voice*");
        this.mVoiceWakeLock.setReferenceCounted(false);
    }

    private ArraySet<String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        int i;
        if (code == 1599295570) {
            ArrayList<IBinder> procs = new ArrayList<>();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int NP = this.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (app.thread != null) {
                                procs.add(app.thread.asBinder());
                            }
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            int N = procs.size();
            for (i = 0; i < N; i++) {
                Parcel data2 = Parcel.obtain();
                try {
                    procs.get(i).transact(1599295570, data2, null, 1);
                } catch (RemoteException e) {
                }
                data2.recycle();
            }
        }
        try {
            return super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e2) {
            if (!(e2 instanceof SecurityException) && !(e2 instanceof IllegalArgumentException) && !(e2 instanceof IllegalStateException)) {
                Slog.wtf(TAG, "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + code, e2);
            }
            throw e2;
        }
    }

    /* access modifiers changed from: package-private */
    public void updateCpuStats() {
        if (this.mLastCpuTime.get() < SystemClock.uptimeMillis() - 5000 && this.mProcessCpuMutexFree.compareAndSet(true, false)) {
            synchronized (this.mProcessCpuThread) {
                this.mProcessCpuThread.notify();
            }
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x01b5  */
    public void updateCpuStatsNow() {
        int totalUTime;
        int N;
        SparseArray<ProcessRecord> sparseArray;
        synchronized (this.mProcessCpuTracker) {
            this.mProcessCpuMutexFree.set(false);
            long now = SystemClock.uptimeMillis();
            boolean haveNewCpuStats = false;
            if (this.mLastCpuTime.get() < now - 5000) {
                this.mLastCpuTime.set(now);
                this.mProcessCpuTracker.update();
                if (this.mProcessCpuTracker.hasGoodLastStats()) {
                    haveNewCpuStats = true;
                    if ("true".equals(SystemProperties.get("events.cpu"))) {
                        int user = this.mProcessCpuTracker.getLastUserTime();
                        int system = this.mProcessCpuTracker.getLastSystemTime();
                        int iowait = this.mProcessCpuTracker.getLastIoWaitTime();
                        int irq = this.mProcessCpuTracker.getLastIrqTime();
                        int softIrq = this.mProcessCpuTracker.getLastSoftIrqTime();
                        int total = user + system + iowait + irq + softIrq + this.mProcessCpuTracker.getLastIdleTime();
                        if (total == 0) {
                            total = 1;
                        }
                        EventLog.writeEvent(EventLogTags.CPU, new Object[]{Integer.valueOf((((((user + system) + iowait) + irq) + softIrq) * 100) / total), Integer.valueOf((user * 100) / total), Integer.valueOf((system * 100) / total), Integer.valueOf((iowait * 100) / total), Integer.valueOf((irq * 100) / total), Integer.valueOf((softIrq * 100) / total)});
                    }
                }
            }
            boolean haveNewCpuStats2 = haveNewCpuStats;
            BatteryStatsImpl bstats = this.mBatteryStatsService.getActiveStatistics();
            synchronized (bstats) {
                SparseArray<ProcessRecord> sparseArray2 = this.mPidsSelfLocked;
                synchronized (sparseArray2) {
                    if (haveNewCpuStats2) {
                        try {
                            if (bstats.startAddingCpuLocked()) {
                                int totalUTime2 = 0;
                                int N2 = this.mProcessCpuTracker.countStats();
                                int totalSTime = 0;
                                int i = 0;
                                while (true) {
                                    int i2 = i;
                                    if (i2 >= N2) {
                                        break;
                                    }
                                    ProcessCpuTracker.Stats st = this.mProcessCpuTracker.getStats(i2);
                                    if (!st.working) {
                                        N = N2;
                                        sparseArray = sparseArray2;
                                    } else {
                                        ProcessRecord pr = this.mPidsSelfLocked.get(st.pid);
                                        int totalUTime3 = totalUTime2 + st.rel_utime;
                                        totalSTime += st.rel_stime;
                                        if (pr != null) {
                                            BatteryStatsImpl.Uid.Proc ps = pr.curProcBatteryStats;
                                            if (ps == null || !ps.isActive()) {
                                                BatteryStatsImpl.Uid.Proc processStatsLocked = bstats.getProcessStatsLocked(pr.info.uid, pr.processName);
                                                ps = processStatsLocked;
                                                pr.curProcBatteryStats = processStatsLocked;
                                            }
                                            ps.addCpuTimeLocked(st.rel_utime, st.rel_stime);
                                            totalUTime = totalUTime3;
                                            N = N2;
                                            sparseArray = sparseArray2;
                                            try {
                                                pr.curCpuTime += (long) (st.rel_utime + st.rel_stime);
                                                if (pr.lastCpuTime == 0) {
                                                    pr.lastCpuTime = pr.curCpuTime;
                                                }
                                            } catch (Throwable th) {
                                                th = th;
                                                throw th;
                                            }
                                        } else {
                                            totalUTime = totalUTime3;
                                            N = N2;
                                            sparseArray = sparseArray2;
                                            BatteryStatsImpl.Uid.Proc ps2 = st.batteryStats;
                                            if (ps2 == null || !ps2.isActive()) {
                                                BatteryStatsImpl.Uid.Proc processStatsLocked2 = bstats.getProcessStatsLocked(bstats.mapUid(st.uid), st.name);
                                                ps2 = processStatsLocked2;
                                                st.batteryStats = processStatsLocked2;
                                            }
                                            ps2.addCpuTimeLocked(st.rel_utime, st.rel_stime);
                                        }
                                        totalUTime2 = totalUTime;
                                    }
                                    i = i2 + 1;
                                    sparseArray2 = sparseArray;
                                    N2 = N;
                                }
                                int i3 = N2;
                                totalUTime = sparseArray2;
                                bstats.finishAddingCpuLocked(totalUTime2, totalSTime, this.mProcessCpuTracker.getLastUserTime(), this.mProcessCpuTracker.getLastSystemTime(), this.mProcessCpuTracker.getLastIoWaitTime(), this.mProcessCpuTracker.getLastIrqTime(), this.mProcessCpuTracker.getLastSoftIrqTime(), this.mProcessCpuTracker.getLastIdleTime());
                                if (this.mLastWriteTime < now - 1800000) {
                                    this.mLastWriteTime = now;
                                    this.mBatteryStatsService.scheduleWriteToDisk();
                                }
                            }
                        } catch (Throwable th2) {
                            th = th2;
                            totalUTime = sparseArray2;
                            throw th;
                        }
                    }
                    totalUTime = sparseArray2;
                    if (this.mLastWriteTime < now - 1800000) {
                    }
                }
            }
        }
    }

    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    public void batteryPowerChanged(boolean onBattery) {
        updateCpuStatsNow();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : onBattery;
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void batteryStatsReset() {
        BinderCallsStatsService.reset();
    }

    public void batterySendBroadcast(Intent intent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, -1);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private ArrayMap<String, IBinder> getCommonServicesLocked(boolean isolated) {
        if (isolated) {
            if (this.mIsolatedAppBindArgs == null) {
                this.mIsolatedAppBindArgs = new ArrayMap<>(1);
                addServiceToMap(this.mIsolatedAppBindArgs, "package");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            this.mAppBindArgs = new ArrayMap<>();
            addServiceToMap(this.mAppBindArgs, "package");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, "alarm");
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, GraphicsStatsService.GRAPHICS_STATS_SERVICE);
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, "content");
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
        }
        return this.mAppBindArgs;
    }

    private static void addServiceToMap(ArrayMap<String, IBinder> map, String name) {
        IBinder service = ServiceManager.getService(name);
        if (service != null) {
            map.put(name, service);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void setResumedActivityUncheckLocked(ActivityRecord r, String reason) {
        IVoiceInteractionSession session;
        this.mHwAMSEx.notifyAppSwitch(this.mLastResumedActivity, r);
        TaskRecord task = r.getTask();
        if (!task.isActivityTypeStandard()) {
            r.appTimeTracker = null;
        } else if (this.mCurAppTimeTracker != r.appTimeTracker) {
            if (this.mCurAppTimeTracker != null) {
                this.mCurAppTimeTracker.stop();
                this.mHandler.obtainMessage(54, this.mCurAppTimeTracker).sendToTarget();
                this.mStackSupervisor.clearOtherAppTimeTrackers(r.appTimeTracker);
                this.mCurAppTimeTracker = null;
            }
            if (r.appTimeTracker != null) {
                this.mCurAppTimeTracker = r.appTimeTracker;
                startTimeTrackingFocusedActivityLocked();
            }
        } else {
            startTimeTrackingFocusedActivityLocked();
        }
        if (task.voiceInteractor != null) {
            startRunningVoiceLocked(task.voiceSession, r.info.applicationInfo.uid);
        } else {
            finishRunningVoiceLocked();
            if (this.mLastResumedActivity != null) {
                TaskRecord lastResumedActivityTask = this.mLastResumedActivity.getTask();
                if (lastResumedActivityTask == null || lastResumedActivityTask.voiceSession == null) {
                    session = this.mLastResumedActivity.voiceSession;
                } else {
                    session = lastResumedActivityTask.voiceSession;
                }
                if (session != null) {
                    finishVoiceTask(session);
                }
            }
        }
        if (!(this.mLastResumedActivity == null || r.userId == this.mLastResumedActivity.userId)) {
            this.mUserController.sendForegroundProfileChanged(r.userId);
        }
        this.mLastActivityRecord = this.mLastResumedActivity;
        updateResumedAppTrace(r);
        this.mLastResumedActivity = r;
        this.mWindowManager.setFocusedApp(r.appToken, true);
        applyUpdateLockStateLocked(r);
        applyUpdateVrModeLocked(r);
        EventLogTags.writeAmSetResumedActivity(r == null ? -1 : r.userId, r == null ? BluetoothManagerService.DEFAULT_PACKAGE_NAME : r.shortComponentName, reason);
        notifyActivityState(r, ActivityStack.ActivityState.RESUMED);
    }

    private void updateResumedAppTrace(ActivityRecord resumed) {
        if (this.mTracedResumedActivity != null) {
            Trace.asyncTraceEnd(64, constructResumedTraceName(this.mTracedResumedActivity.packageName), 0);
        }
        if (resumed != null) {
            Trace.asyncTraceBegin(64, constructResumedTraceName(resumed.packageName), 0);
        }
        this.mTracedResumedActivity = resumed;
    }

    private String constructResumedTraceName(String packageName) {
        return "focused app: " + packageName;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:19:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x006a, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x006e, code lost:
        return;
     */
    public void setFocusedStack(int stackId) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setFocusedStack()");
        if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
            Slog.d(TAG, "setFocusedStack: stackId=" + stackId);
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                if (stack == null) {
                    Slog.w(TAG, "setFocusedStack: No stack with id=" + stackId);
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(callingId);
                    return;
                }
                if (this.mStackSupervisor.moveFocusableActivityStackToFrontLocked(stack.topRunningActivityLocked(), "setFocusedStack")) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:18:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0053, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0057, code lost:
        return;
     */
    public void setFocusedTask(int taskId) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setFocusedTask()");
        if (ActivityManagerDebugConfig.DEBUG_FOCUS) {
            Slog.d(TAG, "setFocusedTask: taskId=" + taskId);
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                if (task == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(callingId);
                    return;
                }
                if (this.mStackSupervisor.moveFocusableActivityStackToFrontLocked(task.topRunningActivityLocked(), "setFocusedTask")) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    public void registerTaskStackListener(ITaskStackListener listener) throws RemoteException {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "registerTaskStackListener()");
        this.mTaskChangeNotificationController.registerTaskStackListener(listener);
    }

    public void unregisterTaskStackListener(ITaskStackListener listener) throws RemoteException {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "unregisterTaskStackListener()");
        this.mTaskChangeNotificationController.unregisterTaskStackListener(listener);
    }

    public void notifyActivityDrawn(IBinder token) {
        if (ActivityManagerDebugConfig.DEBUG_VISIBILITY) {
            String str = TAG_VISIBILITY;
            Slog.d(str, "notifyActivityDrawn: token=" + token);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = this.mStackSupervisor.isInAnyStackLocked(token);
                if (r != null) {
                    r.getStack().notifyActivityDrawnLocked(r);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public final void applyUpdateLockStateLocked(ActivityRecord r) {
        int i = 1;
        boolean nextState = r != null && r.immersive;
        MainHandler mainHandler = this.mHandler;
        MainHandler mainHandler2 = this.mHandler;
        if (!nextState) {
            i = 0;
        }
        mainHandler.sendMessage(mainHandler2.obtainMessage(37, i, 0, r));
    }

    /* access modifiers changed from: package-private */
    public final void applyUpdateVrModeLocked(ActivityRecord r) {
        if (!(r.requestedVrComponent == null || r.getDisplayId() == 0)) {
            Slog.i(TAG, "Moving " + r.shortComponentName + " from stack " + r.getStackId() + " to main stack for VR");
            moveTaskToStack(r.getTask().taskId, this.mStackSupervisor.getDefaultDisplay().getOrCreateStack(1, r.getActivityType(), true).mStackId, true);
        }
        this.mHandler.sendMessage(this.mHandler.obtainMessage(61, 0, 0, r));
    }

    /* access modifiers changed from: package-private */
    public final void showAskCompatModeDialogLocked(ActivityRecord r) {
        Message msg = Message.obtain();
        msg.what = 30;
        msg.obj = r.getTask().askedCompatMode ? null : r;
        this.mUiHandler.sendMessage(msg);
    }

    /* access modifiers changed from: package-private */
    public final AppWarnings getAppWarningsLocked() {
        return this.mAppWarnings;
    }

    /* access modifiers changed from: package-private */
    public final void showAppWarningsIfNeededLocked(ActivityRecord r) {
        this.mAppWarnings.showUnsupportedCompileSdkDialogIfNeeded(r);
        this.mAppWarnings.showUnsupportedDisplaySizeDialogIfNeeded(r);
        this.mAppWarnings.showDeprecatedTargetDialogIfNeeded(r);
    }

    private int updateLruProcessInternalLocked(ProcessRecord app, long now, int index, String what, Object obj, ProcessRecord srcApp) {
        app.lastActivityTime = now;
        if (app.activities.size() > 0 || app.recentTasks.size() > 0) {
            return index;
        }
        int lrui = this.mLruProcesses.lastIndexOf(app);
        if (lrui < 0) {
            Slog.wtf(TAG, "Adding dependent process " + app + " not on LRU list: " + what + " " + obj + " from " + srcApp);
            return index;
        } else if (lrui >= index || lrui >= this.mLruProcessActivityStart) {
            return index;
        } else {
            this.mLruProcesses.remove(lrui);
            if (index > 0) {
                index--;
            }
            if (ActivityManagerDebugConfig.DEBUG_LRU) {
                Slog.d(TAG, "Moving dep from " + lrui + " to " + index + " in LRU list: " + app);
            }
            this.mLruProcesses.add(index, app);
            return index;
        }
    }

    static void killProcessGroup(int uid, int pid) {
        if (sKillHandler != null) {
            sKillHandler.sendMessage(sKillHandler.obtainMessage(4000, uid, pid));
            return;
        }
        Slog.w(TAG, "Asked to kill process group before system bringup!");
        Process.killProcessGroup(uid, pid);
    }

    /* access modifiers changed from: package-private */
    public final void removeLruProcessLocked(ProcessRecord app) {
        int lrui = this.mLruProcesses.lastIndexOf(app);
        if (lrui >= 0) {
            if (!app.killed) {
                if (app.persistent) {
                    Slog.w(TAG, "Removing persistent process that hasn't been killed: " + app);
                } else {
                    Slog.wtfStack(TAG, "Removing process that hasn't been killed: " + app);
                    if (app.pid > 0) {
                        Process.killProcessQuiet(app.pid);
                        killProcessGroup(app.uid, app.pid);
                    } else {
                        app.pendingStart = false;
                    }
                }
            }
            if (lrui <= this.mLruProcessActivityStart) {
                this.mLruProcessActivityStart--;
            }
            if (lrui <= this.mLruProcessServiceStart) {
                this.mLruProcessServiceStart--;
            }
            this.mLruProcesses.remove(lrui);
        }
    }

    /* access modifiers changed from: package-private */
    public final void updateLruProcessLocked(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        int i;
        int nextIndex;
        int j;
        long now;
        int j2;
        int N;
        ProcessRecord processRecord = app;
        ProcessRecord processRecord2 = client;
        boolean hasActivity = processRecord.activities.size() > 0 || processRecord.hasClientActivities || processRecord.treatLikeActivity || processRecord.recentTasks.size() > 0;
        if (activityChange || !hasActivity || (processRecord.persistent && !this.mLruProcesses.contains(processRecord))) {
            this.mLruSeq++;
            long now2 = SystemClock.uptimeMillis();
            processRecord.lastActivityTime = now2;
            if (hasActivity) {
                if (this.mLruProcesses.size() > 0 && this.mLruProcesses.get(N - 1) == processRecord) {
                    if (ActivityManagerDebugConfig.DEBUG_LRU) {
                        Slog.d(TAG, "Not moving, already top activity: " + processRecord);
                    }
                    return;
                }
            } else if (this.mLruProcessServiceStart > 0 && this.mLruProcesses.get(this.mLruProcessServiceStart - 1) == processRecord) {
                if (ActivityManagerDebugConfig.DEBUG_LRU) {
                    Slog.d(TAG, "Not moving, already top other: " + processRecord);
                }
                return;
            }
            int lrui = this.mLruProcesses.lastIndexOf(processRecord);
            if (!processRecord.persistent || lrui < 0) {
                if (lrui >= 0) {
                    if (lrui < this.mLruProcessActivityStart) {
                        this.mLruProcessActivityStart--;
                    }
                    if (lrui < this.mLruProcessServiceStart) {
                        this.mLruProcessServiceStart--;
                    }
                    this.mLruProcesses.remove(lrui);
                }
                if (hasActivity) {
                    int N2 = this.mLruProcesses.size();
                    if (processRecord.activities.size() != 0 && processRecord.recentTasks.size() <= 0) {
                        int i2 = N2;
                    } else if (this.mLruProcessActivityStart < N2 - 1) {
                        if (ActivityManagerDebugConfig.DEBUG_LRU) {
                            Slog.d(TAG, "Adding to second-top of LRU activity list: " + processRecord);
                        }
                        this.mLruProcesses.add(N2 - 1, processRecord);
                        int uid = processRecord.info.uid;
                        int i3 = N2 - 2;
                        while (i3 > this.mLruProcessActivityStart && this.mLruProcesses.get(i3).info.uid == uid) {
                            if (this.mLruProcesses.get(i3 - 1).info.uid != uid) {
                                if (ActivityManagerDebugConfig.DEBUG_LRU) {
                                    StringBuilder sb = new StringBuilder();
                                    sb.append("Pushing uid ");
                                    sb.append(uid);
                                    sb.append(" swapping at ");
                                    sb.append(i3);
                                    sb.append(": ");
                                    sb.append(this.mLruProcesses.get(i3));
                                    sb.append(" : ");
                                    N = N2;
                                    sb.append(this.mLruProcesses.get(i3 - 1));
                                    Slog.d(TAG, sb.toString());
                                } else {
                                    N = N2;
                                }
                                this.mLruProcesses.set(i3, this.mLruProcesses.get(i3 - 1));
                                this.mLruProcesses.set(i3 - 1, this.mLruProcesses.get(i3));
                                i3--;
                            } else {
                                N = N2;
                            }
                            i3--;
                            N2 = N;
                        }
                        nextIndex = this.mLruProcessServiceStart;
                        i = 1;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_LRU != 0) {
                        Slog.d(TAG, "Adding to top of LRU activity list: " + processRecord);
                    }
                    this.mLruProcesses.add(processRecord);
                    nextIndex = this.mLruProcessServiceStart;
                    i = 1;
                } else {
                    int index = this.mLruProcessServiceStart;
                    if (processRecord2 != null) {
                        int clientIndex = this.mLruProcesses.lastIndexOf(processRecord2);
                        if (ActivityManagerDebugConfig.DEBUG_LRU && clientIndex < 0) {
                            Slog.d(TAG, "Unknown client " + processRecord2 + " when updating " + processRecord);
                        }
                        if (clientIndex <= lrui) {
                            clientIndex = lrui;
                        }
                        if (clientIndex >= 0 && index > clientIndex) {
                            index = clientIndex;
                        }
                    }
                    if (ActivityManagerDebugConfig.DEBUG_LRU != 0) {
                        Slog.d(TAG, "Adding at " + index + " of LRU list: " + processRecord);
                    }
                    this.mLruProcesses.add(index, processRecord);
                    i = 1;
                    this.mLruProcessActivityStart++;
                    this.mLruProcessServiceStart++;
                    nextIndex = index - 1;
                }
                int j3 = processRecord.connections.size() - i;
                int nextIndex2 = nextIndex;
                while (true) {
                    int j4 = j3;
                    if (j4 < 0) {
                        break;
                    }
                    ConnectionRecord cr = processRecord.connections.valueAt(j4);
                    if (cr.binding == null || cr.serviceDead || cr.binding.service == null || cr.binding.service.app == null || cr.binding.service.app.lruSeq == this.mLruSeq || cr.binding.service.app.persistent) {
                        j2 = j4;
                        now = now2;
                    } else {
                        j2 = j4;
                        now = now2;
                        nextIndex2 = updateLruProcessInternalLocked(cr.binding.service.app, now2, nextIndex2, "service connection", cr, processRecord);
                    }
                    j3 = j2 - 1;
                    now2 = now;
                }
                long now3 = now2;
                int j5 = processRecord.conProviders.size() - 1;
                while (true) {
                    int j6 = j5;
                    if (j6 >= 0) {
                        ContentProviderRecord cpr = processRecord.conProviders.get(j6).provider;
                        if (cpr.proc == null || cpr.proc.lruSeq == this.mLruSeq || cpr.proc.persistent) {
                            j = j6;
                        } else {
                            ContentProviderRecord contentProviderRecord = cpr;
                            j = j6;
                            nextIndex2 = updateLruProcessInternalLocked(cpr.proc, now3, nextIndex2, "provider reference", cpr, processRecord);
                        }
                        j5 = j - 1;
                    } else {
                        return;
                    }
                }
            } else {
                if (ActivityManagerDebugConfig.DEBUG_LRU) {
                    Slog.d(TAG, "Not moving, persistent: " + processRecord);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final ProcessRecord getProcessRecordLocked(String processName, int uid, boolean keepIfLarge) {
        int uid2 = UserHandle.getUid(this.mHwAMSEx.getCloneAppUserId(processName, UserHandle.getUserId(uid)), uid);
        if (uid2 == 1000) {
            SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().get(processName);
            if (procs == null) {
                return null;
            }
            int procCount = procs.size();
            for (int i = 0; i < procCount; i++) {
                int procUid = procs.keyAt(i);
                if (!UserHandle.isApp(procUid) && UserHandle.isSameUser(procUid, uid2)) {
                    return procs.valueAt(i);
                }
            }
        }
        ProcessRecord proc = (ProcessRecord) this.mProcessNames.get(processName, uid2);
        if (proc != null && !keepIfLarge && this.mLastMemoryLevel > 0 && proc.setProcState >= 18) {
            if (ActivityManagerDebugConfig.DEBUG_PSS) {
                Slog.d(TAG, "May not keep " + proc + ": pss=" + proc.lastCachedPss);
            }
            if (proc.lastCachedPss >= this.mProcessList.getCachedRestoreThresholdKb() && !"com.android.deskclock".equals(processName)) {
                if (proc.baseProcessTracker != null) {
                    proc.baseProcessTracker.reportCachedKill(proc.pkgList, proc.lastCachedPss);
                }
                proc.kill(Long.toString(proc.lastCachedPss) + "k from cached", true);
            }
        }
        return proc;
    }

    /* access modifiers changed from: package-private */
    public void notifyPackageUse(String packageName, int reason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                getPackageManagerInternalLocked().notifyPackageUse(packageName, reason);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public boolean isNextTransitionForward() {
        int transit = this.mWindowManager.getPendingAppTransition();
        return transit == 6 || transit == 8 || transit == 10;
    }

    /* access modifiers changed from: package-private */
    public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ApplicationInfo info = new ApplicationInfo();
                info.uid = 1000;
                String str = processName;
                info.processName = str;
                String str2 = entryPoint;
                info.className = str2;
                info.packageName = PackageManagerService.PLATFORM_PACKAGE_NAME;
                info.seInfoUser = ":complete";
                info.targetSdkVersion = Build.VERSION.SDK_INT;
                z = startProcessLocked(str, info, false, 0, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, null, true, true, uid, true, abiOverride, str2, entryPointArgs, crashHandler) != null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName, boolean allowWhileBooting, boolean isolated, boolean keepIfLarge) {
        return startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingType, hostingName, allowWhileBooting, isolated, 0, keepIfLarge, null, null, null, null);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName, boolean allowWhileBooting, boolean isolated, int isolatedUid, boolean keepIfLarge, String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) {
        ProcessRecord app;
        String str = processName;
        ApplicationInfo applicationInfo = info;
        boolean z = knownToBeDead;
        boolean z2 = isolated;
        String[] strArr = entryPointArgs;
        long startTime = SystemClock.elapsedRealtime();
        if (!z2) {
            app = getProcessRecordLocked(str, applicationInfo.uid, keepIfLarge);
            checkTime(startTime, "startProcess: after getProcessRecord");
            if ((intentFlags & 4) == 0) {
                if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                    Slog.v(TAG, "Clearing bad process: " + applicationInfo.uid + SliceClientPermissions.SliceAuthority.DELIMITER + applicationInfo.processName);
                }
                this.mAppErrors.resetProcessCrashTimeLocked(applicationInfo);
                if (this.mAppErrors.isBadProcessLocked(applicationInfo)) {
                    EventLog.writeEvent(EventLogTags.AM_PROC_GOOD, new Object[]{Integer.valueOf(UserHandle.getUserId(applicationInfo.uid)), Integer.valueOf(applicationInfo.uid), applicationInfo.processName});
                    this.mAppErrors.clearBadProcessLocked(applicationInfo);
                    if (app != null) {
                        app.bad = false;
                    }
                }
            } else if (this.mAppErrors.isBadProcessLocked(applicationInfo)) {
                Slog.v(TAG, "Bad process: " + applicationInfo.uid + SliceClientPermissions.SliceAuthority.DELIMITER + applicationInfo.processName);
                return null;
            }
        } else {
            boolean z3 = keepIfLarge;
            app = null;
        }
        ProcessRecord app2 = app;
        StringBuilder sb = new StringBuilder();
        sb.append("startProcess: name=");
        sb.append(str);
        sb.append(" app=");
        sb.append(app2);
        sb.append(" knownToBeDead=");
        sb.append(z);
        sb.append(" thread=");
        sb.append(app2 != null ? app2.thread : null);
        sb.append(" pid=");
        sb.append(app2 != null ? app2.pid : -1);
        Slog.v(TAG, sb.toString());
        if (app2 != null && app2.pid > 0) {
            if ((z || app2.killed) && app2.thread != null) {
                if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                    Slog.v(TAG, "App died: " + app2);
                }
                checkTime(startTime, "startProcess: bad proc running, killing");
                killProcessGroup(app2.uid, app2.pid);
                handleAppDiedLocked(app2, true, true);
                checkTime(startTime, "startProcess: done killing old proc");
            } else {
                if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                    Slog.v(TAG, "App already running: " + app2);
                }
                app2.addPackage(applicationInfo.packageName, (long) applicationInfo.versionCode, this.mProcessStats);
                checkTime(startTime, "startProcess: done, added package to proc");
                return app2;
            }
        }
        String hostingNameStr = hostingName != null ? hostingName.flattenToShortString() : null;
        if (app2 == null) {
            checkTime(startTime, "startProcess: creating new process record");
            app2 = newProcessRecordLocked(applicationInfo, str, z2, isolatedUid);
            if (app2 == null) {
                Slog.w(TAG, "Failed making new process record for " + str + SliceClientPermissions.SliceAuthority.DELIMITER + applicationInfo.uid + " isolated=" + z2);
                return null;
            }
            app2.crashHandler = crashHandler;
            app2.isolatedEntryPoint = entryPoint;
            app2.isolatedEntryPointArgs = strArr;
            checkTime(startTime, "startProcess: done creating new process record");
        } else {
            int i = isolatedUid;
            String str2 = entryPoint;
            Runnable runnable = crashHandler;
            app2.addPackage(applicationInfo.packageName, (long) applicationInfo.versionCode, this.mProcessStats);
            checkTime(startTime, "startProcess: added package to existing proc");
        }
        if (this.mProcessesReady || isAllowedWhileBooting(applicationInfo) || allowWhileBooting) {
            checkTime(startTime, "startProcess: stepping in to startProcess");
            app2.entryPointArgs = strArr;
            if (!(applicationInfo.hwHbsUid == -1 || app2 == null)) {
                app2.hwHbsUid = applicationInfo.hwHbsUid;
            }
            boolean success = startProcessLocked(app2, hostingType, hostingNameStr, abiOverride);
            checkTime(startTime, "startProcess: done starting proc!");
            return success ? app2 : null;
        }
        if (!this.mProcessesOnHold.contains(app2)) {
            this.mProcessesOnHold.add(app2);
        }
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            Slog.v(TAG, "System not ready, putting on hold: " + app2);
        }
        checkTime(startTime, "startProcess: returning with proc on hold");
        return app2;
    }

    /* access modifiers changed from: package-private */
    public boolean isAllowedWhileBooting(ApplicationInfo ai) {
        return (ai.flags & 8) != 0;
    }

    @GuardedBy("this")
    private final void startProcessLocked(ProcessRecord app, String hostingType, String hostingNameStr) {
        startProcessLocked(app, hostingType, hostingNameStr, null);
    }

    @GuardedBy("this")
    private final boolean startProcessLocked(ProcessRecord app, String hostingType, String hostingNameStr, String abiOverride) {
        this.mHwAMSEx.updateProcessRecordInfoBefStart(app);
        boolean result = startProcessLocked(app, hostingType, hostingNameStr, false, abiOverride);
        this.mHwAMSEx.updateProcessRecordMaxAdj(app);
        return result;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:108:0x01f5, code lost:
        if ("true".equals(r5) != false) goto L_0x01f7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x01b1, code lost:
        if (r14.mSafeMode == true) goto L_0x01b3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:99:0x01db, code lost:
        if ("true".equals(r7) != false) goto L_0x01dd;
     */
    /* JADX WARNING: Removed duplicated region for block: B:105:0x01ee  */
    /* JADX WARNING: Removed duplicated region for block: B:114:0x0207 A[Catch:{ RuntimeException -> 0x0395 }] */
    /* JADX WARNING: Removed duplicated region for block: B:117:0x0217 A[Catch:{ RuntimeException -> 0x0395 }] */
    /* JADX WARNING: Removed duplicated region for block: B:120:0x021d A[SYNTHETIC, Splitter:B:120:0x021d] */
    /* JADX WARNING: Removed duplicated region for block: B:127:0x0238 A[SYNTHETIC, Splitter:B:127:0x0238] */
    /* JADX WARNING: Removed duplicated region for block: B:136:0x026f A[Catch:{ all -> 0x02ce, RemoteException -> 0x015e, RuntimeException -> 0x0157 }] */
    /* JADX WARNING: Removed duplicated region for block: B:137:0x0271 A[Catch:{ all -> 0x02ce, RemoteException -> 0x015e, RuntimeException -> 0x0157 }] */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x01a2 A[Catch:{ RuntimeException -> 0x0395 }] */
    /* JADX WARNING: Removed duplicated region for block: B:85:0x01af A[SYNTHETIC, Splitter:B:85:0x01af] */
    /* JADX WARNING: Removed duplicated region for block: B:93:0x01c3 A[Catch:{ RuntimeException -> 0x0395 }] */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x01d4  */
    @GuardedBy("this")
    private final boolean startProcessLocked(ProcessRecord app, String hostingType, String hostingNameStr, boolean disableHiddenApiChecks, String abiOverride) {
        boolean z;
        int mountExternal;
        int[] gids;
        int uid;
        String genDebugInfoProperty;
        String genMiniDebugInfoProperty;
        StrictMode.ThreadPolicy oldPolicy;
        int policyBits;
        int[] gids2;
        ProcessRecord processRecord = app;
        if (processRecord.pendingStart) {
            return true;
        }
        if (this.mSystemReady) {
            this.mDAProxy.noteProcessStart(processRecord.info.packageName, processRecord.processName, processRecord.pid, processRecord.uid, true, hostingType, hostingNameStr);
        }
        String str = hostingType;
        if ("activity".equals(str)) {
            processRecord.launchfromActivity = true;
        } else {
            processRecord.launchfromActivity = false;
        }
        long startTime = SystemClock.elapsedRealtime();
        if (processRecord.pid > 0 && processRecord.pid != MY_PID) {
            checkTime(startTime, "startProcess: removing from pids map");
            synchronized (this.mPidsSelfLocked) {
                this.mPidsSelfLocked.remove(processRecord.pid);
                this.mHandler.removeMessages(20, processRecord);
            }
            this.mDAProxy.notifyProcessDied(processRecord.pid, processRecord.uid);
            checkTime(startTime, "startProcess: done removing from pids map");
            processRecord.setPid(0);
            processRecord.startSeq = 0;
            processRecord.renderThreadTid = 0;
            Slog.i(TAG, "startProcess: reset pid for " + processRecord);
        }
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(processRecord)) {
            Slog.v(TAG, "startProcessLocked removing on hold: " + processRecord);
        }
        this.mProcessesOnHold.remove(processRecord);
        checkTime(startTime, "startProcess: starting to update cpu stats");
        updateCpuStats();
        checkTime(startTime, "startProcess: done updating cpu stats");
        try {
            AppGlobals.getPackageManager().checkPackageStartable(processRecord.info.packageName, UserHandle.getUserId(processRecord.uid));
            try {
                int uid2 = processRecord.uid;
                if (!processRecord.isolated) {
                    try {
                        checkTime(startTime, "startProcess: getting gids from package manager");
                        int[] permGids = AppGlobals.getPackageManager().getPackageGids(processRecord.info.packageName, 268435456, processRecord.userId);
                        int mountExternal2 = ((StorageManagerInternal) LocalServices.getService(StorageManagerInternal.class)).getExternalStorageMountMode(uid2, processRecord.info.packageName);
                        if (ArrayUtils.isEmpty(permGids)) {
                            gids2 = new int[3];
                        } else {
                            gids2 = new int[(permGids.length + 3)];
                            System.arraycopy(permGids, 0, gids2, 3, permGids.length);
                        }
                        gids2[0] = UserHandle.getSharedAppGid(UserHandle.getAppId(uid2));
                        gids2[1] = UserHandle.getCacheAppGid(UserHandle.getAppId(uid2));
                        gids2[2] = UserHandle.getUserGid(UserHandle.getUserId(uid2));
                        if (gids2[0] == -1) {
                            gids2[0] = gids2[2];
                        }
                        if (gids2[1] == -1) {
                            gids2[1] = gids2[2];
                        }
                        mountExternal = mountExternal2;
                        gids = this.mHwAMSEx.changeGidsIfNeeded(processRecord, gids2);
                    } catch (RemoteException e) {
                        throw e.rethrowAsRuntimeException();
                    } catch (RuntimeException e2) {
                        e = e2;
                        long j = startTime;
                        z = false;
                        StringBuilder sb = new StringBuilder();
                        sb.append("Failure starting process ");
                        ProcessRecord processRecord2 = app;
                        sb.append(processRecord2.processName);
                        Slog.e(TAG, sb.toString(), e);
                        forceStopPackageLocked(processRecord2.info.packageName, UserHandle.getAppId(processRecord2.uid), false, false, true, false, false, UserHandle.getUserId(processRecord2.uid), "start failure");
                        return z;
                    } catch (Throwable th) {
                        StrictMode.setThreadPolicy(oldPolicy);
                        throw th;
                    }
                } else {
                    gids = null;
                    mountExternal = 0;
                }
                checkTime(startTime, "startProcess: building args");
                if (this.mFactoryTest != 0) {
                    if (this.mFactoryTest == 1 && this.mTopComponent != null && processRecord.processName.equals(this.mTopComponent.getPackageName())) {
                        uid2 = 0;
                    }
                    if (this.mFactoryTest == 2 && (processRecord.info.flags & 16) != 0) {
                        uid = 0;
                        int runtimeFlags = 0;
                        if ((processRecord.info.flags & 2) != 0) {
                            runtimeFlags = 0 | 1 | 256 | 2;
                        }
                        if ((processRecord.info.flags & 16384) == 0) {
                        }
                        runtimeFlags |= 8;
                        if ("1".equals(SystemProperties.get("debug.checkjni"))) {
                            runtimeFlags |= 2;
                        }
                        genDebugInfoProperty = SystemProperties.get("debug.generate-debug-info");
                        if (!"1".equals(genDebugInfoProperty)) {
                        }
                        runtimeFlags |= 32;
                        genMiniDebugInfoProperty = SystemProperties.get("dalvik.vm.minidebuginfo");
                        if (!"1".equals(genMiniDebugInfoProperty)) {
                        }
                        runtimeFlags |= 2048;
                        if ("1".equals(SystemProperties.get("debug.jni.logging"))) {
                            runtimeFlags |= 16;
                        }
                        if ("1".equals(SystemProperties.get("debug.assert"))) {
                            runtimeFlags |= 4;
                        }
                        if (this.mNativeDebuggingApp != null) {
                            if (this.mNativeDebuggingApp.equals(processRecord.processName)) {
                                runtimeFlags = runtimeFlags | 64 | 32 | 128;
                                this.mNativeDebuggingApp = null;
                            }
                        }
                        if (processRecord.info.isPrivilegedApp()) {
                            if (DexManager.isPackageSelectedToRunOob((Collection<String>) processRecord.pkgList.keySet())) {
                                runtimeFlags |= 1024;
                            }
                        }
                        if (!disableHiddenApiChecks && !this.mHiddenApiBlacklist.isDisabled()) {
                            processRecord.info.maybeUpdateHiddenApiEnforcementPolicy(this.mHiddenApiBlacklist.getPolicyForPrePApps(), this.mHiddenApiBlacklist.getPolicyForPApps());
                            policyBits = processRecord.info.getHiddenApiEnforcementPolicy() << Zygote.API_ENFORCEMENT_POLICY_SHIFT;
                            if ((policyBits & 12288) != policyBits) {
                                runtimeFlags |= policyBits;
                            } else {
                                throw new IllegalStateException("Invalid API policy: " + policy);
                            }
                        }
                        int runtimeFlags2 = runtimeFlags;
                        String invokeWith = null;
                        if ((processRecord.info.flags & 2) != 0) {
                            String wrapperFileName = processRecord.info.nativeLibraryDir + "/wrap.sh";
                            oldPolicy = StrictMode.allowThreadDiskReads();
                            if (new File(wrapperFileName).exists()) {
                                invokeWith = "/system/bin/logwrapper " + wrapperFileName;
                            }
                            StrictMode.setThreadPolicy(oldPolicy);
                        }
                        String invokeWith2 = invokeWith;
                        String requiredAbi = abiOverride != null ? abiOverride : processRecord.info.primaryCpuAbi;
                        if (requiredAbi == null) {
                            requiredAbi = Build.SUPPORTED_ABIS[0];
                        }
                        String requiredAbi2 = requiredAbi;
                        String instructionSet = null;
                        if (processRecord.info.primaryCpuAbi != null) {
                            instructionSet = VMRuntime.getInstructionSet(processRecord.info.primaryCpuAbi);
                        }
                        String instructionSet2 = instructionSet;
                        processRecord.gids = gids;
                        processRecord.requiredAbi = requiredAbi2;
                        processRecord.instructionSet = instructionSet2;
                        if (TextUtils.isEmpty(processRecord.info.seInfoUser)) {
                            StringBuilder sb2 = new StringBuilder();
                            try {
                                sb2.append("SELinux tag not defined for ");
                                sb2.append(processRecord.info.packageName);
                                sb2.append(" (uid ");
                                sb2.append(processRecord.uid);
                                sb2.append(")");
                                Slog.wtf(TAG, "SELinux tag not defined", new IllegalStateException(sb2.toString()));
                            } catch (RuntimeException e3) {
                                e = e3;
                                long j2 = startTime;
                                z = false;
                            }
                        }
                        try {
                            StringBuilder sb3 = new StringBuilder();
                            sb3.append(processRecord.info.seInfo);
                            sb3.append(TextUtils.isEmpty(processRecord.info.seInfoUser) ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : processRecord.info.seInfoUser);
                            Object obj = "android.app.ActivityThread";
                            String str2 = genMiniDebugInfoProperty;
                            String str3 = genDebugInfoProperty;
                            int[] iArr = gids;
                            z = false;
                            return startProcessLocked(str, hostingNameStr, "android.app.ActivityThread", processRecord, uid, gids, runtimeFlags2, mountExternal, sb3.toString(), requiredAbi2, instructionSet2, invokeWith2, startTime);
                        } catch (RuntimeException e4) {
                            e = e4;
                            long j3 = startTime;
                            z = false;
                            StringBuilder sb4 = new StringBuilder();
                            sb4.append("Failure starting process ");
                            ProcessRecord processRecord22 = app;
                            sb4.append(processRecord22.processName);
                            Slog.e(TAG, sb4.toString(), e);
                            forceStopPackageLocked(processRecord22.info.packageName, UserHandle.getAppId(processRecord22.uid), false, false, true, false, false, UserHandle.getUserId(processRecord22.uid), "start failure");
                            return z;
                        }
                    }
                }
                uid = uid2;
                int runtimeFlags3 = 0;
                if ((processRecord.info.flags & 2) != 0) {
                }
                if ((processRecord.info.flags & 16384) == 0) {
                }
                runtimeFlags3 |= 8;
                if ("1".equals(SystemProperties.get("debug.checkjni"))) {
                }
                genDebugInfoProperty = SystemProperties.get("debug.generate-debug-info");
                if (!"1".equals(genDebugInfoProperty)) {
                }
                runtimeFlags3 |= 32;
                genMiniDebugInfoProperty = SystemProperties.get("dalvik.vm.minidebuginfo");
                if (!"1".equals(genMiniDebugInfoProperty)) {
                }
                runtimeFlags3 |= 2048;
                if ("1".equals(SystemProperties.get("debug.jni.logging"))) {
                }
                if ("1".equals(SystemProperties.get("debug.assert"))) {
                }
                if (this.mNativeDebuggingApp != null) {
                }
                if (processRecord.info.isPrivilegedApp()) {
                }
                processRecord.info.maybeUpdateHiddenApiEnforcementPolicy(this.mHiddenApiBlacklist.getPolicyForPrePApps(), this.mHiddenApiBlacklist.getPolicyForPApps());
                policyBits = processRecord.info.getHiddenApiEnforcementPolicy() << Zygote.API_ENFORCEMENT_POLICY_SHIFT;
                if ((policyBits & 12288) != policyBits) {
                }
            } catch (RuntimeException e5) {
                e = e5;
                long j4 = startTime;
                z = false;
                StringBuilder sb42 = new StringBuilder();
                sb42.append("Failure starting process ");
                ProcessRecord processRecord222 = app;
                sb42.append(processRecord222.processName);
                Slog.e(TAG, sb42.toString(), e);
                forceStopPackageLocked(processRecord222.info.packageName, UserHandle.getAppId(processRecord222.uid), false, false, true, false, false, UserHandle.getUserId(processRecord222.uid), "start failure");
                return z;
            }
        } catch (RemoteException e6) {
            long j5 = startTime;
            throw e6.rethrowAsRuntimeException();
        } catch (RuntimeException e7) {
            e = e7;
            StringBuilder sb422 = new StringBuilder();
            sb422.append("Failure starting process ");
            ProcessRecord processRecord2222 = app;
            sb422.append(processRecord2222.processName);
            Slog.e(TAG, sb422.toString(), e);
            forceStopPackageLocked(processRecord2222.info.packageName, UserHandle.getAppId(processRecord2222.uid), false, false, true, false, false, UserHandle.getUserId(processRecord2222.uid), "start failure");
            return z;
        }
    }

    @GuardedBy("this")
    private boolean startProcessLocked(String hostingType, String hostingNameStr, String entryPoint, ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal, String seInfo, String requiredAbi, String instructionSet, String invokeWith, long startTime) {
        ProcessRecord processRecord = app;
        processRecord.pendingStart = true;
        boolean z = false;
        processRecord.killedByAm = false;
        processRecord.removed = false;
        processRecord.killed = false;
        if (processRecord.startSeq != 0) {
            Slog.wtf(TAG, "startProcessLocked processName:" + processRecord.processName + " with non-zero startSeq:" + processRecord.startSeq);
        }
        if (processRecord.pid != 0) {
            Slog.wtf(TAG, "startProcessLocked processName:" + processRecord.processName + " with non-zero pid:" + processRecord.pid);
        }
        long startSeq = 1 + this.mProcStartSeqCounter;
        this.mProcStartSeqCounter = startSeq;
        processRecord.startSeq = startSeq;
        processRecord.setStartParams(uid, hostingType, hostingNameStr, seInfo, startTime);
        if (this.mConstants.FLAG_PROCESS_START_ASYNC) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                Slog.i(TAG, "Posting procStart msg for " + app.toShortString());
            }
            Handler handler = this.mProcStartHandler;
            $$Lambda$ActivityManagerService$UgpguyCBuObHjnmry_xkrJGkFi0 r13 = r1;
            $$Lambda$ActivityManagerService$UgpguyCBuObHjnmry_xkrJGkFi0 r1 = new Runnable(processRecord, startSeq, invokeWith, entryPoint, gids, runtimeFlags, mountExternal, requiredAbi, instructionSet) {
                private final /* synthetic */ ProcessRecord f$1;
                private final /* synthetic */ long f$2;
                private final /* synthetic */ String f$3;
                private final /* synthetic */ String f$4;
                private final /* synthetic */ int[] f$5;
                private final /* synthetic */ int f$6;
                private final /* synthetic */ int f$7;
                private final /* synthetic */ String f$8;
                private final /* synthetic */ String f$9;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r5;
                    this.f$4 = r6;
                    this.f$5 = r7;
                    this.f$6 = r8;
                    this.f$7 = r9;
                    this.f$8 = r10;
                    this.f$9 = r11;
                }

                public final void run() {
                    ActivityManagerService.lambda$startProcessLocked$0(ActivityManagerService.this, this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9);
                }
            };
            handler.post(r13);
            return true;
        }
        ProcessRecord processRecord2 = processRecord;
        try {
            Process.ProcessStartResult startResult = startProcess(hostingType, entryPoint, processRecord, uid, gids, runtimeFlags, mountExternal, seInfo, requiredAbi, instructionSet, invokeWith, startTime);
            handleProcessStartedLocked(processRecord2, startResult.pid, startResult.usingWrapper, startSeq, false);
        } catch (RuntimeException e) {
            Slog.e(TAG, "Failure starting process " + processRecord2.processName, e);
            processRecord2.pendingStart = false;
            forceStopPackageLocked(processRecord2.info.packageName, UserHandle.getAppId(processRecord2.uid), false, false, true, false, false, UserHandle.getUserId(processRecord2.userId), "start failure");
        }
        if (processRecord2.pid > 0) {
            z = true;
        }
        return z;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:20:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:?, code lost:
        r1 = r15.startProcess(r13.hostingType, r25, r13, r13.startUid, r26, r27, r28, r13.seInfo, r29, r30, r24, r13.startTime);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x007d, code lost:
        monitor-enter(r20);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0081, code lost:
        r11 = r21;
        r12 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:?, code lost:
        r15.handleProcessStartedLocked(r11, r1, r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x0088, code lost:
        monitor-exit(r20);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x008e, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x0090, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0091, code lost:
        r11 = r21;
        r12 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:?, code lost:
        monitor-exit(r20);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0099, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x009a, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x009b, code lost:
        r11 = r21;
        r12 = r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00ad, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:?, code lost:
        boostPriorityForLockedSection();
        android.util.Slog.e(TAG, "Failure starting process " + r11.processName, r14);
        r15.mPendingStarts.remove(r12);
        r11.pendingStart = false;
        r15.forceStopPackageLocked(r11.info.packageName, android.os.UserHandle.getAppId(r11.uid), false, false, true, false, false, android.os.UserHandle.getUserId(r11.userId), "start failure");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:0x00fb, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:0x00fd, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:0x0100, code lost:
        throw r0;
     */
    /* JADX WARNING: Removed duplicated region for block: B:56:0x00b7 A[SYNTHETIC, Splitter:B:56:0x00b7] */
    public static /* synthetic */ void lambda$startProcessLocked$0(ActivityManagerService activityManagerService, ProcessRecord app, long startSeq, String invokeWith, String entryPoint, int[] gids, int runtimeFlags, int mountExternal, String requiredAbi, String instructionSet) {
        long j;
        ProcessRecord processRecord;
        boolean z;
        ActivityManagerService activityManagerService2 = activityManagerService;
        ProcessRecord processRecord2 = app;
        long j2 = startSeq;
        try {
            synchronized (activityManagerService) {
                try {
                    boostPriorityForLockedSection();
                    if (activityManagerService.isProcStartValidLocked(app, startSeq) != null) {
                        Slog.w(TAG, processRecord2 + " not valid anymore, don't start process, " + reason);
                        processRecord2.pendingStart = false;
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    if (invokeWith == null) {
                        if (SystemProperties.get("wrap." + processRecord2.processName) == null) {
                            z = false;
                            processRecord2.usingWrapper = z;
                            activityManagerService2.mPendingStarts.put(j2, processRecord2);
                        }
                    }
                    z = true;
                    processRecord2.usingWrapper = z;
                    activityManagerService2.mPendingStarts.put(j2, processRecord2);
                } catch (RuntimeException e) {
                    e = e;
                } catch (Throwable th) {
                    th = th;
                    long j3 = j2;
                    processRecord = processRecord2;
                    j = j3;
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } catch (RuntimeException e2) {
            e = e2;
            long j4 = j2;
            processRecord = processRecord2;
            j = j4;
            RuntimeException e3 = e;
            synchronized (activityManagerService) {
            }
            resetPriorityAfterLockedSection();
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:57:0x019f A[Catch:{ all -> 0x01f4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x01d2 A[Catch:{ all -> 0x01f4 }] */
    private Process.ProcessStartResult startProcess(String hostingType, String entryPoint, ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal, String seInfo, String requiredAbi, String instructionSet, String invokeWith, long startTime) {
        long j;
        String[] entryPointArgs;
        boolean startMapledApp;
        Process.ProcessStartResult startResult;
        int i;
        ProcessRecord processRecord = app;
        int i2 = uid;
        long j2 = startTime;
        try {
            if (Jlog.isPerfTest()) {
                StringBuilder sb = new StringBuilder();
                sb.append("processname=");
                sb.append(processRecord.processName);
                sb.append("&pkg=");
                sb.append(processRecord.hostingNameStr != null ? processRecord.hostingNameStr : "unknow");
                Jlog.i(3030, Jlog.getMessage("ActivityManagerService", "startProcess", sb.toString()));
            }
            Trace.traceBegin(64, "Start proc: " + processRecord.processName);
            checkTime(j2, "startProcess: asking zygote to start proc");
            entryPointArgs = this.mHwAMSEx.updateEntryPointArgsForPCMode(processRecord, new String[]{"seq=" + processRecord.startSeq});
            startMapledApp = false;
            if (sIsMygote && (processRecord.info.hwFlags & DumpState.DUMP_SERVICE_PERMISSIONS) != 0) {
                IHwPackageManager hwPM = HwPackageManager.getService();
                if (hwPM != null) {
                    startMapledApp = hwPM.getMapleEnableFlag(processRecord.info.packageName);
                }
            }
        } catch (RemoteException e) {
            startMapledApp = true;
            Slog.e(TAG, "can't get maple enable flg from remote!");
        } catch (Throwable th) {
            th = th;
            String str = hostingType;
            j = 64;
            long j3 = j2;
            int i3 = i2;
            Trace.traceEnd(j);
            throw th;
        }
        if (startMapledApp) {
            try {
                if (IS_DEBUG_VERSION) {
                    Slog.d(TAG, "startMapleProcessLocked:  " + processRecord.info.className + ", dataDir:" + processRecord.info.dataDir + ", processName :" + processRecord.info.processName);
                }
                startResult = Process.startMapledApp(entryPoint, processRecord.processName, i2, i2, gids, runtimeFlags, mountExternal, processRecord.info.targetSdkVersion, seInfo, requiredAbi, instructionSet, processRecord.info.dataDir, invokeWith, entryPointArgs);
                String str2 = hostingType;
            } catch (Throwable th2) {
                th = th2;
                String str3 = hostingType;
                int i4 = uid;
                j = 64;
                long j4 = startTime;
                Trace.traceEnd(j);
                throw th;
            }
        } else {
            try {
                if (hostingType.equals("webview_service")) {
                    startResult = Process.startWebView(entryPoint, processRecord.processName, uid, uid, gids, runtimeFlags, mountExternal, processRecord.info.targetSdkVersion, seInfo, requiredAbi, instructionSet, processRecord.info.dataDir, null, entryPointArgs);
                } else {
                    int effectiveUid = uid;
                    if (processRecord == null || !processRecord.processName.startsWith("com.huawei.hbs.framework:HbsWebAppActivity")) {
                        i = uid;
                    } else {
                        i = uid;
                        try {
                            effectiveUid = this.mHwAMSEx.getEffectiveUid(processRecord.hwHbsUid, i);
                        } catch (Throwable th3) {
                            th = th3;
                            j = 64;
                            long j42 = startTime;
                            Trace.traceEnd(j);
                            throw th;
                        }
                    }
                    startResult = Process.start(entryPoint, processRecord.processName, effectiveUid, this.mHwAMSEx.changeGidIfRepairMode(i, processRecord.processName), gids, runtimeFlags, mountExternal, processRecord.info.targetSdkVersion, seInfo, requiredAbi, instructionSet, processRecord.info.dataDir, invokeWith, entryPointArgs);
                    if (Jlog.isPerfTest()) {
                        StringBuilder sb2 = new StringBuilder();
                        sb2.append("pid=");
                        sb2.append(startResult != null ? startResult.pid : 0);
                        sb2.append("&processname=");
                        sb2.append(processRecord.processName);
                        Jlog.i(3031, Jlog.getMessage("ActivityManagerService", "processname", sb2.toString()));
                    }
                    if (startResult != null) {
                        HwFrameworkFactory.getHwBehaviorCollectManager().sendEvent(3, processRecord.uid, startResult.pid, processRecord.processName, null);
                    }
                    checkTime(startTime, "startProcess: returned from zygote!");
                    Trace.traceEnd(64);
                    return startResult;
                }
            } catch (Throwable th4) {
                th = th4;
                int i42 = uid;
                j = 64;
                long j422 = startTime;
                Trace.traceEnd(j);
                throw th;
            }
        }
        int i5 = uid;
        if (Jlog.isPerfTest()) {
        }
        if (startResult != null) {
        }
        try {
            checkTime(startTime, "startProcess: returned from zygote!");
            Trace.traceEnd(64);
            return startResult;
        } catch (Throwable th5) {
            th = th5;
            j = 64;
            Trace.traceEnd(j);
            throw th;
        }
    }

    @GuardedBy("this")
    private String isProcStartValidLocked(ProcessRecord app, long expectedStartSeq) {
        StringBuilder sb = null;
        if (app.killedByAm) {
            if (0 == 0) {
                sb = new StringBuilder();
            }
            sb.append("killedByAm=true;");
        }
        if (this.mProcessNames.get(app.processName, app.uid) != app) {
            if (sb == null) {
                sb = new StringBuilder();
            }
            sb.append("No entry in mProcessNames;");
        }
        if (!app.pendingStart) {
            if (sb == null) {
                sb = new StringBuilder();
            }
            sb.append("pendingStart=false;");
        }
        if (app.startSeq > expectedStartSeq) {
            if (sb == null) {
                sb = new StringBuilder();
            }
            sb.append("seq=" + app.startSeq + ",expected=" + expectedStartSeq + ";");
        }
        if (sb == null) {
            return null;
        }
        return sb.toString();
    }

    @GuardedBy("this")
    private boolean handleProcessStartedLocked(ProcessRecord pending, Process.ProcessStartResult startResult, long expectedStartSeq) {
        if (this.mPendingStarts.get(expectedStartSeq) == null) {
            if (pending.pid == startResult.pid) {
                pending.usingWrapper = startResult.usingWrapper;
            }
            return false;
        }
        return handleProcessStartedLocked(pending, startResult.pid, startResult.usingWrapper, expectedStartSeq, false);
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x02bc, code lost:
        r0 = th;
     */
    @GuardedBy("this")
    private boolean handleProcessStartedLocked(ProcessRecord app, int pid, boolean usingWrapper, long expectedStartSeq, boolean procAttached) {
        boolean z;
        boolean z2;
        int i;
        ProcessRecord oldApp;
        int i2;
        ProcessRecord processRecord = app;
        int i3 = pid;
        boolean z3 = usingWrapper;
        long j = expectedStartSeq;
        this.mPendingStarts.remove(j);
        String reason = isProcStartValidLocked(processRecord, j);
        if (reason != null) {
            Slog.w(TAG, processRecord + " start not valid, killing pid=" + i3 + ", " + reason);
            processRecord.pendingStart = false;
            Process.killProcessQuiet(pid);
            Process.killProcessGroup(processRecord.uid, processRecord.pid);
            return false;
        }
        if (!"activity".equals(processRecord.hostingType) && !"content provider".equals(processRecord.hostingType)) {
            this.mBatteryStatsService.noteProcessStart(processRecord.processName, processRecord.info.uid);
        }
        if (mIsDebuggable || (processRecord.info.flags & 1) == 0) {
            HwSysResource pids = HwFrameworkFactory.getHwResource(15);
            if (pids != null) {
                StrictMode.ThreadPolicy savedPolicy = StrictMode.allowThreadDiskReads();
                try {
                    pids.acquire(i3, processRecord.info.packageName, 0);
                } finally {
                    StrictMode.setThreadPolicy(savedPolicy);
                }
            }
        }
        checkTime(processRecord.startTime, "startProcess: done updating battery stats");
        Object[] objArr = new Object[6];
        objArr[0] = Integer.valueOf(UserHandle.getUserId(processRecord.startUid));
        objArr[1] = Integer.valueOf(pid);
        objArr[2] = Integer.valueOf(processRecord.startUid);
        objArr[3] = processRecord.processName;
        objArr[4] = processRecord.hostingType;
        objArr[5] = processRecord.hostingNameStr != null ? processRecord.hostingNameStr : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
        EventLog.writeEvent(EventLogTags.AM_PROC_START, objArr);
        try {
            AppGlobals.getPackageManager().logAppProcessStartIfNeeded(processRecord.processName, processRecord.uid, processRecord.seInfo, processRecord.info.sourceDir, i3);
        } catch (RemoteException e) {
        }
        if (processRecord.persistent) {
            Watchdog.getInstance().processStarted(processRecord.processName, i3);
        }
        checkTime(processRecord.startTime, "startProcess: building log message");
        StringBuilder buf = this.mStringBuilder;
        buf.setLength(0);
        buf.append("Start proc ");
        buf.append(i3);
        buf.append(':');
        buf.append(processRecord.processName);
        buf.append('/');
        UserHandle.formatUid(buf, processRecord.startUid);
        if (processRecord.isolatedEntryPoint != null) {
            buf.append(" [");
            buf.append(processRecord.isolatedEntryPoint);
            buf.append("]");
        }
        buf.append(" for ");
        buf.append(processRecord.hostingType);
        if (processRecord.hostingNameStr != null) {
            buf.append(" ");
            buf.append(processRecord.hostingNameStr);
        }
        reportUidInfoMessageLocked(TAG, buf.toString(), processRecord.startUid);
        LogPower.push(111, processRecord.processName, processRecord.hostingType, String.valueOf(pid), new String[]{String.valueOf(processRecord.startUid)});
        app.setPid(pid);
        processRecord.usingWrapper = z3;
        processRecord.pendingStart = false;
        checkTime(processRecord.startTime, "startProcess: starting to update pids map");
        if (!this.mSystemReady || !"activity".equals(processRecord.hostingType)) {
            z2 = true;
            String str = reason;
            z = z3;
            i = i3;
        } else {
            z2 = true;
            String str2 = reason;
            z = z3;
            i = i3;
            this.mDAProxy.noteProcessStart(processRecord.info.packageName, processRecord.processName, i3, processRecord.startUid, false, processRecord.hostingType, processRecord.hostingNameStr);
        }
        synchronized (this.mPidsSelfLocked) {
            try {
                oldApp = this.mPidsSelfLocked.get(i);
            } catch (Throwable th) {
                th = th;
                int i4 = i;
                StringBuilder sb = buf;
                while (true) {
                    throw th;
                }
            }
        }
        if (oldApp == null || processRecord.isolated) {
            i2 = i;
            StringBuilder sb2 = buf;
        } else {
            Slog.wtf(TAG, "handleProcessStartedLocked process:" + processRecord.processName + " startSeq:" + processRecord.startSeq + " pid:" + i + " belongs to another existing app:" + oldApp.processName + " startSeq:" + oldApp.startSeq);
            i2 = i;
            StringBuilder sb3 = buf;
            cleanUpApplicationRecordLocked(oldApp, false, false, -1, true);
        }
        synchronized (this.mPidsSelfLocked) {
            this.mPidsSelfLocked.put(i2, processRecord);
            if (!procAttached) {
                Message msg = this.mHandler.obtainMessage(20);
                msg.obj = processRecord;
                this.mHandler.sendMessageDelayed(msg, z ? 1200000 : JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
            }
        }
        checkTime(processRecord.startTime, "startProcess: done updating pids map");
        if (Jlog.isUBMEnable()) {
            StringBuilder sb4 = new StringBuilder();
            sb4.append("AC#");
            sb4.append(processRecord.processName != null ? processRecord.processName : "unknow");
            sb4.append("(");
            sb4.append(processRecord.info.versionCode);
            sb4.append(",");
            sb4.append(processRecord.pid);
            sb4.append(",");
            sb4.append(processRecord.hostingNameStr != null ? processRecord.hostingNameStr : "none");
            sb4.append(")");
            Jlog.d(268, sb4.toString());
        }
        processRecord.maxAdj = this.mDAProxy.resetAppMngOomAdj(processRecord.maxAdj, processRecord.info.packageName);
        this.mDAProxy.notifyProcessStatusChange(processRecord.info.packageName, processRecord.processName, processRecord.hostingType, processRecord.pid, processRecord.uid);
        return z2;
    }

    /* access modifiers changed from: package-private */
    public void updateUsageStats(ActivityRecord component, boolean resumed) {
        int i;
        if (ActivityManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG, "updateUsageStats: comp=" + component + "res=" + resumed);
        } else {
            Flog.i(101, "updateUsageStats: comp=" + component + " res=" + resumed);
        }
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        int i2 = component.app.uid;
        String packageName = component.realActivity.getPackageName();
        String shortClassName = component.realActivity.getShortClassName();
        if (resumed) {
            i = 1;
        } else {
            i = 0;
        }
        StatsLog.write(42, i2, packageName, shortClassName, i);
        ActivityStack stack = component.getStack();
        if (resumed) {
            if (this.mUsageStatsService != null) {
                if (stack == null || !HwPCUtils.isPcDynamicStack(stack.mStackId)) {
                    this.mUsageStatsService.reportEvent(component.realActivity, component.userId, 1);
                } else {
                    this.mHwAMSEx.updateUsageStatsForPCMode(component, resumed, this.mUsageStatsService);
                }
            }
            synchronized (stats) {
                stats.noteActivityResumedLocked(component.app.uid);
            }
            return;
        }
        if (this.mUsageStatsService != null && (stack == null || !HwPCUtils.isPcDynamicStack(stack.mStackId))) {
            this.mUsageStatsService.reportEvent(component.realActivity, component.userId, 2);
        }
        synchronized (stats) {
            stats.noteActivityPausedLocked(component.app.uid);
        }
    }

    /* access modifiers changed from: package-private */
    public Intent getHomeIntent() {
        Intent intent = new Intent(this.mTopAction, this.mTopData != null ? Uri.parse(this.mTopData) : null);
        intent.setComponent(this.mTopComponent);
        intent.addFlags(256);
        if (this.mFactoryTest != 1) {
            intent.addCategory("android.intent.category.HOME");
            intent.addFlags(512);
        }
        return intent;
    }

    /* access modifiers changed from: package-private */
    public boolean startHomeActivityLocked(int userId, String reason) {
        if (this.mFactoryTest == 1 && this.mTopAction == null) {
            return false;
        }
        Intent intent = this.mHwAMSEx.changeStartActivityIfNeed(getHomeIntent());
        ActivityInfo aInfo = resolveActivityInfo(intent, 1024, userId);
        if (aInfo != null) {
            intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));
            ActivityInfo aInfo2 = new ActivityInfo(aInfo);
            aInfo2.applicationInfo = getAppInfoForUser(aInfo2.applicationInfo, userId);
            ProcessRecord app = getProcessRecordLocked(aInfo2.processName, aInfo2.applicationInfo.uid, true);
            if (app != null && "moveUserToForeground".equals(reason)) {
                return true;
            }
            if (app == null || app.instr == null) {
                intent.setFlags(intent.getFlags() | 268435456);
                int resolvedUserId = UserHandle.getUserId(aInfo2.applicationInfo.uid);
                this.mActivityStartController.startHomeActivity(intent, aInfo2, reason + ":" + userId + ":" + resolvedUserId);
            }
        } else {
            Slog.wtf(TAG, "No home screen found for " + intent, new Throwable());
        }
        return true;
    }

    private ActivityInfo resolveActivityInfo(Intent intent, int flags, int userId) {
        ComponentName comp = intent.getComponent();
        if (comp != null) {
            try {
                return AppGlobals.getPackageManager().getActivityInfo(comp, flags, userId);
            } catch (RemoteException e) {
                return null;
            }
        } else {
            ResolveInfo info = AppGlobals.getPackageManager().resolveIntent(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), flags, userId);
            if (info != null) {
                return info.activityInfo;
            }
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public boolean getCheckedForSetup() {
        return this.mCheckedForSetup;
    }

    /* access modifiers changed from: package-private */
    public void setCheckedForSetup(boolean checked) {
        this.mCheckedForSetup = checked;
    }

    /* access modifiers changed from: package-private */
    public CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo ai) {
        return this.mCompatModePackages.compatibilityInfoForPackageLocked(ai);
    }

    /* access modifiers changed from: package-private */
    public void enforceNotIsolatedCaller(String caller) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            throw new SecurityException("Isolated process not allowed to call " + caller);
        }
    }

    public int getFrontActivityScreenCompatMode() {
        int frontActivityScreenCompatModeLocked;
        enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                frontActivityScreenCompatModeLocked = this.mCompatModePackages.getFrontActivityScreenCompatModeLocked();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return frontActivityScreenCompatModeLocked;
    }

    public void setFrontActivityScreenCompatMode(int mode) {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setFrontActivityScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCompatModePackages.setFrontActivityScreenCompatModeLocked(mode);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getPackageScreenCompatMode(String packageName) {
        int packageScreenCompatModeLocked;
        enforceNotIsolatedCaller("getPackageScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                packageScreenCompatModeLocked = this.mCompatModePackages.getPackageScreenCompatModeLocked(packageName);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return packageScreenCompatModeLocked;
    }

    public void setPackageScreenCompatMode(String packageName, int mode) {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageScreenCompatMode");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCompatModePackages.setPackageScreenCompatModeLocked(packageName, mode);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean getPackageAskScreenCompat(String packageName) {
        boolean packageAskCompatModeLocked;
        enforceNotIsolatedCaller("getPackageAskScreenCompat");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                packageAskCompatModeLocked = this.mCompatModePackages.getPackageAskCompatModeLocked(packageName);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return packageAskCompatModeLocked;
    }

    public void setPackageAskScreenCompat(String packageName, boolean ask) {
        enforceCallingPermission("android.permission.SET_SCREEN_COMPATIBILITY", "setPackageAskScreenCompat");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCompatModePackages.setPackageAskCompatModeLocked(packageName, ask);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private boolean hasUsageStatsPermission(String callingPackage) {
        int mode = this.mAppOpsService.noteOperation(43, Binder.getCallingUid(), callingPackage);
        boolean z = false;
        if (mode == 3) {
            if (checkCallingPermission("android.permission.PACKAGE_USAGE_STATS") == 0) {
                z = true;
            }
            return z;
        }
        if (mode == 0) {
            z = true;
        }
        return z;
    }

    public int getPackageProcessState(String packageName, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        int procState = 19;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord proc = this.mLruProcesses.get(i);
                    if (procState > proc.setProcState && (proc.pkgList.containsKey(packageName) || (proc.pkgDeps != null && proc.pkgDeps.contains(packageName)))) {
                        procState = proc.setProcState;
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return procState;
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level) throws RemoteException {
        return setProcessMemoryTrimLevel(process, userId, level, false);
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level, boolean iAware) throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = findProcessLocked(process, userId, "setProcessMemoryTrimLevel");
                if (app == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                } else if (app.thread == null) {
                    throw new IllegalArgumentException("Process has no app thread");
                } else if (app.trimMemoryLevel < level) {
                    if (level >= 20 && (!iAware || app.curProcState < 4)) {
                        if (app.curProcState <= 5) {
                            throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                        }
                    }
                    if (iAware) {
                        app.thread.iawareTrimMemory(level, iAware);
                        return true;
                    }
                    app.thread.scheduleTrimMemory(level);
                    app.trimMemoryLevel = level;
                    resetPriorityAfterLockedSection();
                    return true;
                } else {
                    throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: private */
    public void dispatchProcessesChanged() {
        int N;
        int j;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingProcessChanges.size();
                if (this.mActiveProcessChanges.length < N) {
                    this.mActiveProcessChanges = new ProcessChangeItem[N];
                }
                this.mPendingProcessChanges.toArray(this.mActiveProcessChanges);
                this.mPendingProcessChanges.clear();
                if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                    Slog.i(TAG, "*** Delivering " + N + " process changes");
                }
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        int i = this.mProcessObservers.beginBroadcast();
        while (true) {
            j = 0;
            if (i <= 0) {
                break;
            }
            i--;
            IProcessObserver observer = this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                while (j < N) {
                    try {
                        ProcessChangeItem item = this.mActiveProcessChanges[j];
                        if ((item.changes & 1) != 0) {
                            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                                Slog.i(TAG, "ACTIVITIES CHANGED pid=" + item.pid + " uid=" + item.uid + ": " + item.foregroundActivities);
                            }
                            observer.onForegroundActivitiesChanged(item.pid, item.uid, item.foregroundActivities);
                        }
                        j++;
                    } catch (RemoteException e) {
                    }
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                while (j < N) {
                    this.mAvailProcessChanges.add(this.mActiveProcessChanges[j]);
                    j++;
                }
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: private */
    public void dispatchProcessDied(int pid, int uid) {
        int i = this.mProcessObservers.beginBroadcast();
        while (i > 0) {
            i--;
            IProcessObserver observer = this.mProcessObservers.getBroadcastItem(i);
            if (observer != null) {
                try {
                    observer.onProcessDied(pid, uid);
                } catch (RemoteException e) {
                }
            }
        }
        this.mProcessObservers.finishBroadcast();
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public void dispatchUidsChanged() {
        int N;
        int j;
        long start = SystemClock.uptimeMillis();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingUidChanges.size();
                if (this.mActiveUidChanges.length < N) {
                    this.mActiveUidChanges = new UidRecord.ChangeItem[N];
                }
                for (int i = 0; i < N; i++) {
                    UidRecord.ChangeItem change = this.mPendingUidChanges.get(i);
                    this.mActiveUidChanges[i] = change;
                    if (change.uidRecord != null) {
                        change.uidRecord.pendingChange = null;
                        change.uidRecord = null;
                    }
                }
                this.mPendingUidChanges.clear();
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    Slog.i(TAG, "*** Delivering " + N + " uid changes");
                }
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        this.mUidChangeDispatchCount += N;
        int i2 = this.mUidObservers.beginBroadcast();
        while (i2 > 0) {
            i2--;
            dispatchUidsChangedForObserver(this.mUidObservers.getBroadcastItem(i2), (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(i2), N);
        }
        this.mUidObservers.finishBroadcast();
        if (this.mUidObservers.getRegisteredCallbackCount() > 0) {
            for (int j2 = 0; j2 < N; j2++) {
                UidRecord.ChangeItem item = this.mActiveUidChanges[j2];
                if ((item.change & 1) != 0) {
                    this.mValidateUids.remove(item.uid);
                } else {
                    UidRecord validateUid = this.mValidateUids.get(item.uid);
                    if (validateUid == null) {
                        validateUid = new UidRecord(item.uid);
                        this.mValidateUids.put(item.uid, validateUid);
                    }
                    if ((item.change & 2) != 0) {
                        validateUid.idle = true;
                    } else if ((item.change & 4) != 0) {
                        validateUid.idle = false;
                    }
                    int i3 = item.processState;
                    validateUid.setProcState = i3;
                    validateUid.curProcState = i3;
                    validateUid.lastDispatchedProcStateSeq = item.procStateSeq;
                }
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (j = 0; j < N; j++) {
                    this.mAvailUidChanges.add(this.mActiveUidChanges[j]);
                }
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (SystemClock.uptimeMillis() - start > 1000) {
            Slog.w(TAG, "Finishing dispatch all uids changed took " + (end - start) + "ms");
        }
    }

    private void dispatchUidsChangedForObserver(IUidObserver observer, UidObserverRegistration reg, int changesSize) {
        IUidObserver iUidObserver = observer;
        UidObserverRegistration uidObserverRegistration = reg;
        if (iUidObserver != null) {
            try {
                long begin = SystemClock.uptimeMillis();
                boolean z = false;
                int j = 0;
                while (j < changesSize) {
                    try {
                        UidRecord.ChangeItem item = this.mActiveUidChanges[j];
                        int change = item.change;
                        if (change != 0 || (uidObserverRegistration.which & 1) != 0) {
                            long start = SystemClock.uptimeMillis();
                            if ((change & 2) != 0) {
                                if ((uidObserverRegistration.which & 4) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID idle uid=" + item.uid);
                                    }
                                    iUidObserver.onUidIdle(item.uid, item.ephemeral);
                                }
                            } else if (!((change & 4) == 0 || (uidObserverRegistration.which & 8) == 0)) {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    Slog.i(TAG, "UID active uid=" + item.uid);
                                }
                                iUidObserver.onUidActive(item.uid);
                            }
                            if ((uidObserverRegistration.which & 16) != 0) {
                                if ((change & 8) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID cached uid=" + item.uid);
                                    }
                                    iUidObserver.onUidCachedChanged(item.uid, true);
                                } else if ((change & 16) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID active uid=" + item.uid);
                                    }
                                    iUidObserver.onUidCachedChanged(item.uid, z);
                                }
                            }
                            if ((change & 1) != 0) {
                                if ((uidObserverRegistration.which & 2) != 0) {
                                    if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                        Slog.i(TAG, "UID gone uid=" + item.uid);
                                    }
                                    iUidObserver.onUidGone(item.uid, item.ephemeral);
                                }
                                if (uidObserverRegistration.lastProcStates != null) {
                                    uidObserverRegistration.lastProcStates.delete(item.uid);
                                }
                            } else if ((uidObserverRegistration.which & 1) != 0) {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    Slog.i(TAG, "UID CHANGED uid=" + item.uid + ": " + item.processState);
                                }
                                boolean doReport = true;
                                if (uidObserverRegistration.cutpoint >= 0) {
                                    int lastState = uidObserverRegistration.lastProcStates.get(item.uid, -1);
                                    if (lastState != -1) {
                                        doReport = (lastState <= uidObserverRegistration.cutpoint) != (item.processState <= uidObserverRegistration.cutpoint);
                                    } else {
                                        doReport = item.processState != 19;
                                    }
                                }
                                if (doReport) {
                                    if (uidObserverRegistration.lastProcStates != null) {
                                        uidObserverRegistration.lastProcStates.put(item.uid, item.processState);
                                    }
                                    iUidObserver.onUidStateChanged(item.uid, item.processState, item.procStateSeq);
                                }
                            }
                            int duration = (int) (SystemClock.uptimeMillis() - start);
                            if (uidObserverRegistration.mMaxDispatchTime < duration) {
                                uidObserverRegistration.mMaxDispatchTime = duration;
                            }
                            if (duration >= 20) {
                                uidObserverRegistration.mSlowDispatchCount++;
                            }
                        }
                        j++;
                        z = false;
                    } catch (RemoteException e) {
                    }
                }
                if (SystemClock.uptimeMillis() - begin > SINGLE_DISPATCH_THRESHOLD_MS) {
                    Slog.w(TAG, "Dispatch uids changed took " + (end - begin) + "ms for observer : " + iUidObserver);
                }
            } catch (RemoteException e2) {
                int i = changesSize;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dispatchOomAdjObserver(String msg) {
        OomAdjObserver observer;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                observer = this.mCurOomAdjObserver;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (observer != null) {
            observer.onOomAdjMessage(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void setOomAdjObserver(int uid, OomAdjObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = uid;
                this.mCurOomAdjObserver = observer;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void clearOomAdjObserver() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mCurOomAdjUid = -1;
                this.mCurOomAdjObserver = null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void reportOomAdjMessageLocked(String tag, String msg) {
        Slog.d(tag, msg);
        if (this.mCurOomAdjObserver != null) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    /* access modifiers changed from: package-private */
    public void reportUidInfoMessageLocked(String tag, String msg, int uid) {
        Slog.i(TAG, msg);
        if (this.mCurOomAdjObserver != null && uid == this.mCurOomAdjUid) {
            this.mUiHandler.obtainMessage(70, msg).sendToTarget();
        }
    }

    public final int startActivity(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        Intent intent2 = intent;
        if (Jlog.isMicroTest()) {
            Jlog.i(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END, Jlog.getMessage("ActivityManagerService", "startActivity", intent2));
        }
        int ret = startActivityAsUser(caller, callingPackage, intent2, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, UserHandle.getCallingUserId());
        if (Jlog.isMicroTest()) {
            Jlog.i(3091, Jlog.getMessage("ActivityManagerService", "startActivity", intent2));
        }
        return ret;
    }

    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        Intent intent2;
        if (Jlog.isMicroTest()) {
            intent2 = intent;
            Jlog.i(3092, Jlog.getMessage("ActivityManagerService", "startActivityAsUser", intent2));
        } else {
            intent2 = intent;
        }
        return startActivityAsUser(caller, callingPackage, intent2, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId, true);
    }

    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId, boolean validateIncomingUser) {
        Intent intent2 = intent;
        enforceNotIsolatedCaller("startActivity");
        int ret = this.mActivityStartController.obtainStarter(intent2, "startActivityAsUser").setCaller(caller).setCallingPackage(callingPackage).setResolvedType(resolvedType).setResultTo(resultTo).setResultWho(resultWho).setRequestCode(requestCode).setStartFlags(startFlags).setProfilerInfo(profilerInfo).setActivityOptions(bOptions).setMayWait(this.mActivityStartController.checkTargetUser(userId, validateIncomingUser, Binder.getCallingPid(), Binder.getCallingUid(), "startActivityAsUser")).execute();
        if (Jlog.isMicroTest()) {
            Jlog.i(3093, Jlog.getMessage("ActivityManagerService", "startActivityAsUser", intent2));
        }
        return ret;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00b5, code lost:
        resetPriorityAfterLockedSection();
        r9 = r29;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00bc, code lost:
        if (r9 != -10000) goto L_0x00c7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00be, code lost:
        r9 = android.os.UserHandle.getUserId(r5.app.uid);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:?, code lost:
        r0 = r1.mActivityStartController.obtainStarter(r2, "startActivityAsCaller").setCallingUid(r6).setCallingPackage(r7).setResolvedType(r21).setResultTo(r3).setResultWho(r23).setRequestCode(r24).setStartFlags(r25).setActivityOptions(r27).setMayWait(r9).setIgnoreTargetSecurity(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x0102, code lost:
        if (r8 == false) goto L_0x0106;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:58:0x0104, code lost:
        r15 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x0106, code lost:
        r15 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x0107, code lost:
        r0 = r0.setFilterCallingUid(r15).execute();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:61:0x0113, code lost:
        if (android.util.Jlog.isMicroTest() == false) goto L_0x0123;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x0115, code lost:
        android.util.Jlog.i(3095, android.util.Jlog.getMessage("ActivityManagerService", "startActivityAsCaller", r2));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:63:0x0123, code lost:
        return r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:0x0124, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:0x0126, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:0x0128, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x012a, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x012c, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x012e, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x012f, code lost:
        r10 = r21;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x0131, code lost:
        r11 = r23;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:0x0133, code lost:
        r12 = r24;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:73:0x0135, code lost:
        r13 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x0137, code lost:
        r14 = r27;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x0139, code lost:
        throw r0;
     */
    public final int startActivityAsCaller(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, boolean ignoreTargetSecurity, int userId) {
        Intent intent2 = intent;
        IBinder iBinder = resultTo;
        boolean z = ignoreTargetSecurity;
        if (Jlog.isMicroTest()) {
            Jlog.i(3094, Jlog.getMessage("ActivityManagerService", "startActivityAsCaller", intent2));
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (iBinder != null) {
                    ActivityRecord sourceRecord = this.mStackSupervisor.isInAnyStackLocked(iBinder);
                    if (sourceRecord != null) {
                        if (!sourceRecord.info.packageName.equals(PackageManagerService.PLATFORM_PACKAGE_NAME)) {
                            if (!sourceRecord.info.packageName.equals("com.huawei.android.internal.app")) {
                                throw new SecurityException("Must be called from an activity that is declared in the android package");
                            }
                        }
                        if (sourceRecord.app != null) {
                            if (UserHandle.getAppId(sourceRecord.app.uid) != 1000) {
                                if (sourceRecord.app.uid != sourceRecord.launchedFromUid) {
                                    throw new SecurityException("Calling activity in uid " + sourceRecord.app.uid + " must be system uid or original calling uid " + sourceRecord.launchedFromUid);
                                }
                            }
                            if (z) {
                                if (intent.getComponent() == null) {
                                    throw new SecurityException("Component must be specified with ignoreTargetSecurity");
                                } else if (intent.getSelector() != null) {
                                    throw new SecurityException("Selector not allowed with ignoreTargetSecurity");
                                }
                            }
                            int targetUid = sourceRecord.launchedFromUid;
                            String targetPackage = sourceRecord.launchedFromPackage;
                            boolean isResolver = sourceRecord.isResolverOrChildActivity();
                        } else {
                            String str = resolvedType;
                            String str2 = resultWho;
                            int i = requestCode;
                            int i2 = startFlags;
                            Bundle bundle = bOptions;
                            int i3 = userId;
                            throw new SecurityException("Called without a process attached to activity");
                        }
                    } else {
                        String str3 = resolvedType;
                        String str4 = resultWho;
                        int i4 = requestCode;
                        int i5 = startFlags;
                        Bundle bundle2 = bOptions;
                        int i6 = userId;
                        throw new SecurityException("Called with bad activity token: " + iBinder);
                    }
                } else {
                    String str5 = resolvedType;
                    String str6 = resultWho;
                    int i7 = requestCode;
                    int i8 = startFlags;
                    Bundle bundle3 = bOptions;
                    int i9 = userId;
                    throw new SecurityException("Must be called from an activity");
                }
            } catch (Throwable th) {
                th = th;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final WaitResult startActivityAndWait(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        Intent intent2 = intent;
        if (Jlog.isMicroTest()) {
            Jlog.i(3096, Jlog.getMessage("ActivityManagerService", "startActivityAndWait", intent2));
        }
        enforceNotIsolatedCaller("startActivityAndWait");
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startActivityAndWait", null);
        WaitResult res = new WaitResult();
        this.mActivityStartController.obtainStarter(intent2, "startActivityAndWait").setCaller(caller).setCallingPackage(callingPackage).setResolvedType(resolvedType).setResultTo(resultTo).setResultWho(resultWho).setRequestCode(requestCode).setStartFlags(startFlags).setActivityOptions(bOptions).setMayWait(userId2).setProfilerInfo(profilerInfo).setWaitResult(res).execute();
        if (Jlog.isMicroTest()) {
            Jlog.i(3097, Jlog.getMessage("ActivityManagerService", "startActivityAndWait", intent2));
        }
        return res;
    }

    public final int startActivityWithConfig(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, Configuration config, Bundle bOptions, int userId) {
        Intent intent2 = intent;
        if (Jlog.isMicroTest()) {
            Jlog.i(3098, Jlog.getMessage("ActivityManagerService", "startActivityWithConfig", intent2));
        }
        enforceNotIsolatedCaller("startActivityWithConfig");
        int ret = this.mActivityStartController.obtainStarter(intent2, "startActivityWithConfig").setCaller(caller).setCallingPackage(callingPackage).setResolvedType(resolvedType).setResultTo(resultTo).setResultWho(resultWho).setRequestCode(requestCode).setStartFlags(startFlags).setGlobalConfiguration(config).setActivityOptions(bOptions).setMayWait(this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startActivityWithConfig", null)).execute();
        if (Jlog.isMicroTest()) {
            Jlog.i(3099, Jlog.getMessage("ActivityManagerService", "startActivityWithConfig", intent2));
        }
        return ret;
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x0092, code lost:
        r0 = th;
     */
    public int startActivityIntentSender(IApplicationThread caller, IIntentSender target, IBinder whitelistToken, Intent fillInIntent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int flagsMask, int flagsValues, Bundle bOptions) throws TransactionTooLargeException {
        IIntentSender iIntentSender = target;
        Intent intent = fillInIntent;
        if (Jlog.isMicroTest()) {
            Jlog.i(EventLogTags.BOOT_PROGRESS_PMS_READY, Jlog.getMessage("ActivityManagerService", "startActivityIntentSender", intent));
        }
        enforceNotIsolatedCaller("startActivityIntentSender");
        if (intent != null && fillInIntent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (iIntentSender instanceof PendingIntentRecord) {
            PendingIntentRecord pir = (PendingIntentRecord) iIntentSender;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityStack stack = getFocusedStack();
                    if (stack.mResumedActivity != null && stack.mResumedActivity.info.applicationInfo.uid == Binder.getCallingUid()) {
                        this.mAppSwitchesAllowedTime = 0;
                    }
                } catch (Throwable th) {
                    th = th;
                    Intent intent2 = intent;
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            Intent intent3 = intent;
            int ret = pir.sendInner(0, intent, resolvedType, whitelistToken, null, null, resultTo, resultWho, requestCode, flagsMask, flagsValues, bOptions);
            if (Jlog.isMicroTest()) {
                Jlog.i(3101, Jlog.getMessage("ActivityManagerService", "startActivityIntentSender", intent3));
            }
            return ret;
        } else {
            Intent intent4 = intent;
            throw new IllegalArgumentException("Bad PendingIntent object");
        }
    }

    public int startVoiceActivity(String callingPackage, int callingPid, int callingUid, Intent intent, String resolvedType, IVoiceInteractionSession session, IVoiceInteractor interactor, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        IVoiceInteractionSession iVoiceInteractionSession = session;
        IVoiceInteractor iVoiceInteractor = interactor;
        enforceCallingPermission("android.permission.BIND_VOICE_INTERACTION", "startVoiceActivity()");
        if (iVoiceInteractionSession == null || iVoiceInteractor == null) {
            String str = callingPackage;
            int i = callingUid;
            Intent intent2 = intent;
            String str2 = resolvedType;
            int i2 = startFlags;
            ProfilerInfo profilerInfo2 = profilerInfo;
            Bundle bundle = bOptions;
            throw new NullPointerException("null session or interactor");
        }
        return this.mActivityStartController.obtainStarter(intent, "startVoiceActivity").setCallingUid(callingUid).setCallingPackage(callingPackage).setResolvedType(resolvedType).setVoiceSession(iVoiceInteractionSession).setVoiceInteractor(iVoiceInteractor).setStartFlags(startFlags).setProfilerInfo(profilerInfo).setActivityOptions(bOptions).setMayWait(this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 2, "startVoiceActivity", null)).execute();
    }

    public int startAssistantActivity(String callingPackage, int callingPid, int callingUid, Intent intent, String resolvedType, Bundle bOptions, int userId) {
        enforceCallingPermission("android.permission.BIND_VOICE_INTERACTION", "startAssistantActivity()");
        return this.mActivityStartController.obtainStarter(intent, "startAssistantActivity").setCallingUid(callingUid).setCallingPackage(callingPackage).setResolvedType(resolvedType).setActivityOptions(bOptions).setMayWait(this.mUserController.handleIncomingUser(callingPid, callingUid, userId, false, 2, "startAssistantActivity", null)).execute();
    }

    public void startRecentsActivity(Intent intent, IAssistDataReceiver assistDataReceiver, IRecentsAnimationRunner recentsAnimationRunner) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "startRecentsActivity()");
        int callingPid = Binder.getCallingPid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ComponentName recentsComponent = this.mRecentTasks.getRecentsComponent();
                int recentsUid = this.mRecentTasks.getRecentsComponentUid();
                RecentsAnimation recentsAnimation = new RecentsAnimation(this, this.mStackSupervisor, this.mActivityStartController, this.mWindowManager, this.mUserController, callingPid);
                recentsAnimation.startRecentsActivity(intent, recentsAnimationRunner, recentsComponent, recentsUid, assistDataReceiver);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public void cancelRecentsAnimation(boolean restoreHomeStackPosition) {
        int i;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "cancelRecentsAnimation()");
        long callingUid = (long) Binder.getCallingUid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                WindowManagerService windowManagerService = this.mWindowManager;
                if (restoreHomeStackPosition) {
                    i = 2;
                } else {
                    i = 0;
                }
                windowManagerService.cancelRecentsAnimationSynchronously(i, "cancelRecentsAnimation/uid=" + callingUid);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public void startLocalVoiceInteraction(IBinder callingActivity, Bundle options) throws RemoteException {
        Slog.i(TAG, "Activity tried to startVoiceInteraction");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord activity = getFocusedStack().getTopActivity();
                if (ActivityRecord.forTokenLocked(callingActivity) == activity) {
                    if (this.mRunningVoice == null && activity.getTask().voiceSession == null) {
                        if (activity.voiceSession == null) {
                            if (activity.pendingVoiceInteractionStart) {
                                Slog.w(TAG, "Pending start of voice interaction already.");
                                resetPriorityAfterLockedSection();
                                return;
                            }
                            activity.pendingVoiceInteractionStart = true;
                            resetPriorityAfterLockedSection();
                            ((VoiceInteractionManagerInternal) LocalServices.getService(VoiceInteractionManagerInternal.class)).startLocalVoiceInteraction(callingActivity, options);
                            return;
                        }
                    }
                    Slog.w(TAG, "Already in a voice interaction, cannot start new voice interaction");
                    return;
                }
                throw new SecurityException("Only focused activity can call startVoiceInteraction");
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public void stopLocalVoiceInteraction(IBinder callingActivity) throws RemoteException {
        ((VoiceInteractionManagerInternal) LocalServices.getService(VoiceInteractionManagerInternal.class)).stopLocalVoiceInteraction(callingActivity);
    }

    public boolean supportsLocalVoiceInteraction() throws RemoteException {
        return ((VoiceInteractionManagerInternal) LocalServices.getService(VoiceInteractionManagerInternal.class)).supportsLocalVoiceInteraction();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void onLocalVoiceInteractionStartedLocked(IBinder activity, IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor) {
        long token;
        ActivityRecord activityToCallback = ActivityRecord.forTokenLocked(activity);
        if (activityToCallback != null) {
            activityToCallback.setVoiceSessionLocked(voiceSession);
            try {
                activityToCallback.app.thread.scheduleLocalVoiceInteractionStarted(activity, voiceInteractor);
                token = Binder.clearCallingIdentity();
                startRunningVoiceLocked(voiceSession, activityToCallback.appInfo.uid);
                Binder.restoreCallingIdentity(token);
            } catch (RemoteException e) {
                activityToCallback.clearVoiceSessionLocked();
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(token);
                throw th;
            }
        }
    }

    public void setVoiceKeepAwake(IVoiceInteractionSession session, boolean keepAwake) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mRunningVoice != null && this.mRunningVoice.asBinder() == session.asBinder()) {
                    if (keepAwake) {
                        this.mVoiceWakeLock.acquire();
                    } else {
                        this.mVoiceWakeLock.release();
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:55:0x011d, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x0120, code lost:
        return false;
     */
    public boolean startNextMatchingActivity(IBinder callingActivity, Intent intent, Bundle bOptions) {
        String str;
        Intent intent2 = intent;
        if (intent2 == null || !intent.hasFileDescriptors()) {
            SafeActivityOptions options = SafeActivityOptions.fromBundle(bOptions);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(callingActivity);
                    if (r == null) {
                        SafeActivityOptions.abort(options);
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    if (r.app != null) {
                        if (r.app.thread != null) {
                            Intent intent3 = new Intent(intent2);
                            intent3.setDataAndType(r.intent.getData(), r.intent.getType());
                            intent3.setComponent(null);
                            boolean debug = (intent3.getFlags() & 8) != 0;
                            ActivityInfo aInfo = null;
                            try {
                                List<ResolveInfo> resolves = AppGlobals.getPackageManager().queryIntentActivities(intent3, r.resolvedType, 66560, UserHandle.getCallingUserId()).getList();
                                int N = resolves != null ? resolves.size() : 0;
                                int i = 0;
                                while (true) {
                                    if (i >= N) {
                                        break;
                                    }
                                    ResolveInfo rInfo = resolves.get(i);
                                    if (!rInfo.activityInfo.packageName.equals(r.packageName) || !rInfo.activityInfo.name.equals(r.info.name)) {
                                        i++;
                                    } else {
                                        int i2 = i + 1;
                                        if (i2 < N) {
                                            aInfo = resolves.get(i2).activityInfo;
                                        }
                                        if (debug) {
                                            Slog.v(TAG, "Next matching activity: found current " + r.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + r.info.name);
                                            StringBuilder sb = new StringBuilder();
                                            sb.append("Next matching activity: next is ");
                                            if (aInfo == null) {
                                                str = "null";
                                            } else {
                                                str = aInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + aInfo.name;
                                            }
                                            sb.append(str);
                                            Slog.v(TAG, sb.toString());
                                        }
                                    }
                                }
                            } catch (RemoteException e) {
                            }
                            if (aInfo == null) {
                                SafeActivityOptions.abort(options);
                                if (debug) {
                                    Slog.d(TAG, "Next matching activity: nothing found");
                                }
                            } else {
                                intent3.setComponent(new ComponentName(aInfo.applicationInfo.packageName, aInfo.name));
                                intent3.setFlags(intent3.getFlags() & -503316481);
                                boolean wasFinishing = r.finishing;
                                r.finishing = true;
                                ActivityRecord resultTo = r.resultTo;
                                String resultWho = r.resultWho;
                                int requestCode = r.requestCode;
                                r.resultTo = null;
                                if (resultTo != null) {
                                    resultTo.removeResultsLocked(r, resultWho, requestCode);
                                }
                                long origId = Binder.clearCallingIdentity();
                                int res = this.mActivityStartController.obtainStarter(intent3, "startNextMatchingActivity").setCaller(r.app.thread).setResolvedType(r.resolvedType).setActivityInfo(aInfo).setResultTo(resultTo != null ? resultTo.appToken : null).setResultWho(resultWho).setRequestCode(requestCode).setCallingPid(-1).setCallingUid(r.launchedFromUid).setCallingPackage(r.launchedFromPackage).setRealCallingPid(-1).setRealCallingUid(r.launchedFromUid).setActivityOptions(options).execute();
                                Binder.restoreCallingIdentity(origId);
                                r.finishing = wasFinishing;
                                if (res != 0) {
                                    resetPriorityAfterLockedSection();
                                    return false;
                                }
                                resetPriorityAfterLockedSection();
                                return true;
                            }
                        }
                    }
                    SafeActivityOptions.abort(options);
                    resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public final int startActivityFromRecents(int taskId, Bundle bOptions) {
        int startActivityFromRecents;
        enforceCallerIsRecentsOrHasPermission("android.permission.START_TASKS_FROM_RECENTS", "startActivityFromRecents()");
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        SafeActivityOptions safeOptions = SafeActivityOptions.fromBundle(bOptions);
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                Flog.i(101, "startActivityFromRecents: taskId =" + taskId);
                startActivityFromRecents = this.mStackSupervisor.startActivityFromRecents(callingPid, callingUid, taskId, safeOptions);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            return startActivityFromRecents;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public final int startActivities(IApplicationThread caller, String callingPackage, Intent[] intents, String[] resolvedTypes, IBinder resultTo, Bundle bOptions, int userId) {
        enforceNotIsolatedCaller("startActivities");
        return this.mActivityStartController.startActivities(caller, -1, callingPackage, intents, resolvedTypes, resultTo, SafeActivityOptions.fromBundle(bOptions), this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startActivities", null), "startActivities");
    }

    public void reportActivityFullyDrawn(IBinder token, boolean restoredFromBundle) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                r.reportFullyDrawnLocked(restoredFromBundle);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void setRequestedOrientation(IBinder token, int requestedOrientation) {
        long origId;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_SETREQUESTEDORIENTATION);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Flog.i(101, "setRequestedOrientation r: " + r + ", callingPid: " + Binder.getCallingPid() + ", callingUid: " + Binder.getCallingUid() + ", requestedOrientation " + requestedOrientation);
                if (isMaximizedPortraitAppOnPCMode(r)) {
                    HwPCUtils.log(TAG, "setRequestedOrientation " + r + "is Portrait & Maximized.");
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setRequestedOrientation(requestedOrientation);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public int getRequestedOrientation(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return -1;
                }
                int requestedOrientation = r.getRequestedOrientation();
                resetPriorityAfterLockedSection();
                return requestedOrientation;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:108:0x018e  */
    /* JADX WARNING: Removed duplicated region for block: B:112:0x0198 A[SYNTHETIC, Splitter:B:112:0x0198] */
    /* JADX WARNING: Removed duplicated region for block: B:123:0x01c4  */
    /* JADX WARNING: Removed duplicated region for block: B:73:0x00ff  */
    /* JADX WARNING: Removed duplicated region for block: B:78:0x0128  */
    public final boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask) {
        IBinder iBinder;
        long origId;
        boolean z;
        long origId2;
        boolean res;
        ActivityStack freeformStack;
        boolean res2;
        int i = finishTask;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_FINISHACTIVITY);
        if (resultData == null || !resultData.hasFileDescriptors()) {
            if (ActivityManagerDebugConfig.HWFLOW) {
                Flog.i(101, "finishActivity pid =" + Binder.getCallingPid());
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(token);
                    if (r == null) {
                        resetPriorityAfterLockedSection();
                        return true;
                    }
                    TaskRecord tr = r.getTask();
                    ActivityRecord rootR = tr.getRootActivity();
                    if (rootR == null) {
                        Slog.w(TAG, "Finishing task with all activities already finished");
                    }
                    if (this.mLockTaskController.activityBlockedFromFinish(r)) {
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    if (this.mController != null) {
                        iBinder = token;
                        ActivityRecord next = r.getStack().topRunningActivityLocked(iBinder, 0);
                        if (next != null) {
                            boolean resumeOK = true;
                            try {
                                resumeOK = this.mController.activityResuming(next.packageName);
                            } catch (RemoteException e) {
                                Slog.w(TAG, "Error in resuming next:" + next + " for controller:" + this.mController);
                                this.mController = null;
                                Watchdog.getInstance().setActivityController(null);
                            } catch (Throwable th) {
                                th = th;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                            if (!resumeOK) {
                                Slog.i(TAG, "Not finishing activity because controller resumed");
                                resetPriorityAfterLockedSection();
                                return false;
                            }
                        }
                    } else {
                        iBinder = token;
                    }
                    if (HwPCUtils.enabledInPad() && HwPCUtils.isPcCastModeInServer() && tr.getStack() != null && r == rootR) {
                        tr.getStack().resetOtherStacksVisible(true);
                    }
                    long origId3 = Binder.clearCallingIdentity();
                    boolean finishWithRootActivity = i == 1;
                    if (r == rootR) {
                        try {
                            if (r.inSplitScreenPrimaryWindowingMode()) {
                                z = true;
                                this.mShouldFreeze = z;
                                if (this.mShouldFreeze) {
                                    Slog.i(TAG, "startFreezingScreen");
                                    this.mHandler.removeMessages(500);
                                    this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(500), 1000);
                                    this.mWindowManager.mShouldResetTime = true;
                                    this.mWindowManager.startFreezingScreen(0, 0);
                                }
                                if (i != 2) {
                                    origId2 = origId3;
                                } else if (!finishWithRootActivity || r != rootR) {
                                    try {
                                        if (HwFreeFormUtils.isFreeFormEnable()) {
                                            ActivityStack freeformStack2 = this.mStackSupervisor.getStack(5, 1);
                                            if (freeformStack2 != null && tr != null && r == rootR && tr.getChildCount() == 1) {
                                                if (tr.inFreeformWindowingMode()) {
                                                    freeformStack2.setFreeFormStackVisible(false);
                                                    freeformStack2.setCurrentPkgUnderFreeForm(BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                                                } else if (tr.affinity != null && tr.affinity.equals(freeformStack2.getCurrentPkgUnderFreeForm())) {
                                                    this.mStackSupervisor.mHwActivityStackSupervisorEx.removeFreeFromStackLocked();
                                                }
                                            }
                                        }
                                        origId2 = origId3;
                                    } catch (Throwable th2) {
                                        th = th2;
                                        origId = origId3;
                                        Binder.restoreCallingIdentity(origId);
                                        throw th;
                                    }
                                    try {
                                        res = tr.getStack().requestFinishActivityLocked(iBinder, resultCode, resultData, "app-request", true);
                                        if (!res) {
                                            Slog.i(TAG, "Failed to finish by app-request");
                                        }
                                        this.mHwAMSEx.updateUsageStatsForPCMode(r, false, this.mUsageStatsService);
                                        Binder.restoreCallingIdentity(origId2);
                                        resetPriorityAfterLockedSection();
                                        return res;
                                    } catch (Throwable th3) {
                                        th = th3;
                                        origId = origId2;
                                        Binder.restoreCallingIdentity(origId);
                                        throw th;
                                    }
                                } else {
                                    origId2 = origId3;
                                }
                                freeformStack = this.mStackSupervisor.getStack(5, 1);
                                if (freeformStack != null) {
                                    if (freeformStack.getFreeFormStackVisible() && tr.inFreeformWindowingMode()) {
                                        freeformStack.setFreeFormStackVisible(false);
                                        freeformStack.setCurrentPkgUnderFreeForm(BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                                        Flog.bdReport(this.mContext, 10063);
                                    }
                                }
                                res2 = this.mStackSupervisor.removeTaskByIdLocked(tr.taskId, false, finishWithRootActivity, "finish-activity");
                                if (!res2) {
                                    Slog.i(TAG, "Removing task failed to finish activity");
                                }
                                res = res2;
                                this.mHwAMSEx.updateUsageStatsForPCMode(r, false, this.mUsageStatsService);
                                Binder.restoreCallingIdentity(origId2);
                                resetPriorityAfterLockedSection();
                                return res;
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            origId = origId3;
                            Binder.restoreCallingIdentity(origId);
                            throw th;
                        }
                    }
                    z = false;
                    try {
                        this.mShouldFreeze = z;
                        if (this.mShouldFreeze) {
                        }
                        if (i != 2) {
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        origId = origId3;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                    try {
                        freeformStack = this.mStackSupervisor.getStack(5, 1);
                        if (freeformStack != null) {
                        }
                        res2 = this.mStackSupervisor.removeTaskByIdLocked(tr.taskId, false, finishWithRootActivity, "finish-activity");
                        if (!res2) {
                        }
                        res = res2;
                        this.mHwAMSEx.updateUsageStatsForPCMode(r, false, this.mUsageStatsService);
                        Binder.restoreCallingIdentity(origId2);
                        resetPriorityAfterLockedSection();
                        return res;
                    } catch (Throwable th6) {
                        th = th6;
                        origId = origId2;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                } catch (Throwable th7) {
                    th = th7;
                    IBinder iBinder2 = token;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord proc = this.mHeavyWeightProcess;
                    if (proc == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    ArrayList<ActivityRecord> activities = new ArrayList<>(proc.activities);
                    for (int i = 0; i < activities.size(); i++) {
                        ActivityRecord r = activities.get(i);
                        if (!r.finishing && r.isInStackLocked()) {
                            r.getStack().finishActivityLocked(r, 0, null, "finish-heavy", true);
                        }
                    }
                    this.mHandler.sendMessage(this.mHandler.obtainMessage(25, proc.userId, 0));
                    this.mHeavyWeightProcess = null;
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            String msg = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public void crashApplication(int uid, int initialPid, String packageName, int userId, String message) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mAppErrors.scheduleAppCrashLocked(uid, initialPid, packageName, userId, message);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public final void finishSubActivity(IBinder token, String resultWho, int requestCode) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long origId = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    r.getStack().finishSubActivityLocked(r, resultWho, requestCode);
                }
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean finishActivityAffinity(IBinder token) {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                TaskRecord task = r.getTask();
                if (this.mLockTaskController.activityBlockedFromFinish(r)) {
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                boolean finishActivityAffinityLocked = task.getStack().finishActivityAffinityLocked(r);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return finishActivityAffinityLocked;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void finishVoiceTask(IVoiceInteractionSession session) {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mStackSupervisor.finishVoiceTask(session);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean releaseActivityInstance(IBinder token) {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                boolean safelyDestroyActivityLocked = r.getStack().safelyDestroyActivityLocked(r, "app-req");
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return safelyDestroyActivityLocked;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void releaseSomeActivities(IApplicationThread appInt) {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mStackSupervisor.releaseSomeActivitiesLocked(getRecordForAppLocked(appInt), "low-mem");
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean willActivityBeVisible(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack stack = ActivityRecord.getStackLocked(token);
                if (stack != null) {
                    boolean willActivityBeVisibleLocked = stack.willActivityBeVisibleLocked(token);
                    resetPriorityAfterLockedSection();
                    return willActivityBeVisibleLocked;
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void overridePendingTransition(IBinder token, String packageName, int enterAnim, int exitAnim) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord self = ActivityRecord.isInStackLocked(token);
                if (self == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                long origId = Binder.clearCallingIdentity();
                if (self.isState(ActivityStack.ActivityState.RESUMED, ActivityStack.ActivityState.PAUSING)) {
                    this.mWindowManager.overridePendingAppTransition(packageName, enterAnim, exitAnim, null);
                }
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    private void releaseFMChannel() {
        Intent intent = new Intent("android.intent.action.FM");
        intent.putExtra(AudioService.CONNECT_INTENT_KEY_STATE, 0);
        this.mContext.sendBroadcast(intent);
    }

    @GuardedBy("this")
    private final void handleAppDiedLocked(ProcessRecord app, boolean restarting, boolean allowRestart) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendEvent(4, app.uid, app.pid, app.processName, null);
        if ("com.huawei.android.hwouc".equals(app.processName)) {
            Settings.Secure.putIntForUser(this.mContext.getContentResolver(), "hwouc_keyguard_view_on_top", 0, app.userId > 0 ? app.userId : 0);
        }
        if ("com.huawei.android.FMRadio".equals(app.processName)) {
            releaseFMChannel();
        }
        if ("com.huawei.screenrecorder".equals(app.processName)) {
            UserInfo ui = getCurrentUser();
            Settings.System.putIntForUser(this.mContext.getContentResolver(), "show_touches", 0, ui != null ? ui.id : 0);
        }
        if ("com.huawei.vdrive".equals(app.processName)) {
            ((PowerManager) this.mContext.getSystemService("power")).setMirrorLinkPowerStatus(false);
            HwFrameworkFactory.getCoverManager().setCoverForbiddened(false);
        }
        boolean clearLaunchStartTime = true;
        HwAudioServiceManager.setSoundEffectState(true, app.processName, false, null);
        int pid = app.pid;
        if (restarting || !app.removed || !app.foregroundActivities) {
            clearLaunchStartTime = false;
        }
        if (!cleanUpApplicationRecordLocked(app, restarting, allowRestart, -1, false) && !restarting) {
            removeLruProcessLocked(app);
            if (pid > 0) {
                ProcessList.remove(pid);
            }
        }
        if (this.mProfileProc == app) {
            clearProfilerLocked();
        }
        boolean hasVisibleActivities = this.mStackSupervisor.handleAppDiedLocked(app);
        app.clearRecentTasks();
        app.activities.clear();
        app.hasClientActivities = false;
        if (app.instr != null) {
            clearBroadcastResource(app);
            Slog.w(TAG, "Crash of app " + app.processName + " running instrumentation " + app.instr.mClass);
            Bundle info = new Bundle();
            info.putString("shortMsg", "Process crashed.");
            finishInstrumentationLocked(app, 0, info);
        }
        if (!restarting && hasVisibleActivities) {
            this.mWindowManager.deferSurfaceLayout();
            try {
                if (!this.mStackSupervisor.resumeFocusedStackTopActivityLocked()) {
                    this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                }
            } finally {
                this.mWindowManager.continueSurfaceLayout();
            }
        }
        if (clearLaunchStartTime) {
            LaunchTimeTracker.Entry entry = this.mStackSupervisor.getLaunchTimeTracker().getEntry(this.mStackSupervisor.getWindowingMode());
            if (entry != null) {
                entry.mLaunchStartTime = 0;
            }
        }
    }

    private final int getLRURecordIndexForAppLocked(IApplicationThread thread) {
        IBinder threadBinder = thread.asBinder();
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord rec = this.mLruProcesses.get(i);
            if (rec != null && rec.thread != null && rec.thread.asBinder() == threadBinder) {
                return i;
            }
        }
        return -1;
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord getRecordForAppLocked(IApplicationThread thread) {
        if (thread == null) {
            return null;
        }
        int appIndex = getLRURecordIndexForAppLocked(thread);
        if (appIndex >= 0) {
            return this.mLruProcesses.get(appIndex);
        }
        IBinder threadBinder = thread.asBinder();
        ArrayMap<String, SparseArray<ProcessRecord>> pmap = this.mProcessNames.getMap();
        for (int i = pmap.size() - 1; i >= 0; i--) {
            SparseArray<ProcessRecord> procs = pmap.valueAt(i);
            int j = procs.size() - 1;
            while (j >= 0) {
                ProcessRecord proc = procs.valueAt(j);
                if (proc.thread == null || proc.thread.asBinder() != threadBinder) {
                    j--;
                } else {
                    Slog.wtf(TAG, "getRecordForApp: exists in name list but not in LRU list: " + proc);
                    return proc;
                }
            }
        }
        return null;
    }

    /* access modifiers changed from: package-private */
    public final void doLowMemReportIfNeededLocked(ProcessRecord dyingProc) {
        boolean haveBg = false;
        int i = this.mLruProcesses.size() - 1;
        while (true) {
            if (i < 0) {
                break;
            }
            ProcessRecord rec = this.mLruProcesses.get(i);
            if (rec.thread != null && rec.setProcState >= 15) {
                haveBg = true;
                break;
            }
            i--;
        }
        if (!haveBg) {
            boolean doReport = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
            if (doReport) {
                long now = SystemClock.uptimeMillis();
                if (now < this.mLastMemUsageReportTime + BackupAgentTimeoutParameters.DEFAULT_FULL_BACKUP_AGENT_TIMEOUT_MILLIS) {
                    doReport = false;
                } else {
                    this.mLastMemUsageReportTime = now;
                }
            }
            ArrayList<ProcessMemInfo> memInfos = doReport ? new ArrayList<>(this.mLruProcesses.size()) : null;
            EventLog.writeEvent(EventLogTags.AM_LOW_MEMORY, this.mLruProcesses.size());
            long now2 = SystemClock.uptimeMillis();
            for (int i2 = this.mLruProcesses.size() - 1; i2 >= 0; i2--) {
                ProcessRecord rec2 = this.mLruProcesses.get(i2);
                if (!(rec2 == dyingProc || rec2.thread == null)) {
                    if (doReport) {
                        ProcessMemInfo processMemInfo = new ProcessMemInfo(rec2.processName, rec2.pid, rec2.setAdj, rec2.setProcState, rec2.adjType, rec2.makeAdjReason());
                        memInfos.add(processMemInfo);
                    }
                    if (rec2.lastLowMemory + this.mConstants.GC_MIN_INTERVAL <= now2) {
                        if (rec2.setAdj <= 400) {
                            rec2.lastRequestedGc = 0;
                        } else {
                            rec2.lastRequestedGc = rec2.lastLowMemory;
                        }
                        rec2.reportLowMemory = true;
                        rec2.lastLowMemory = now2;
                        this.mProcessesToGc.remove(rec2);
                        addProcessToGcListLocked(rec2);
                    }
                }
            }
            ProcessRecord processRecord = dyingProc;
            if (doReport) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(33, memInfos));
            }
            scheduleAppGcsLocked();
            return;
        }
        ProcessRecord processRecord2 = dyingProc;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final void appDiedLocked(ProcessRecord app) {
        appDiedLocked(app, app.pid, app.thread, false);
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x003c, code lost:
        monitor-enter(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:?, code lost:
        r1.noteProcessDiedLocked(r12.info.uid, r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0044, code lost:
        monitor-exit(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0048, code lost:
        if (r12.killed != false) goto L_0x0056;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x004a, code lost:
        if (r15 != false) goto L_0x004f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x004c, code lost:
        android.os.Process.killProcessQuiet(r13);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x004f, code lost:
        killProcessGroup(r12.uid, r13);
        r12.killed = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x005d, code lost:
        if (r12.pid != r13) goto L_0x0168;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0061, code lost:
        if (r12.thread == null) goto L_0x0168;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x006d, code lost:
        if (r12.thread.asBinder() != r14.asBinder()) goto L_0x0168;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0071, code lost:
        if (r12.instr != null) goto L_0x0075;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0073, code lost:
        r0 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x0075, code lost:
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0076, code lost:
        r7 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x0079, code lost:
        if (r12.killedByAm != false) goto L_0x00ca;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x007b, code lost:
        reportUidInfoMessageLocked(TAG, "Process " + r12.processName + " (pid " + r13 + ") has died: " + com.android.server.am.ProcessList.makeOomAdjString(r12.setAdj) + com.android.server.am.ProcessList.makeProcStateString(r12.setProcState), r12.info.uid);
        r11.mAllowLowerMemLevel = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00c0, code lost:
        if ("com.huawei.android.launcher".equals(r12.processName) == false) goto L_0x00cd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x00c2, code lost:
        android.util.Jlog.d(310, "JLID_LAUNCHER_KILLED");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00ca, code lost:
        r11.mAllowLowerMemLevel = false;
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00cd, code lost:
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_PROC_DIED, new java.lang.Object[]{java.lang.Integer.valueOf(r12.userId), java.lang.Integer.valueOf(r12.pid), r12.processName, java.lang.Integer.valueOf(r12.setAdj), java.lang.Integer.valueOf(r12.setProcState)});
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00fa, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_CLEANUP == false) goto L_0x0126;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00fc, code lost:
        android.util.Slog.v(TAG, "Dying app: " + r12 + ", pid: " + r13 + ", thread: " + r14.asBinder());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x012a, code lost:
        if (android.util.Jlog.isUBMEnable() == false) goto L_0x015a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x012c, code lost:
        android.util.Jlog.d(269, "AE#" + r12.processName + "(" + r12.info.versionCode + "," + r12.pid);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x015a, code lost:
        handleAppDiedLocked(r12, false, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x015d, code lost:
        if (r7 == false) goto L_0x0162;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x015f, code lost:
        updateOomAdjLocked();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x0162, code lost:
        if (r0 == false) goto L_0x01d7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x0164, code lost:
        doLowMemReportIfNeededLocked(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x016a, code lost:
        if (r12.pid == r13) goto L_0x01b9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x016c, code lost:
        reportUidInfoMessageLocked(TAG, "Process " + r12.processName + " (pid " + r13 + ") has died and restarted (pid " + r12.pid + ").", r12.info.uid);
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_PROC_DIED, new java.lang.Object[]{java.lang.Integer.valueOf(r12.userId), java.lang.Integer.valueOf(r12.pid), r12.processName});
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x01bb, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_PROCESSES == false) goto L_0x01d7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x01bd, code lost:
        android.util.Slog.d(TAG, "Received spurious death notification for thread " + r14.asBinder());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x01db, code lost:
        if (com.android.server.am.MemoryStatUtil.hasMemcg() != false) goto L_0x01e6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x01dd, code lost:
        android.util.StatsLog.write(65, android.os.SystemClock.elapsedRealtime());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x01e6, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0036, code lost:
        r1 = r11.mBatteryStatsService.getActiveStatistics();
     */
    @GuardedBy("this")
    public final void appDiedLocked(ProcessRecord app, int pid, IApplicationThread thread, boolean fromBinderDied) {
        synchronized (this.mPidsSelfLocked) {
            if (this.mPidsSelfLocked.get(pid) != app) {
                Slog.w(TAG, "Spurious death for " + app + ", curProc for " + pid + ": " + curProc);
            }
        }
    }

    public static File dumpStackTraces(ProcessRecord app, boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> arrayList) {
        if ((app == null || app.info == null || (app.info.flags & NetworkConstants.ICMPV6_ECHO_REPLY_TYPE) != 0) || Log.HWINFO) {
            int[] pids = Process.getPidsForCommands(Watchdog.NATIVE_STACKS_OF_INTEREST);
            ArrayList<Integer> nativePids = null;
            if (pids != null) {
                nativePids = new ArrayList<>(pids.length);
                for (int i : pids) {
                    nativePids.add(Integer.valueOf(i));
                }
            }
            if (mAppEyeBinderBlock != null && clearTraces) {
                ZrHungData data = new ZrHungData();
                data.putString("method", "addBinderPid");
                data.putIntegerArrayList("notnativepids", firstPids);
                data.putIntegerArrayList("nativepids", nativePids);
                data.putInt(IZRHungService.PARAM_PID, app.pid);
                data.putInt("tid", app.pid);
                mAppEyeBinderBlock.check(data);
            }
            return dumpStackTraces(true, firstPids, processCpuTracker, lastPids, nativePids);
        }
        firstPids.clear();
        firstPids.add(Integer.valueOf(app.pid));
        return dumpStackTraces(true, firstPids, processCpuTracker, lastPids, (ArrayList<Integer>) null);
    }

    public static File dumpStackTraces(boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        File tracesFile;
        ArrayList<Integer> extraPids = null;
        if (processCpuTracker != null) {
            processCpuTracker.init();
            try {
                Thread.sleep(NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
            } catch (InterruptedException e) {
            }
            processCpuTracker.update();
            int N = processCpuTracker.countWorkingStats();
            extraPids = new ArrayList<>();
            for (int i = 0; i < N && extraPids.size() < 5; i++) {
                ProcessCpuTracker.Stats stats = processCpuTracker.getWorkingStats(i);
                if (lastPids.indexOfKey(stats.pid) >= 0) {
                    extraPids.add(Integer.valueOf(stats.pid));
                }
            }
        }
        boolean useTombstonedForJavaTraces = false;
        String tracesDirProp = SystemProperties.get("dalvik.vm.stack-trace-dir", BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
        if (tracesDirProp.isEmpty()) {
            String globalTracesPath = SystemProperties.get("dalvik.vm.stack-trace-file", null);
            if (globalTracesPath.isEmpty()) {
                Slog.w(TAG, "dumpStackTraces: no trace path configured");
                return null;
            }
            tracesFile = new File(globalTracesPath);
            if (clearTraces) {
                try {
                    if (tracesFile.exists()) {
                        tracesFile.delete();
                    }
                } catch (IOException e2) {
                    Slog.w(TAG, "Unable to prepare ANR traces file: " + tracesFile, e2);
                    return null;
                }
            }
            tracesFile.createNewFile();
            FileUtils.setPermissions(globalTracesPath, 438, -1, -1);
        } else {
            File tracesDir = new File(tracesDirProp);
            maybePruneOldTraces(tracesDir);
            tracesFile = createAnrDumpFile(tracesDir);
            if (tracesFile == null) {
                return null;
            }
            useTombstonedForJavaTraces = true;
        }
        dumpStackTraces(tracesFile.getAbsolutePath(), firstPids, nativePids, extraPids, useTombstonedForJavaTraces);
        return tracesFile;
    }

    private static synchronized File createAnrDumpFile(File tracesDir) {
        synchronized (ActivityManagerService.class) {
            boostPriorityForLockedSection();
            if (sAnrFileDateFormat == null) {
                sAnrFileDateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
            }
            String formattedDate = sAnrFileDateFormat.format(new Date());
            File anrFile = new File(tracesDir, "anr_" + formattedDate);
            try {
                if (anrFile.createNewFile()) {
                    FileUtils.setPermissions(anrFile.getAbsolutePath(), 384, -1, -1);
                    resetPriorityAfterLockedSection();
                    return anrFile;
                }
                Slog.w(TAG, "Unable to create ANR dump file: createNewFile failed");
                resetPriorityAfterLockedSection();
                return null;
            } catch (IOException ioe) {
                Slog.w(TAG, "Exception creating ANR dump file:", ioe);
            }
        }
    }

    private static void maybePruneOldTraces(File tracesDir) {
        long now = System.currentTimeMillis();
        File[] traceFiles = tracesDir.listFiles();
        if (traceFiles != null) {
            for (File file : traceFiles) {
                if (now - file.lastModified() > 86400000 && !file.delete()) {
                    Slog.w(TAG, "Unable to prune stale trace file: " + file);
                }
            }
        }
    }

    private static long dumpJavaTracesTombstoned(int pid, String fileName, long timeoutMs) {
        long timeStart = SystemClock.elapsedRealtime();
        if (!Debug.dumpJavaBacktraceToFileTimeout(pid, fileName, (int) (timeoutMs / 1000))) {
            Debug.dumpNativeBacktraceToFileTimeout(pid, fileName, 2);
        }
        return SystemClock.elapsedRealtime() - timeStart;
    }

    private static void dumpStackTraces(String tracesFile, ArrayList<Integer> firstPids, ArrayList<Integer> nativePids, ArrayList<Integer> extraPids, boolean useTombstonedForJavaTraces) {
        DumpStackFileObserver observer;
        long timeTaken;
        long timeTaken2;
        String str = tracesFile;
        ArrayList<Integer> arrayList = firstPids;
        if (mAppEyeBinderBlock != null) {
            ZrHungData data = new ZrHungData();
            data.putString("method", "readTransactionInSubThread");
            mAppEyeBinderBlock.check(data);
        }
        if (useTombstonedForJavaTraces) {
            observer = null;
        } else {
            observer = new DumpStackFileObserver(str);
        }
        DumpStackFileObserver observer2 = observer;
        long remainingTime = 20000;
        if (observer2 != null) {
            try {
                observer2.startWatching();
            } catch (Throwable th) {
                if (observer2 != null) {
                    observer2.stopWatching();
                }
                throw th;
            }
        }
        if (arrayList != null) {
            int num = firstPids.size();
            for (int i = 0; i < num; i++) {
                if (useTombstonedForJavaTraces) {
                    timeTaken2 = dumpJavaTracesTombstoned(arrayList.get(i).intValue(), str, remainingTime);
                } else {
                    timeTaken2 = observer2.dumpWithTimeout(arrayList.get(i).intValue(), remainingTime);
                }
                remainingTime -= timeTaken2;
                if (remainingTime <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current firstPid=" + arrayList.get(i) + "); deadline exceeded.");
                    if (observer2 != null) {
                        observer2.stopWatching();
                    }
                    return;
                }
            }
        }
        if (nativePids != null) {
            Iterator<Integer> it = nativePids.iterator();
            while (it.hasNext()) {
                int pid = it.next().intValue();
                long nativeDumpTimeoutMs = Math.min(2000, remainingTime);
                long start = SystemClock.elapsedRealtime();
                Debug.dumpNativeBacktraceToFileTimeout(pid, str, (int) (nativeDumpTimeoutMs / 1000));
                remainingTime -= SystemClock.elapsedRealtime() - start;
                if (remainingTime <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current native pid=" + pid + "); deadline exceeded.");
                    if (observer2 != null) {
                        observer2.stopWatching();
                    }
                    return;
                }
                ArrayList<Integer> arrayList2 = firstPids;
            }
        }
        if (extraPids != null) {
            Iterator<Integer> it2 = extraPids.iterator();
            while (it2.hasNext()) {
                int pid2 = it2.next().intValue();
                if (useTombstonedForJavaTraces) {
                    timeTaken = dumpJavaTracesTombstoned(pid2, str, remainingTime);
                } else {
                    timeTaken = observer2.dumpWithTimeout(pid2, remainingTime);
                }
                remainingTime -= timeTaken;
                if (remainingTime <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current extra pid=" + pid2 + "); deadline exceeded.");
                    if (observer2 != null) {
                        observer2.stopWatching();
                    }
                    return;
                }
            }
        }
        if (mAppEyeBinderBlock != null) {
            ZrHungData data2 = new ZrHungData();
            data2.putString("method", "writeTransactionToTrace");
            data2.putString("path", str);
            mAppEyeBinderBlock.check(data2);
        }
        if (observer2 != null) {
            observer2.stopWatching();
        }
    }

    /* access modifiers changed from: package-private */
    public final void logAppTooSlow(ProcessRecord app, long startTime, String msg) {
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final void showLaunchWarningLocked(final ActivityRecord cur, final ActivityRecord next) {
        if (!this.mLaunchWarningShown) {
            this.mLaunchWarningShown = true;
            this.mUiHandler.post(new Runnable() {
                public void run() {
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            final Dialog d = new LaunchWarningWindow(ActivityManagerService.this.mContext, cur, next);
                            d.show();
                            ActivityManagerService.this.mUiHandler.postDelayed(new Runnable() {
                                public void run() {
                                    synchronized (ActivityManagerService.this) {
                                        try {
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            d.dismiss();
                                            ActivityManagerService.this.mLaunchWarningShown = false;
                                        } catch (Throwable th) {
                                            while (true) {
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                }
                            }, 4000);
                        } catch (Throwable th) {
                            while (true) {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            });
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:101:0x016a, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x016b, code lost:
        r6 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00c6, code lost:
        if (r15.isInstantApp() == false) goto L_0x00c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:?, code lost:
        resetPriorityAfterLockedSection();
        r5 = r21;
        r3 = r15;
        r4 = r10;
        r6 = r9;
        r1 = new com.android.server.am.ActivityManagerService.AnonymousClass7(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:?, code lost:
        r13.clearApplicationUserData(r8, r1, r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x010d, code lost:
        if (r15 == null) goto L_0x015c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:71:0x010f, code lost:
        if (r24 != false) goto L_0x013b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:0x0111, code lost:
        monitor-enter(r22);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:?, code lost:
        boostPriorityForLockedSection();
        removeUriPermissionsForPackageLocked(r8, r10, true, false);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x011a, code lost:
        monitor-exit(r22);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:?, code lost:
        resetPriorityAfterLockedSection();
        r0 = android.app.NotificationManager.getService();
        r3 = r15.uid;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x0128, code lost:
        if (r19 != r15.uid) goto L_0x012c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x012a, code lost:
        r4 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x012c, code lost:
        r4 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:?, code lost:
        r0.clearData(r8, r3, r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x0131, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:85:0x0132, code lost:
        r6 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x0138, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x0139, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x013b, code lost:
        r6 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x013d, code lost:
        ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).cancelJobsForUid(r15.uid, "clear data");
        ((com.android.server.AlarmManagerInternal) com.android.server.LocalServices.getService(com.android.server.AlarmManagerInternal.class)).removeAlarmsForUid(r15.uid);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x015c, code lost:
        r6 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x0160, code lost:
        r6 = r19;
     */
    /* JADX WARNING: Removed duplicated region for block: B:103:0x016e  */
    /* JADX WARNING: Removed duplicated region for block: B:108:0x0188  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x005d  */
    /* JADX WARNING: Removed duplicated region for block: B:33:0x00a8  */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x00c2 A[SYNTHETIC, Splitter:B:43:0x00c2] */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x00cc  */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x00dd  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x00df  */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x00e3  */
    /* JADX WARNING: Unknown top exception splitter block from list: {B:86:0x0134=Splitter:B:86:0x0134, B:82:0x012d=Splitter:B:82:0x012d} */
    public boolean clearApplicationUserData(String packageName, boolean keepState, IPackageDataObserver observer, int userId) {
        ApplicationInfo appInfo;
        boolean clearingOwnUidData;
        int uid;
        int pid;
        boolean hasInstantMetadata;
        boolean isUninstalledAppWithoutInstantMetadata;
        boolean z;
        final boolean isInstantApp;
        String str = packageName;
        IPackageDataObserver iPackageDataObserver = observer;
        enforceNotIsolatedCaller("clearApplicationUserData");
        int uid2 = Binder.getCallingUid();
        int pid2 = Binder.getCallingPid();
        int resolvedUserId = this.mUserController.handleIncomingUser(pid2, uid2, userId, false, 2, "clearApplicationUserData", null);
        long callingId = Binder.clearCallingIdentity();
        try {
            IPackageManager pm = AppGlobals.getPackageManager();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (!getPackageManagerInternalLocked().isPackageDataProtected(resolvedUserId, str)) {
                        ApplicationInfo applicationInfo = null;
                        try {
                            applicationInfo = pm.getApplicationInfo(str, 8192, resolvedUserId);
                        } catch (RemoteException e) {
                        }
                        ApplicationInfo applicationInfo2 = applicationInfo;
                        appInfo = applicationInfo2;
                        if (appInfo != null) {
                            try {
                                if (appInfo.uid == uid2) {
                                    clearingOwnUidData = true;
                                    if (clearingOwnUidData) {
                                        ApplicationInfo applicationInfo3 = applicationInfo2;
                                        pid = pid2;
                                        uid = uid2;
                                        try {
                                            if (checkComponentPermission("android.permission.CLEAR_APP_USER_DATA", pid2, uid2, -1, true) != 0) {
                                                throw new SecurityException("PID " + pid + " does not have permission " + "android.permission.CLEAR_APP_USER_DATA" + " to clear data of package " + str);
                                            }
                                        } catch (Throwable th) {
                                            th = th;
                                            int i = uid;
                                            try {
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            } catch (Throwable th2) {
                                                th = th2;
                                                Binder.restoreCallingIdentity(callingId);
                                                throw th;
                                            }
                                        }
                                    } else {
                                        uid = uid2;
                                        ApplicationInfo applicationInfo4 = applicationInfo2;
                                        pid = pid2;
                                    }
                                    hasInstantMetadata = getPackageManagerInternalLocked().hasInstantApplicationMetadata(str, resolvedUserId);
                                    isUninstalledAppWithoutInstantMetadata = appInfo != null && !hasInstantMetadata;
                                    if (appInfo != null) {
                                    }
                                    if (!hasInstantMetadata) {
                                        z = false;
                                        boolean isInstantApp2 = z;
                                        boolean canAccessInstantApps = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", pid, uid, -1, true) == 0;
                                        if (isUninstalledAppWithoutInstantMetadata) {
                                        } else if (isInstantApp2 && !canAccessInstantApps) {
                                            int i2 = uid;
                                        } else if (appInfo != null) {
                                            forceStopPackageLocked(str, appInfo.uid, "clear data");
                                            this.mRecentTasks.removeTasksByPackageName(str, resolvedUserId);
                                        }
                                        Slog.w(TAG, "Invalid packageName: " + str);
                                        if (iPackageDataObserver != null) {
                                            iPackageDataObserver.onRemoveCompleted(str, false);
                                        }
                                    }
                                    z = true;
                                    boolean isInstantApp22 = z;
                                    boolean canAccessInstantApps2 = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", pid, uid, -1, true) == 0;
                                    if (isUninstalledAppWithoutInstantMetadata) {
                                    }
                                    Slog.w(TAG, "Invalid packageName: " + str);
                                    if (iPackageDataObserver != null) {
                                    }
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                int i3 = pid2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        clearingOwnUidData = false;
                        if (clearingOwnUidData) {
                        }
                        try {
                            hasInstantMetadata = getPackageManagerInternalLocked().hasInstantApplicationMetadata(str, resolvedUserId);
                            isUninstalledAppWithoutInstantMetadata = appInfo != null && !hasInstantMetadata;
                            if (appInfo != null) {
                            }
                            if (!hasInstantMetadata) {
                            }
                            z = true;
                            boolean isInstantApp222 = z;
                            boolean canAccessInstantApps22 = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", pid, uid, -1, true) == 0;
                            if (isUninstalledAppWithoutInstantMetadata) {
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            int i4 = uid;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                        try {
                            Slog.w(TAG, "Invalid packageName: " + str);
                            if (iPackageDataObserver != null) {
                            }
                        } catch (RemoteException e2) {
                            RemoteException remoteException = e2;
                            Slog.i(TAG, "Observer no longer exists.");
                        } catch (Throwable th5) {
                            th = th5;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else {
                        throw new SecurityException("Cannot clear data for a protected package: " + str);
                    }
                } catch (Throwable th6) {
                    th = th6;
                    int i5 = pid2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            Binder.restoreCallingIdentity(callingId);
            ApplicationInfo applicationInfo5 = appInfo;
            boolean z2 = isInstantApp;
            return true;
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(callingId);
            return false;
        } catch (Throwable th7) {
            th = th7;
            int i6 = pid2;
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:36:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x010b, code lost:
        r7 = r16 + 1;
        r8 = r17;
        r9 = r23;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x011e, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x011f, code lost:
        r1 = r23;
     */
    public void killBackgroundProcesses(String packageName, int userId) {
        long callingId;
        int appId;
        long callingId2;
        String str = packageName;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_KILLBACKGROUNDPROCESSES);
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0 || checkCallingPermission("android.permission.RESTART_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "killBackgroundProcesses", null);
            Slog.i(TAG, "killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
            int[] userIds = this.mUserController.expandUserId(userId2);
            long callingId3 = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                int length = userIds.length;
                int i = 0;
                while (i < length) {
                    try {
                        int targetUserId = userIds[i];
                        try {
                            appId = UserHandle.getAppId(pm.getPackageUid(str, 268435456, targetUserId));
                        } catch (RemoteException e) {
                            appId = -1;
                        }
                        if (appId == -1) {
                            try {
                                Slog.w(TAG, "Invalid packageName: " + str);
                                Binder.restoreCallingIdentity(callingId3);
                                return;
                            } catch (Throwable th) {
                                th = th;
                                callingId = callingId3;
                                Binder.restoreCallingIdentity(callingId);
                                throw th;
                            }
                        } else {
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    int i2 = appId;
                                    int i3 = targetUserId;
                                    int i4 = i;
                                    int i5 = length;
                                    callingId2 = callingId3;
                                    try {
                                        killPackageProcessesLocked(str, appId, targetUserId, 500, false, true, true, false, REASON_BACKGROUND);
                                    } catch (Throwable th2) {
                                        th = th2;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    int i6 = appId;
                                    int i7 = targetUserId;
                                    callingId2 = callingId3;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        callingId = callingId3;
                        Binder.restoreCallingIdentity(callingId);
                        throw th;
                    }
                }
                Binder.restoreCallingIdentity(callingId3);
            } catch (Throwable th5) {
                th = th5;
                callingId = callingId3;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList<>();
                    int NP = this.mProcessNames.getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (!app.persistent) {
                                if (app.removed) {
                                    procs.add(app);
                                } else if (app.setAdj >= 900) {
                                    app.removed = true;
                                    procs.add(app);
                                }
                            }
                        }
                    }
                    int ip2 = procs.size();
                    for (int i = 0; i < ip2; i++) {
                        removeProcessLocked(procs.get(i), false, true, "kill all background");
                    }
                    this.mAllowLowerMemLevel = true;
                    updateOomAdjLocked();
                    doLowMemReportIfNeededLocked(null);
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    private void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
        int i = minTargetSdk;
        int i2 = maxProcState;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") == 0) {
            int i3 = 0;
            int isResolutionChanging = Settings.Global.getInt(this.mContext.getContentResolver(), APS_DISPLAY_RESOLUTION_CHANGING, 0);
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    boostPriorityForLockedSection();
                    ArrayList<ProcessRecord> procs = new ArrayList<>();
                    int NP = this.mProcessNames.getMap().size();
                    int ip = 0;
                    while (true) {
                        int i4 = 1;
                        if (ip >= NP) {
                            break;
                        }
                        SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                        int NA = apps.size();
                        int ia = i3;
                        while (ia < NA) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (app.processName != null && (app.processName.contains("WebViewLoader") || (i4 == isResolutionChanging && ("com.android.deskclock".equals(app.processName) || "com.huawei.aod".equals(app.processName) || "com.huawei.android.thememanager".equals(app.processName) || "com.huawei.security:SERVICE".equals(app.processName))))) {
                                Slog.d(TAG, "ROG is changing, and do not kill process: " + app.processName);
                            } else if (app.removed) {
                                procs.add(app);
                            } else if (((i < 0 || app.info.targetSdkVersion < i) && (i2 < 0 || app.setProcState > i2)) || "com.tencent.mm".equals(app.processName) || ("com.huawei.android.launcher".equals(app.processName) && 1 == isResolutionChanging)) {
                                app.removed = true;
                                procs.add(app);
                            }
                            ia++;
                            i4 = 1;
                        }
                        ip++;
                        i3 = 0;
                    }
                    int N = procs.size();
                    for (int i5 = 0; i5 < N; i5++) {
                        removeProcessLocked(procs.get(i5), false, true, "kill all background except");
                    }
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public void forceStopPackage(String packageName, int userId) {
        int[] iArr;
        IPackageManager pm;
        int i;
        int i2;
        int[] users;
        int i3;
        int callingPid;
        String str;
        String str2 = packageName;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int callingPid2 = Binder.getCallingPid();
            int userId2 = this.mUserController.handleIncomingUser(callingPid2, Binder.getCallingUid(), userId, true, 2, "forceStopPackage", null);
            long callingId = Binder.clearCallingIdentity();
            try {
                if (HwDeviceManager.disallowOp(3, str2)) {
                    try {
                        Slog.i(TAG, "[" + str2 + "] is Persistent app,won't be killed");
                        Binder.restoreCallingIdentity(callingId);
                    } catch (Throwable th) {
                        th = th;
                        int i4 = callingPid2;
                        Binder.restoreCallingIdentity(callingId);
                        throw th;
                    }
                } else {
                    IPackageManager pm2 = AppGlobals.getPackageManager();
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            boolean z = true;
                            int i5 = -1;
                            if (userId2 == -1) {
                                try {
                                    iArr = this.mUserController.getUsers();
                                } catch (RemoteException e) {
                                } catch (IllegalArgumentException e2) {
                                    IllegalArgumentException illegalArgumentException = e2;
                                    Slog.w(TAG, "Failed trying to unstop package " + str2 + ": " + e2);
                                } catch (Throwable th2) {
                                    th = th2;
                                    IPackageManager iPackageManager = pm2;
                                    int i6 = callingPid2;
                                }
                            } else {
                                iArr = new int[]{userId2};
                            }
                            int[] users2 = iArr;
                            int length = users2.length;
                            int i7 = 0;
                            while (i7 < length) {
                                int user = users2[i7];
                                if (getPackageManagerInternalLocked().isPackageStateProtected(str2, user)) {
                                    Slog.w(TAG, "Ignoring request to force stop protected package " + str2 + " u" + user);
                                    resetPriorityAfterLockedSection();
                                    Binder.restoreCallingIdentity(callingId);
                                    return;
                                }
                                int pkgUid = i5;
                                try {
                                    pkgUid = pm2.getPackageUid(str2, 268435456, user);
                                } catch (RemoteException e3) {
                                }
                                if (pkgUid == i5) {
                                    Slog.w(TAG, "Invalid packageName: " + str2);
                                    i = i7;
                                    i3 = length;
                                    users = users2;
                                    pm = pm2;
                                    i2 = -1;
                                    callingPid = callingPid2;
                                } else {
                                    pm2.setPackageStoppedState(str2, z, user);
                                    if (this.mUserController.isUserRunning(user, 0)) {
                                        int pkgUid2 = pkgUid;
                                        int i8 = user;
                                        i = i7;
                                        i3 = length;
                                        users = users2;
                                        i2 = -1;
                                        pm = pm2;
                                        callingPid = callingPid2;
                                        try {
                                            this.mDAProxy.notifyProcessWillDie(true, false, false, str2, -1, -1);
                                            String reason = this.mLocalStopReason.get();
                                            StringBuilder sb = new StringBuilder();
                                            sb.append("from pid ");
                                            sb.append(callingPid);
                                            if (reason == null) {
                                                str = BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                                            } else {
                                                str = " " + reason;
                                            }
                                            sb.append(str);
                                            sb.append(callingPid == Process.myPid() ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : REASON_STOP_BY_APP);
                                            forceStopPackageLocked(str2, pkgUid2, sb.toString());
                                            this.mLocalStopReason.set(null);
                                            finishForceStopPackageLocked(str2, pkgUid2);
                                            this.mHwAMSEx.reportAppDiedMsg(userId2, str2, callingPid, "forceStop" + reason);
                                        } catch (Throwable th3) {
                                            th = th3;
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    } else {
                                        i = i7;
                                        i3 = length;
                                        users = users2;
                                        pm = pm2;
                                        i2 = -1;
                                        callingPid = callingPid2;
                                    }
                                }
                                i7 = i + 1;
                                callingPid2 = callingPid;
                                length = i3;
                                users2 = users;
                                i5 = i2;
                                pm2 = pm;
                                z = true;
                            }
                            int i9 = callingPid2;
                            try {
                                resetPriorityAfterLockedSection();
                                Binder.restoreCallingIdentity(callingId);
                            } catch (Throwable th4) {
                                th = th4;
                                Binder.restoreCallingIdentity(callingId);
                                throw th;
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            IPackageManager iPackageManager2 = pm2;
                            int i10 = callingPid2;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
            } catch (Throwable th6) {
                th = th6;
                int i11 = callingPid2;
                Binder.restoreCallingIdentity(callingId);
                throw th;
            }
        } else {
            String msg = "Permission Denial: forceStopPackage() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0037, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x003a, code lost:
        return;
     */
    public void addPackageDependency(String packageName) {
        ProcessRecord proc;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (Binder.getCallingPid() == Process.myPid()) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                }
                if (proc != null) {
                    if (proc.pkgDeps == null) {
                        proc.pkgDeps = new ArraySet<>(1);
                    }
                    proc.pkgDeps.add(packageName);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void killApplication(String pkg, int appId, int userId, String reason) {
        if (pkg != null) {
            if ("vold reset".equals(reason) && "com.android.providers.media".equals(pkg)) {
                this.mHwAMSEx.killApplication(pkg, appId, userId, reason);
            } else if (appId < 0) {
                Slog.w(TAG, "Invalid appid specified for pkg : " + pkg);
            } else {
                int callerUid = Binder.getCallingUid();
                if (UserHandle.getAppId(callerUid) == 1000) {
                    Message msg = this.mHandler.obtainMessage(22);
                    msg.arg1 = appId;
                    msg.arg2 = userId;
                    Bundle bundle = new Bundle();
                    bundle.putString(AbsLocationManagerService.DEL_PKG, pkg);
                    bundle.putString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
                    msg.obj = bundle;
                    this.mHandler.sendMessage(msg);
                    return;
                }
                throw new SecurityException(callerUid + " cannot kill pkg: " + pkg);
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:25:?, code lost:
        resetPriorityAfterLockedSection();
        r8.mWindowManager.closeSystemDialogs(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0066, code lost:
        monitor-enter(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:?, code lost:
        boostPriorityForLockedSection();
        closeSystemDialogsLocked(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x006d, code lost:
        monitor-exit(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x0071, code lost:
        android.os.Binder.restoreCallingIdentity(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0075, code lost:
        return;
     */
    public void closeSystemDialogs(String reason) {
        ProcessRecord proc;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_CLOSESYSTEMDIALOGS);
        enforceNotIsolatedCaller("closeSystemDialogs");
        int pid = Binder.getCallingPid();
        int uid = Binder.getCallingUid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (uid >= 10000) {
                        synchronized (this.mPidsSelfLocked) {
                            proc = this.mPidsSelfLocked.get(pid);
                        }
                        if (proc.curRawAdj > 200) {
                            Slog.w(TAG, "Ignoring closeSystemDialogs " + reason + " from background process " + proc);
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(origId);
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } catch (Throwable th2) {
            Binder.restoreCallingIdentity(origId);
            throw th2;
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void closeSystemDialogsLocked(String reason) {
        String str = reason;
        Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
        intent.addFlags(1342177280);
        if (str != null) {
            intent.putExtra(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, str);
        }
        this.mStackSupervisor.closeSystemDialogsLocked();
        broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, -1, 1000, -1);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:21:0x003b, code lost:
        resetPriorityAfterLockedSection();
        r3[r4] = new android.os.Debug.MemoryInfo();
        r8 = android.os.SystemClock.currentThreadTimeMillis();
        android.os.Debug.getMemoryInfo(r2[r4], r3[r4]);
        r10 = android.os.SystemClock.currentThreadTimeMillis();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0054, code lost:
        if (r6 == null) goto L_0x00a9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0056, code lost:
        monitor-enter(r25);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x005c, code lost:
        if (r6.thread == null) goto L_0x0096;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x0060, code lost:
        if (r6.setAdj != r7) goto L_0x0096;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0078, code lost:
        r24 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:?, code lost:
        r6.baseProcessTracker.addPss((long) r3[r4].getTotalPss(), (long) r3[r4].getTotalUss(), (long) r3[r4].getTotalRss(), false, 4, r10 - r8, r6.pkgList);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x008c, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x008d, code lost:
        r1 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x0090, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x0091, code lost:
        r24 = r3;
        r1 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0096, code lost:
        r24 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x0098, code lost:
        r1 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:?, code lost:
        monitor-exit(r25);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x009b, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x009f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x00a0, code lost:
        r24 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:?, code lost:
        monitor-exit(r25);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00a3, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00a6, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00a7, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x00a9, code lost:
        r24 = r3;
     */
    public Debug.MemoryInfo[] getProcessMemoryInfo(int[] pids) {
        int i;
        Debug.MemoryInfo[] infos;
        ActivityManagerService activityManagerService = this;
        int[] iArr = pids;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETPROCESSMEMORYINFO);
        activityManagerService.enforceNotIsolatedCaller("getProcessMemoryInfo");
        Debug.MemoryInfo[] infos2 = new Debug.MemoryInfo[iArr.length];
        int i2 = iArr.length - 1;
        while (true) {
            int i3 = i2;
            if (i3 < 0) {
                return infos2;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (activityManagerService.mPidsSelfLocked) {
                        try {
                            ProcessRecord proc = activityManagerService.mPidsSelfLocked.get(iArr[i3]);
                            if (proc != null) {
                                try {
                                    i = proc.setAdj;
                                } catch (Throwable th) {
                                    th = th;
                                    Debug.MemoryInfo[] memoryInfoArr = infos2;
                                }
                            } else {
                                i = 0;
                            }
                            int oomAdj = i;
                        } catch (Throwable th2) {
                            th = th2;
                            Debug.MemoryInfo[] memoryInfoArr2 = infos2;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th3) {
                                    th = th3;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            throw th;
                        }
                    }
                } catch (Throwable th4) {
                    th = th4;
                    Debug.MemoryInfo[] memoryInfoArr3 = infos2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            i2 = i3 - 1;
            infos2 = infos;
            iArr = pids;
        }
    }

    public long[] getProcessPss(int[] pids) {
        ProcessRecord proc;
        int oomAdj;
        int[] iArr = pids;
        enforceNotIsolatedCaller("getProcessPss");
        long[] pss = new long[iArr.length];
        int i = iArr.length - 1;
        while (true) {
            int i2 = i;
            if (i2 < 0) {
                return pss;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(iArr[i2]);
                        oomAdj = proc != null ? proc.setAdj : 0;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            long[] tmpUss = new long[3];
            long startTime = SystemClock.currentThreadTimeMillis();
            pss[i2] = Debug.getPss(iArr[i2], tmpUss, null);
            long endTime = SystemClock.currentThreadTimeMillis();
            if (proc != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (proc.thread != null && proc.setAdj == oomAdj) {
                            proc.baseProcessTracker.addPss(pss[i2], tmpUss[0], tmpUss[2], false, 3, endTime - startTime, proc.pkgList);
                        }
                    } catch (Throwable th2) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                            throw th2;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
            }
            i = i2 - 1;
        }
        while (true) {
        }
    }

    public void killApplicationProcess(String processName, int uid) {
        if (processName != null) {
            int callerUid = Binder.getCallingUid();
            if (callerUid == 1000) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        ProcessRecord app = getProcessRecordLocked(processName, uid, true);
                        if (app == null || app.thread == null) {
                            Slog.w(TAG, "Process/uid not found attempting kill of " + processName + " / " + uid);
                        } else {
                            try {
                                app.thread.scheduleSuicide();
                            } catch (RemoteException e) {
                            }
                        }
                    } catch (Throwable th) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                return;
            }
            throw new SecurityException(callerUid + " cannot kill app process: " + processName);
        }
    }

    @GuardedBy("this")
    private void forceStopPackageLocked(String packageName, int uid, String reason) {
        forceStopPackageLocked(packageName, UserHandle.getAppId(uid), false, false, true, false, false, UserHandle.getUserId(uid), reason);
    }

    /* access modifiers changed from: protected */
    @GuardedBy("this")
    public void finishForceStopPackageLocked(String packageName, int uid) {
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", packageName, null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        intent.putExtra("android.intent.extra.UID", uid);
        intent.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(uid));
        broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, UserHandle.getUserId(uid));
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00e4, code lost:
        if (r9.userId != r3) goto L_0x0079;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00ef, code lost:
        if (android.os.UserHandle.getAppId(r9.uid) != r2) goto L_0x0079;
     */
    @GuardedBy("this")
    public final boolean killPackageProcessesLocked(String packageName, int appId, int userId, int minOomAdj, boolean callerWillRestart, boolean allowRestart, boolean doit, boolean evenPersistent, String reason) {
        List<String> superWhiteListApp;
        int NP;
        String str = packageName;
        int i = appId;
        int i2 = userId;
        int i3 = minOomAdj;
        String str2 = reason;
        ArrayList<ProcessRecord> procs = new ArrayList<>();
        int NP2 = this.mProcessNames.getMap().size();
        List<String> superWhiteListApp2 = REASON_BACKGROUND.equals(str2) ? HwDeviceManager.getList(22) : null;
        for (int ip = 0; ip < NP2; ip++) {
            SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
            int NA = apps.size();
            int ia = 0;
            while (ia < NA) {
                ProcessRecord app = apps.valueAt(ia);
                if (superWhiteListApp2 == null || !superWhiteListApp2.contains(app.info.packageName)) {
                    NP = NP2;
                    superWhiteListApp = superWhiteListApp2;
                    if (app.persistent == 0 || evenPersistent) {
                        if (!app.removed) {
                            if (app.setAdj < i3) {
                                if (HwPCUtils.isPcCastModeInServer() && "relaunchIME".equals(str2) && str != null && str.equals(app.info.packageName)) {
                                    Slog.i(TAG, "relaunchIME:" + app.info.packageName + "," + app.setAdj + "-" + i3);
                                }
                            }
                            if (str == null) {
                                if (i2 != -1) {
                                }
                                if (i >= 0) {
                                }
                            } else {
                                boolean isDep = app.pkgDeps != null && app.pkgDeps.contains(str);
                                if ((isDep || UserHandle.getAppId(app.uid) == i) && ((i2 == -1 || app.userId == i2) && (app.pkgList.containsKey(str) || isDep))) {
                                    if (app == this.mHomeProcess && isDep && (str2.endsWith(REASON_STOP_BY_APP) || MTM_THREAD_NAME.equals(Thread.currentThread().getName()))) {
                                        Slog.i(TAG, "Don't kill current launcher!");
                                    } else if (HwPCUtils.isPcCastModeInServer() && str2.endsWith("relaunch due to in diff display") && str != null && isDep && ("com.huawei.desktop.systemui".equals(app.processName) || str.equals("com.google.android.gms"))) {
                                        Slog.i(TAG, "Don't kill pc systemui or com.google.android.gms when relaunch in diff display!");
                                    } else if (HwPCUtils.isPcCastModeInServer() && str2.endsWith("relaunchIME") && str != null && ("com.huawei.desktop.systemui".equals(app.processName) || "com.huawei.desktop.systemui".equals(app.processName))) {
                                        Slog.i(TAG, "Don't kill pc systemui when relaunch IME");
                                    } else if (HwPCUtils.isPcCastModeInServer() && str2.startsWith("stop") && !"com.huawei.desktop.systemui".equals(str) && isDep && "com.huawei.desktop.systemui".equals(app.processName)) {
                                        Slog.i(TAG, "Don't kill pc systemui who is in the same process grop as packageName!");
                                    }
                                }
                            }
                            if (!doit) {
                                return true;
                            }
                            app.removed = true;
                            procs.add(app);
                            ia++;
                            NP2 = NP;
                            superWhiteListApp2 = superWhiteListApp;
                        } else if (doit) {
                            procs.add(app);
                        }
                    }
                } else {
                    NP = NP2;
                    StringBuilder sb = new StringBuilder();
                    superWhiteListApp = superWhiteListApp2;
                    sb.append("[");
                    sb.append(app.info.packageName);
                    sb.append("] is super-whitelist app,won't be killed background");
                    Slog.i(TAG, sb.toString());
                }
                ia++;
                NP2 = NP;
                superWhiteListApp2 = superWhiteListApp;
            }
            List<String> list = superWhiteListApp2;
        }
        List<String> list2 = superWhiteListApp2;
        boolean z = true;
        int N = procs.size();
        for (int i4 = 0; i4 < N; i4++) {
            removeProcessLocked(procs.get(i4), callerWillRestart, allowRestart, str2);
        }
        boolean z2 = callerWillRestart;
        boolean z3 = allowRestart;
        updateOomAdjLocked();
        if (N <= 0) {
            z = false;
        }
        return z;
    }

    private void cleanupDisabledPackageComponentsLocked(String packageName, int userId, boolean killProcess, String[] changedClasses) {
        Set<String> disabledClasses;
        String str = packageName;
        int i = userId;
        String[] strArr = changedClasses;
        IPackageManager pm = AppGlobals.getPackageManager();
        if (strArr != null) {
            int enabled = 0;
            int i2 = strArr.length - 1;
            int i3 = 0;
            Set<String> disabledClasses2 = null;
            while (true) {
                if (i2 < 0) {
                    disabledClasses = disabledClasses2;
                    break;
                }
                String changedClass = strArr[i2];
                int i4 = 0;
                if (changedClass.equals(str)) {
                    try {
                        enabled = pm.getApplicationEnabledSetting(str, i != -1 ? i : 0);
                        if (!(enabled == 1 || enabled == 0)) {
                            i4 = 1;
                        }
                        i3 = i4;
                        if (i3 != 0) {
                            disabledClasses = null;
                            break;
                        }
                    } catch (Exception e) {
                        Exception exc = e;
                        return;
                    }
                } else {
                    try {
                        ComponentName componentName = new ComponentName(str, changedClass);
                        if (i != -1) {
                            i4 = i;
                        }
                        int enabled2 = pm.getComponentEnabledSetting(componentName, i4);
                        if (!(enabled2 == 1 || enabled2 == 0)) {
                            if (disabledClasses2 == null) {
                                disabledClasses2 = new ArraySet<>(strArr.length);
                            }
                            disabledClasses2.add(changedClass);
                        }
                        enabled = enabled2;
                    } catch (Exception e2) {
                        return;
                    }
                }
                i2--;
            }
            if (i3 != 0 || disabledClasses != null) {
                if (this.mStackSupervisor.finishDisabledPackageActivitiesLocked(str, disabledClasses, true, false, i) && this.mBooted) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                    this.mStackSupervisor.scheduleIdleLocked();
                }
                this.mRecentTasks.cleanupDisabledPackageTasksLocked(str, disabledClasses, i);
                String str2 = str;
                Set<String> set = disabledClasses;
                this.mServices.bringDownDisabledPackageServicesLocked(str2, set, i, false, killProcess, true);
                ArrayList<ContentProviderRecord> providers = new ArrayList<>();
                this.mProviderMap.collectPackageProvidersLocked(str2, set, true, false, i, providers);
                ArrayList<ContentProviderRecord> providers2 = providers;
                for (int i5 = providers2.size() - 1; i5 >= 0; i5--) {
                    removeDyingProviderLocked(null, providers2.get(i5), true);
                }
                for (int i6 = this.mBroadcastQueues.length - 1; i6 >= 0; i6--) {
                    this.mBroadcastQueues[i6].cleanupDisabledPackageReceiversLocked(str, disabledClasses, i, true);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final boolean clearBroadcastQueueForUserLocked(int userId) {
        boolean didSomething = false;
        for (int i = this.mBroadcastQueues.length - 1; i >= 0; i--) {
            didSomething |= this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(null, null, userId, true);
        }
        return didSomething;
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:13:0x0042  */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x00a0  */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x00b8  */
    /* JADX WARNING: Removed duplicated region for block: B:28:0x00ed  */
    /* JADX WARNING: Removed duplicated region for block: B:32:0x00f4  */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x0109 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x010a  */
    @GuardedBy("this")
    public final boolean forceStopPackageLocked(String packageName, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        int appId2;
        StringBuilder sb;
        boolean z;
        String str = packageName;
        boolean z2 = doit;
        int i = userId;
        String str2 = reason;
        if (i == -1 && str == null) {
            Slog.w(TAG, "Can't force stop all processes of all users, that is insane!");
        }
        if (appId < 0 && str != null) {
            try {
                appId2 = UserHandle.getAppId(AppGlobals.getPackageManager().getPackageUid(str, 268435456, 0));
            } catch (RemoteException e) {
            }
            boolean bDisableService = !this.mHwAMSEx.isApplyPersistAppPatch(str, appId2, i, callerWillRestart, evenPersistent, str2, null);
            if (z2) {
                if (str != null) {
                    Slog.i(TAG, "Force stopping " + str + " appid=" + appId2 + " user=" + i + ": " + str2);
                } else {
                    Slog.i(TAG, "Force stopping u" + i + ": " + str2);
                }
                this.mAppErrors.resetProcessCrashTimeLocked(str == null, appId2, i);
            }
            if (str != null) {
                sb = new StringBuilder();
                sb.append("stop user ");
                sb.append(i);
            } else {
                sb = new StringBuilder();
                sb.append("stop ");
                sb.append(str);
            }
            sb.append(str2);
            boolean didSomething = killPackageProcessesLocked(str, appId2, i, -10000, callerWillRestart, true, z2, evenPersistent, sb.toString()) | this.mActivityStartController.clearPendingActivityLaunches(str);
            if (this.mStackSupervisor.finishDisabledPackageActivitiesLocked(str, null, z2, evenPersistent, i)) {
                z = true;
            } else if (!z2) {
                return true;
            } else {
                z = true;
                didSomething = true;
            }
            boolean didSomething2 = didSomething;
            if (bDisableService && this.mServices.bringDownDisabledPackageServicesLocked(str, null, i, evenPersistent, true, z2)) {
                if (z2) {
                    return z;
                }
                didSomething2 = true;
            }
            if (str == null) {
                this.mStickyBroadcasts.remove(i);
            }
            ArrayList<ContentProviderRecord> providers = new ArrayList<>();
            if (this.mProviderMap.collectPackageProvidersLocked(str, (Set<String>) null, z2, evenPersistent, i, providers)) {
                if (!z2) {
                    return z;
                }
                didSomething2 = true;
            }
            for (int i2 = providers.size() - (z ? 1 : 0); i2 >= 0; i2--) {
                removeDyingProviderLocked(null, providers.get(i2), z);
            }
            removeUriPermissionsForPackageLocked(str, i, false, false);
            if (z2) {
                for (int i3 = this.mBroadcastQueues.length - z; i3 >= 0; i3--) {
                    didSomething2 |= this.mBroadcastQueues[i3].cleanupDisabledPackageReceiversLocked(str, null, i, z2);
                }
            }
            if ((str == null || uninstalling) && this.mIntentSenderRecords.size() > 0) {
                Iterator<WeakReference<PendingIntentRecord>> it = this.mIntentSenderRecords.values().iterator();
                while (it.hasNext()) {
                    WeakReference<PendingIntentRecord> wpir = it.next();
                    if (wpir == null) {
                        it.remove();
                    } else {
                        PendingIntentRecord pir = (PendingIntentRecord) wpir.get();
                        if (pir == null) {
                            it.remove();
                        } else {
                            if (str == null) {
                                if (pir.key.userId != i) {
                                    continue;
                                }
                            } else if (UserHandle.getAppId(pir.uid) == appId2) {
                                if (i != -1) {
                                    if (pir.key.userId != i) {
                                        continue;
                                    }
                                }
                                if (!str.equals(pir.key.packageName)) {
                                    continue;
                                }
                            } else {
                                continue;
                            }
                            if (!z2) {
                                return z;
                            }
                            didSomething2 = true;
                            it.remove();
                            makeIntentSenderCanceledLocked(pir);
                            if (!(pir.key.activity == null || pir.key.activity.pendingResults == null)) {
                                pir.key.activity.pendingResults.remove(pir.ref);
                            }
                        }
                    }
                }
            }
            if (z2) {
                if (purgeCache && str != null) {
                    AttributeCache ac = AttributeCache.instance();
                    if (ac != null) {
                        ac.removePackage(str);
                    }
                }
                if (this.mBooted) {
                    this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                    this.mStackSupervisor.scheduleIdleLocked();
                }
            }
            return didSomething2;
        }
        appId2 = appId;
        boolean bDisableService2 = !this.mHwAMSEx.isApplyPersistAppPatch(str, appId2, i, callerWillRestart, evenPersistent, str2, null);
        if (z2) {
        }
        if (str != null) {
        }
        sb.append(str2);
        boolean didSomething3 = killPackageProcessesLocked(str, appId2, i, -10000, callerWillRestart, true, z2, evenPersistent, sb.toString()) | this.mActivityStartController.clearPendingActivityLaunches(str);
        if (this.mStackSupervisor.finishDisabledPackageActivitiesLocked(str, null, z2, evenPersistent, i)) {
        }
        boolean didSomething22 = didSomething3;
        if (z2) {
        }
    }

    private final ProcessRecord removeProcessNameLocked(String name, int uid) {
        return removeProcessNameLocked(name, uid, null);
    }

    private final ProcessRecord removeProcessNameLocked(String name, int uid, ProcessRecord expecting) {
        ProcessRecord old = (ProcessRecord) this.mProcessNames.get(name, uid);
        if (expecting == null || old == expecting) {
            this.mProcessNames.remove(name, uid);
        }
        if (!(old == null || old.uidRecord == null)) {
            old.uidRecord.numProcs--;
            if (old.uidRecord.numProcs == 0) {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    Slog.i(TAG, "No more processes in " + old.uidRecord);
                }
                enqueueUidChangeLocked(old.uidRecord, -1, 1);
                EventLogTags.writeAmUidStopped(uid);
                this.mActiveUids.remove(uid);
                noteUidProcessState(uid, 19);
            }
            old.uidRecord = null;
        }
        this.mIsolatedProcesses.remove(uid);
        return old;
    }

    private final void addProcessNameLocked(ProcessRecord proc) {
        ProcessRecord old = removeProcessNameLocked(proc.processName, proc.uid);
        if (old == proc && proc.persistent) {
            Slog.w(TAG, "Re-adding persistent process " + proc);
        } else if (old != null) {
            Slog.wtf(TAG, "Already have existing proc " + old + " when adding " + proc);
        }
        UidRecord uidRec = this.mActiveUids.get(proc.uid);
        if (uidRec == null) {
            uidRec = new UidRecord(proc.uid);
            if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                Slog.i(TAG, "Creating new process uid: " + uidRec);
            }
            if (Arrays.binarySearch(this.mDeviceIdleTempWhitelist, UserHandle.getAppId(proc.uid)) >= 0 || this.mPendingTempWhitelist.indexOfKey(proc.uid) >= 0) {
                uidRec.curWhitelist = true;
                uidRec.setWhitelist = true;
            }
            uidRec.updateHasInternetPermission();
            this.mActiveUids.put(proc.uid, uidRec);
            EventLogTags.writeAmUidRunning(uidRec.uid);
            noteUidProcessState(uidRec.uid, uidRec.curProcState);
        }
        proc.uidRecord = uidRec;
        proc.renderThreadTid = 0;
        uidRec.numProcs++;
        this.mProcessNames.put(proc.processName, proc.uid, proc);
        if (this.mCustAms != null && this.mCustAms.isIQIEnable()) {
            proc.maxAdj = this.mCustAms.addProcesstoPersitList(proc);
        }
        if (proc.isolated) {
            this.mIsolatedProcesses.put(proc.uid, proc);
        }
    }

    /* access modifiers changed from: protected */
    @GuardedBy("this")
    public boolean removeProcessLocked(ProcessRecord app, boolean callerWillRestart, boolean allowRestart, String reason) {
        String name = app.processName;
        int uid = app.uid;
        if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            Slog.d(TAG, "Force removing proc " + app.toShortString() + " (" + name + SliceClientPermissions.SliceAuthority.DELIMITER + uid + ")");
        }
        if (((ProcessRecord) this.mProcessNames.get(name, uid)) != app) {
            Slog.w(TAG, "Ignoring remove of inactive process: " + app);
            return false;
        }
        removeProcessNameLocked(name, uid);
        if (this.mHeavyWeightProcess == app) {
            this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
            this.mHeavyWeightProcess = null;
        }
        boolean needRestart = false;
        if ((app.pid <= 0 || app.pid == MY_PID) && (app.pid != 0 || !app.pendingStart)) {
            this.mRemovedProcesses.add(app);
        } else {
            int pid = app.pid;
            if (pid > 0) {
                synchronized (this.mPidsSelfLocked) {
                    this.mPidsSelfLocked.remove(pid);
                    this.mHandler.removeMessages(20, app);
                }
                this.mDAProxy.notifyProcessDied(app.pid, app.uid);
                this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
                if (app.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
                    getPackageManagerInternalLocked().removeIsolatedUid(app.uid);
                }
            }
            boolean willRestart = false;
            if (app.persistent && !app.isolated) {
                if (!callerWillRestart) {
                    willRestart = true;
                } else {
                    needRestart = true;
                }
            }
            app.kill(reason, true);
            handleAppDiedLocked(app, willRestart, allowRestart);
            if (willRestart) {
                removeLruProcessLocked(app);
                addAppLocked(app.info, null, false, null);
            }
        }
        return needRestart;
    }

    /* access modifiers changed from: private */
    @GuardedBy("this")
    public final void processContentProviderPublishTimedOutLocked(ProcessRecord app) {
        cleanupAppInLaunchingProvidersLocked(app, true);
        removeProcessLocked(app, false, true, "timeout publishing content providers");
    }

    /* access modifiers changed from: private */
    public final void processStartTimedOutLocked(final ProcessRecord app) {
        int pid = app.pid;
        boolean gone = false;
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord knownApp = this.mPidsSelfLocked.get(pid);
            if (knownApp != null && knownApp.thread == null) {
                this.mPidsSelfLocked.remove(pid);
                gone = true;
            }
        }
        if (gone) {
            Slog.w(TAG, "Process " + app + " failed to attach");
            EventLog.writeEvent(EventLogTags.AM_PROCESS_START_TIMEOUT, new Object[]{Integer.valueOf(app.userId), Integer.valueOf(pid), Integer.valueOf(app.uid), app.processName});
            this.mDAProxy.notifyProcessDied(app.pid, app.uid);
            removeProcessNameLocked(app.processName, app.uid);
            if (this.mHeavyWeightProcess == app) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
                this.mHeavyWeightProcess = null;
            }
            this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
            cleanupAppInLaunchingProvidersLocked(app, true);
            this.mServices.processStartTimedOutLocked(app);
            app.kill("start timeout", true);
            if (app.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
            }
            removeLruProcessLocked(app);
            if (this.mBackupTarget != null && this.mBackupTarget.app.pid == pid) {
                Slog.w(TAG, "Unattached app died before backup, skipping");
                this.mHandler.post(new Runnable() {
                    public void run() {
                        try {
                            IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnected(app.info.packageName);
                        } catch (RemoteException e) {
                        }
                    }
                });
            }
            if (isPendingBroadcastProcessLocked(pid)) {
                Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
                skipPendingBroadcastLocked(pid);
                return;
            }
            return;
        }
        Slog.w(TAG, "Spurious process start timeout - pid not known for " + app);
    }

    /* JADX WARNING: Removed duplicated region for block: B:108:0x028f A[SYNTHETIC, Splitter:B:108:0x028f] */
    /* JADX WARNING: Removed duplicated region for block: B:126:0x02bd A[SYNTHETIC, Splitter:B:126:0x02bd] */
    /* JADX WARNING: Removed duplicated region for block: B:131:0x02cd A[SYNTHETIC, Splitter:B:131:0x02cd] */
    /* JADX WARNING: Removed duplicated region for block: B:136:0x02f3 A[SYNTHETIC, Splitter:B:136:0x02f3] */
    /* JADX WARNING: Removed duplicated region for block: B:138:0x02f8 A[SYNTHETIC, Splitter:B:138:0x02f8] */
    /* JADX WARNING: Removed duplicated region for block: B:142:0x0306 A[SYNTHETIC, Splitter:B:142:0x0306] */
    /* JADX WARNING: Removed duplicated region for block: B:155:0x0326 A[Catch:{ Exception -> 0x026d }] */
    /* JADX WARNING: Removed duplicated region for block: B:156:0x0332 A[Catch:{ Exception -> 0x026d }] */
    /* JADX WARNING: Removed duplicated region for block: B:159:0x033d A[Catch:{ Exception -> 0x026d }] */
    /* JADX WARNING: Removed duplicated region for block: B:160:0x0342  */
    /* JADX WARNING: Removed duplicated region for block: B:167:0x0353 A[SYNTHETIC, Splitter:B:167:0x0353] */
    /* JADX WARNING: Removed duplicated region for block: B:176:0x037b A[SYNTHETIC, Splitter:B:176:0x037b] */
    /* JADX WARNING: Removed duplicated region for block: B:199:0x03ef A[SYNTHETIC, Splitter:B:199:0x03ef] */
    /* JADX WARNING: Removed duplicated region for block: B:208:0x0405 A[SYNTHETIC, Splitter:B:208:0x0405] */
    /* JADX WARNING: Removed duplicated region for block: B:236:0x048d A[Catch:{ Exception -> 0x026d }] */
    /* JADX WARNING: Removed duplicated region for block: B:242:0x049d  */
    /* JADX WARNING: Removed duplicated region for block: B:253:0x04c7 A[SYNTHETIC, Splitter:B:253:0x04c7] */
    /* JADX WARNING: Removed duplicated region for block: B:260:0x0501 A[SYNTHETIC, Splitter:B:260:0x0501] */
    /* JADX WARNING: Removed duplicated region for block: B:263:0x0512 A[SYNTHETIC, Splitter:B:263:0x0512] */
    /* JADX WARNING: Removed duplicated region for block: B:297:0x05dd  */
    /* JADX WARNING: Removed duplicated region for block: B:304:0x05ed  */
    /* JADX WARNING: Removed duplicated region for block: B:315:0x0639 A[SYNTHETIC, Splitter:B:315:0x0639] */
    /* JADX WARNING: Removed duplicated region for block: B:322:0x065e A[SYNTHETIC, Splitter:B:322:0x065e] */
    /* JADX WARNING: Removed duplicated region for block: B:327:0x069b  */
    /* JADX WARNING: Removed duplicated region for block: B:333:0x06c7  */
    /* JADX WARNING: Removed duplicated region for block: B:335:0x06cb  */
    /* JADX WARNING: Removed duplicated region for block: B:354:0x0730  */
    /* JADX WARNING: Removed duplicated region for block: B:356:0x073b  */
    /* JADX WARNING: Removed duplicated region for block: B:37:0x00ea  */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x0123  */
    @GuardedBy("this")
    private final boolean attachApplicationLocked(IApplicationThread thread, int pid, int callingUid, long startSeq) {
        ProcessRecord app;
        ProcessRecord app2;
        int i;
        char c;
        String processName;
        boolean enableTrackAllocation;
        ApplicationInfo appInfo;
        String preBindAgent;
        ProfilerInfo profilerInfo;
        String str;
        ProfilerInfo profilerInfo2;
        String preBindAgent2;
        long startTime;
        char c2;
        boolean badApp;
        boolean z;
        ProfilerInfo profilerInfo3;
        int testMode;
        String preBindAgent3;
        ProfilerInfo profilerInfo4;
        ProfilerInfo profilerInfo5;
        boolean needsInfo;
        String preBindAgent4;
        String preBindAgent5;
        ProcessRecord app3;
        IApplicationThread iApplicationThread = thread;
        int i2 = pid;
        int i3 = callingUid;
        long j = startSeq;
        long startTime2 = SystemClock.uptimeMillis();
        if (i2 == MY_PID || i2 < 0) {
            app = null;
        } else {
            synchronized (this.mPidsSelfLocked) {
                app = this.mPidsSelfLocked.get(i2);
            }
            if (!(app == null || (app.startUid == i3 && app.startSeq == j))) {
                String processName2 = null;
                ProcessRecord pending = this.mPendingStarts.get(j);
                if (pending != null) {
                    processName2 = pending.processName;
                }
                String msg = "attachApplicationLocked process:" + processName2 + " startSeq:" + j + " pid:" + i2 + " belongs to another existing app:" + app.processName + " startSeq:" + app.startSeq;
                Slog.wtf(TAG, msg);
                EventLog.writeEvent(1397638484, new Object[]{"131105245", Integer.valueOf(app.startUid), msg});
                String str2 = processName2;
                ProcessRecord processRecord = pending;
                String str3 = msg;
                cleanUpApplicationRecordLocked(app, false, false, -1, true);
                this.mPidsSelfLocked.remove(i2);
                app = null;
            }
        }
        if (app == null && j > 0) {
            ProcessRecord pending2 = this.mPendingStarts.get(j);
            if (pending2 != null && pending2.startUid == i3 && pending2.startSeq == j) {
                ProcessRecord pending3 = pending2;
                app3 = app;
                i = 3;
                if (handleProcessStartedLocked(pending2, i2, pending2.usingWrapper, j, true)) {
                    app2 = pending3;
                    if (app2 == null) {
                        Slog.w(TAG, "No pending application record for pid " + i2 + " (IApplicationThread " + iApplicationThread + "); dropping process");
                        EventLog.writeEvent(EventLogTags.AM_DROP_PROCESS, i2);
                        if (i2 <= 0 || i2 == MY_PID) {
                            try {
                                thread.scheduleExit();
                            } catch (Exception e) {
                            }
                        } else {
                            Process.killProcessQuiet(pid);
                        }
                        return false;
                    }
                    if (app2.thread != null) {
                        c = 1;
                        handleAppDiedLocked(app2, true, true);
                    } else {
                        c = 1;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_ALL) {
                        Slog.v(TAG, "Binding process pid " + i2 + " to record " + app2);
                    }
                    String processName3 = app2.processName;
                    try {
                        AppDeathRecipient adr = new AppDeathRecipient(app2, i2, iApplicationThread);
                        thread.asBinder().linkToDeath(adr, 0);
                        app2.deathRecipient = adr;
                        Object[] objArr = new Object[i];
                        objArr[0] = Integer.valueOf(app2.userId);
                        objArr[c] = Integer.valueOf(app2.pid);
                        objArr[2] = app2.processName;
                        EventLog.writeEvent(EventLogTags.AM_PROC_BOUND, objArr);
                        app2.makeActive(iApplicationThread, this.mProcessStats);
                        app2.verifiedAdj = -10000;
                        app2.setAdj = -10000;
                        app2.curAdj = -10000;
                        app2.setSchedGroup = 2;
                        app2.curSchedGroup = 2;
                        app2.forcingToImportant = null;
                        updateProcessForegroundLocked(app2, false, false);
                        app2.hasShownUi = false;
                        app2.debugging = false;
                        app2.cached = false;
                        app2.killedByAm = false;
                        app2.killed = false;
                        app2.unlocked = StorageManager.isUserKeyUnlocked(app2.userId);
                        this.mHandler.removeMessages(20, app2);
                        char c3 = (this.mProcessesReady || isAllowedWhileBooting(app2.info)) ? c : 0;
                        List<ProviderInfo> providers = c3 != 0 ? generateApplicationProvidersLocked(app2) : null;
                        if (providers == null || !checkAppInLaunchingProvidersLocked(app2)) {
                            processName = processName3;
                        } else {
                            Message msg2 = this.mHandler.obtainMessage(57);
                            msg2.obj = app2;
                            processName = processName3;
                            this.mHandler.sendMessageDelayed(msg2, JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                            Flog.i(103, "sendMessage CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG for " + app2);
                        }
                        checkTime(startTime2, "attachApplicationLocked: before bindApplication");
                        if (c3 == 0) {
                            Slog.i(TAG, "Launching preboot mode app: " + app2);
                        }
                        StringBuilder sb = new StringBuilder();
                        sb.append("Binding process pid:");
                        sb.append(i2);
                        sb.append(" to procname:");
                        String processName4 = processName;
                        sb.append(processName4);
                        sb.append(" providers.size=");
                        sb.append(providers == null ? 0 : providers.size());
                        Flog.i(102, sb.toString());
                        int testMode2 = 0;
                        if (this.mDebugApp != null) {
                            try {
                                if (this.mDebugApp.equals(processName4)) {
                                    testMode2 = this.mWaitForDebugger ? 2 : 1;
                                    app2.debugging = true;
                                    if (this.mDebugTransient) {
                                        this.mDebugApp = this.mOrigDebugApp;
                                        this.mWaitForDebugger = this.mOrigWaitForDebugger;
                                    }
                                }
                            } catch (Exception e2) {
                                e = e2;
                                char c4 = c3;
                                int i4 = i2;
                                IApplicationThread iApplicationThread2 = iApplicationThread;
                            }
                        }
                        if (this.mTrackAllocationApp != null) {
                            if (this.mTrackAllocationApp.equals(processName4)) {
                                enableTrackAllocation = true;
                                this.mTrackAllocationApp = null;
                                boolean isRestrictedBackupMode = false;
                                if (this.mBackupTarget != null) {
                                    if (this.mBackupAppName.equals(processName4)) {
                                        isRestrictedBackupMode = this.mBackupTarget.appInfo.uid >= 10000 && (this.mBackupTarget.backupMode == 2 || this.mBackupTarget.backupMode == 3 || this.mBackupTarget.backupMode == 1);
                                    }
                                }
                                if (app2.instr != null) {
                                    notifyPackageUse(app2.instr.mClass.getPackageName(), 7);
                                }
                                if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                                    Slog.v(TAG_CONFIGURATION, "Binding proc " + processName4 + " with config " + getGlobalConfiguration());
                                }
                                appInfo = app2.instr == null ? app2.instr.mTargetInfo : app2.info;
                                app2.compat = compatibilityInfoForPackageLocked(appInfo);
                                if (this.mProfileApp != null) {
                                    if (this.mProfileApp.equals(processName4)) {
                                        this.mProfileProc = app2;
                                        if (this.mProfilerInfo != null) {
                                            if (this.mProfilerInfo.profileFile == null) {
                                                if (!this.mProfilerInfo.attachAgentDuringBind) {
                                                    needsInfo = false;
                                                    if (!needsInfo) {
                                                        preBindAgent4 = null;
                                                        profilerInfo = new ProfilerInfo(this.mProfilerInfo);
                                                    } else {
                                                        preBindAgent4 = null;
                                                        profilerInfo = null;
                                                    }
                                                    if (this.mProfilerInfo.agent == null) {
                                                        preBindAgent5 = this.mProfilerInfo.agent;
                                                    } else {
                                                        preBindAgent5 = preBindAgent4;
                                                    }
                                                    preBindAgent = preBindAgent5;
                                                    if (this.mAppAgentMap != null) {
                                                        if (this.mAppAgentMap.containsKey(processName4) && (app2.info.flags & 2) != 0) {
                                                            String agent = this.mAppAgentMap.get(processName4);
                                                            if (profilerInfo == null) {
                                                                String str4 = agent;
                                                                ProfilerInfo profilerInfo6 = new ProfilerInfo(null, null, 0, false, false, this.mAppAgentMap.get(processName4), true);
                                                                profilerInfo = profilerInfo6;
                                                            } else {
                                                                if (profilerInfo.agent == null) {
                                                                    profilerInfo = profilerInfo.setAgent(this.mAppAgentMap.get(processName4), true);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                                                        profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                                        if (TextUtils.equals(this.mProfileApp, processName4) && this.mProfilerInfo != null) {
                                                            clearProfilerLocked();
                                                        }
                                                    }
                                                    if (appInfo.targetSandboxVersion < 2) {
                                                        if (appInfo.targetSdkVersion < 28) {
                                                            str = sTheRealBuildSerial;
                                                            String buildSerial = str;
                                                            if (this.mActiveInstrumentation.size() > 0) {
                                                                if (app2.instr == null) {
                                                                    int i5 = this.mActiveInstrumentation.size() - 1;
                                                                    while (i5 >= 0 && app2.instr == null) {
                                                                        ActiveInstrumentation aInstr = this.mActiveInstrumentation.get(i5);
                                                                        boolean enableTrackAllocation2 = enableTrackAllocation;
                                                                        if (!aInstr.mFinished) {
                                                                            testMode = testMode2;
                                                                            if (aInstr.mTargetInfo.uid == app2.uid) {
                                                                                if (aInstr.mTargetProcesses.length != 0) {
                                                                                    String[] strArr = aInstr.mTargetProcesses;
                                                                                    int length = strArr.length;
                                                                                    profilerInfo3 = profilerInfo;
                                                                                    int i6 = 0;
                                                                                    while (true) {
                                                                                        if (i6 >= length) {
                                                                                            break;
                                                                                        }
                                                                                        String[] strArr2 = strArr;
                                                                                        int i7 = length;
                                                                                        if (strArr[i6].equals(app2.processName)) {
                                                                                            app2.instr = aInstr;
                                                                                            aInstr.mRunningProcesses.add(app2);
                                                                                            break;
                                                                                        }
                                                                                        i6++;
                                                                                        strArr = strArr2;
                                                                                        length = i7;
                                                                                    }
                                                                                } else {
                                                                                    if (aInstr.mTargetInfo.packageName.equals(app2.info.packageName)) {
                                                                                        app2.instr = aInstr;
                                                                                        aInstr.mRunningProcesses.add(app2);
                                                                                    }
                                                                                    profilerInfo3 = profilerInfo;
                                                                                }
                                                                            } else {
                                                                                profilerInfo3 = profilerInfo;
                                                                            }
                                                                        } else {
                                                                            testMode = testMode2;
                                                                            profilerInfo3 = profilerInfo;
                                                                        }
                                                                        i5--;
                                                                        enableTrackAllocation = enableTrackAllocation2;
                                                                        testMode2 = testMode;
                                                                        profilerInfo = profilerInfo3;
                                                                    }
                                                                }
                                                            }
                                                            int testMode3 = testMode2;
                                                            boolean enableTrackAllocation3 = enableTrackAllocation;
                                                            profilerInfo2 = profilerInfo;
                                                            if (preBindAgent != null) {
                                                                iApplicationThread.attachAgent(preBindAgent);
                                                            }
                                                            boolean isAutofillCompatEnabled = false;
                                                            if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                                                AutofillManagerInternal afm = (AutofillManagerInternal) LocalServices.getService(AutofillManagerInternal.class);
                                                                if (afm != null) {
                                                                    preBindAgent2 = preBindAgent;
                                                                    isAutofillCompatEnabled = afm.isCompatibilityModeRequested(app2.info.packageName, (long) app2.info.versionCode, app2.userId);
                                                                    checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                                                    if (Jlog.isPerfTest()) {
                                                                        if (Jlog.isPerfTest()) {
                                                                            Jlog.i(3034, Jlog.getMessage("ActivityManagerService", "attachApplicationLocked", "pid=" + i2 + "&processname=" + processName4));
                                                                        }
                                                                    }
                                                                    this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                                                    if (app2.isolatedEntryPoint == null) {
                                                                        iApplicationThread.runIsolatedEntryPoint(app2.isolatedEntryPoint, app2.isolatedEntryPointArgs);
                                                                        boolean z2 = isAutofillCompatEnabled;
                                                                        c2 = c3;
                                                                        startTime = startTime2;
                                                                        String str5 = preBindAgent2;
                                                                    } else if (app2.instr != null) {
                                                                        try {
                                                                            c2 = c3;
                                                                        } catch (Exception e3) {
                                                                            e = e3;
                                                                            char c5 = c3;
                                                                            IApplicationThread iApplicationThread3 = thread;
                                                                            int i8 = i2;
                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app2, e);
                                                                            app2.resetPackageList(this.mProcessStats);
                                                                            app2.unlinkDeathRecipient();
                                                                            startProcessLocked(app2, "bind fail", processName4);
                                                                            return false;
                                                                        }
                                                                        try {
                                                                            long startTime3 = startTime2;
                                                                            try {
                                                                                startTime = startTime3;
                                                                                String str6 = preBindAgent2;
                                                                            } catch (Exception e4) {
                                                                                e = e4;
                                                                                IApplicationThread iApplicationThread4 = thread;
                                                                                int i9 = i2;
                                                                                long j2 = startTime3;
                                                                                Slog.wtf(TAG, "Exception thrown during bind of " + app2, e);
                                                                                app2.resetPackageList(this.mProcessStats);
                                                                                app2.unlinkDeathRecipient();
                                                                                startProcessLocked(app2, "bind fail", processName4);
                                                                                return false;
                                                                            }
                                                                        } catch (Exception e5) {
                                                                            e = e5;
                                                                            IApplicationThread iApplicationThread5 = thread;
                                                                            int i10 = i2;
                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app2, e);
                                                                            app2.resetPackageList(this.mProcessStats);
                                                                            app2.unlinkDeathRecipient();
                                                                            startProcessLocked(app2, "bind fail", processName4);
                                                                            return false;
                                                                        }
                                                                        try {
                                                                            iApplicationThread.bindApplication(processName4, appInfo, providers, app2.instr.mClass, profilerInfo2, app2.instr.mArguments, app2.instr.mWatcher, app2.instr.mUiAutomationConnection, testMode3, this.mBinderTransactionTrackingEnabled, enableTrackAllocation3, isRestrictedBackupMode || c3 == 0, app2.persistent, new Configuration(getGlobalConfiguration()), app2.compat, getCommonServicesLocked(app2.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), buildSerial, isAutofillCompatEnabled);
                                                                        } catch (Exception e6) {
                                                                            e = e6;
                                                                            IApplicationThread iApplicationThread6 = thread;
                                                                            long j3 = startTime;
                                                                        }
                                                                    } else {
                                                                        boolean isAutofillCompatEnabled2 = isAutofillCompatEnabled;
                                                                        c2 = c3;
                                                                        startTime = startTime2;
                                                                        String str7 = preBindAgent2;
                                                                        try {
                                                                            boolean z3 = this.mBinderTransactionTrackingEnabled;
                                                                            if (!isRestrictedBackupMode) {
                                                                                if (c2 != 0) {
                                                                                    z = false;
                                                                                    thread.bindApplication(processName4, appInfo, providers, null, profilerInfo2, null, null, null, testMode3, z3, enableTrackAllocation3, z, app2.persistent, new Configuration(getGlobalConfiguration()), app2.compat, getCommonServicesLocked(app2.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), buildSerial, isAutofillCompatEnabled2);
                                                                                }
                                                                            }
                                                                            z = true;
                                                                            thread.bindApplication(processName4, appInfo, providers, null, profilerInfo2, null, null, null, testMode3, z3, enableTrackAllocation3, z, app2.persistent, new Configuration(getGlobalConfiguration()), app2.compat, getCommonServicesLocked(app2.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), buildSerial, isAutofillCompatEnabled2);
                                                                        } catch (Exception e7) {
                                                                            e = e7;
                                                                            IApplicationThread iApplicationThread7 = thread;
                                                                            long j4 = startTime;
                                                                            int i11 = pid;
                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app2, e);
                                                                            app2.resetPackageList(this.mProcessStats);
                                                                            app2.unlinkDeathRecipient();
                                                                            startProcessLocked(app2, "bind fail", processName4);
                                                                            return false;
                                                                        }
                                                                    }
                                                                    if (profilerInfo2 == null) {
                                                                        profilerInfo2.closeFd();
                                                                    } else {
                                                                        ProfilerInfo profilerInfo7 = profilerInfo2;
                                                                    }
                                                                    long startTime4 = startTime;
                                                                    checkTime(startTime4, "attachApplicationLocked: immediately after bindApplication");
                                                                    updateLruProcessLocked(app2, false, null);
                                                                    checkTime(startTime4, "attachApplicationLocked: after updateLruProcessLocked");
                                                                    long uptimeMillis = SystemClock.uptimeMillis();
                                                                    app2.lastLowMemory = uptimeMillis;
                                                                    app2.lastRequestedGc = uptimeMillis;
                                                                    this.mPersistentStartingProcesses.remove(app2);
                                                                    if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(app2)) {
                                                                        Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                                                    }
                                                                    this.mProcessesOnHold.remove(app2);
                                                                    badApp = false;
                                                                    boolean didSomething = false;
                                                                    if (c2 != 0) {
                                                                        try {
                                                                            if (this.mStackSupervisor.attachApplicationLocked(app2)) {
                                                                                didSomething = true;
                                                                            }
                                                                        } catch (Exception e8) {
                                                                            Slog.wtf(TAG, "Exception thrown launching activities in " + app2, e8);
                                                                            badApp = true;
                                                                        }
                                                                    }
                                                                    if (!badApp) {
                                                                        try {
                                                                            didSomething |= this.mServices.attachApplicationLocked(app2, processName4);
                                                                            checkTime(startTime4, "attachApplicationLocked: after mServices.attachApplicationLocked");
                                                                        } catch (Exception e9) {
                                                                            Flog.w(102, "Exception thrown starting services in " + app2, e9);
                                                                            Slog.wtf(TAG, "Exception thrown starting services in " + app2, e9);
                                                                            badApp = true;
                                                                        }
                                                                    }
                                                                    if (!badApp) {
                                                                        int i12 = pid;
                                                                    } else if (isPendingBroadcastProcessLocked(pid)) {
                                                                        try {
                                                                            didSomething |= sendPendingBroadcastsLocked(app2);
                                                                            checkTime(startTime4, "attachApplicationLocked: after sendPendingBroadcastsLocked");
                                                                        } catch (Exception e10) {
                                                                            Slog.wtf(TAG, "Exception thrown dispatching broadcasts in " + app2, e10);
                                                                            badApp = true;
                                                                        }
                                                                    }
                                                                    if (!badApp || this.mBackupTarget == null || this.mBackupTarget.app != app2) {
                                                                        IApplicationThread iApplicationThread8 = thread;
                                                                    } else {
                                                                        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                                                            Slog.v(TAG, "New app is backup target, launching agent for " + app2);
                                                                        }
                                                                        notifyPackageUse(this.mBackupTarget.appInfo.packageName, 5);
                                                                        try {
                                                                            try {
                                                                                thread.scheduleCreateBackupAgent(this.mBackupTarget.appInfo, compatibilityInfoForPackageLocked(this.mBackupTarget.appInfo), this.mBackupTarget.backupMode);
                                                                            } catch (Exception e11) {
                                                                                e = e11;
                                                                            }
                                                                        } catch (Exception e12) {
                                                                            e = e12;
                                                                            IApplicationThread iApplicationThread9 = thread;
                                                                            Slog.wtf(TAG, "Exception thrown creating backup agent in " + app2, e);
                                                                            badApp = true;
                                                                            if (badApp) {
                                                                            }
                                                                        }
                                                                    }
                                                                    if (badApp) {
                                                                        app2.kill("error during init", true);
                                                                        handleAppDiedLocked(app2, false, true);
                                                                        return false;
                                                                    }
                                                                    if (!didSomething) {
                                                                        updateOomAdjLocked();
                                                                        checkTime(startTime4, "attachApplicationLocked: after updateOomAdjLocked");
                                                                    }
                                                                    return true;
                                                                }
                                                            }
                                                            preBindAgent2 = preBindAgent;
                                                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                                            if (Jlog.isPerfTest()) {
                                                            }
                                                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                                            if (app2.isolatedEntryPoint == null) {
                                                            }
                                                            if (profilerInfo2 == null) {
                                                            }
                                                            long startTime42 = startTime;
                                                            checkTime(startTime42, "attachApplicationLocked: immediately after bindApplication");
                                                            updateLruProcessLocked(app2, false, null);
                                                            checkTime(startTime42, "attachApplicationLocked: after updateLruProcessLocked");
                                                            long uptimeMillis2 = SystemClock.uptimeMillis();
                                                            app2.lastLowMemory = uptimeMillis2;
                                                            app2.lastRequestedGc = uptimeMillis2;
                                                            this.mPersistentStartingProcesses.remove(app2);
                                                            Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                                            this.mProcessesOnHold.remove(app2);
                                                            badApp = false;
                                                            boolean didSomething2 = false;
                                                            if (c2 != 0) {
                                                            }
                                                            if (!badApp) {
                                                            }
                                                            if (!badApp) {
                                                            }
                                                            if (!badApp) {
                                                            }
                                                            IApplicationThread iApplicationThread82 = thread;
                                                            if (badApp) {
                                                            }
                                                        }
                                                    }
                                                    str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
                                                    String buildSerial2 = str;
                                                    if (this.mActiveInstrumentation.size() > 0) {
                                                    }
                                                    int testMode32 = testMode2;
                                                    boolean enableTrackAllocation32 = enableTrackAllocation;
                                                    profilerInfo2 = profilerInfo;
                                                    if (preBindAgent != null) {
                                                    }
                                                    boolean isAutofillCompatEnabled3 = false;
                                                    if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                                    }
                                                    preBindAgent2 = preBindAgent;
                                                    checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                                    if (Jlog.isPerfTest()) {
                                                    }
                                                    this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                                    if (app2.isolatedEntryPoint == null) {
                                                    }
                                                    if (profilerInfo2 == null) {
                                                    }
                                                    long startTime422 = startTime;
                                                    checkTime(startTime422, "attachApplicationLocked: immediately after bindApplication");
                                                    updateLruProcessLocked(app2, false, null);
                                                    checkTime(startTime422, "attachApplicationLocked: after updateLruProcessLocked");
                                                    long uptimeMillis22 = SystemClock.uptimeMillis();
                                                    app2.lastLowMemory = uptimeMillis22;
                                                    app2.lastRequestedGc = uptimeMillis22;
                                                    this.mPersistentStartingProcesses.remove(app2);
                                                    Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                                    this.mProcessesOnHold.remove(app2);
                                                    badApp = false;
                                                    boolean didSomething22 = false;
                                                    if (c2 != 0) {
                                                    }
                                                    if (!badApp) {
                                                    }
                                                    if (!badApp) {
                                                    }
                                                    if (!badApp) {
                                                    }
                                                    IApplicationThread iApplicationThread822 = thread;
                                                    if (badApp) {
                                                    }
                                                }
                                            }
                                            needsInfo = true;
                                            if (!needsInfo) {
                                            }
                                            if (this.mProfilerInfo.agent == null) {
                                            }
                                            preBindAgent = preBindAgent5;
                                            if (this.mAppAgentMap != null) {
                                            }
                                            profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                            clearProfilerLocked();
                                            if (appInfo.targetSandboxVersion < 2) {
                                            }
                                            str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
                                            String buildSerial22 = str;
                                            if (this.mActiveInstrumentation.size() > 0) {
                                            }
                                            int testMode322 = testMode2;
                                            boolean enableTrackAllocation322 = enableTrackAllocation;
                                            profilerInfo2 = profilerInfo;
                                            if (preBindAgent != null) {
                                            }
                                            boolean isAutofillCompatEnabled32 = false;
                                            if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                            }
                                            preBindAgent2 = preBindAgent;
                                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                            if (Jlog.isPerfTest()) {
                                            }
                                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                            if (app2.isolatedEntryPoint == null) {
                                            }
                                            if (profilerInfo2 == null) {
                                            }
                                            long startTime4222 = startTime;
                                            checkTime(startTime4222, "attachApplicationLocked: immediately after bindApplication");
                                            updateLruProcessLocked(app2, false, null);
                                            checkTime(startTime4222, "attachApplicationLocked: after updateLruProcessLocked");
                                            long uptimeMillis222 = SystemClock.uptimeMillis();
                                            app2.lastLowMemory = uptimeMillis222;
                                            app2.lastRequestedGc = uptimeMillis222;
                                            this.mPersistentStartingProcesses.remove(app2);
                                            Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                            this.mProcessesOnHold.remove(app2);
                                            badApp = false;
                                            boolean didSomething222 = false;
                                            if (c2 != 0) {
                                            }
                                            if (!badApp) {
                                            }
                                            if (!badApp) {
                                            }
                                            if (!badApp) {
                                            }
                                            IApplicationThread iApplicationThread8222 = thread;
                                            if (badApp) {
                                            }
                                        } else {
                                            profilerInfo4 = null;
                                            preBindAgent3 = null;
                                            profilerInfo5 = profilerInfo4;
                                            preBindAgent = preBindAgent3;
                                            if (this.mAppAgentMap != null) {
                                            }
                                            profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                            clearProfilerLocked();
                                            if (appInfo.targetSandboxVersion < 2) {
                                            }
                                            str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
                                            String buildSerial222 = str;
                                            if (this.mActiveInstrumentation.size() > 0) {
                                            }
                                            int testMode3222 = testMode2;
                                            boolean enableTrackAllocation3222 = enableTrackAllocation;
                                            profilerInfo2 = profilerInfo;
                                            if (preBindAgent != null) {
                                            }
                                            boolean isAutofillCompatEnabled322 = false;
                                            if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                            }
                                            preBindAgent2 = preBindAgent;
                                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                            if (Jlog.isPerfTest()) {
                                            }
                                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                            if (app2.isolatedEntryPoint == null) {
                                            }
                                            if (profilerInfo2 == null) {
                                            }
                                            long startTime42222 = startTime;
                                            checkTime(startTime42222, "attachApplicationLocked: immediately after bindApplication");
                                            updateLruProcessLocked(app2, false, null);
                                            checkTime(startTime42222, "attachApplicationLocked: after updateLruProcessLocked");
                                            long uptimeMillis2222 = SystemClock.uptimeMillis();
                                            app2.lastLowMemory = uptimeMillis2222;
                                            app2.lastRequestedGc = uptimeMillis2222;
                                            this.mPersistentStartingProcesses.remove(app2);
                                            Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                            this.mProcessesOnHold.remove(app2);
                                            badApp = false;
                                            boolean didSomething2222 = false;
                                            if (c2 != 0) {
                                            }
                                            if (!badApp) {
                                            }
                                            if (!badApp) {
                                            }
                                            if (!badApp) {
                                            }
                                            IApplicationThread iApplicationThread82222 = thread;
                                            if (badApp) {
                                            }
                                        }
                                    }
                                }
                                profilerInfo4 = null;
                                preBindAgent3 = null;
                                if (app2.instr != null) {
                                    if (app2.instr.mProfileFile != null) {
                                        profilerInfo5 = new ProfilerInfo(app2.instr.mProfileFile, null, 0, false, false, null, false);
                                        preBindAgent = preBindAgent3;
                                        if (this.mAppAgentMap != null) {
                                        }
                                        profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                        clearProfilerLocked();
                                        if (appInfo.targetSandboxVersion < 2) {
                                        }
                                        str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
                                        String buildSerial2222 = str;
                                        if (this.mActiveInstrumentation.size() > 0) {
                                        }
                                        int testMode32222 = testMode2;
                                        boolean enableTrackAllocation32222 = enableTrackAllocation;
                                        profilerInfo2 = profilerInfo;
                                        if (preBindAgent != null) {
                                        }
                                        boolean isAutofillCompatEnabled3222 = false;
                                        if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                        }
                                        preBindAgent2 = preBindAgent;
                                        checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                        if (Jlog.isPerfTest()) {
                                        }
                                        this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                        if (app2.isolatedEntryPoint == null) {
                                        }
                                        if (profilerInfo2 == null) {
                                        }
                                        long startTime422222 = startTime;
                                        checkTime(startTime422222, "attachApplicationLocked: immediately after bindApplication");
                                        updateLruProcessLocked(app2, false, null);
                                        checkTime(startTime422222, "attachApplicationLocked: after updateLruProcessLocked");
                                        long uptimeMillis22222 = SystemClock.uptimeMillis();
                                        app2.lastLowMemory = uptimeMillis22222;
                                        app2.lastRequestedGc = uptimeMillis22222;
                                        this.mPersistentStartingProcesses.remove(app2);
                                        Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                        this.mProcessesOnHold.remove(app2);
                                        badApp = false;
                                        boolean didSomething22222 = false;
                                        if (c2 != 0) {
                                        }
                                        if (!badApp) {
                                        }
                                        if (!badApp) {
                                        }
                                        if (!badApp) {
                                        }
                                        IApplicationThread iApplicationThread822222 = thread;
                                        if (badApp) {
                                        }
                                    }
                                }
                                profilerInfo5 = profilerInfo4;
                                preBindAgent = preBindAgent3;
                                if (this.mAppAgentMap != null) {
                                }
                                profilerInfo.profileFd = profilerInfo.profileFd.dup();
                                clearProfilerLocked();
                                if (appInfo.targetSandboxVersion < 2) {
                                }
                                str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
                                String buildSerial22222 = str;
                                if (this.mActiveInstrumentation.size() > 0) {
                                }
                                int testMode322222 = testMode2;
                                boolean enableTrackAllocation322222 = enableTrackAllocation;
                                profilerInfo2 = profilerInfo;
                                if (preBindAgent != null) {
                                }
                                boolean isAutofillCompatEnabled32222 = false;
                                if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                                }
                                preBindAgent2 = preBindAgent;
                                checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                                if (Jlog.isPerfTest()) {
                                }
                                this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                                if (app2.isolatedEntryPoint == null) {
                                }
                                if (profilerInfo2 == null) {
                                }
                                long startTime4222222 = startTime;
                                checkTime(startTime4222222, "attachApplicationLocked: immediately after bindApplication");
                                updateLruProcessLocked(app2, false, null);
                                checkTime(startTime4222222, "attachApplicationLocked: after updateLruProcessLocked");
                                long uptimeMillis222222 = SystemClock.uptimeMillis();
                                app2.lastLowMemory = uptimeMillis222222;
                                app2.lastRequestedGc = uptimeMillis222222;
                                this.mPersistentStartingProcesses.remove(app2);
                                Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                                this.mProcessesOnHold.remove(app2);
                                badApp = false;
                                boolean didSomething222222 = false;
                                if (c2 != 0) {
                                }
                                if (!badApp) {
                                }
                                if (!badApp) {
                                }
                                if (!badApp) {
                                }
                                IApplicationThread iApplicationThread8222222 = thread;
                                if (badApp) {
                                }
                            }
                        }
                        enableTrackAllocation = false;
                        boolean isRestrictedBackupMode2 = false;
                        if (this.mBackupTarget != null) {
                        }
                        try {
                            if (app2.instr != null) {
                            }
                            if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                            }
                            if (app2.instr == null) {
                            }
                            app2.compat = compatibilityInfoForPackageLocked(appInfo);
                            if (this.mProfileApp != null) {
                            }
                            profilerInfo4 = null;
                            preBindAgent3 = null;
                            if (app2.instr != null) {
                            }
                            profilerInfo5 = profilerInfo4;
                            preBindAgent = preBindAgent3;
                            if (this.mAppAgentMap != null) {
                            }
                            profilerInfo.profileFd = profilerInfo.profileFd.dup();
                            clearProfilerLocked();
                            if (appInfo.targetSandboxVersion < 2) {
                            }
                            str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
                            String buildSerial222222 = str;
                            if (this.mActiveInstrumentation.size() > 0) {
                            }
                            int testMode3222222 = testMode2;
                            boolean enableTrackAllocation3222222 = enableTrackAllocation;
                            profilerInfo2 = profilerInfo;
                            if (preBindAgent != null) {
                            }
                            boolean isAutofillCompatEnabled322222 = false;
                            if (UserHandle.getAppId(app2.info.uid) >= 10000) {
                            }
                            preBindAgent2 = preBindAgent;
                            checkTime(startTime2, "attachApplicationLocked: immediately before bindApplication");
                            if (Jlog.isPerfTest()) {
                            }
                            this.mStackSupervisor.getActivityMetricsLogger().notifyBindApplication(app2);
                            if (app2.isolatedEntryPoint == null) {
                            }
                            if (profilerInfo2 == null) {
                            }
                            long startTime42222222 = startTime;
                        } catch (Exception e13) {
                            e = e13;
                            char c6 = c3;
                            int i13 = i2;
                            IApplicationThread iApplicationThread10 = iApplicationThread;
                            Slog.wtf(TAG, "Exception thrown during bind of " + app2, e);
                            app2.resetPackageList(this.mProcessStats);
                            app2.unlinkDeathRecipient();
                            startProcessLocked(app2, "bind fail", processName4);
                            return false;
                        }
                        try {
                            checkTime(startTime42222222, "attachApplicationLocked: immediately after bindApplication");
                            updateLruProcessLocked(app2, false, null);
                            checkTime(startTime42222222, "attachApplicationLocked: after updateLruProcessLocked");
                            long uptimeMillis2222222 = SystemClock.uptimeMillis();
                            app2.lastLowMemory = uptimeMillis2222222;
                            app2.lastRequestedGc = uptimeMillis2222222;
                            this.mPersistentStartingProcesses.remove(app2);
                            Slog.v(TAG, "Attach application locked removing on hold: " + app2);
                            this.mProcessesOnHold.remove(app2);
                            badApp = false;
                            boolean didSomething2222222 = false;
                            if (c2 != 0) {
                            }
                            if (!badApp) {
                            }
                            if (!badApp) {
                            }
                            if (!badApp) {
                            }
                            IApplicationThread iApplicationThread82222222 = thread;
                            if (badApp) {
                            }
                        } catch (Exception e14) {
                            e = e14;
                            IApplicationThread iApplicationThread11 = thread;
                            int i14 = pid;
                            Slog.wtf(TAG, "Exception thrown during bind of " + app2, e);
                            app2.resetPackageList(this.mProcessStats);
                            app2.unlinkDeathRecipient();
                            startProcessLocked(app2, "bind fail", processName4);
                            return false;
                        }
                    } catch (RemoteException e15) {
                        int i15 = i2;
                        IApplicationThread iApplicationThread12 = iApplicationThread;
                        app2.resetPackageList(this.mProcessStats);
                        startProcessLocked(app2, "link fail", processName3);
                        return false;
                    }
                }
                app2 = app3;
                if (app2 == null) {
                }
            }
        }
        app3 = app;
        i = 3;
        app2 = app3;
        if (app2 == null) {
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0058, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x005d, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY == false) goto L_0x0062;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x005f, code lost:
        android.os.Trace.traceEnd(64);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0062, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x009a, code lost:
        if (android.util.Jlog.isMicroTest() == false) goto L_0x00a9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x009c, code lost:
        android.util.Jlog.i(3103, android.util.Jlog.getMessage("ActivityManagerService", "attachApplication", r7));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x00ab, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY == false) goto L_0x00b0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x00ad, code lost:
        android.os.Trace.traceEnd(64);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x00b0, code lost:
        return;
     */
    public final void attachApplication(IApplicationThread thread, long startSeq) {
        IApplicationThread iApplicationThread = thread;
        if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
            Trace.traceBegin(64, "attachApplication");
        }
        try {
            if (Jlog.isMicroTest()) {
                Jlog.i(3102, Jlog.getMessage("ActivityManagerService", "attachApplication", iApplicationThread));
            }
            synchronized (this) {
                boostPriorityForLockedSection();
                long start = SystemClock.uptimeMillis();
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                long origId = Binder.clearCallingIdentity();
                if (iApplicationThread == null) {
                    Slog.e(TAG, "attachApplicationLocked thread is null, return! callingPid: " + callingPid + ", callingUid: " + callingUid);
                } else {
                    attachApplicationLocked(iApplicationThread, callingPid, callingUid, startSeq);
                    Binder.restoreCallingIdentity(origId);
                    Flog.i(101, "Attach thread to application:" + callingPid + " cost " + (SystemClock.uptimeMillis() - start));
                }
            }
        } catch (Throwable th) {
            if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
                Trace.traceEnd(64);
            }
            throw th;
        }
    }

    public final void activityIdle(IBinder token, Configuration config, boolean stopProfiling) {
        long origId = Binder.clearCallingIdentity();
        if (!this.mActivityIdle) {
            this.mActivityIdle = true;
            HwBootFail.notifyBootSuccess();
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityRecord.getStackLocked(token) != null) {
                    ActivityRecord r = this.mStackSupervisor.activityIdleInternalLocked(token, false, false, config);
                    if (stopProfiling && this.mProfileProc == r.app && this.mProfilerInfo != null) {
                        clearProfilerLocked();
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(origId);
    }

    /* access modifiers changed from: package-private */
    public void postFinishBooting(boolean finishBooting, boolean enableScreen) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(45, finishBooting, enableScreen));
    }

    /* access modifiers changed from: package-private */
    public void enableScreenAfterBoot() {
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_ENABLE_SCREEN, SystemClock.uptimeMillis());
        Jlog.d(34, "JL_BOOT_PROGRESS_ENABLE_SCREEN");
        this.mWindowManager.enableScreenAfterBoot();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                updateEventDispatchingLocked();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mIsHwLowRam) {
            Message nmsg = this.mHandler.obtainMessage(98);
            Log.i(TAG, "smartshrink send msg to trim service");
            this.mHandler.sendMessageDelayed(nmsg, this.mConstants.GC_MIN_INTERVAL);
        }
    }

    public void showBootMessage(CharSequence msg, boolean always) {
        if (Binder.getCallingUid() == Process.myUid()) {
            this.mWindowManager.showBootMessage(msg, always);
            return;
        }
        throw new SecurityException();
    }

    public void keyguardGoingAway(int flags) {
        enforceNotIsolatedCaller("keyguardGoingAway");
        Flog.i(107, "setKeyguardGoingAway flags: " + flags + " by pid:" + Binder.getCallingPid());
        long token = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mKeyguardController.keyguardGoingAway(flags);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(token);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(token);
            throw th;
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isKeyguardLocked() {
        return this.mKeyguardController.isKeyguardLocked();
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0014, code lost:
        resetPriorityAfterLockedSection();
        r12.mAppOpsService.systemReady();
        r2 = new android.util.ArraySet<>();
        r3 = android.os.Build.SUPPORTED_ABIS;
        r4 = r3.length;
        r5 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0025, code lost:
        if (r5 >= r4) goto L_0x0077;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0027, code lost:
        r6 = r3[r5];
        android.os.Process.zygoteProcess.establishZygoteConnectionForAbi(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0030, code lost:
        if (sIsMygote == false) goto L_0x0035;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0032, code lost:
        android.os.Process.establishMygoteConnectionForAbi(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x0035, code lost:
        r7 = dalvik.system.VMRuntime.getInstructionSet(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x003d, code lost:
        if (r2.contains(r7) != false) goto L_0x0074;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:?, code lost:
        r12.mInstaller.markBootComplete(dalvik.system.VMRuntime.getInstructionSet(r6));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0049, code lost:
        r8 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x004a, code lost:
        android.util.Slog.w(TAG, "Unable to mark boot complete for abi: " + r6 + " (" + r8.getMessage() + ")");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0077, code lost:
        r3 = new android.content.IntentFilter();
        r3.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
        r3.addDataScheme("package");
        r12.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass9(r12), r3);
        r4 = new android.content.IntentFilter();
        r4.addAction("com.android.server.am.DELETE_DUMPHEAP");
        r12.mContext.registerReceiver(new com.android.server.am.ActivityManagerService.AnonymousClass10(r12), r4);
        r12.mSystemServiceManager.startBootPhase(1000);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x00ac, code lost:
        monitor-enter(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:?, code lost:
        boostPriorityForLockedSection();
        r5 = r12.mProcessesOnHold.size();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x00b6, code lost:
        if (r5 <= 0) goto L_0x00f0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x00b8, code lost:
        r6 = new java.util.ArrayList<>(r12.mProcessesOnHold);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x00c0, code lost:
        if (r0 >= r5) goto L_0x00f0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x00c4, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_PROCESSES == false) goto L_0x00e0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00c6, code lost:
        android.util.Slog.v(TAG, "Starting process on hold: " + r6.get(r0));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00e0, code lost:
        startProcessLocked(r6.get(r0), "on-hold", null);
        r0 = r0 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00f2, code lost:
        if (r12.mFactoryTest != 1) goto L_0x00f9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00f4, code lost:
        monitor-exit(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00f5, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00f8, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:?, code lost:
        r12.mHandler.sendMessageDelayed(r12.mHandler.obtainMessage(CHECK_EXCESSIVE_POWER_USE_MSG), r12.mConstants.POWER_CHECK_INTERVAL);
        android.os.SystemProperties.set("sys.boot_completed", "1");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x0120, code lost:
        if ("trigger_restart_min_framework".equals(android.os.SystemProperties.get("vold.decrypt")) == false) goto L_0x0131;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x012f, code lost:
        if (com.android.server.backup.BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS.equals(android.os.SystemProperties.get("vold.encrypt_progress")) == false) goto L_0x0138;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x0131, code lost:
        android.os.SystemProperties.set("dev.bootcomplete", "1");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x0138, code lost:
        r12.mUserController.sendBootCompleted(new com.android.server.am.ActivityManagerService.AnonymousClass11(r12));
        r12.mUserController.scheduleStartProfiles();
        initBroadcastResourceLocked();
        initAppAndAppServiceResourceLocked();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x014d, code lost:
        monitor-exit(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x014e, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x0151, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x0152, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x0157, code lost:
        throw r0;
     */
    public final void finishBooting() {
        ArraySet<String> completedIsas;
        String instructionSet;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mBootAnimationComplete) {
                    this.mCallFinishBooting = true;
                    resetPriorityAfterLockedSection();
                    return;
                }
                int ip = 0;
                this.mCallFinishBooting = false;
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        completedIsas.add(instructionSet);
        int i = i + 1;
    }

    public void bootAnimationComplete() {
        boolean callFinishBooting;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                callFinishBooting = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (callFinishBooting) {
            Trace.traceBegin(64, "FinishBooting");
            finishBooting();
            Trace.traceEnd(64);
        }
        sDisableForceGC = SystemProperties.getBoolean("persist.disable.force.gc", false);
        if (!sDisableForceGC) {
            Log.i(TAG, "Send Force-gc message to schedule forceGCAfterRebooting after delay 210000 ms");
            this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(FORCE_GC_ALL_MSG), 210000);
            return;
        }
        Log.i(TAG, "forceGCAfterRebooting has been disabled by property persist.disable.force.gc = true");
    }

    /* access modifiers changed from: package-private */
    public final void ensureBootCompleted() {
        boolean booting;
        boolean enableScreen;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                booting = this.mBooting;
                this.mBooting = false;
                enableScreen = !this.mBooted;
                this.mBooted = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (booting) {
            Trace.traceBegin(64, "FinishBooting");
            finishBooting();
            Trace.traceEnd(64);
        }
        if (enableScreen) {
            enableScreenAfterBoot();
        }
    }

    public final void activityResumed(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord.activityResumedLocked(token);
                this.mWindowManager.notifyAppResumedFinished(token);
                this.mHwAMSEx.dispatchActivityLifeState(ActivityRecord.forToken(token), "onResume");
                this.mHwAMSEx.resumeCoordinationPrimaryStack(ActivityRecord.forToken(token));
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(origId);
    }

    public final void activityPaused(IBinder token) {
        if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
            Trace.traceBegin(64, "activityPaused");
        }
        try {
            if (Jlog.isMicroTest()) {
                Jlog.i(3104, Jlog.getMessage("ActivityManagerService", "activityPaused", token));
            }
            long origId = Binder.clearCallingIdentity();
            synchronized (this) {
                boostPriorityForLockedSection();
                long start = SystemClock.uptimeMillis();
                ActivityStack stack = ActivityRecord.getStackLocked(token);
                if (stack != null) {
                    stack.activityPausedLocked(token, false);
                    this.mHwAMSEx.dispatchActivityLifeState(ActivityRecord.forToken(token), "onPause");
                }
                Flog.i(101, "activityPaused cost " + (SystemClock.uptimeMillis() - start));
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            if (Jlog.isMicroTest()) {
                Jlog.i(3105, Jlog.getMessage("ActivityManagerService", "activityPaused", token));
            }
            if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
                Trace.traceEnd(64);
            }
        } catch (Throwable th) {
            if (ActivityManagerDebugConfig.DEBUG_HW_ACTIVITY) {
                Trace.traceEnd(64);
            }
            throw th;
        }
    }

    public final void activityStopped(IBinder token, Bundle icicle, PersistableBundle persistentState, CharSequence description) {
        if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.v(TAG, "Activity stopped: token=" + token);
        }
        if (icicle == null || !icicle.hasFileDescriptors()) {
            long origId = Binder.clearCallingIdentity();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(token);
                    if (r != null) {
                        r.activityStoppedLocked(icicle, persistentState, description);
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            trimApplications();
            Binder.restoreCallingIdentity(origId);
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Bundle");
    }

    public final void activityDestroyed(IBinder token) {
        if (ActivityManagerDebugConfig.DEBUG_SWITCH) {
            Slog.v(TAG, "ACTIVITY DESTROYED: " + token);
        }
        boolean isPrimary = false;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack stack = ActivityRecord.getStackLocked(token);
                if (stack != null) {
                    isPrimary = stack.getWindowConfiguration().getWindowingMode() == 3;
                    stack.activityDestroyedLocked(token, "activityDestroyed");
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        long orig = Binder.clearCallingIdentity();
        try {
            if (this.mShouldFreeze && isPrimary) {
                Slog.i(TAG, "stopFreezingScreen");
                this.mShouldFreeze = false;
                this.mHandler.removeMessages(500);
                this.mWindowManager.stopFreezingScreen();
            }
        } finally {
            Binder.restoreCallingIdentity(orig);
        }
    }

    public final void activityRelaunched(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mStackSupervisor.activityRelaunchedLocked(token);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(origId);
    }

    public void reportSizeConfigurations(IBinder token, int[] horizontalSizeConfiguration, int[] verticalSizeConfigurations, int[] smallestSizeConfigurations) {
        if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
            Slog.v(TAG, "Report configuration: " + token + " " + horizontalSizeConfiguration + " " + verticalSizeConfigurations);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord record = ActivityRecord.isInStackLocked(token);
                if (record != null) {
                    record.setSizeConfigurations(horizontalSizeConfiguration, verticalSizeConfigurations, smallestSizeConfigurations);
                } else {
                    throw new IllegalArgumentException("reportSizeConfigurations: ActivityRecord not found for: " + token);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void notifyLaunchTaskBehindComplete(IBinder token) {
        HwSlog.d(TAG, "notifyLaunchTaskBehindComplete, token=" + token);
        this.mStackSupervisor.scheduleLaunchTaskBehindComplete(token);
    }

    public final void notifyEnterAnimationComplete(IBinder token) {
        this.mHandler.sendMessage(this.mHandler.obtainMessage(44, token));
    }

    public String getCallingPackage(IBinder token) {
        String str;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = getCallingRecordLocked(token);
                str = r != null ? r.info.packageName : null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return str;
    }

    public ComponentName getCallingActivity(IBinder token) {
        ComponentName component;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = getCallingRecordLocked(token);
                component = r != null ? r.intent.getComponent() : null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return component;
    }

    private ActivityRecord getCallingRecordLocked(IBinder token) {
        ActivityRecord r = ActivityRecord.isInStackLocked(token);
        if (r == null) {
            return null;
        }
        return r.resultTo;
    }

    public ComponentName getActivityClassForToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return null;
                }
                ComponentName component = r.intent.getComponent();
                resetPriorityAfterLockedSection();
                return component;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public String getPackageForToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return null;
                }
                String str = r.packageName;
                resetPriorityAfterLockedSection();
                return str;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public boolean isRootVoiceInteraction(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return false;
                }
                boolean z = r.rootVoiceInteraction;
                resetPriorityAfterLockedSection();
                return z;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public IIntentSender getIntentSender(int type, String packageName, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId) {
        int callingUid = type;
        String str = packageName;
        Intent[] intentArr = intents;
        String[] strArr = resolvedTypes;
        enforceNotIsolatedCaller("getIntentSender");
        if (intentArr != null) {
            if (intentArr.length >= 1) {
                for (int i = 0; i < intentArr.length; i++) {
                    Intent intent = intentArr[i];
                    if (intent != null) {
                        if (intent.hasFileDescriptors()) {
                            throw new IllegalArgumentException("File descriptors passed in Intent");
                        } else if (callingUid != 1 || (intent.getFlags() & DumpState.DUMP_HANDLE) == 0) {
                            intentArr[i] = new Intent(intent);
                        } else {
                            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                        }
                    }
                }
                if (!(strArr == null || strArr.length == intentArr.length)) {
                    throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
                }
            } else {
                throw new IllegalArgumentException("Intents array length must be >= 1");
            }
        }
        if (bOptions == null || !bOptions.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int callingUid2 = Binder.getCallingUid();
                    int origUserId = userId;
                    int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid2, userId, callingUid == 1, 0, "getIntentSender", null);
                    if (origUserId == -2) {
                        userId2 = -2;
                    }
                    int userId3 = userId2;
                    if (!(callingUid2 == 0 || callingUid2 == 1000)) {
                        try {
                            if (!UserHandle.isSameApp(callingUid2, AppGlobals.getPackageManager().getPackageUid(str, 268435456, UserHandle.getUserId(callingUid2)))) {
                                String msg = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + ", (need uid=" + uid + ") is not allowed to send as package " + str;
                                Slog.w(TAG, msg);
                                throw new SecurityException(msg);
                            }
                        } catch (RemoteException e) {
                            e = e;
                            int i2 = origUserId;
                            int i3 = callingUid2;
                            throw new SecurityException(e);
                        }
                    }
                    int i4 = origUserId;
                    try {
                        IIntentSender intentSenderLocked = getIntentSenderLocked(callingUid, str, callingUid2, userId3, token, resultWho, requestCode, intentArr, strArr, flags, bOptions);
                        resetPriorityAfterLockedSection();
                        return intentSenderLocked;
                    } catch (RemoteException e2) {
                        e = e2;
                        throw new SecurityException(e);
                    }
                } catch (Throwable th) {
                    e = th;
                    resetPriorityAfterLockedSection();
                    throw e;
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in options");
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v11, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v7, resolved type: com.android.server.am.PendingIntentRecord} */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Multi-variable type inference failed */
    public IIntentSender getIntentSenderLocked(int type, String packageName, int callingUid, int userId, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions) {
        Intent intent;
        int i = type;
        int i2 = callingUid;
        Intent[] intentArr = intents;
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "getIntentSenderLocked(): uid=" + i2);
        }
        ActivityRecord activity = null;
        if (i == 3) {
            activity = ActivityRecord.isInStackLocked(token);
            if (activity == null) {
                Slog.w(TAG, "Failed createPendingResult: activity " + token + " not in any stack");
                return null;
            }
            IBinder iBinder = token;
            if (activity.finishing) {
                Slog.w(TAG, "Failed createPendingResult: activity " + activity + " is finishing");
                return null;
            }
        } else {
            IBinder iBinder2 = token;
        }
        ActivityRecord activity2 = activity;
        boolean z = false;
        if (intentArr != null) {
            for (Intent defusable : intentArr) {
                defusable.setDefusable(true);
            }
        }
        Bundle.setDefusable(bOptions, true);
        boolean noCreate = (flags & 536870912) != 0;
        boolean cancelCurrent = (flags & 268435456) != 0;
        if ((flags & 134217728) != 0) {
            z = true;
        }
        boolean updateCurrent = z;
        ActivityRecord activity3 = activity2;
        PendingIntentRecord.Key key = new PendingIntentRecord.Key(i, packageName, activity2, resultWho, requestCode, intentArr, resolvedTypes, flags & -939524097, SafeActivityOptions.fromBundle(bOptions), userId);
        WeakReference<PendingIntentRecord> ref = this.mIntentSenderRecords.get(key);
        PendingIntentRecord rec = ref != null ? ref.get() : null;
        if (rec == null) {
            String[] strArr = resolvedTypes;
        } else if (!cancelCurrent) {
            if (updateCurrent) {
                if (rec.key.requestIntent != null) {
                    Intent intent2 = rec.key.requestIntent;
                    if (intentArr != null) {
                        intent = intentArr[intentArr.length - 1];
                    } else {
                        intent = null;
                    }
                    intent2.replaceExtras(intent);
                }
                if (intentArr != null) {
                    intentArr[intentArr.length - 1] = rec.key.requestIntent;
                    rec.key.allIntents = intentArr;
                    rec.key.allResolvedTypes = resolvedTypes;
                } else {
                    String[] strArr2 = resolvedTypes;
                    rec.key.allIntents = null;
                    rec.key.allResolvedTypes = null;
                }
            } else {
                String[] strArr3 = resolvedTypes;
            }
            return rec;
        } else {
            String[] strArr4 = resolvedTypes;
            makeIntentSenderCanceledLocked(rec);
            this.mIntentSenderRecords.remove(key);
        }
        if (noCreate) {
            return rec;
        }
        PendingIntentRecord rec2 = new PendingIntentRecord(this, key, i2);
        this.mIntentSenderRecords.put(key, rec2.ref);
        if (i == 3) {
            ActivityRecord activity4 = activity3;
            if (activity4.pendingResults == null) {
                activity4.pendingResults = new HashSet<>();
            }
            activity4.pendingResults.add(rec2.ref);
        }
        return rec2;
    }

    public int sendIntentSender(IIntentSender target, IBinder whitelistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options) {
        Intent intent2;
        IIntentSender iIntentSender = target;
        Bundle bundle = options;
        if (true == this.mHwAMSEx.shouldSkipSendIntentSender(iIntentSender, bundle)) {
            return 0;
        }
        if (iIntentSender instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) iIntentSender).sendWithResult(code, intent, resolvedType, whitelistToken, finishedReceiver, requiredPermission, bundle);
        }
        if (intent == null) {
            Slog.wtf(TAG, "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        try {
            iIntentSender.send(code, intent2, resolvedType, whitelistToken, null, requiredPermission, bundle);
        } catch (RemoteException e) {
        }
        if (finishedReceiver != null) {
            try {
                finishedReceiver.performReceive(intent2, 0, null, null, false, false, UserHandle.getCallingUserId());
            } catch (RemoteException e2) {
            }
        }
        return 0;
    }

    public void cancelIntentSender(IIntentSender sender) {
        if (sender instanceof PendingIntentRecord) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    PendingIntentRecord rec = (PendingIntentRecord) sender;
                    if (UserHandle.isSameApp(AppGlobals.getPackageManager().getPackageUid(rec.key.packageName, 268435456, UserHandle.getCallingUserId()), Binder.getCallingUid())) {
                        cancelIntentSenderLocked(rec, true);
                    } else {
                        String msg = "Permission Denial: cancelIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " is not allowed to cancel package " + rec.key.packageName;
                        Slog.w(TAG, msg);
                        throw new SecurityException(msg);
                    }
                } catch (RemoteException e) {
                    throw new SecurityException(e);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    /* access modifiers changed from: package-private */
    public void cancelIntentSenderLocked(PendingIntentRecord rec, boolean cleanActivity) {
        makeIntentSenderCanceledLocked(rec);
        this.mIntentSenderRecords.remove(rec.key);
        if (cleanActivity && rec.key.activity != null) {
            rec.key.activity.pendingResults.remove(rec.ref);
        }
    }

    /* access modifiers changed from: package-private */
    public void makeIntentSenderCanceledLocked(PendingIntentRecord rec) {
        rec.canceled = true;
        RemoteCallbackList<IResultReceiver> callbacks = rec.detachCancelListenersLocked();
        if (callbacks != null) {
            this.mHandler.obtainMessage(67, callbacks).sendToTarget();
        }
    }

    public String getPackageForIntentSender(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            return ((PendingIntentRecord) pendingResult).key.packageName;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public void registerIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        boolean isCancelled;
        if (sender instanceof PendingIntentRecord) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    PendingIntentRecord pendingIntent = (PendingIntentRecord) sender;
                    isCancelled = pendingIntent.canceled;
                    if (!isCancelled) {
                        pendingIntent.registerCancelListenerLocked(receiver);
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (isCancelled) {
                try {
                    receiver.send(0, null);
                } catch (RemoteException e) {
                }
            }
        }
    }

    public void unregisterIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        if (sender instanceof PendingIntentRecord) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ((PendingIntentRecord) sender).unregisterCancelListenerLocked(receiver);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public int getUidForIntentSender(IIntentSender sender) {
        if (sender instanceof PendingIntentRecord) {
            try {
                return ((PendingIntentRecord) sender).uid;
            } catch (ClassCastException e) {
            }
        }
        return -1;
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.allIntents == null) {
                return false;
            }
            for (Intent intent : res.key.allIntents) {
                if (intent.getPackage() != null && intent.getComponent() != null) {
                    return false;
                }
            }
            return true;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAnActivity(IIntentSender pendingResult) {
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            if (((PendingIntentRecord) pendingResult).key.type == 2) {
                return true;
            }
            return false;
        } catch (ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAForegroundService(IIntentSender pendingResult) {
        boolean z = false;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return false;
        }
        if (((PendingIntentRecord) pendingResult).key.type == 5) {
            z = true;
        }
        return z;
    }

    public Intent getIntentForIntentSender(IIntentSender pendingResult) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        Intent intent = null;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            if (res.key.requestIntent != null) {
                intent = new Intent(res.key.requestIntent);
            }
            return intent;
        } catch (ClassCastException e) {
            return null;
        }
    }

    public String getTagForIntentSender(IIntentSender pendingResult, String prefix) {
        String tagForIntentSenderLocked;
        if (!(pendingResult instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            synchronized (this) {
                boostPriorityForLockedSection();
                tagForIntentSenderLocked = getTagForIntentSenderLocked(res, prefix);
            }
            resetPriorityAfterLockedSection();
            return tagForIntentSenderLocked;
        } catch (ClassCastException e) {
            return null;
        } catch (Throwable th) {
            while (true) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix) {
        Intent intent = res.key.requestIntent;
        if (intent == null) {
            return null;
        }
        if (res.lastTag != null && res.lastTagPrefix == prefix && (res.lastTagPrefix == null || res.lastTagPrefix.equals(prefix))) {
            return res.lastTag;
        }
        res.lastTagPrefix = prefix;
        StringBuilder sb = new StringBuilder(128);
        if (prefix != null) {
            sb.append(prefix);
        }
        if (intent.getAction() != null) {
            sb.append(intent.getAction());
        } else if (intent.getComponent() != null) {
            intent.getComponent().appendShortString(sb);
        } else {
            sb.append("?");
        }
        String sb2 = sb.toString();
        res.lastTag = sb2;
        return sb2;
    }

    public void setProcessLimit(int max) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.setOverrideMaxCachedProcesses(max);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        trimApplications();
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return overrideMaxCachedProcesses;
    }

    /* access modifiers changed from: package-private */
    public void importanceTokenDied(ImportanceToken token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    if (this.mImportantProcesses.get(token.pid) != token) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mImportantProcesses.remove(token.pid);
                    ProcessRecord pr = this.mPidsSelfLocked.get(token.pid);
                    if (pr == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    pr.forcingToImportant = null;
                    updateProcessForegroundLocked(pr, false, false);
                    updateOomAdjLocked();
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:31:0x006b, code lost:
        if (r0 == false) goto L_0x0070;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:?, code lost:
        updateOomAdjLocked();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0071, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x0074, code lost:
        return;
     */
    public void setProcessImportant(IBinder token, int pid, boolean isForeground, String reason) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessImportant()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean changed = false;
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pid);
                    if (pr != null || !isForeground) {
                        ImportanceToken oldToken = this.mImportantProcesses.get(pid);
                        if (oldToken != null) {
                            oldToken.token.unlinkToDeath(oldToken, 0);
                            this.mImportantProcesses.remove(pid);
                            if (pr != null) {
                                pr.forcingToImportant = null;
                            }
                            changed = true;
                        }
                        if (isForeground && token != null) {
                            ImportanceToken newToken = new ImportanceToken(pid, token, reason) {
                                public void binderDied() {
                                    ActivityManagerService.this.importanceTokenDied(this);
                                }
                            };
                            try {
                                token.linkToDeath(newToken, 0);
                                this.mImportantProcesses.put(pid, newToken);
                                pr.forcingToImportant = newToken;
                                changed = true;
                            } catch (RemoteException e) {
                            }
                        }
                    } else {
                        Slog.w(TAG, "setProcessForeground called on unknown pid: " + pid);
                        resetPriorityAfterLockedSection();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:11:0x001c, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x001f, code lost:
        return r1;
     */
    public boolean isAppForeground(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mActiveUids.get(uid);
                boolean z = false;
                if (uidRec != null) {
                    if (!uidRec.idle) {
                        if (uidRec.curProcState <= 5) {
                            z = true;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public int getUidState(int uid) {
        int uidStateLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                uidStateLocked = getUidStateLocked(uid);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return uidStateLocked;
    }

    /* access modifiers changed from: package-private */
    public int getUidStateLocked(int uid) {
        UidRecord uidRec = this.mActiveUids.get(uid);
        if (uidRec == null) {
            return 19;
        }
        return uidRec.curProcState;
    }

    public boolean isInMultiWindowMode(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                } else if (this.mHwAMSEx.isSpecialVideoForPCMode(r)) {
                    HwPCUtils.log(TAG, "isInMultiWindowMode video running on PC modere turn");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                } else {
                    boolean inMultiWindowMode = r.inMultiWindowMode();
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return inMultiWindowMode;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public boolean isInPictureInPictureMode(IBinder token) {
        boolean isInPictureInPictureMode;
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                isInPictureInPictureMode = isInPictureInPictureMode(ActivityRecord.forTokenLocked(token));
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            return isInPictureInPictureMode;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    private boolean isInPictureInPictureMode(ActivityRecord r) {
        if (r == null || r.getStack() == null || !r.inPinnedWindowingMode() || r.getStack().isInStackLocked(r) == null) {
            return false;
        }
        return !((PinnedStackWindowController) ((PinnedActivityStack) r.getStack()).getWindowContainerController()).isAnimatingBoundsToFullscreen();
    }

    public void setExitInfo(float pivotX, float pivotY, int iconWidth, int iconHeight, Bitmap iconBitmap, int flag) {
        this.mWindowManager.setExitInfo(pivotX, pivotY, iconWidth, iconHeight, iconBitmap, flag);
    }

    public boolean enterPictureInPictureMode(IBinder token, PictureInPictureParams params) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (!HwPCUtils.enabledInPad() || !HwPCUtils.isPcCastModeInServer()) {
                    ActivityRecord r = ensureValidPictureInPictureActivityParamsLocked("enterPictureInPictureMode", token, params);
                    if (isInPictureInPictureMode(r)) {
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(origId);
                        return true;
                    } else if (!r.checkEnterPictureInPictureState("enterPictureInPictureMode", false)) {
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(origId);
                        return false;
                    } else {
                        final Runnable enterPipRunnable = new Runnable(r, params) {
                            private final /* synthetic */ ActivityRecord f$1;
                            private final /* synthetic */ PictureInPictureParams f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run() {
                                ActivityManagerService.lambda$enterPictureInPictureMode$1(ActivityManagerService.this, this.f$1, this.f$2);
                            }
                        };
                        if (isKeyguardLocked()) {
                            try {
                                dismissKeyguard(token, new KeyguardDismissCallback() {
                                    public void onDismissSucceeded() throws RemoteException {
                                        ActivityManagerService.this.mHandler.post(enterPipRunnable);
                                    }
                                }, null);
                            } catch (RemoteException e) {
                            }
                        } else {
                            enterPipRunnable.run();
                        }
                    }
                } else {
                    HwPCUtils.log(TAG, "ignore enterPictureInPictureMode in pad pc mode");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
            return true;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public static /* synthetic */ void lambda$enterPictureInPictureMode$1(ActivityManagerService activityManagerService, ActivityRecord r, PictureInPictureParams params) {
        synchronized (activityManagerService) {
            try {
                boostPriorityForLockedSection();
                r.pictureInPictureArgs.copyOnlySet(params);
                float aspectRatio = r.pictureInPictureArgs.getAspectRatio();
                List<RemoteAction> actions = r.pictureInPictureArgs.getActions();
                activityManagerService.mStackSupervisor.moveActivityToPinnedStackLocked(r, new Rect(r.pictureInPictureArgs.getSourceRectHint()), aspectRatio, "enterPictureInPictureMode");
                PinnedActivityStack stack = (PinnedActivityStack) r.getStack();
                stack.setPictureInPictureAspectRatio(aspectRatio);
                stack.setPictureInPictureActions(actions);
                MetricsLoggerWrapper.logPictureInPictureEnter(activityManagerService.mContext, r.appInfo.uid, r.shortComponentName, r.supportsEnterPipOnTaskSwitch);
                activityManagerService.logPictureInPictureArgs(params);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setPictureInPictureParams(IBinder token, PictureInPictureParams params) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ensureValidPictureInPictureActivityParamsLocked("setPictureInPictureParams", token, params);
                r.pictureInPictureArgs.copyOnlySet(params);
                if (r.inPinnedWindowingMode()) {
                    PinnedActivityStack stack = (PinnedActivityStack) r.getStack();
                    if (!stack.isAnimatingBoundsToFullscreen()) {
                        stack.setPictureInPictureAspectRatio(r.pictureInPictureArgs.getAspectRatio());
                        stack.setPictureInPictureActions(r.pictureInPictureArgs.getActions());
                    }
                }
                logPictureInPictureArgs(params);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public int getMaxNumPictureInPictureActions(IBinder token) {
        return 3;
    }

    private void logPictureInPictureArgs(PictureInPictureParams params) {
        if (params.hasSetActions()) {
            MetricsLogger.histogram(this.mContext, "tron_varz_picture_in_picture_actions_count", params.getActions().size());
        }
        if (params.hasSetAspectRatio()) {
            LogMaker lm = new LogMaker(824);
            lm.addTaggedData(825, Float.valueOf(params.getAspectRatio()));
            MetricsLogger.action(lm);
        }
    }

    private ActivityRecord ensureValidPictureInPictureActivityParamsLocked(String caller, IBinder token, PictureInPictureParams params) {
        if (this.mSupportsPictureInPicture) {
            ActivityRecord r = ActivityRecord.forTokenLocked(token);
            if (r == null) {
                throw new IllegalStateException(caller + ": Can't find activity for token=" + token);
            } else if (!r.supportsPictureInPicture()) {
                throw new IllegalStateException(caller + ": Current activity does not support picture-in-picture.");
            } else if (!params.hasSetAspectRatio() || this.mWindowManager.isValidPictureInPictureAspectRatio(r.getStack().mDisplayId, params.getAspectRatio())) {
                params.truncateActions(getMaxNumPictureInPictureActions(token));
                return r;
            } else {
                float minAspectRatio = this.mContext.getResources().getFloat(17104971);
                float maxAspectRatio = this.mContext.getResources().getFloat(17104970);
                throw new IllegalArgumentException(String.format(caller + ": Aspect ratio is too extreme (must be between %f and %f).", new Object[]{Float.valueOf(minAspectRatio), Float.valueOf(maxAspectRatio)}));
            }
        } else {
            throw new IllegalStateException(caller + ": Device doesn't support picture-in-picture mode.");
        }
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] pids, int[] states, int[] scores) {
        int i;
        if (scores != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (pids == null) {
            throw new NullPointerException("pids");
        } else if (states == null) {
            throw new NullPointerException("states");
        } else if (pids.length != states.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        } else if (scores == null || pids.length == scores.length) {
            synchronized (this.mPidsSelfLocked) {
                for (int i2 = 0; i2 < pids.length; i2++) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pids[i2]);
                    if (pr == null) {
                        i = 19;
                    } else {
                        i = pr.curProcState;
                    }
                    states[i2] = i;
                    if (scores != null) {
                        scores[i2] = pr == null ? -10000 : pr.curAdj;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
    }

    /* access modifiers changed from: package-private */
    public int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
        if (pid == MY_PID) {
            return 0;
        }
        return ActivityManager.checkComponentPermission(permission, uid, owningUid, exported);
    }

    public int checkPermission(String permission, int pid, int uid) {
        if (permission == null) {
            return -1;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    public int checkPermissionWithToken(String permission, int pid, int uid, IBinder callerToken) {
        if (permission == null) {
            return -1;
        }
        Identity tlsIdentity = sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            Slog.d(TAG, "checkComponentPermission() adjusting {pid,uid} to {" + tlsIdentity.pid + "," + tlsIdentity.uid + "}");
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    /* access modifiers changed from: package-private */
    public int checkCallingPermission(String permission) {
        return checkPermission(permission, Binder.getCallingPid(), UserHandle.getAppId(Binder.getCallingUid()));
    }

    /* access modifiers changed from: package-private */
    public void enforceCallingPermission(String permission, String func) {
        if (checkCallingPermission(permission) != 0) {
            String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + permission;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void enforcePermission(String permission, int pid, int uid, String func) {
        if (checkPermission(permission, pid, uid) != 0) {
            String msg = "Permission Denial: " + func + " from pid=" + pid + ", uid=" + uid + " requires " + permission;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* access modifiers changed from: package-private */
    public void enforceCallerIsRecentsOrHasPermission(String permission, String func) {
        if (!this.mRecentTasks.isCallerRecents(Binder.getCallingUid())) {
            enforceCallingPermission(permission, func);
        }
    }

    private final boolean checkHoldingPermissionsLocked(IPackageManager pm, ProviderInfo pi, GrantUri grantUri, int uid, int modeFlags) {
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "checkHoldingPermissionsLocked: uri=" + grantUri + " uid=" + uid);
        }
        if (UserHandle.getUserId(uid) == grantUri.sourceUserId || ActivityManager.checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", uid, -1, true) == 0) {
            return checkHoldingPermissionsInternalLocked(pm, pi, grantUri, uid, modeFlags, true);
        }
        return false;
    }

    /* JADX WARNING: Removed duplicated region for block: B:66:0x00dd A[Catch:{ RemoteException -> 0x0144 }] */
    /* JADX WARNING: Removed duplicated region for block: B:76:0x0132  */
    private final boolean checkHoldingPermissionsInternalLocked(IPackageManager pm, ProviderInfo pi, GrantUri grantUri, int uid, int modeFlags, boolean considerUidPermissions) {
        boolean allowDefaultRead;
        boolean allowDefaultRead2;
        boolean allowDefaultRead3;
        boolean allowDefaultRead4;
        String pprperm;
        IPackageManager iPackageManager = pm;
        ProviderInfo providerInfo = pi;
        int i = uid;
        if (providerInfo.applicationInfo.uid == i) {
            return true;
        }
        if (!providerInfo.exported) {
            return false;
        }
        boolean readMet = (modeFlags & 1) == 0;
        boolean writeMet = (modeFlags & 2) == 0;
        if (!readMet) {
            try {
                if (providerInfo.readPermission != null && considerUidPermissions && iPackageManager.checkUidPermission(providerInfo.readPermission, i) == 0) {
                    readMet = true;
                }
            } catch (RemoteException e) {
                GrantUri grantUri2 = grantUri;
                return false;
            }
        }
        if (!writeMet && providerInfo.writePermission != null && considerUidPermissions && iPackageManager.checkUidPermission(providerInfo.writePermission, i) == 0) {
            writeMet = true;
        }
        boolean allowDefaultRead5 = providerInfo.readPermission == null;
        boolean allowDefaultWrite = providerInfo.writePermission == null;
        PathPermission[] pps = providerInfo.pathPermissions;
        if (pps != null) {
            try {
                String path = grantUri.uri.getPath();
                int i2 = pps.length;
                while (true) {
                    if (i2 <= 0) {
                        allowDefaultRead = allowDefaultRead5;
                        break;
                    }
                    if (readMet) {
                        if (writeMet) {
                            allowDefaultRead = allowDefaultRead5;
                            break;
                        }
                    }
                    i2--;
                    PathPermission pp = pps[i2];
                    if (pp.match(path)) {
                        if (!readMet) {
                            String pprperm2 = pp.getReadPermission();
                            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                                StringBuilder sb = new StringBuilder();
                                allowDefaultRead4 = allowDefaultRead5;
                                sb.append("Checking read perm for ");
                                pprperm = pprperm2;
                                sb.append(pprperm);
                                sb.append(" for ");
                                sb.append(pp.getPath());
                                sb.append(": match=");
                                sb.append(pp.match(path));
                                sb.append(" check=");
                                sb.append(iPackageManager.checkUidPermission(pprperm, i));
                                Slog.v(TAG, sb.toString());
                            } else {
                                allowDefaultRead4 = allowDefaultRead5;
                                pprperm = pprperm2;
                            }
                            if (pprperm != null) {
                                if (!considerUidPermissions || iPackageManager.checkUidPermission(pprperm, i) != 0) {
                                    allowDefaultRead2 = false;
                                    if (writeMet) {
                                        String ppwperm = pp.getWritePermission();
                                        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                                            StringBuilder sb2 = new StringBuilder();
                                            allowDefaultRead3 = allowDefaultRead2;
                                            sb2.append("Checking write perm ");
                                            sb2.append(ppwperm);
                                            sb2.append(" for ");
                                            sb2.append(pp.getPath());
                                            sb2.append(": match=");
                                            sb2.append(pp.match(path));
                                            sb2.append(" check=");
                                            sb2.append(iPackageManager.checkUidPermission(ppwperm, i));
                                            Slog.v(TAG, sb2.toString());
                                        } else {
                                            allowDefaultRead3 = allowDefaultRead2;
                                        }
                                        if (ppwperm != null) {
                                            if (!considerUidPermissions || iPackageManager.checkUidPermission(ppwperm, i) != 0) {
                                                allowDefaultWrite = false;
                                            } else {
                                                writeMet = true;
                                            }
                                        }
                                    } else {
                                        allowDefaultRead3 = allowDefaultRead2;
                                    }
                                    allowDefaultRead5 = allowDefaultRead3;
                                } else {
                                    readMet = true;
                                }
                            }
                        } else {
                            allowDefaultRead4 = allowDefaultRead5;
                        }
                        allowDefaultRead2 = allowDefaultRead4;
                        if (writeMet) {
                        }
                        allowDefaultRead5 = allowDefaultRead3;
                    } else {
                        boolean z = allowDefaultRead5;
                    }
                    ProviderInfo providerInfo2 = pi;
                }
                allowDefaultRead5 = allowDefaultRead;
            } catch (RemoteException e2) {
                return false;
            }
        } else {
            GrantUri grantUri3 = grantUri;
        }
        if (allowDefaultRead5) {
            readMet = true;
        }
        if (allowDefaultWrite) {
            writeMet = true;
        }
        return readMet && writeMet;
    }

    public boolean isAppStartModeDisabled(int uid, String packageName) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                z = getAppStartModeLocked(uid, packageName, 0, -1, false, true, false) == 3;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* access modifiers changed from: package-private */
    public int appRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        if (isOnDeviceIdleWhitelistLocked(uid, false) && (this.mCustAms == null || !this.mCustAms.isAddRestrictedForCust(packageName))) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " on idle whitelist; not restricted in background");
            }
            return 0;
        } else if (packageTargetSdk >= 26) {
            Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " targets O+, restricted");
            return 2;
        } else {
            int appop = this.mAppOpsService.noteOperation(HANDLE_TRUST_STORAGE_UPDATE_MSG, uid, packageName);
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Legacy app " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " bg appop " + appop);
            }
            switch (appop) {
                case 0:
                    if (!this.mForceBackgroundCheck || UserHandle.isCore(uid) || isOnDeviceIdleWhitelistLocked(uid, true)) {
                        return 0;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        Slog.i(TAG, "Force background check: " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " restricted");
                    }
                    return 1;
                case 1:
                    return 1;
                default:
                    return 2;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public int appServicesRestrictedInBackgroundLocked(int uid, String packageName, int packageTargetSdk) {
        if (getPackageManagerInternalLocked().isPackagePersistent(packageName)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " is persistent; not restricted in background");
            }
            return 0;
        } else if (!uidOnBackgroundWhitelist(uid)) {
            return appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " on background whitelist; not restricted in background");
            }
            return 0;
        }
    }

    /* access modifiers changed from: package-private */
    public int getAppStartModeLocked(int uid, String packageName, int packageTargetSdk, int callingPid, boolean alwaysRestrict, boolean disabledOnly, boolean forcedStandby) {
        boolean ephemeral;
        int startMode;
        ProcessRecord proc;
        UidRecord uidRec = this.mActiveUids.get(uid);
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            StringBuilder sb = new StringBuilder();
            sb.append("checkAllowBackground: uid=");
            sb.append(uid);
            sb.append(" pkg=");
            sb.append(packageName);
            sb.append(" rec=");
            sb.append(uidRec);
            sb.append(" always=");
            sb.append(alwaysRestrict);
            sb.append(" idle=");
            sb.append(uidRec != null ? uidRec.idle : false);
            Slog.d(TAG, sb.toString());
        }
        if (uidRec != null && !alwaysRestrict && !forcedStandby && !uidRec.idle) {
            return 0;
        }
        if (uidRec == null) {
            ephemeral = getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packageName);
        } else {
            ephemeral = uidRec.ephemeral;
        }
        if (ephemeral) {
            return 3;
        }
        if (disabledOnly) {
            return 0;
        }
        if (alwaysRestrict) {
            startMode = appRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        } else {
            startMode = appServicesRestrictedInBackgroundLocked(uid, packageName, packageTargetSdk);
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.d(TAG, "checkAllowBackground: uid=" + uid + " pkg=" + packageName + " startMode=" + startMode + " onwhitelist=" + isOnDeviceIdleWhitelistLocked(uid, false) + " onwhitelist(ei)=" + isOnDeviceIdleWhitelistLocked(uid, true));
        }
        if (startMode == 1 && callingPid >= 0) {
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(callingPid);
            }
            if (proc == null || ActivityManager.isProcStateBackground(proc.curProcState)) {
                return startMode;
            }
            return 0;
        }
        return startMode;
    }

    /* access modifiers changed from: package-private */
    public boolean isOnDeviceIdleWhitelistLocked(int uid, boolean allowExceptIdleToo) {
        int[] whitelist;
        int appId = UserHandle.getAppId(uid);
        if (allowExceptIdleToo) {
            whitelist = this.mDeviceIdleExceptIdleWhitelist;
        } else {
            whitelist = this.mDeviceIdleWhitelist;
        }
        return Arrays.binarySearch(whitelist, appId) >= 0 || Arrays.binarySearch(this.mDeviceIdleTempWhitelist, appId) >= 0 || this.mPendingTempWhitelist.indexOfKey(uid) >= 0;
    }

    private ProviderInfo getProviderInfoLocked(String authority, int userHandle, int pmFlags) {
        ContentProviderRecord cpr = this.mProviderMap.getProviderByName(authority, userHandle);
        if (cpr != null) {
            return cpr.info;
        }
        try {
            return AppGlobals.getPackageManager().resolveContentProvider(authority, 2048 | pmFlags, userHandle);
        } catch (RemoteException e) {
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public void grantEphemeralAccessLocked(int userId, Intent intent, int targetAppId, int ephemeralAppId) {
        getPackageManagerInternalLocked().grantEphemeralAccess(userId, intent, targetAppId, ephemeralAppId);
    }

    @GuardedBy("this")
    private UriPermission findUriPermissionLocked(int targetUid, GrantUri grantUri) {
        ArrayMap<GrantUri, UriPermission> targetUris = this.mGrantedUriPermissions.get(targetUid);
        if (targetUris != null) {
            return targetUris.get(grantUri);
        }
        return null;
    }

    @GuardedBy("this")
    private UriPermission findOrCreateUriPermissionLocked(String sourcePkg, String targetPkg, int targetUid, GrantUri grantUri) {
        ArrayMap<GrantUri, UriPermission> targetUris = this.mGrantedUriPermissions.get(targetUid);
        if (targetUris == null) {
            targetUris = Maps.newArrayMap();
            this.mGrantedUriPermissions.put(targetUid, targetUris);
        }
        UriPermission perm = targetUris.get(grantUri);
        if (perm != null) {
            return perm;
        }
        UriPermission perm2 = new UriPermission(sourcePkg, targetPkg, targetUid, grantUri);
        targetUris.put(grantUri, perm2);
        return perm2;
    }

    @GuardedBy("this")
    private boolean checkUriPermissionLocked(GrantUri grantUri, int uid, int modeFlags) {
        int minStrength;
        if ((modeFlags & 64) != 0) {
            minStrength = 3;
        } else {
            minStrength = 1;
        }
        if (grantUri != null) {
            uid = this.mHwAMSEx.getUidByUriAuthority(grantUri.uri, uid);
        }
        if (uid == 0) {
            return true;
        }
        ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.get(uid);
        if (perms == null) {
            return false;
        }
        UriPermission exactPerm = perms.get(grantUri);
        if (exactPerm != null && exactPerm.getStrength(modeFlags) >= minStrength) {
            return true;
        }
        int N = perms.size();
        for (int i = 0; i < N; i++) {
            UriPermission perm = perms.valueAt(i);
            if (perm.uri.prefix && grantUri.uri.isPathPrefixMatch(perm.uri.uri) && perm.getStrength(modeFlags) >= minStrength) {
                return true;
            }
        }
        return false;
    }

    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, int userId, IBinder callerToken) {
        enforceNotIsolatedCaller("checkUriPermission");
        Identity tlsIdentity = sCallerIdentity.get();
        if (tlsIdentity != null && tlsIdentity.token == callerToken) {
            uid = tlsIdentity.uid;
            pid = tlsIdentity.pid;
        }
        int i = 0;
        if (pid == MY_PID) {
            return 0;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!checkUriPermissionLocked(new GrantUri(userId, uri, false), uid, modeFlags)) {
                    i = -1;
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return i;
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:91:0x01a3  */
    @GuardedBy("this")
    public int checkGrantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri, int modeFlags, int lastTargetUid) {
        ProviderInfo pi;
        boolean specialCrossUserGrant;
        int i = callingUid;
        String str = targetPkg;
        GrantUri grantUri2 = grantUri;
        int i2 = modeFlags;
        int allowedResult = -1;
        if (!Intent.isAccessUriMode(modeFlags)) {
            return -1;
        }
        if (str != null && ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "Checking grant " + str + " permission to " + grantUri2);
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (grantUri2 == null || grantUri2.uri == null) {
            return -1;
        }
        if (!"content".equals(grantUri2.uri.getScheme())) {
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                Slog.v(TAG, "Can't grant URI permission for non-content URI: " + grantUri2);
            }
            return -1;
        }
        int callingAppId = UserHandle.getAppId(callingUid);
        if ((callingAppId == 1000 || callingAppId == 0) && !"com.android.settings.files".equals(grantUri2.uri.getAuthority()) && !this.mHwAMSEx.isExemptedAuthority(grantUri2.uri)) {
            Slog.w(TAG, "For security reasons, the system cannot issue a Uri permission grant to " + grantUri2 + "; use startActivityAsCaller() instead");
            return -1;
        }
        ProviderInfo pi2 = getProviderInfoLocked(grantUri2.uri.getAuthority(), grantUri2.sourceUserId, 268435456);
        if (pi2 == null) {
            Slog.w(TAG, "No content provider found for permission check: " + grantUri2.uri.toSafeString());
            return -1;
        }
        int targetUid = lastTargetUid;
        if (targetUid < 0 && str != null) {
            try {
                targetUid = pm.getPackageUid(str, 268435456, UserHandle.getUserId(callingUid));
                if (targetUid < 0) {
                    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                        Slog.v(TAG, "Can't grant URI permission no uid for: " + str);
                    }
                    return -1;
                }
            } catch (RemoteException e) {
                return -1;
            }
        }
        int targetUid2 = targetUid;
        if ((i2 & 64) != 0) {
            allowedResult = targetUid2;
        }
        int allowedResult2 = allowedResult;
        int i3 = 0;
        if (targetUid2 < 0) {
            boolean allowed = pi2.exported;
            if (!((i2 & 1) == 0 || pi2.readPermission == null)) {
                allowed = false;
            }
            if (!((i2 & 2) == 0 || pi2.writePermission == null)) {
                allowed = false;
            }
            if (pi2.pathPermissions != null) {
                int N = pi2.pathPermissions.length;
                int i4 = 0;
                while (true) {
                    if (i4 >= N) {
                        break;
                    } else if (pi2.pathPermissions[i4] == null || !pi2.pathPermissions[i4].match(grantUri2.uri.getPath())) {
                        i4++;
                    } else {
                        if (!((i2 & 1) == 0 || pi2.pathPermissions[i4].getReadPermission() == null)) {
                            allowed = false;
                        }
                        if ((i2 & 2) != 0 && pi2.pathPermissions[i4].getWritePermission() != null) {
                            allowed = false;
                        }
                    }
                }
            }
            if (allowed) {
                return allowedResult2;
            }
        } else if (checkHoldingPermissionsLocked(pm, pi2, grantUri2, targetUid2, i2)) {
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                Slog.v(TAG, "Target " + str + " already has full permission to " + grantUri2);
            }
            return allowedResult2;
        }
        if (UserHandle.getUserId(targetUid2) != grantUri2.sourceUserId) {
            pi = pi2;
            if (checkHoldingPermissionsInternalLocked(pm, pi2, grantUri2, i, i2, false)) {
                specialCrossUserGrant = true;
                if (!specialCrossUserGrant) {
                    if (!pi.grantUriPermissions) {
                        throw new SecurityException("Provider " + pi.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + pi.name + " does not allow granting of Uri permissions (uri " + grantUri2 + ")");
                    } else if (pi.uriPermissionPatterns != null) {
                        int N2 = pi.uriPermissionPatterns.length;
                        boolean allowed2 = false;
                        while (true) {
                            int i5 = i3;
                            if (i5 < N2) {
                                if (pi.uriPermissionPatterns[i5] != null && pi.uriPermissionPatterns[i5].match(grantUri2.uri.getPath())) {
                                    allowed2 = true;
                                    break;
                                }
                                i3 = i5 + 1;
                            } else {
                                break;
                            }
                        }
                        if (!allowed2) {
                            throw new SecurityException("Provider " + pi.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + pi.name + " does not allow granting of permission to path of Uri " + grantUri2);
                        }
                    }
                }
                if (!checkHoldingPermissionsLocked(pm, pi, grantUri2, i, i2) || checkUriPermissionLocked(grantUri2, i, i2)) {
                    return targetUid2;
                }
                if ("android.permission.MANAGE_DOCUMENTS".equals(pi.readPermission)) {
                    throw new SecurityException("UID " + i + " does not have permission to " + grantUri2 + "; you could obtain access using ACTION_OPEN_DOCUMENT or related APIs");
                }
                throw new SecurityException("UID " + i + " does not have permission to " + grantUri2);
            }
        } else {
            pi = pi2;
        }
        specialCrossUserGrant = false;
        if (!specialCrossUserGrant) {
        }
        if (!checkHoldingPermissionsLocked(pm, pi, grantUri2, i, i2)) {
        }
        return targetUid2;
    }

    public int checkGrantUriPermission(int callingUid, String targetPkg, Uri uri, int modeFlags, int userId) {
        int checkGrantUriPermissionLocked;
        enforceNotIsolatedCaller("checkGrantUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                checkGrantUriPermissionLocked = checkGrantUriPermissionLocked(callingUid, targetPkg, new GrantUri(userId, uri, false), modeFlags, -1);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return checkGrantUriPermissionLocked;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void grantUriPermissionUncheckedLocked(int targetUid, String targetPkg, GrantUri grantUri, int modeFlags, UriPermissionOwner owner) {
        if (Intent.isAccessUriMode(modeFlags)) {
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                Slog.v(TAG, "Granting " + targetPkg + SliceClientPermissions.SliceAuthority.DELIMITER + targetUid + " permission to " + grantUri);
            }
            ProviderInfo pi = getProviderInfoLocked(grantUri.uri.getAuthority(), grantUri.sourceUserId, 268435456);
            if (pi == null) {
                Slog.w(TAG, "No content provider found for grant: " + grantUri.toSafeString());
                return;
            }
            if ((modeFlags & 128) != 0) {
                grantUri.prefix = true;
            }
            findOrCreateUriPermissionLocked(pi.packageName, targetPkg, targetUid, grantUri).grantModes(modeFlags, owner);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void grantUriPermissionLocked(int callingUid, String targetPkg, GrantUri grantUri, int modeFlags, UriPermissionOwner owner, int targetUserId) {
        if (targetPkg != null) {
            try {
                int targetUid = checkGrantUriPermissionLocked(callingUid, targetPkg, grantUri, modeFlags, AppGlobals.getPackageManager().getPackageUid(targetPkg, 268435456, targetUserId));
                if (targetUid >= 0) {
                    grantUriPermissionUncheckedLocked(targetUid, targetPkg, grantUri, modeFlags, owner);
                }
            } catch (RemoteException e) {
            }
        } else {
            throw new NullPointerException(ATTR_TARGET_PKG);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid, String targetPkg, Intent intent, int mode, NeededUriGrants needed, int targetUserId) {
        int targetUid;
        int i;
        String str = targetPkg;
        Intent intent2 = intent;
        int i2 = mode;
        NeededUriGrants needed2 = needed;
        int i3 = targetUserId;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            StringBuilder sb = new StringBuilder();
            sb.append("Checking URI perm to data=");
            sb.append(intent2 != null ? intent.getData() : null);
            sb.append(" clip=");
            sb.append(intent2 != null ? intent.getClipData() : null);
            sb.append(" from ");
            sb.append(intent2);
            sb.append("; flags=0x");
            sb.append(Integer.toHexString(intent2 != null ? intent.getFlags() : 0));
            Slog.v(TAG, sb.toString());
        }
        if (str == null) {
            throw new NullPointerException(ATTR_TARGET_PKG);
        } else if (intent2 == null) {
            return null;
        } else {
            Uri data = intent.getData();
            ClipData clip = intent.getClipData();
            if (data == null && clip == null) {
                return null;
            }
            int contentUserHint = intent.getContentUserHint();
            if (contentUserHint == -2) {
                contentUserHint = UserHandle.getUserId(callingUid);
            }
            int contentUserHint2 = contentUserHint;
            IPackageManager pm = AppGlobals.getPackageManager();
            if (needed2 != null) {
                targetUid = needed2.targetUid;
            } else {
                try {
                    targetUid = pm.getPackageUid(str, 268435456, i3);
                    if (targetUid < 0) {
                        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                            Slog.v(TAG, "Can't grant URI permission no uid for: " + str + " on user " + i3);
                        }
                        return null;
                    }
                } catch (RemoteException e) {
                    IPackageManager iPackageManager = pm;
                    RemoteException remoteException = e;
                    return null;
                }
            }
            if (data != null) {
                GrantUri grantUri = GrantUri.resolve(contentUserHint2, data);
                GrantUri grantUri2 = grantUri;
                IPackageManager iPackageManager2 = pm;
                targetUid = checkGrantUriPermissionLocked(callingUid, str, grantUri, i2, targetUid);
                if (targetUid > 0) {
                    if (needed2 == null) {
                        needed2 = new NeededUriGrants(str, targetUid, i2);
                    }
                    needed2.add(grantUri2);
                }
            }
            if (clip != null) {
                int targetUid2 = targetUid;
                NeededUriGrants needed3 = needed2;
                int i4 = 0;
                while (true) {
                    int i5 = i4;
                    if (i5 >= clip.getItemCount()) {
                        break;
                    }
                    Uri uri = clip.getItemAt(i5).getUri();
                    if (uri != null) {
                        GrantUri grantUri3 = GrantUri.resolve(contentUserHint2, uri);
                        GrantUri grantUri4 = grantUri3;
                        Uri uri2 = uri;
                        targetUid2 = checkGrantUriPermissionLocked(callingUid, str, grantUri3, i2, targetUid2);
                        if (targetUid2 > 0) {
                            if (needed3 == null) {
                                needed3 = new NeededUriGrants(str, targetUid2, i2);
                            }
                            needed3.add(grantUri4);
                        }
                        i = i5;
                    } else {
                        Intent clipIntent = clip.getItemAt(i5).getIntent();
                        if (clipIntent != null) {
                            i = i5;
                            NeededUriGrants newNeeded = checkGrantUriPermissionFromIntentLocked(callingUid, str, clipIntent, i2, needed3, i3);
                            if (newNeeded != null) {
                                needed3 = newNeeded;
                            }
                        } else {
                            i = i5;
                        }
                    }
                    i4 = i + 1;
                    Intent intent3 = intent;
                }
                needed2 = needed3;
            }
            return needed2;
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void grantUriPermissionUncheckedFromIntentLocked(NeededUriGrants needed, UriPermissionOwner owner) {
        if (needed != null) {
            for (int i = 0; i < needed.size(); i++) {
                grantUriPermissionUncheckedLocked(needed.targetUid, needed.targetPkg, (GrantUri) needed.get(i), needed.flags, owner);
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void grantUriPermissionFromIntentLocked(int callingUid, String targetPkg, Intent intent, UriPermissionOwner owner, int targetUserId) {
        NeededUriGrants needed = checkGrantUriPermissionFromIntentLocked(callingUid, targetPkg, intent, intent != null ? intent.getFlags() : 0, null, targetUserId);
        if (needed != null) {
            grantUriPermissionUncheckedFromIntentLocked(needed, owner);
        }
    }

    public void grantUriPermission(IApplicationThread caller, String targetPkg, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(userId, uri, false);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when granting permission to uri " + grantUri);
                } else if (targetPkg != null) {
                    Preconditions.checkFlagsArgument(modeFlags, HdmiCecKeycode.UI_SOUND_PRESENTATION_TREBLE_STEP_MINUS);
                    grantUriPermissionLocked(r.uid, targetPkg, grantUri, modeFlags, null, UserHandle.getUserId(r.uid));
                } else {
                    throw new IllegalArgumentException("null target");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void removeUriPermissionIfNeededLocked(UriPermission perm) {
        if (perm.modeFlags == 0) {
            ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.get(perm.targetUid);
            if (perms != null) {
                if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                    Slog.v(TAG, "Removing " + perm.targetUid + " permission to " + perm.uri);
                }
                perms.remove(perm.uri);
                if (perms.isEmpty()) {
                    this.mGrantedUriPermissions.remove(perm.targetUid);
                }
            }
        }
    }

    @GuardedBy("this")
    private void revokeUriPermissionLocked(String targetPackage, int callingUid, GrantUri grantUri, int modeFlags) {
        int targetUid;
        String str = targetPackage;
        int i = callingUid;
        GrantUri grantUri2 = grantUri;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "Revoking all granted permissions to " + grantUri2);
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        ProviderInfo pi = getProviderInfoLocked(grantUri2.uri.getAuthority(), grantUri2.sourceUserId, 786432);
        if (pi == null) {
            Slog.w(TAG, "No content provider found for permission revoke: " + grantUri.toSafeString());
            return;
        }
        int i2 = 1;
        if (!checkHoldingPermissionsLocked(pm, pi, grantUri2, i, modeFlags)) {
            ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.get(i);
            if (perms != null) {
                boolean persistChanged = false;
                int i3 = perms.size() - 1;
                while (true) {
                    int i4 = i3;
                    if (i4 < 0) {
                        break;
                    }
                    UriPermission perm = perms.valueAt(i4);
                    if ((str == null || str.equals(perm.targetPkg)) && perm.uri.sourceUserId == grantUri2.sourceUserId && perm.uri.uri.isPathPrefixMatch(grantUri2.uri)) {
                        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                            Slog.v(TAG, "Revoking non-owned " + perm.targetUid + " permission to " + perm.uri);
                        }
                        persistChanged |= perm.revokeModes(modeFlags | 64, false);
                        if (perm.modeFlags == 0) {
                            perms.removeAt(i4);
                        }
                    }
                    i3 = i4 - 1;
                }
                if (perms.isEmpty()) {
                    this.mGrantedUriPermissions.remove(i);
                }
                if (persistChanged) {
                    schedulePersistUriGrants();
                }
            }
            return;
        }
        boolean persistChanged2 = false;
        int i5 = this.mGrantedUriPermissions.size() - 1;
        while (i5 >= 0) {
            int targetUid2 = this.mGrantedUriPermissions.keyAt(i5);
            ArrayMap<GrantUri, UriPermission> perms2 = this.mGrantedUriPermissions.valueAt(i5);
            int j = perms2.size() - i2;
            while (j >= 0) {
                UriPermission perm2 = perms2.valueAt(j);
                if (str != null && !str.equals(perm2.targetPkg)) {
                    targetUid = targetUid2;
                } else if (perm2.uri.sourceUserId != grantUri2.sourceUserId || !perm2.uri.uri.isPathPrefixMatch(grantUri2.uri)) {
                    targetUid = targetUid2;
                } else {
                    if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                        StringBuilder sb = new StringBuilder();
                        targetUid = targetUid2;
                        sb.append("Revoking ");
                        sb.append(perm2.targetUid);
                        sb.append(" permission to ");
                        sb.append(perm2.uri);
                        Slog.v(TAG, sb.toString());
                    } else {
                        targetUid = targetUid2;
                    }
                    persistChanged2 |= perm2.revokeModes(modeFlags | 64, str == null);
                    if (perm2.modeFlags == 0) {
                        perms2.removeAt(j);
                    }
                }
                j--;
                targetUid2 = targetUid;
            }
            if (perms2.isEmpty()) {
                this.mGrantedUriPermissions.removeAt(i5);
            }
            i5--;
            i2 = 1;
        }
        if (persistChanged2) {
            schedulePersistUriGrants();
        }
    }

    public void revokeUriPermission(IApplicationThread caller, String targetPackage, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("revokeUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLocked(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when revoking permission to uri " + uri);
                } else if (uri == null) {
                    Slog.w(TAG, "revokeUriPermission: null uri");
                } else if (!Intent.isAccessUriMode(modeFlags)) {
                    resetPriorityAfterLockedSection();
                } else if (getProviderInfoLocked(uri.getAuthority(), userId, 786432) == null) {
                    Slog.w(TAG, "No content provider found for permission revoke: " + uri.toSafeString());
                    resetPriorityAfterLockedSection();
                } else {
                    revokeUriPermissionLocked(targetPackage, r.uid, new GrantUri(userId, uri, false), modeFlags);
                    resetPriorityAfterLockedSection();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @GuardedBy("this")
    private void removeUriPermissionsForPackageLocked(String packageName, int userHandle, boolean persistable, boolean targetOnly) {
        if (userHandle == -1 && packageName == null) {
            throw new IllegalArgumentException("Must narrow by either package or user");
        }
        boolean persistChanged = false;
        int N = this.mGrantedUriPermissions.size();
        int i = 0;
        while (i < N) {
            int targetUid = this.mGrantedUriPermissions.keyAt(i);
            ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.valueAt(i);
            if (userHandle == -1 || userHandle == UserHandle.getUserId(targetUid)) {
                Iterator<UriPermission> it = perms.values().iterator();
                while (it.hasNext()) {
                    UriPermission perm = it.next();
                    if ((packageName == null || ((!targetOnly && perm.sourcePkg.equals(packageName)) || perm.targetPkg.equals(packageName))) && (!"downloads".equals(perm.uri.uri.getAuthority()) || persistable)) {
                        persistChanged |= perm.revokeModes(persistable ? -1 : -65, true);
                        if (perm.modeFlags == 0) {
                            it.remove();
                        }
                    }
                }
                if (perms.isEmpty()) {
                    this.mGrantedUriPermissions.remove(targetUid);
                    N--;
                    i--;
                }
            }
            i++;
        }
        if (persistChanged) {
            schedulePersistUriGrants();
        }
    }

    public IBinder newUriPermissionOwner(String name) {
        Binder externalTokenLocked;
        enforceNotIsolatedCaller("newUriPermissionOwner");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                externalTokenLocked = new UriPermissionOwner(this, name).getExternalTokenLocked();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return externalTokenLocked;
    }

    public IBinder getUriPermissionOwnerForActivity(IBinder activityToken) {
        Binder externalTokenLocked;
        enforceNotIsolatedCaller("getUriPermissionOwnerForActivity");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(activityToken);
                if (r != null) {
                    externalTokenLocked = r.getUriPermissionsLocked().getExternalTokenLocked();
                } else {
                    throw new IllegalArgumentException("Activity does not exist; token=" + activityToken);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return externalTokenLocked;
    }

    public void grantUriPermissionFromOwner(IBinder token, int fromUid, String targetPkg, Uri uri, int modeFlags, int sourceUserId, int targetUserId) {
        Uri uri2 = uri;
        int targetUserId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), targetUserId, false, 2, "grantUriPermissionFromOwner", null);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UriPermissionOwner owner = UriPermissionOwner.fromExternalToken(token);
                if (owner != null) {
                    try {
                        int i = fromUid;
                        if (i != Binder.getCallingUid()) {
                            try {
                                if (Binder.getCallingUid() != Process.myUid()) {
                                    throw new SecurityException("nice try");
                                }
                            } catch (Throwable th) {
                                th = th;
                                IBinder iBinder = token;
                                int i2 = sourceUserId;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        if (targetPkg == null) {
                            int i3 = sourceUserId;
                            throw new IllegalArgumentException("null target");
                        } else if (uri2 != null) {
                            try {
                                grantUriPermissionLocked(i, targetPkg, new GrantUri(sourceUserId, uri2, false), modeFlags, owner, targetUserId2);
                                resetPriorityAfterLockedSection();
                            } catch (Throwable th2) {
                                th = th2;
                                int i4 = sourceUserId;
                                IBinder iBinder2 = token;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            int i5 = sourceUserId;
                            throw new IllegalArgumentException("null uri");
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        IBinder iBinder22 = token;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } else {
                    int i6 = fromUid;
                    int i7 = sourceUserId;
                    StringBuilder sb = new StringBuilder();
                    sb.append("Unknown owner: ");
                    sb.append(token);
                    throw new IllegalArgumentException(sb.toString());
                }
            } catch (Throwable th4) {
                th = th4;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void revokeUriPermissionFromOwner(IBinder token, Uri uri, int mode, int userId) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UriPermissionOwner owner = UriPermissionOwner.fromExternalToken(token);
                if (owner == null) {
                    throw new IllegalArgumentException("Unknown owner: " + token);
                } else if (uri == null) {
                    owner.removeUriPermissionsLocked(mode);
                } else {
                    owner.removeUriPermissionLocked(new GrantUri(userId, uri, (mode & 128) != 0), mode);
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void schedulePersistUriGrants() {
        if (!this.mHandler.hasMessages(38)) {
            this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(38), JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
        }
    }

    /* access modifiers changed from: private */
    public void writeGrantedUriPermissions() {
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "writeGrantedUriPermissions()");
        }
        long startTime = SystemClock.uptimeMillis();
        ArrayList<UriPermission.Snapshot> persist = Lists.newArrayList();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int size = this.mGrantedUriPermissions.size();
                for (int i = 0; i < size; i++) {
                    for (UriPermission perm : this.mGrantedUriPermissions.valueAt(i).values()) {
                        if (perm.persistedModeFlags != 0) {
                            persist.add(perm.snapshot());
                        }
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        try {
            FileOutputStream fos = this.mGrantFile.startWrite(startTime);
            XmlSerializer out = new FastXmlSerializer();
            out.setOutput(fos, StandardCharsets.UTF_8.name());
            out.startDocument(null, true);
            out.startTag(null, TAG_URI_GRANTS);
            Iterator<UriPermission.Snapshot> it = persist.iterator();
            while (it.hasNext()) {
                UriPermission.Snapshot perm2 = it.next();
                out.startTag(null, TAG_URI_GRANT);
                XmlUtils.writeIntAttribute(out, ATTR_SOURCE_USER_ID, perm2.uri.sourceUserId);
                XmlUtils.writeIntAttribute(out, ATTR_TARGET_USER_ID, perm2.targetUserId);
                out.attribute(null, ATTR_SOURCE_PKG, perm2.sourcePkg);
                out.attribute(null, ATTR_TARGET_PKG, perm2.targetPkg);
                out.attribute(null, ATTR_URI, String.valueOf(perm2.uri.uri));
                XmlUtils.writeBooleanAttribute(out, ATTR_PREFIX, perm2.uri.prefix);
                XmlUtils.writeIntAttribute(out, ATTR_MODE_FLAGS, perm2.persistedModeFlags);
                XmlUtils.writeLongAttribute(out, ATTR_CREATED_TIME, perm2.persistedCreateTime);
                out.endTag(null, TAG_URI_GRANT);
            }
            out.endTag(null, TAG_URI_GRANTS);
            out.endDocument();
            this.mGrantFile.finishWrite(fos);
        } catch (IOException e) {
            if (0 != 0) {
                this.mGrantFile.failWrite(null);
            }
        }
    }

    @GuardedBy("this")
    private void readGrantedUriPermissionsLocked() {
        XmlPullParser in;
        long now;
        int sourceUserId;
        int targetUserId;
        ActivityManagerService activityManagerService = this;
        if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
            Slog.v(TAG, "readGrantedUriPermissions()");
        }
        long now2 = System.currentTimeMillis();
        String str = null;
        FileInputStream fis = null;
        try {
            fis = activityManagerService.mGrantFile.openRead();
            XmlPullParser in2 = Xml.newPullParser();
            in2.setInput(fis, StandardCharsets.UTF_8.name());
            while (true) {
                int next = in2.next();
                int type = next;
                if (next == 1) {
                    break;
                }
                String tag = in2.getName();
                if (type != 2 || !TAG_URI_GRANT.equals(tag)) {
                    now = now2;
                    in = in2;
                    int i = type;
                } else {
                    int userHandle = XmlUtils.readIntAttribute(in2, ATTR_USER_HANDLE, -10000);
                    if (userHandle != -10000) {
                        sourceUserId = userHandle;
                        targetUserId = userHandle;
                    } else {
                        sourceUserId = XmlUtils.readIntAttribute(in2, ATTR_SOURCE_USER_ID);
                        targetUserId = XmlUtils.readIntAttribute(in2, ATTR_TARGET_USER_ID);
                    }
                    int sourceUserId2 = sourceUserId;
                    String sourcePkg = in2.getAttributeValue(str, ATTR_SOURCE_PKG);
                    String targetPkg = in2.getAttributeValue(str, ATTR_TARGET_PKG);
                    Uri uri = Uri.parse(in2.getAttributeValue(str, ATTR_URI));
                    boolean prefix = XmlUtils.readBooleanAttribute(in2, ATTR_PREFIX);
                    int modeFlags = XmlUtils.readIntAttribute(in2, ATTR_MODE_FLAGS);
                    long createdTime = XmlUtils.readLongAttribute(in2, ATTR_CREATED_TIME, now2);
                    ProviderInfo pi = activityManagerService.getProviderInfoLocked(uri.getAuthority(), sourceUserId2, 786432);
                    if (pi == null || !sourcePkg.equals(pi.packageName)) {
                        now = now2;
                        in = in2;
                        int i2 = type;
                        int i3 = modeFlags;
                        long j = createdTime;
                        Slog.w(TAG, "Persisted grant for " + uri + " had source " + sourcePkg + " but instead found " + pi);
                    } else {
                        now = now2;
                        int targetUid = -1;
                        try {
                            targetUid = AppGlobals.getPackageManager().getPackageUid(targetPkg, 8192, targetUserId);
                        } catch (RemoteException e) {
                        }
                        if (targetUid != -1) {
                            try {
                                in = in2;
                                int i4 = type;
                                activityManagerService.findOrCreateUriPermissionLocked(sourcePkg, targetPkg, targetUid, new GrantUri(sourceUserId2, uri, prefix)).initPersistedModes(modeFlags, createdTime);
                            } catch (FileNotFoundException e2) {
                            } catch (IOException e3) {
                                e = e3;
                                Slog.wtf(TAG, "Failed reading Uri grants", e);
                                IoUtils.closeQuietly(fis);
                            } catch (XmlPullParserException e4) {
                                e = e4;
                                Slog.wtf(TAG, "Failed reading Uri grants", e);
                                IoUtils.closeQuietly(fis);
                            }
                        } else {
                            in = in2;
                            int i5 = type;
                            int i6 = modeFlags;
                            long j2 = createdTime;
                        }
                    }
                }
                now2 = now;
                in2 = in;
                activityManagerService = this;
                str = null;
            }
        } catch (FileNotFoundException e5) {
            long j3 = now2;
        } catch (IOException e6) {
            e = e6;
            long j4 = now2;
            Slog.wtf(TAG, "Failed reading Uri grants", e);
        } catch (XmlPullParserException e7) {
            e = e7;
            long j5 = now2;
            Slog.wtf(TAG, "Failed reading Uri grants", e);
        } catch (Throwable th) {
            th = th;
            IoUtils.closeQuietly(fis);
            throw th;
        }
        IoUtils.closeQuietly(fis);
    }

    public void takePersistableUriPermission(Uri uri, int modeFlags, String toPackage, int userId) {
        int uid;
        boolean prefixValid = false;
        if (toPackage != null) {
            enforceCallingPermission("android.permission.FORCE_PERSISTABLE_URI_PERMISSIONS", "takePersistableUriPermission");
            uid = this.mPackageManagerInt.getPackageUid(toPackage, 0, userId);
        } else {
            enforceNotIsolatedCaller("takePersistableUriPermission");
            uid = Binder.getCallingUid();
        }
        Preconditions.checkFlagsArgument(modeFlags, 3);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean persistChanged = false;
                UriPermission exactPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, false));
                UriPermission prefixPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, true));
                boolean exactValid = exactPerm != null && (exactPerm.persistableModeFlags & modeFlags) == modeFlags;
                if (prefixPerm != null && (prefixPerm.persistableModeFlags & modeFlags) == modeFlags) {
                    prefixValid = true;
                }
                if (!exactValid) {
                    if (!prefixValid) {
                        throw new SecurityException("No persistable permission grants found for UID " + uid + " and Uri " + grantUri.toSafeString());
                    }
                }
                if (exactValid) {
                    persistChanged = false | exactPerm.takePersistableModes(modeFlags);
                }
                if (prefixValid) {
                    persistChanged |= prefixPerm.takePersistableModes(modeFlags);
                }
                if (persistChanged || maybePrunePersistedUriGrantsLocked(uid)) {
                    schedulePersistUriGrants();
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void releasePersistableUriPermission(Uri uri, int modeFlags, String toPackage, int userId) {
        int uid;
        if (toPackage != null) {
            enforceCallingPermission("android.permission.FORCE_PERSISTABLE_URI_PERMISSIONS", "releasePersistableUriPermission");
            uid = this.mPackageManagerInt.getPackageUid(toPackage, 0, userId);
        } else {
            enforceNotIsolatedCaller("releasePersistableUriPermission");
            uid = Binder.getCallingUid();
        }
        Preconditions.checkFlagsArgument(modeFlags, 3);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean persistChanged = false;
                UriPermission exactPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, false));
                UriPermission prefixPerm = findUriPermissionLocked(uid, new GrantUri(userId, uri, true));
                if (exactPerm == null && prefixPerm == null) {
                    if (toPackage == null) {
                        throw new SecurityException("No permission grants found for UID " + uid + " and Uri " + uri.toSafeString());
                    }
                }
                if (exactPerm != null) {
                    persistChanged = false | exactPerm.releasePersistableModes(modeFlags);
                    removeUriPermissionIfNeededLocked(exactPerm);
                }
                if (prefixPerm != null) {
                    persistChanged |= prefixPerm.releasePersistableModes(modeFlags);
                    removeUriPermissionIfNeededLocked(prefixPerm);
                }
                if (persistChanged) {
                    schedulePersistUriGrants();
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    @GuardedBy("this")
    private boolean maybePrunePersistedUriGrantsLocked(int uid) {
        ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.get(uid);
        if (perms == null || perms.size() < 128) {
            return false;
        }
        ArrayList<UriPermission> persisted = Lists.newArrayList();
        for (UriPermission perm : perms.values()) {
            if (perm.persistedModeFlags != 0) {
                persisted.add(perm);
            }
        }
        int trimCount = persisted.size() - 128;
        if (trimCount <= 0) {
            return false;
        }
        Collections.sort(persisted, new UriPermission.PersistedTimeComparator());
        for (int i = 0; i < trimCount; i++) {
            UriPermission perm2 = persisted.get(i);
            if (ActivityManagerDebugConfig.DEBUG_URI_PERMISSION) {
                Slog.v(TAG, "Trimming grant created at " + perm2.persistedCreateTime);
            }
            perm2.releasePersistableModes(-1);
            removeUriPermissionIfNeededLocked(perm2);
        }
        return true;
    }

    public ParceledListSlice<android.content.UriPermission> getPersistedUriPermissions(String packageName, boolean incoming) {
        enforceNotIsolatedCaller("getPersistedUriPermissions");
        Preconditions.checkNotNull(packageName, "packageName");
        int callingUid = Binder.getCallingUid();
        try {
            if (AppGlobals.getPackageManager().getPackageUid(packageName, 786432, UserHandle.getUserId(callingUid)) == callingUid) {
                ArrayList<android.content.UriPermission> result = Lists.newArrayList();
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (incoming) {
                            ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.get(callingUid);
                            if (perms == null) {
                                Slog.w(TAG, "No permission grants found for " + packageName);
                            } else {
                                for (int j = 0; j < perms.size(); j++) {
                                    UriPermission perm = perms.valueAt(j);
                                    if (packageName.equals(perm.targetPkg) && perm.persistedModeFlags != 0) {
                                        result.add(perm.buildPersistedPublicApiObject());
                                    }
                                }
                            }
                        } else {
                            int size = this.mGrantedUriPermissions.size();
                            for (int i = 0; i < size; i++) {
                                ArrayMap<GrantUri, UriPermission> perms2 = this.mGrantedUriPermissions.valueAt(i);
                                for (int j2 = 0; j2 < perms2.size(); j2++) {
                                    UriPermission perm2 = perms2.valueAt(j2);
                                    if (packageName.equals(perm2.sourcePkg) && perm2.persistedModeFlags != 0) {
                                        result.add(perm2.buildPersistedPublicApiObject());
                                    }
                                }
                            }
                        }
                    } catch (Throwable th) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                return new ParceledListSlice<>(result);
            }
            throw new SecurityException("Package " + packageName + " does not belong to calling UID " + callingUid);
        } catch (RemoteException e) {
            throw new SecurityException("Failed to verify package name ownership");
        }
    }

    public ParceledListSlice<GrantedUriPermission> getGrantedUriPermissions(String packageName, int userId) {
        enforceCallingPermission("android.permission.GET_APP_GRANTED_URI_PERMISSIONS", "getGrantedUriPermissions");
        List<GrantedUriPermission> result = new ArrayList<>();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int size = this.mGrantedUriPermissions.size();
                for (int i = 0; i < size; i++) {
                    ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.valueAt(i);
                    for (int j = 0; j < perms.size(); j++) {
                        UriPermission perm = perms.valueAt(j);
                        if ((packageName == null || packageName.equals(perm.targetPkg)) && perm.targetUserId == userId && perm.persistedModeFlags != 0) {
                            result.add(perm.buildGrantedUriPermission());
                        }
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return new ParceledListSlice<>(result);
    }

    public void clearGrantedUriPermissions(String packageName, int userId) {
        enforceCallingPermission("android.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS", "clearGrantedUriPermissions");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                removeUriPermissionsForPackageLocked(packageName, userId, true, true);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void showWaitingForDebugger(IApplicationThread who, boolean waiting) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = who != null ? getRecordForAppLocked(who) : null;
                if (app == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Message msg = Message.obtain();
                msg.what = 6;
                msg.obj = app;
                msg.arg1 = waiting;
                this.mUiHandler.sendMessage(msg);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo outInfo) {
        long homeAppMem = this.mProcessList.getMemLevel(600);
        long cachedAppMem = this.mProcessList.getMemLevel(900);
        outInfo.availMem = Process.getFreeMemory();
        outInfo.totalMem = Process.getTotalMemory();
        outInfo.threshold = homeAppMem;
        outInfo.lowMemory = outInfo.availMem < ((cachedAppMem - homeAppMem) / 2) + homeAppMem;
        outInfo.hiddenAppThreshold = cachedAppMem;
        outInfo.secondaryServerThreshold = this.mProcessList.getMemLevel(500);
        outInfo.visibleAppThreshold = this.mProcessList.getMemLevel(100);
        outInfo.foregroundAppThreshold = this.mProcessList.getMemLevel(0);
    }

    public List<IBinder> getAppTasks(String callingPackage) {
        ArrayList<IBinder> appTasksList;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETAPPTASKS);
        int callingUid = Binder.getCallingUid();
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                appTasksList = this.mRecentTasks.getAppTasksList(callingUid, callingPackage);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
            return appTasksList;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum) {
        return getFilteredTasks(maxNum, 0, 0);
    }

    public List<ActivityManager.RunningTaskInfo> getFilteredTasks(int maxNum, @WindowConfiguration.ActivityType int ignoreActivityType, @WindowConfiguration.WindowingMode int ignoreWindowingMode) {
        int callingUid = Binder.getCallingUid();
        ArrayList<ActivityManager.RunningTaskInfo> list = new ArrayList<>();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_ALL) {
                    Slog.v(TAG, "getTasks: max=" + maxNum);
                }
                this.mStackSupervisor.getRunningTasks(maxNum, list, ignoreActivityType, ignoreWindowingMode, callingUid, isGetTasksAllowed("getTasks", Binder.getCallingPid(), callingUid));
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return list;
    }

    private boolean isGetTasksAllowed(String caller, int callingPid, int callingUid) {
        boolean z = true;
        if (this.mRecentTasks.isCallerRecents(callingUid)) {
            return true;
        }
        if (checkPermission("android.permission.REAL_GET_TASKS", callingPid, callingUid) != 0) {
            z = false;
        }
        boolean allowed = z;
        if (!allowed && checkPermission("android.permission.GET_TASKS", callingPid, callingUid) == 0) {
            try {
                if (AppGlobals.getPackageManager().isUidPrivileged(callingUid)) {
                    allowed = true;
                    if (ActivityManagerDebugConfig.DEBUG_TASKS) {
                        Slog.w(TAG, caller + ": caller " + callingUid + " is using old GET_TASKS but privileged; allowing");
                    }
                }
            } catch (RemoteException e) {
                Slog.w(TAG, caller + ": caller " + callingUid + " check allowed ex:", e);
            }
        }
        if (!allowed && ActivityManagerDebugConfig.DEBUG_TASKS) {
            Slog.w(TAG, caller + ": caller " + callingUid + " does not hold REAL_GET_TASKS; limiting output");
        }
        return allowed;
    }

    public ParceledListSlice<ActivityManager.RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId) {
        ParceledListSlice<ActivityManager.RecentTaskInfo> recentTasks;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETRECENTTASKS);
        int callingUid = Binder.getCallingUid();
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, userId, false, 2, "getRecentTasks", null);
        boolean allowed = isGetTasksAllowed("getRecentTasks", Binder.getCallingPid(), callingUid);
        boolean detailed = checkCallingPermission("android.permission.GET_DETAILED_TASKS") == 0;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                recentTasks = this.mRecentTasks.getRecentTasks(maxNum, flags, allowed, detailed, userId2, callingUid);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return recentTasks;
    }

    public ActivityManager.TaskDescription getTaskDescription(int id) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskDescription()");
                TaskRecord tr = this.mStackSupervisor.anyTaskForIdLocked(id, 1);
                if (tr != null) {
                    ActivityManager.TaskDescription taskDescription = tr.lastTaskDescription;
                    resetPriorityAfterLockedSection();
                    return taskDescription;
                }
                resetPriorityAfterLockedSection();
                return null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public int addAppTask(IBinder activityToken, Intent intent, ActivityManager.TaskDescription description, Bitmap thumbnail) throws RemoteException {
        Intent intent2 = intent;
        int callingUid = Binder.getCallingUid();
        long callingIdent = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ActivityRecord r = ActivityRecord.isInStackLocked(activityToken);
                    if (r != null) {
                        ComponentName comp = intent.getComponent();
                        if (comp == null) {
                            ActivityManager.TaskDescription taskDescription = description;
                            throw new IllegalArgumentException("Intent " + intent2 + " must specify explicit component");
                        } else if (thumbnail.getWidth() == this.mThumbnailWidth && thumbnail.getHeight() == this.mThumbnailHeight) {
                            if (intent.getSelector() != null) {
                                intent2.setSelector(null);
                            }
                            try {
                                if (intent.getSourceBounds() != null) {
                                    intent2.setSourceBounds(null);
                                }
                                if ((intent.getFlags() & DumpState.DUMP_FROZEN) != 0) {
                                    if ((intent.getFlags() & 8192) == 0) {
                                        intent2.addFlags(8192);
                                    }
                                }
                                ActivityInfo ainfo = AppGlobals.getPackageManager().getActivityInfo(comp, 1024, UserHandle.getUserId(callingUid));
                                if (ainfo != null) {
                                    if (ainfo.applicationInfo.uid != callingUid) {
                                        throw new SecurityException("Can't add task for another application: target uid=" + ainfo.applicationInfo.uid + ", calling uid=" + callingUid);
                                    }
                                }
                                ActivityStack stack = r.getStack();
                                TaskRecord task = stack.createTaskRecord(this.mStackSupervisor.getNextTaskIdForUserLocked(r.userId), ainfo, intent2, null, null, false);
                                if (!this.mRecentTasks.addToBottom(task)) {
                                    stack.removeTask(task, "addAppTask", 0);
                                    resetPriorityAfterLockedSection();
                                    Binder.restoreCallingIdentity(callingIdent);
                                    return -1;
                                }
                                task.lastTaskDescription.copyFrom(description);
                                int i = task.taskId;
                                resetPriorityAfterLockedSection();
                                Binder.restoreCallingIdentity(callingIdent);
                                return i;
                            } catch (Throwable th) {
                                th = th;
                                IBinder iBinder = activityToken;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            ActivityManager.TaskDescription taskDescription2 = description;
                            throw new IllegalArgumentException("Bad thumbnail size: got " + thumbnail.getWidth() + "x" + thumbnail.getHeight() + ", require " + this.mThumbnailWidth + "x" + this.mThumbnailHeight);
                        }
                    } else {
                        ActivityManager.TaskDescription taskDescription3 = description;
                        StringBuilder sb = new StringBuilder();
                        sb.append("Activity does not exist; token=");
                        sb.append(activityToken);
                        throw new IllegalArgumentException(sb.toString());
                    }
                } catch (Throwable th2) {
                    th = th2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th3) {
            th = th3;
            IBinder iBinder2 = activityToken;
            ActivityManager.TaskDescription taskDescription4 = description;
            Binder.restoreCallingIdentity(callingIdent);
            throw th;
        }
    }

    public Point getAppTaskThumbnailSize() {
        Point point;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                point = new Point(this.mThumbnailWidth, this.mThumbnailHeight);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return point;
    }

    public void setTaskDescription(IBinder token, ActivityManager.TaskDescription td) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_SETTASKDESCRIPTION);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    r.setTaskDescription(td);
                    TaskRecord task = r.getTask();
                    task.updateTaskDescription();
                    this.mTaskChangeNotificationController.notifyTaskDescriptionChanged(task.taskId, td);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setTaskResizeable(int taskId, int resizeableMode) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                if (task == null) {
                    Slog.w(TAG, "setTaskResizeable: taskId=" + taskId + " not found");
                    resetPriorityAfterLockedSection();
                    return;
                }
                task.setResizeMode(resizeableMode);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    /* access modifiers changed from: protected */
    public boolean isTaskNotResizeableEx(TaskRecord task, Rect bounds) {
        return false;
    }

    public void resizeTask(int taskId, Rect bounds, int resizeMode) {
        int i = taskId;
        Rect rect = bounds;
        int i2 = resizeMode;
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeTask()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(i);
                if (task == null) {
                    Slog.w(TAG, "resizeTask: taskId=" + i + " not found");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                ActivityStack stack = task.getStack();
                if (task.getWindowConfiguration().canResizeTask()) {
                    boolean z = true;
                    if (!HwPCUtils.isExtDynamicStack(task.getStackId())) {
                        if (rect == null && stack != null) {
                            if (stack.getWindowingMode() == 5) {
                                stack = stack.getDisplay().getOrCreateStack(1, stack.getActivityType(), true);
                            }
                        }
                        if (!(rect == null || stack == null || stack.getWindowingMode() == 5)) {
                            stack = stack.getDisplay().getOrCreateStack(5, stack.getActivityType(), true);
                        }
                    } else if (isTaskNotResizeableEx(task, rect)) {
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(ident);
                        return;
                    }
                    ActivityStack stack2 = stack;
                    if ((i2 & 1) == 0) {
                        z = false;
                    }
                    boolean preserveWindow = z;
                    if (stack2 != task.getStack()) {
                        task.reparent(stack2, true, 1, true, true, "resizeTask");
                        preserveWindow = false;
                    }
                    task.resize(rect, i2, preserveWindow, false);
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                throw new IllegalArgumentException("resizeTask not allowed on task=" + task);
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:22:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0065, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0069, code lost:
        return r2;
     */
    public Rect getTaskBounds(int taskId) {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getTaskBounds()");
        long ident = Binder.clearCallingIdentity();
        Rect rect = new Rect();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                if (task == null) {
                    Slog.w(TAG, "getTaskBounds: taskId=" + taskId + " not found");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return rect;
                } else if (task.getStack() != null) {
                    task.getWindowContainerBounds(rect);
                } else if (!task.matchParentBounds()) {
                    rect.set(task.getBounds());
                } else if (task.mLastNonFullscreenBounds != null) {
                    rect.set(task.mLastNonFullscreenBounds);
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void cancelTaskWindowTransition(int taskId) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "cancelTaskWindowTransition()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 0);
                if (task == null) {
                    Slog.w(TAG, "cancelTaskWindowTransition: taskId=" + taskId + " not found");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                task.cancelWindowTransition();
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(ident);
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public ActivityManager.TaskSnapshot getTaskSnapshot(int taskId, boolean reducedResolution) {
        enforceCallerIsRecentsOrHasPermission("android.permission.READ_FRAME_BUFFER", "getTaskSnapshot()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                if (task == null) {
                    Slog.w(TAG, "getTaskSnapshot: taskId=" + taskId + " not found");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return null;
                }
                resetPriorityAfterLockedSection();
                ActivityManager.TaskSnapshot snapshot = task.getSnapshot(reducedResolution);
                Binder.restoreCallingIdentity(ident);
                return snapshot;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public Bitmap getTaskDescriptionIcon(String filePath, int userId) {
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "getTaskDescriptionIcon", null);
        if (new File(TaskPersister.getUserImagesDir(userId2), new File(filePath).getName()).getPath().equals(filePath) && filePath.contains("_activity_icon_")) {
            return this.mRecentTasks.getTaskDescriptionIcon(filePath);
        }
        throw new IllegalArgumentException("Bad file path: " + filePath + " passed for userId " + userId2);
    }

    public void startInPlaceAnimationOnFrontMostApplication(Bundle opts) throws RemoteException {
        ActivityOptions activityOptions;
        SafeActivityOptions safeOptions = SafeActivityOptions.fromBundle(opts);
        if (safeOptions != null) {
            activityOptions = safeOptions.getOptions(this.mStackSupervisor);
        } else {
            activityOptions = null;
        }
        if (activityOptions == null || activityOptions.getAnimationType() != 10 || activityOptions.getCustomInPlaceResId() == 0) {
            throw new IllegalArgumentException("Expected in-place ActivityOption with valid animation");
        }
        this.mWindowManager.prepareAppTransition(17, false);
        this.mWindowManager.overridePendingAppTransitionInPlace(activityOptions.getPackageName(), activityOptions.getCustomInPlaceResId());
        this.mWindowManager.executeAppTransition();
    }

    public void removeStack(int stackId) {
        long ident;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "removeStack()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                if (stack == null) {
                    Slog.w(TAG, "removeStack: No stack with id=" + stackId);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                } else if (stack.isActivityTypeStandardOrUndefined()) {
                    this.mStackSupervisor.removeStack(stack);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                } else {
                    throw new IllegalArgumentException("Removing non-standard stack is not allowed.");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void removeStacksInWindowingModes(int[] windowingModes) {
        long ident;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "removeStacksInWindowingModes()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                this.mStackSupervisor.removeStacksInWindowingModes(windowingModes);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void removeStacksWithActivityTypes(int[] activityTypes) {
        long ident;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "removeStacksWithActivityTypes()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                this.mStackSupervisor.removeStacksWithActivityTypes(activityTypes);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void moveStackToDisplay(int stackId, int displayId) {
        long ident;
        enforceCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW", "moveStackToDisplay()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    Slog.d(TAG, "moveStackToDisplay: moving stackId=" + stackId + " to displayId=" + displayId);
                }
                this.mStackSupervisor.moveStackToDisplayLocked(stackId, displayId, true);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean removeTask(int taskId) {
        long ident;
        boolean removeTaskByIdLocked;
        enforceCallerIsRecentsOrHasPermission("android.permission.REMOVE_TASKS", "removeTask()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                if (HwPCUtils.isPcCastModeInServer()) {
                    TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId, 1);
                    if (task != null) {
                        this.mHwAMSEx.updateUsageStatsForPCMode(task.getTopActivity(), false, this.mUsageStatsService);
                    }
                }
                removeTaskByIdLocked = this.mStackSupervisor.removeTaskByIdLocked(taskId, true, true, "remove-task");
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return removeTaskByIdLocked;
    }

    public void moveTaskToFront(int taskId, int flags, Bundle bOptions) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_MOVETASKTOFRONT);
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskToFront()");
        if (ActivityManagerDebugConfig.DEBUG_STACK) {
            Slog.d(TAG, "moveTaskToFront: moving taskId=" + taskId);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                moveTaskToFrontLocked(taskId, flags, SafeActivityOptions.fromBundle(bOptions), false);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void moveTaskToFrontLocked(int taskId, int flags, SafeActivityOptions options, boolean fromRecents) {
        ActivityOptions realOptions;
        if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), -1, -1, "Task to front")) {
            SafeActivityOptions.abort(options);
            return;
        }
        long origId = Binder.clearCallingIdentity();
        try {
            TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
            if (task == null) {
                Slog.d(TAG, "Could not find task for id: " + taskId);
            } else if (this.mLockTaskController.isLockTaskModeViolation(task)) {
                Slog.e(TAG, "moveTaskToFront: Attempt to violate Lock Task Mode");
                Binder.restoreCallingIdentity(origId);
            } else {
                if (options != null) {
                    realOptions = options.getOptions(this.mStackSupervisor);
                } else {
                    realOptions = null;
                }
                this.mStackSupervisor.findTaskToMoveToFront(task, flags, realOptions, "moveTaskToFront", false);
                ActivityRecord topActivity = task.getTopActivity();
                if (topActivity != null && (!task.inFreeformWindowingMode() || !fromRecents)) {
                    topActivity.showStartingWindow(null, false, true, fromRecents);
                }
                Binder.restoreCallingIdentity(origId);
                SafeActivityOptions.abort(options);
            }
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
        long origId;
        enforceNotIsolatedCaller("moveActivityTaskToBack");
        if (ActivityManagerDebugConfig.HWFLOW) {
            Flog.i(101, "moveActivityTaskToBack pid =" + Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                int taskId = ActivityRecord.getTaskForActivityLocked(token, !nonRoot);
                if (this.mStackSupervisor.anyTaskForIdLocked(taskId) != null) {
                    boolean moveTaskToBackLocked = ActivityRecord.getStackLocked(token).moveTaskToBackLocked(taskId);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return moveTaskToBackLocked;
                }
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void moveTaskBackwards(int task) {
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskBackwards()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!checkAppSwitchAllowedLocked(Binder.getCallingPid(), Binder.getCallingUid(), -1, -1, "Task backwards")) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                long origId = Binder.clearCallingIdentity();
                moveTaskBackwardsLocked(task);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    private final void moveTaskBackwardsLocked(int task) {
        Slog.e(TAG, "moveTaskBackwards not yet implemented!");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0025, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0028, code lost:
        return r1;
     */
    public int createStackOnDisplay(int displayId) throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "createStackOnDisplay()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityDisplay display = this.mStackSupervisor.getActivityDisplayOrCreateLocked(displayId);
                int i = -1;
                if (display == null) {
                    resetPriorityAfterLockedSection();
                    return -1;
                }
                ActivityStack stack = display.createStack(4, 1, true);
                if (stack != null) {
                    i = stack.mStackId;
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public int getActivityDisplayId(IBinder activityToken) throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack stack = ActivityRecord.getStackLocked(activityToken);
                if (stack == null || stack.mDisplayId == -1) {
                    resetPriorityAfterLockedSection();
                    return 0;
                }
                int i = stack.mDisplayId;
                resetPriorityAfterLockedSection();
                return i;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    /* JADX WARNING: Unknown top exception splitter block from list: {B:22:0x0040=Splitter:B:22:0x0040, B:32:0x005e=Splitter:B:32:0x005e} */
    public void exitFreeformMode(IBinder token) throws RemoteException {
        long ident;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r != null) {
                    ActivityStack stack = r.getStack();
                    if (stack == null || (!stack.inFreeformWindowingMode() && !HwPCUtils.isExtDynamicStack(stack.mStackId))) {
                        throw new IllegalStateException("exitFreeformMode: You can only go fullscreen from freeform.");
                    } else if (!HwPCUtils.isPcCastModeInServer() || !HwPCUtils.isPcDynamicStack(stack.mStackId)) {
                        if (HwFreeFormUtils.isFreeFormEnable()) {
                            stack.setFreeFormStackVisible(false);
                            Flog.bdReport(this.mContext, 10062);
                        }
                        stack.setWindowingMode(1);
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                    } else {
                        HwPCUtils.log(TAG, "the task want exitFreeformMode on pc statck  so return");
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                    }
                } else {
                    throw new IllegalArgumentException("exitFreeformMode: No activity record matching token=" + token);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void setTaskWindowingMode(int taskId, int windowingMode, boolean toTop) {
        long ident;
        if (windowingMode == 3) {
            setTaskWindowingModeSplitScreenPrimary(taskId, 0, toTop, true, null, true);
            return;
        }
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setTaskWindowingMode()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                Flog.i(101, "moveTaskToStack: moving task=" + taskId);
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                if (task == null) {
                    Slog.w(TAG, "setTaskWindowingMode: No task for id=" + taskId);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    Slog.d(TAG, "setTaskWindowingMode: moving task=" + taskId + " to windowingMode=" + windowingMode + " toTop=" + toTop);
                }
                if (task.isActivityTypeStandardOrUndefined()) {
                    ActivityStack stack = task.getStack();
                    if (toTop) {
                        stack.moveToFront("setTaskWindowingMode", task);
                    }
                    stack.setWindowingMode(windowingMode);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                throw new IllegalArgumentException("setTaskWindowingMode: Attempt to move non-standard task " + taskId + " to windowing mode=" + windowingMode);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARNING: Unknown top exception splitter block from list: {B:44:0x00f4=Splitter:B:44:0x00f4, B:32:0x00c8=Splitter:B:32:0x00c8} */
    public boolean setTaskWindowingModeSplitScreenPrimary(int taskId, int createMode, boolean toTop, boolean animate, Rect initialBounds, boolean showRecents) {
        int i = taskId;
        int i2 = createMode;
        boolean z = toTop;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setTaskWindowingModeSplitScreenPrimary()");
        if (HwFreeFormUtils.isFreeFormEnable() && HwFreeFormUtils.getFreeFormStackVisible()) {
            return false;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long ident = Binder.clearCallingIdentity();
                try {
                    TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(i);
                    if (task == null) {
                        Slog.w(TAG, "setTaskWindowingModeSplitScreenPrimary: No task for id=" + i);
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_STACK) {
                        Slog.d(TAG, "setTaskWindowingModeSplitScreenPrimary: moving task=" + i + " to createMode=" + i2 + " toTop=" + z);
                    }
                    if (task.isActivityTypeStandardOrUndefined()) {
                        boolean z2 = true;
                        this.mSkipShowLauncher = true;
                        this.mWindowManager.mShouldShowWallpaper = true;
                        this.mHandler.removeMessages(600);
                        try {
                            this.mWindowManager.setDockedStackCreateState(i2, initialBounds);
                            int windowingMode = task.getWindowingMode();
                            ActivityStack stack = task.getStack();
                            if (z) {
                                stack.moveToFront("setTaskWindowingModeSplitScreenPrimary", task);
                            }
                            stack.setWindowingMode(3, animate, showRecents, false, false);
                            this.mSkipShowLauncher = false;
                            this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(600), 1000);
                            if (windowingMode == task.getWindowingMode()) {
                                z2 = false;
                            }
                            Binder.restoreCallingIdentity(ident);
                            resetPriorityAfterLockedSection();
                            return z2;
                        } catch (Throwable th) {
                            th = th;
                            Binder.restoreCallingIdentity(ident);
                            throw th;
                        }
                    } else {
                        Rect rect = initialBounds;
                        throw new IllegalArgumentException("setTaskWindowingMode: Attempt to move non-standard task " + i + " to split-screen windowing mode");
                    }
                } catch (Throwable th2) {
                    th = th2;
                    Rect rect2 = initialBounds;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void moveTaskToStack(int taskId, int stackId, boolean toTop) {
        long ident;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTaskToStack()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                if (task == null) {
                    Slog.w(TAG, "moveTaskToStack: No task for id=" + taskId);
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                ActivityStack freeformStack = this.mStackSupervisor.getStack(5, 1);
                if (freeformStack == null || !freeformStack.getFreeFormStackVisible()) {
                    if (ActivityManagerDebugConfig.DEBUG_STACK) {
                        Slog.d(TAG, "moveTaskToStack: moving task=" + taskId + " to stackId=" + stackId + " toTop=" + toTop);
                    }
                    ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                    if (stack == null) {
                        throw new IllegalStateException("moveTaskToStack: No stack for stackId=" + stackId);
                    } else if (stack.isActivityTypeStandardOrUndefined()) {
                        if (stack.inSplitScreenPrimaryWindowingMode()) {
                            this.mWindowManager.setDockedStackCreateState(0, null);
                        }
                        task.reparent(stack, toTop, 1, true, false, "moveTaskToStack");
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                    } else {
                        throw new IllegalArgumentException("moveTaskToStack: Attempt to move task " + taskId + " to stack " + stackId);
                    }
                } else {
                    HwFreeFormUtils.log("ams", "moveTaskToDockedStack: freeformStack is visible");
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:31:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x0077, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x007b, code lost:
        return;
     */
    public void dismissSplitScreenMode(boolean toTop) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "dismissSplitScreenMode()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityStack stack = this.mStackSupervisor.getDefaultDisplay().getSplitScreenPrimaryStack();
                if (stack == null) {
                    Slog.w(TAG, "dismissSplitScreenMode: primary split-screen stack not found.");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return;
                }
                ActivityRecord ar = stack.getTopActivity();
                boolean shouldfreeze = true;
                if (ar != null && sSkipFreezingWindowActivitys.contains(ar.shortComponentName)) {
                    shouldfreeze = false;
                }
                if (shouldfreeze) {
                    this.mWindowManager.mShouldResetTime = true;
                    this.mWindowManager.startFreezingScreen(0, 0);
                }
                if (toTop) {
                    stack.moveToFront("dismissSplitScreenMode");
                } else if (this.mStackSupervisor.isFocusedStack(stack)) {
                    ActivityStack otherStack = stack.getDisplay().getTopStackInWindowingMode(4);
                    if (otherStack != null) {
                        otherStack.moveToFront("dismissSplitScreenMode_other");
                    }
                }
                stack.setWindowingMode(1);
                if (shouldfreeze) {
                    this.mWindowManager.stopFreezingScreen();
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:18:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0043, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0047, code lost:
        return;
     */
    public void dismissPip(boolean animate, int animationDuration) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "dismissPip()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                PinnedActivityStack stack = this.mStackSupervisor.getDefaultDisplay().getPinnedStack();
                if (stack == null) {
                    Slog.w(TAG, "dismissPip: pinned stack not found.");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                } else if (stack.getWindowingMode() != 2) {
                    throw new IllegalArgumentException("Stack: " + stack + " doesn't support animated resize.");
                } else if (animate) {
                    stack.animateResizePinnedStack(null, null, animationDuration, false);
                } else {
                    this.mStackSupervisor.moveTasksToFullscreenStackLocked(stack, true);
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public boolean moveTopActivityToPinnedStack(int stackId, Rect bounds) {
        long ident;
        boolean moveTopStackActivityToPinnedStackLocked;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTopActivityToPinnedStack()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mSupportsPictureInPicture) {
                    ident = Binder.clearCallingIdentity();
                    moveTopStackActivityToPinnedStackLocked = this.mStackSupervisor.moveTopStackActivityToPinnedStackLocked(stackId, bounds);
                    Binder.restoreCallingIdentity(ident);
                } else {
                    throw new IllegalStateException("moveTopActivityToPinnedStack:Device doesn't support picture-in-picture mode");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return moveTopStackActivityToPinnedStackLocked;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:39:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00ee, code lost:
        android.os.Binder.restoreCallingIdentity(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00f2, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00fb, code lost:
        r0 = th;
     */
    public void resizeStack(int stackId, Rect destBounds, boolean allowResizeInDockedMode, boolean preserveWindows, boolean animate, int animationDuration) {
        int i = stackId;
        Rect rect = destBounds;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeStack()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (animate) {
                        PinnedActivityStack stack = (PinnedActivityStack) this.mStackSupervisor.getStack(i);
                        if (stack == null) {
                            Slog.w(TAG, "resizeStack: stackId " + i + " not found.");
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident);
                        } else if (stack.getWindowingMode() != 2) {
                            int i2 = animationDuration;
                            throw new IllegalArgumentException("Stack: " + i + " doesn't support animated resize.");
                        } else if (!HwPCUtils.enabledInPad() || !HwPCUtils.isPcCastModeInServer()) {
                            try {
                                stack.animateResizePinnedStack(null, rect, animationDuration, false);
                            } catch (Throwable th) {
                                th = th;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } else {
                            HwPCUtils.log(TAG, "ignore resizeStack PINNED_STACK_ID in pad pc mode");
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident);
                        }
                    } else {
                        int i3 = animationDuration;
                        ActivityStack stack2 = this.mStackSupervisor.getStack(i);
                        if (stack2 == null) {
                            Slog.w(TAG, "resizeStack: stackId " + i + " not found.");
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident);
                            return;
                        }
                        Flog.i(101, "resizeStack, stackId: " + i + ", destBounds = " + rect);
                        this.mStackSupervisor.resizeStackLocked(stack2, rect, null, null, preserveWindows, allowResizeInDockedMode, false);
                    }
                } catch (Throwable th2) {
                    th = th2;
                    int i4 = animationDuration;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th3) {
            th = th3;
            int i5 = animationDuration;
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void resizeDockedStack(Rect dockedBounds, Rect tempDockedTaskBounds, Rect tempDockedTaskInsetBounds, Rect tempOtherTaskBounds, Rect tempOtherTaskInsetBounds) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizeDockedStack()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mStackSupervisor.resizeDockedStackLocked(dockedBounds, tempDockedTaskBounds, tempDockedTaskInsetBounds, tempOtherTaskBounds, tempOtherTaskInsetBounds, true);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void setSplitScreenResizing(boolean resizing) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "setSplitScreenResizing()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mStackSupervisor.setSplitScreenResizing(resizing);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void resizePinnedStack(Rect pinnedBounds, Rect tempPinnedTaskBounds) {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "resizePinnedStack()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mStackSupervisor.resizePinnedStackLocked(pinnedBounds, tempPinnedTaskBounds);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void positionTaskInStack(int taskId, int stackId, int position) {
        long ident;
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "positionTaskInStack()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                if (ActivityManagerDebugConfig.DEBUG_STACK) {
                    Slog.d(TAG, "positionTaskInStack: positioning task=" + taskId + " in stackId=" + stackId + " at position=" + position);
                }
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                if (task != null) {
                    ActivityStack stack = this.mStackSupervisor.getStack(stackId);
                    if (stack == null) {
                        throw new IllegalArgumentException("positionTaskInStack: no stack for id=" + stackId);
                    } else if (stack.isActivityTypeStandardOrUndefined()) {
                        if (task.getStack() == stack) {
                            stack.positionChildAt(task, position);
                        } else {
                            task.reparent(stack, position, 2, false, false, "positionTaskInStack");
                        }
                        Binder.restoreCallingIdentity(ident);
                    } else {
                        throw new IllegalArgumentException("positionTaskInStack: Attempt to change the position of task " + taskId + " in/to non-standard stack");
                    }
                } else {
                    throw new IllegalArgumentException("positionTaskInStack: no task for id=" + taskId);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public List<ActivityManager.StackInfo> getAllStackInfos() {
        ArrayList<ActivityManager.StackInfo> allStackInfosLocked;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getAllStackInfos()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                allStackInfosLocked = this.mStackSupervisor.getAllStackInfosLocked();
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
            return allStackInfosLocked;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public ActivityManager.StackInfo getStackInfo(int windowingMode, int activityType) {
        ActivityManager.StackInfo stackInfo;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                stackInfo = this.mStackSupervisor.getStackInfo(windowingMode, activityType);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
            return stackInfo;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public int getTaskForActivity(IBinder token, boolean onlyRoot) {
        int taskForActivityLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                taskForActivityLocked = ActivityRecord.getTaskForActivityLocked(token, onlyRoot);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return taskForActivityLocked;
    }

    public void updateDeviceOwner(String packageName) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0 || callingUid == 1000) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mDeviceOwnerName = packageName;
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("updateDeviceOwner called from non-system process");
    }

    public void updateLockTaskPackages(int userId, String[] packages) {
        int callingUid = Binder.getCallingUid();
        if (!(callingUid == 0 || callingUid == 1000)) {
            enforceCallingPermission("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskPackages()");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
                    Slog.w(TAG, "Whitelisting " + userId + ":" + Arrays.toString(packages));
                }
                this.mLockTaskController.updateLockTaskPackages(userId, packages);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void updateLockTaskFeatures(int userId, int flags) {
        int callingUid = Binder.getCallingUid();
        if (!(callingUid == 0 || callingUid == 1000)) {
            enforceCallingPermission("android.permission.UPDATE_LOCK_TASK_PACKAGES", "updateLockTaskFeatures()");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
                    Slog.w(TAG, "Allowing features " + userId + ":0x" + Integer.toHexString(flags));
                }
                this.mLockTaskController.updateLockTaskFeatures(userId, flags);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void startLockTaskModeLocked(TaskRecord task, boolean isSystemCaller) {
        if (ActivityManagerDebugConfig.DEBUG_LOCKTASK) {
            Slog.w(TAG, "startLockTaskModeLocked: " + task);
        }
        if (task != null && task.mLockTaskAuth != 0) {
            ActivityStack stack = this.mStackSupervisor.getFocusedStack();
            if (stack == null || task != stack.topTask()) {
                throw new IllegalArgumentException("Invalid task, not in foreground");
            }
            int callingUid = Binder.getCallingUid();
            long ident = Binder.clearCallingIdentity();
            try {
                this.mStackSupervisor.removeStacksInWindowingModes(2);
                this.mLockTaskController.startLockTaskMode(task, isSystemCaller, callingUid);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
    }

    public void startLockTaskModeByToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                startLockTaskModeLocked(r.getTask(), false);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void startSystemLockTaskMode(int taskId) throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "startSystemLockTaskMode");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                TaskRecord task = this.mStackSupervisor.anyTaskForIdLocked(taskId);
                task.getStack().moveToFront("startSystemLockTaskMode");
                startLockTaskModeLocked(task, true);
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void stopLockTaskModeByToken(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                stopLockTaskModeInternal(r.getTask(), false);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void stopSystemLockTaskMode() throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "stopSystemLockTaskMode");
        stopLockTaskModeInternal(null, true);
    }

    private void stopLockTaskModeInternal(TaskRecord task, boolean isSystemCaller) {
        int callingUid = Binder.getCallingUid();
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mLockTaskController.stopLockTaskMode(task, isSystemCaller, callingUid);
            }
            resetPriorityAfterLockedSection();
            TelecomManager tm = (TelecomManager) this.mContext.getSystemService("telecom");
            if (tm != null) {
                tm.showInCallScreen(false);
            }
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public boolean isInLockTaskMode() {
        return getLockTaskModeState() != 0;
    }

    public int getLockTaskModeState() {
        int lockTaskModeState;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                lockTaskModeState = this.mLockTaskController.getLockTaskModeState();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return lockTaskModeState;
    }

    public void showLockTaskEscapeMessage(IBinder token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityRecord.forTokenLocked(token) == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mLockTaskController.showLockTaskToast();
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void setDisablePreviewScreenshots(IBinder token, boolean disable) throws RemoteException {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    Slog.w(TAG, "setDisablePreviewScreenshots: Unable to find activity for token=" + token);
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setDisablePreviewScreenshots(disable);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private final List<ProviderInfo> generateApplicationProvidersLocked(ProcessRecord app) {
        List<ProviderInfo> providers;
        ProcessRecord processRecord = app;
        try {
            providers = AppGlobals.getPackageManager().queryContentProviders(processRecord.processName, processRecord.uid, 268438528, null).getList();
        } catch (RemoteException e) {
            providers = null;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "generateApplicationProvidersLocked, app.info.uid = " + processRecord.uid);
        }
        int userId = processRecord.userId;
        if (providers != null) {
            int N = providers.size();
            processRecord.pubProviders.ensureCapacity(processRecord.pubProviders.size() + N);
            int i = 0;
            int N2 = N;
            while (true) {
                int i2 = i;
                if (i2 >= N2) {
                    break;
                }
                ProviderInfo cpi = providers.get(i2);
                boolean singleton = isSingleton(cpi.processName, cpi.applicationInfo, cpi.name, cpi.flags);
                if (!singleton || UserHandle.getUserId(processRecord.uid) == 0) {
                    ComponentName comp = new ComponentName(cpi.packageName, cpi.name);
                    ContentProviderRecord cpr = this.mProviderMap.getProviderByClass(comp, userId);
                    if (cpr == null) {
                        ContentProviderRecord contentProviderRecord = new ContentProviderRecord(this, cpi, processRecord.info, comp, singleton);
                        cpr = contentProviderRecord;
                        this.mProviderMap.putProviderByClass(comp, cpr);
                    }
                    if (ActivityManagerDebugConfig.DEBUG_MU) {
                        Slog.v(TAG_MU, "generateApplicationProvidersLocked, cpi.uid = " + cpr.uid);
                    }
                    processRecord.pubProviders.put(cpi.name, cpr);
                    if (!cpi.multiprocess || !PackageManagerService.PLATFORM_PACKAGE_NAME.equals(cpi.packageName)) {
                        processRecord.addPackage(cpi.applicationInfo.packageName, (long) cpi.applicationInfo.versionCode, this.mProcessStats);
                    }
                    notifyPackageUse(cpi.applicationInfo.packageName, 4);
                } else {
                    providers.remove(i2);
                    N2--;
                    i2--;
                }
                i = i2 + 1;
            }
        }
        return providers;
    }

    public String checkContentProviderAccess(String authority, int userId) {
        ProcessRecord r;
        String checkContentProviderPermissionLocked;
        if (userId == -1) {
            this.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", TAG);
            userId = UserHandle.getCallingUserId();
        }
        ProviderInfo cpi = null;
        try {
            cpi = AppGlobals.getPackageManager().resolveContentProvider(authority, 790016, userId);
        } catch (RemoteException e) {
        }
        if (cpi == null) {
            return "Failed to find provider " + authority + " for user " + userId + "; expected to find a valid ContentProvider for this authority";
        }
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (r == null) {
            return "Failed to find PID " + Binder.getCallingPid();
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi, r, userId, true);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return checkContentProviderPermissionLocked;
    }

    private final String checkContentProviderPermissionLocked(ProviderInfo cpi, ProcessRecord r, int userId, boolean checkUser) {
        int userId2;
        String suffix;
        PathPermission[] pps;
        PathPermission pp;
        ProviderInfo providerInfo = cpi;
        ProcessRecord processRecord = r;
        boolean z = checkUser;
        int callingPid = processRecord != null ? processRecord.pid : Binder.getCallingPid();
        int callingUid = processRecord != null ? processRecord.uid : Binder.getCallingUid();
        boolean checkedGrants = false;
        if (z) {
            userId2 = userId;
            int tmpTargetUserId = this.mUserController.unsafeConvertIncomingUser(userId2);
            if (tmpTargetUserId != UserHandle.getUserId(callingUid)) {
                if (checkAuthorityGrants(callingUid, providerInfo, tmpTargetUserId, z)) {
                    return null;
                }
                checkedGrants = true;
            }
            if (!checkedGrants || providerInfo.authority == null || !providerInfo.authority.contains("com.huawei.android.launcher.settings")) {
                userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId2, false, 0, "checkContentProviderPermissionLocked " + providerInfo.authority, null);
            }
            if (userId2 != tmpTargetUserId) {
                checkedGrants = false;
            }
        } else {
            userId2 = userId;
        }
        boolean checkedGrants2 = checkedGrants;
        int userId3 = userId2;
        int callingUid2 = callingUid;
        int callingPid2 = callingPid;
        if (checkComponentPermission(providerInfo.readPermission, callingPid, callingUid, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
            return null;
        }
        if (checkComponentPermission(providerInfo.writePermission, callingPid2, callingUid2, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
            return null;
        }
        PathPermission[] pps2 = providerInfo.pathPermissions;
        if (pps2 != null) {
            int i = pps2.length;
            while (i > 0) {
                int i2 = i - 1;
                PathPermission pp2 = pps2[i2];
                String pprperm = pp2.getReadPermission();
                if (pprperm != null) {
                    pps = pps2;
                    pp = pp2;
                    if (checkComponentPermission(pprperm, callingPid2, callingUid2, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
                        return null;
                    }
                } else {
                    pps = pps2;
                    pp = pp2;
                }
                String ppwperm = pp.getWritePermission();
                if (ppwperm != null) {
                    if (checkComponentPermission(ppwperm, callingPid2, callingUid2, providerInfo.applicationInfo.uid, providerInfo.exported) == 0) {
                        return null;
                    }
                }
                i = i2;
                pps2 = pps;
            }
        }
        if (!checkedGrants2 && checkAuthorityGrants(callingUid2, providerInfo, userId3, z)) {
            return null;
        }
        if (!providerInfo.exported) {
            suffix = " that is not exported from UID " + providerInfo.applicationInfo.uid;
        } else if ("android.permission.MANAGE_DOCUMENTS".equals(providerInfo.readPermission)) {
            suffix = " requires that you obtain access using ACTION_OPEN_DOCUMENT or related APIs";
        } else {
            suffix = " requires " + providerInfo.readPermission + " or " + providerInfo.writePermission;
        }
        StringBuilder sb = new StringBuilder();
        sb.append("Permission Denial: opening provider ");
        sb.append(providerInfo.name);
        sb.append(" from ");
        sb.append(processRecord != null ? processRecord : "(null)");
        sb.append(" (pid=");
        sb.append(callingPid2);
        sb.append(", uid=");
        sb.append(callingUid2);
        sb.append(")");
        sb.append(suffix);
        String msg = sb.toString();
        Slog.w(TAG, msg);
        return msg;
    }

    /* access modifiers changed from: package-private */
    public boolean checkAuthorityGrants(int callingUid, ProviderInfo cpi, int userId, boolean checkUser) {
        ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.get(callingUid);
        if (perms != null) {
            for (int i = perms.size() - 1; i >= 0; i--) {
                GrantUri grantUri = perms.keyAt(i);
                if ((grantUri.sourceUserId == userId || !checkUser) && matchesProvider(grantUri.uri, cpi)) {
                    return true;
                }
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public boolean matchesProvider(Uri uri, ProviderInfo cpi) {
        String uriAuth = uri.getAuthority();
        String cpiAuth = cpi.authority;
        if (cpiAuth.indexOf(59) == -1) {
            return cpiAuth.equals(uriAuth);
        }
        for (String equals : cpiAuth.split(";")) {
            if (equals.equals(uriAuth)) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public ContentProviderConnection incProviderCountLocked(ProcessRecord r, ContentProviderRecord cpr, IBinder externalProcessToken, boolean stable) {
        if (r != null) {
            for (int i = 0; i < r.conProviders.size(); i++) {
                ContentProviderConnection conn = r.conProviders.get(i);
                if (conn.provider == cpr) {
                    if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                        Slog.v(TAG, "Adding provider requested by " + r.processName + " from process " + cpr.info.processName + ": " + cpr.name.flattenToShortString() + " scnt=" + conn.stableCount + " uscnt=" + conn.unstableCount);
                    }
                    if (stable) {
                        conn.stableCount++;
                        conn.numStableIncs++;
                    } else {
                        conn.unstableCount++;
                        conn.numUnstableIncs++;
                    }
                    return conn;
                }
            }
            ContentProviderConnection conn2 = new ContentProviderConnection(cpr, r);
            if (stable) {
                conn2.stableCount = 1;
                conn2.numStableIncs = 1;
            } else {
                conn2.unstableCount = 1;
                conn2.numUnstableIncs = 1;
            }
            cpr.connections.add(conn2);
            r.conProviders.add(conn2);
            startAssociationLocked(r.uid, r.processName, r.curProcState, cpr.uid, cpr.name, cpr.info.processName);
            this.mHwAMSEx.reportServiceRelationIAware(2, cpr, r);
            return conn2;
        }
        cpr.addExternalProcessHandleLocked(externalProcessToken);
        return null;
    }

    /* access modifiers changed from: package-private */
    public boolean decProviderCountLocked(ContentProviderConnection conn, ContentProviderRecord cpr, IBinder externalProcessToken, boolean stable) {
        if (conn != null) {
            ContentProviderRecord cpr2 = conn.provider;
            if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                Slog.v(TAG, "Removing provider requested by " + conn.client.processName + " from process " + cpr2.info.processName + ": " + cpr2.name.flattenToShortString() + " scnt=" + conn.stableCount + " uscnt=" + conn.unstableCount);
            }
            if (stable) {
                conn.stableCount--;
            } else {
                conn.unstableCount--;
            }
            if (conn.stableCount != 0 || conn.unstableCount != 0) {
                return false;
            }
            cpr2.connections.remove(conn);
            conn.client.conProviders.remove(conn);
            if (conn.client.setProcState < 14 && cpr2.proc != null) {
                cpr2.proc.lastProviderTime = SystemClock.uptimeMillis();
            }
            stopAssociationLocked(conn.client.uid, conn.client.processName, cpr2.uid, cpr2.name);
            return true;
        }
        cpr.removeExternalProcessHandleLocked(externalProcessToken);
        return false;
    }

    private void checkTime(long startTime, String where) {
        long now = SystemClock.uptimeMillis();
        if (now - startTime > 50) {
            Slog.w(TAG, "Slow operation: " + (now - startTime) + "ms so far, now at " + where);
        }
    }

    private boolean isProcessAliveLocked(ProcessRecord proc) {
        boolean z = false;
        if (proc.pid <= 0) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                Slog.d(TAG, "Process hasn't started yet: " + proc);
            }
            return false;
        }
        if (proc.procStatFile == null) {
            proc.procStatFile = "/proc/" + proc.pid + "/stat";
        }
        this.mProcessStateStatsLongs[0] = 0;
        if (!Process.readProcFile(proc.procStatFile, PROCESS_STATE_STATS_FORMAT, null, this.mProcessStateStatsLongs, null)) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                Slog.d(TAG, "UNABLE TO RETRIEVE STATE FOR " + proc.procStatFile);
            }
            return false;
        }
        long state = this.mProcessStateStatsLongs[0];
        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
            Slog.d(TAG, "RETRIEVED STATE FOR " + proc.procStatFile + ": " + ((char) ((int) state)));
        }
        if (!(state == 90 || state == 88 || state == 120 || state == 75)) {
            z = true;
        }
        return z;
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r28v7, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r28v21, resolved type: java.lang.String} */
    /* JADX WARNING: type inference failed for: r10v0, types: [boolean] */
    /* JADX WARNING: type inference failed for: r10v1 */
    /* JADX WARNING: type inference failed for: r28v23 */
    /* JADX WARNING: type inference failed for: r28v24 */
    /* JADX WARNING: type inference failed for: r10v5 */
    /* JADX WARNING: type inference failed for: r28v25 */
    /* JADX WARNING: type inference failed for: r28v26 */
    /* JADX WARNING: type inference failed for: r28v28 */
    /* JADX WARNING: type inference failed for: r28v29 */
    /* JADX WARNING: type inference failed for: r28v31 */
    /* JADX WARNING: Code restructure failed: missing block: B:480:0x07db, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:501:0x082f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:502:0x0830, code lost:
        r4 = r27;
        r1 = r28;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:468:0x07bf, B:476:0x07d0] */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:162:0x028b  */
    /* JADX WARNING: Removed duplicated region for block: B:194:0x02e8  */
    /* JADX WARNING: Removed duplicated region for block: B:219:0x0333  */
    /* JADX WARNING: Removed duplicated region for block: B:220:0x0336  */
    /* JADX WARNING: Removed duplicated region for block: B:224:0x034b A[Catch:{ all -> 0x089d }] */
    /* JADX WARNING: Removed duplicated region for block: B:225:0x034d A[Catch:{ all -> 0x089d }] */
    /* JADX WARNING: Removed duplicated region for block: B:228:0x0355 A[Catch:{ all -> 0x089d }] */
    /* JADX WARNING: Removed duplicated region for block: B:378:0x058b A[SYNTHETIC, Splitter:B:378:0x058b] */
    /* JADX WARNING: Removed duplicated region for block: B:391:0x05ac  */
    /* JADX WARNING: Removed duplicated region for block: B:403:0x05fc A[SYNTHETIC, Splitter:B:403:0x05fc] */
    /* JADX WARNING: Removed duplicated region for block: B:408:0x060a A[SYNTHETIC, Splitter:B:408:0x060a] */
    /* JADX WARNING: Removed duplicated region for block: B:494:0x0816  */
    /* JADX WARNING: Removed duplicated region for block: B:499:0x0827 A[SYNTHETIC, Splitter:B:499:0x0827] */
    /* JADX WARNING: Removed duplicated region for block: B:504:0x083a  */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x00e3 A[SYNTHETIC, Splitter:B:50:0x00e3] */
    /* JADX WARNING: Removed duplicated region for block: B:512:0x084e  */
    /* JADX WARNING: Removed duplicated region for block: B:517:0x0856  */
    /* JADX WARNING: Removed duplicated region for block: B:527:0x0885  */
    /* JADX WARNING: Removed duplicated region for block: B:538:0x08b1  */
    /* JADX WARNING: Removed duplicated region for block: B:545:0x08d8 A[LOOP:1: B:545:0x08d8->B:573:0x0a04, LOOP_START, SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:595:0x0608 A[EDGE_INSN: B:595:0x0608->B:407:0x0608 ?: BREAK  , SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x00f7 A[SYNTHETIC, Splitter:B:60:0x00f7] */
    private ContentProviderHolder getContentProviderImpl(IApplicationThread caller, String name, IBinder token, boolean stable, int userId) {
        ContentProviderConnection conn;
        boolean checkCrossUser;
        int userId2;
        boolean z;
        boolean providerRunning;
        int callingUid;
        boolean checkCrossUser2;
        ProviderInfo cpi;
        int callingPid;
        ContentProviderRecord cpr;
        ? r10;
        long startTime;
        ContentProviderConnection conn2;
        ContentProviderRecord cpr2;
        String str;
        String str2;
        boolean z2;
        int userId3;
        int i;
        String checkContentProviderPermissionLocked;
        int userId4;
        IBinder token2;
        int userId5;
        ComponentName comp;
        ContentProviderConnection contentProviderConnection;
        int N;
        int i2;
        int i3;
        String msg;
        ProcessRecord r;
        int userId6;
        boolean z3;
        ProviderInfo cpi2;
        int userId7;
        ProcessRecord proc;
        int userId8;
        int userId9;
        int i4;
        long origId;
        ProviderInfo cpi3;
        long ident;
        int callingUid2;
        ProcessRecord callerApp;
        ProcessRecord callerApp2;
        ProviderInfo cpi4;
        long callingId;
        ProviderInfo cpi5;
        long origId2;
        ContentProviderConnection conn3;
        ProviderInfo cpi6;
        boolean z4;
        int userId10;
        IApplicationThread iApplicationThread = caller;
        String str3 = name;
        IBinder token3 = token;
        boolean z5 = stable;
        int userId11 = this.mHwAMSEx.getContentProviderUserId(str3, userId);
        ProviderInfo cpi7 = null;
        int callingPid2 = 0;
        int callingUid3 = 0;
        boolean isAwareMimeTypeBinder = false;
        if (token3 != null && (token3 instanceof AwareAppStartBinder)) {
            AwareAppStartBinder awareAppStartBinder = (AwareAppStartBinder) token3;
            callingPid2 = awareAppStartBinder.callingPid;
            callingUid3 = awareAppStartBinder.callingUid;
            token3 = awareAppStartBinder.tokenRaw;
            isAwareMimeTypeBinder = true;
        }
        IBinder token4 = token3;
        boolean isAwareMimeTypeBinder2 = isAwareMimeTypeBinder;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long startTime2 = SystemClock.uptimeMillis();
                ProcessRecord r2 = null;
                if (iApplicationThread != null) {
                    try {
                        r2 = getRecordForAppLocked(caller);
                        if (r2 == null) {
                            throw new SecurityException("Unable to find app for caller " + iApplicationThread + " (pid=" + Binder.getCallingPid() + ") when getting content provider " + str3);
                        }
                    } catch (Throwable th) {
                        th = th;
                        boolean z6 = z5;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ProcessRecord r3 = r2;
                checkTime(startTime2, "getContentProviderImpl: getProviderByName");
                ContentProviderRecord cpr3 = this.mProviderMap.getProviderByName(str3, userId11);
                if (cpr3 != null || userId11 == 0) {
                    z4 = true;
                    userId10 = userId11;
                    conn = null;
                } else {
                    try {
                        userId10 = userId11;
                        try {
                            cpr3 = this.mProviderMap.getProviderByName(str3, 0);
                            if (cpr3 != null) {
                                cpi7 = cpr3.info;
                                z4 = true;
                                conn = null;
                                try {
                                    if (!isSingleton(cpi7.processName, cpi7.applicationInfo, cpi7.name, cpi7.flags) || !isValidSingletonCall(r3.uid, cpi7.applicationInfo.uid)) {
                                        cpr3 = null;
                                        cpi7 = null;
                                    } else {
                                        userId2 = 0;
                                        checkCrossUser = false;
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    boolean z7 = z5;
                                    IBinder iBinder = token4;
                                    int i5 = userId10;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } else {
                                conn = null;
                                userId2 = userId10;
                                checkCrossUser = true;
                            }
                            if (cpr3 != null) {
                                try {
                                    if (cpr3.proc != null && !cpr3.proc.killed) {
                                        z = true;
                                        providerRunning = z;
                                        if (providerRunning) {
                                            try {
                                                cpi5 = cpr3.info;
                                                try {
                                                    checkTime(startTime2, "getContentProviderImpl: before checkContentProviderPermission");
                                                    if (cpi5 != null) {
                                                        String checkContentProviderPermissionLocked2 = checkContentProviderPermissionLocked(cpi5, r3, userId2, checkCrossUser);
                                                        msg = checkContentProviderPermissionLocked2;
                                                        if (checkContentProviderPermissionLocked2 != null) {
                                                            throw new SecurityException(msg);
                                                        }
                                                    }
                                                    checkTime(startTime2, "getContentProviderImpl: after checkContentProviderPermission");
                                                    if (cpi5 == null || r3 == null) {
                                                        callingUid = callingUid3;
                                                        checkCrossUser2 = checkCrossUser;
                                                    } else {
                                                        callingUid = callingUid3;
                                                        try {
                                                            checkCrossUser2 = checkCrossUser;
                                                            if (this.mHwAMSEx.shouldPreventStartProvider(cpi5, r3.uid, r3.pid, r3.info.packageName, userId2)) {
                                                                resetPriorityAfterLockedSection();
                                                                return null;
                                                            }
                                                        } catch (Throwable th4) {
                                                            th = th4;
                                                            boolean z8 = z5;
                                                            while (true) {
                                                                break;
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            throw th;
                                                        }
                                                    }
                                                    if (r3 != null) {
                                                        if (cpr3.canRunHere(r3)) {
                                                            ContentProviderHolder holder = cpr3.newHolder(null);
                                                            holder.provider = null;
                                                            resetPriorityAfterLockedSection();
                                                            return holder;
                                                        }
                                                    }
                                                    try {
                                                        if (AppGlobals.getPackageManager().resolveContentProvider(str3, 0, userId2) == null) {
                                                            resetPriorityAfterLockedSection();
                                                            return null;
                                                        }
                                                    } catch (RemoteException e) {
                                                    }
                                                } catch (Throwable th5) {
                                                    th = th5;
                                                    ProviderInfo providerInfo = cpi5;
                                                    int i6 = callingUid3;
                                                    boolean z9 = z5;
                                                    IBinder iBinder2 = token4;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                }
                                            } catch (Throwable th6) {
                                                th = th6;
                                                int i7 = callingUid3;
                                                boolean z10 = z5;
                                                IBinder iBinder3 = token4;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                            try {
                                                origId2 = Binder.clearCallingIdentity();
                                                checkTime(startTime2, "getContentProviderImpl: incProviderCountLocked");
                                                conn3 = incProviderCountLocked(r3, cpr3, token4, z5);
                                                if (conn3 != null) {
                                                    try {
                                                        if (conn3.stableCount + conn3.unstableCount == 1 && cpr3.proc != null && r3.setAdj <= 200) {
                                                            checkTime(startTime2, "getContentProviderImpl: before updateLruProcess");
                                                            updateLruProcessLocked(cpr3.proc, false, null);
                                                            checkTime(startTime2, "getContentProviderImpl: after updateLruProcess");
                                                        }
                                                    } catch (Throwable th7) {
                                                        th = th7;
                                                        ContentProviderConnection contentProviderConnection2 = conn3;
                                                        boolean z82 = z5;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                }
                                            } catch (Throwable th8) {
                                                th = th8;
                                                ProviderInfo providerInfo2 = cpi5;
                                                boolean z11 = z5;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                            try {
                                                checkTime(startTime2, "getContentProviderImpl: before updateOomAdj");
                                                int verifiedAdj = cpr3.proc.verifiedAdj;
                                                boolean success = updateOomAdjLocked(cpr3.proc, true);
                                                if (success) {
                                                    if (verifiedAdj != cpr3.proc.setAdj && !isProcessAliveLocked(cpr3.proc)) {
                                                        success = false;
                                                    }
                                                }
                                                maybeUpdateProviderUsageStatsLocked(r3, cpr3.info.packageName, str3);
                                                checkTime(startTime2, "getContentProviderImpl: after updateOomAdj");
                                                if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                    int i8 = verifiedAdj;
                                                    StringBuilder sb = new StringBuilder();
                                                    cpi6 = cpi5;
                                                    try {
                                                        sb.append("Adjust success: ");
                                                        sb.append(success);
                                                        Slog.i(TAG, sb.toString());
                                                    } catch (Throwable th9) {
                                                        th = th9;
                                                        ContentProviderConnection contentProviderConnection3 = conn3;
                                                        boolean z12 = z5;
                                                        IBinder iBinder4 = token4;
                                                        int i9 = callingUid;
                                                        ProviderInfo providerInfo3 = cpi6;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                } else {
                                                    cpi6 = cpi5;
                                                }
                                                if (!success) {
                                                    Slog.i(TAG, "Existing provider " + cpr3.name.flattenToShortString() + " is crashing; detaching " + r3);
                                                    boolean lastRef = decProviderCountLocked(conn3, cpr3, token4, z5);
                                                    checkTime(startTime2, "getContentProviderImpl: before appDied");
                                                    appDiedLocked(cpr3.proc);
                                                    checkTime(startTime2, "getContentProviderImpl: after appDied");
                                                    if (!lastRef) {
                                                        resetPriorityAfterLockedSection();
                                                        return null;
                                                    }
                                                    conn3 = null;
                                                    providerRunning = false;
                                                } else {
                                                    cpr3.proc.verifiedAdj = cpr3.proc.setAdj;
                                                }
                                                ContentProviderConnection conn4 = conn3;
                                                try {
                                                    Binder.restoreCallingIdentity(origId2);
                                                    cpi = cpi6;
                                                    conn = conn4;
                                                } catch (Throwable th10) {
                                                    th = th10;
                                                    boolean z13 = z5;
                                                    IBinder iBinder5 = token4;
                                                    int i10 = callingUid;
                                                    ProviderInfo providerInfo4 = cpi6;
                                                    ContentProviderConnection contentProviderConnection4 = conn4;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                }
                                            } catch (Throwable th11) {
                                                th = th11;
                                                ProviderInfo providerInfo5 = cpi5;
                                                ContentProviderConnection contentProviderConnection5 = conn3;
                                                boolean z112 = z5;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        } else {
                                            callingUid = callingUid3;
                                            checkCrossUser2 = checkCrossUser;
                                            if (cpr3 != null) {
                                                try {
                                                    if (cpr3.proc != null && cpr3.proc.killed) {
                                                        Slog.e(TAG, "appDied, remove old cpr");
                                                        long callingId2 = Binder.clearCallingIdentity();
                                                        try {
                                                            appDiedLocked(cpr3.proc);
                                                            cpi4 = cpi7;
                                                            Binder.restoreCallingIdentity(callingId2);
                                                        } catch (Exception ex) {
                                                            cpi4 = cpi7;
                                                            callingId = callingId2;
                                                            Slog.e(TAG, "appDied", ex);
                                                            Binder.restoreCallingIdentity(callingId);
                                                        } catch (Throwable th12) {
                                                            th = th12;
                                                            boolean z14 = z5;
                                                            IBinder iBinder6 = token4;
                                                            int i11 = callingUid;
                                                            ProviderInfo providerInfo6 = cpi4;
                                                        }
                                                        cpi = cpi4;
                                                    }
                                                } catch (Throwable th13) {
                                                    th = th13;
                                                    ProviderInfo providerInfo7 = cpi7;
                                                    boolean z15 = z5;
                                                    IBinder iBinder7 = token4;
                                                    int i12 = callingUid;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                }
                                            }
                                            cpi4 = cpi7;
                                            cpi = cpi4;
                                        }
                                        if (!providerRunning) {
                                            try {
                                                checkTime(startTime2, "getContentProviderImpl: before resolveContentProvider");
                                                cpi = AppGlobals.getPackageManager().resolveContentProvider(str3, 3072, userId2);
                                                checkTime(startTime2, "getContentProviderImpl: after resolveContentProvider");
                                            } catch (RemoteException e2) {
                                            }
                                            ProviderInfo cpi8 = cpi;
                                            if (cpi8 == null) {
                                                try {
                                                    resetPriorityAfterLockedSection();
                                                    return null;
                                                } catch (Throwable th14) {
                                                    th = th14;
                                                    boolean z822 = z5;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                }
                                            } else {
                                                try {
                                                    if (isSingleton(cpi8.processName, cpi8.applicationInfo, cpi8.name, cpi8.flags)) {
                                                        if (isValidSingletonCall(r3.uid, cpi8.applicationInfo.uid)) {
                                                            z2 = true;
                                                            boolean singleton = z2;
                                                            userId3 = !singleton ? 0 : userId2;
                                                            cpi8.applicationInfo = getAppInfoForUser(cpi8.applicationInfo, userId3);
                                                            checkTime(startTime2, "getContentProviderImpl: got app info for user");
                                                            checkTime(startTime2, "getContentProviderImpl: before checkContentProviderPermission");
                                                            checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi8, r3, userId3, singleton);
                                                            String msg2 = checkContentProviderPermissionLocked;
                                                            if (checkContentProviderPermissionLocked != null) {
                                                                checkTime(startTime2, "getContentProviderImpl: after checkContentProviderPermission");
                                                                if (cpi8 != null) {
                                                                    ProcessRecord callerApp3 = r3;
                                                                    if (isAwareMimeTypeBinder2) {
                                                                        try {
                                                                            synchronized (this.mPidsSelfLocked) {
                                                                                callerApp2 = this.mPidsSelfLocked.get(callingPid2);
                                                                            }
                                                                            callerApp = callerApp2;
                                                                            callingUid2 = callingUid;
                                                                        } catch (Throwable th15) {
                                                                            th = th15;
                                                                            int i13 = userId3;
                                                                            boolean z8222 = z5;
                                                                            while (true) {
                                                                                break;
                                                                            }
                                                                            resetPriorityAfterLockedSection();
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        callingPid2 = r3 != null ? r3.pid : Binder.getCallingPid();
                                                                        ProcessRecord processRecord = callerApp3;
                                                                        callingUid2 = r3 != null ? r3.uid : Binder.getCallingUid();
                                                                        callerApp = processRecord;
                                                                    }
                                                                    try {
                                                                        if (shouldPreventStartProvider(cpi8, callingPid2, callingUid2, callerApp)) {
                                                                            try {
                                                                                resetPriorityAfterLockedSection();
                                                                                return null;
                                                                            } catch (Throwable th16) {
                                                                                th = th16;
                                                                                boolean z16 = z5;
                                                                                int i14 = userId3;
                                                                                int userId12 = i14;
                                                                                while (true) {
                                                                                    break;
                                                                                }
                                                                                resetPriorityAfterLockedSection();
                                                                                throw th;
                                                                            }
                                                                        } else {
                                                                            callingUid = callingUid2;
                                                                        }
                                                                    } catch (Throwable th17) {
                                                                        th = th17;
                                                                        ProviderInfo providerInfo8 = cpi8;
                                                                        boolean z162 = z5;
                                                                        int i142 = userId3;
                                                                        int userId122 = i142;
                                                                        while (true) {
                                                                            break;
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                        throw th;
                                                                    }
                                                                }
                                                                callingPid = callingPid2;
                                                                if (!(cpi8 == null || r3 == null)) {
                                                                    try {
                                                                        if (this.mHwAMSEx.shouldPreventStartProvider(cpi8, r3.uid, r3.pid, r3.info.packageName, userId3)) {
                                                                            try {
                                                                                resetPriorityAfterLockedSection();
                                                                                return null;
                                                                            } catch (Throwable th18) {
                                                                                th = th18;
                                                                                int i15 = userId3;
                                                                                boolean z17 = z5;
                                                                                while (true) {
                                                                                    break;
                                                                                }
                                                                                resetPriorityAfterLockedSection();
                                                                                throw th;
                                                                            }
                                                                        }
                                                                    } catch (Throwable th19) {
                                                                        th = th19;
                                                                        int i16 = userId3;
                                                                        ProviderInfo providerInfo9 = cpi8;
                                                                        boolean z172 = z5;
                                                                        while (true) {
                                                                            break;
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                        throw th;
                                                                    }
                                                                }
                                                                try {
                                                                    if (!this.mProcessesReady) {
                                                                        if (!cpi8.processName.equals("system")) {
                                                                            throw new IllegalArgumentException("Attempt to launch content provider before system ready");
                                                                        }
                                                                    }
                                                                    if (!this.mSystemProvidersInstalled) {
                                                                        if (cpi8.applicationInfo.isSystemApp()) {
                                                                            if ("system".equals(cpi8.processName)) {
                                                                                throw new IllegalStateException("Cannot access system provider: '" + cpi8.authority + "' before system providers are installed!");
                                                                            }
                                                                        }
                                                                    }
                                                                    if (!this.mUserController.isUserRunning(userId3, 0)) {
                                                                        Slog.w(TAG, "Unable to launch app " + cpi8.applicationInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + cpi8.applicationInfo.uid + " for provider " + str3 + ": user " + userId3 + " is stopped");
                                                                        resetPriorityAfterLockedSection();
                                                                        return null;
                                                                    }
                                                                    ComponentName comp2 = new ComponentName(cpi8.packageName, cpi8.name);
                                                                    checkTime(startTime2, "getContentProviderImpl: before getProviderByClass");
                                                                    ContentProviderRecord cpr4 = this.mProviderMap.getProviderByClass(comp2, userId3);
                                                                    checkTime(startTime2, "getContentProviderImpl: after getProviderByClass");
                                                                    boolean firstClass = cpr4 == null;
                                                                    if (firstClass) {
                                                                        try {
                                                                            long ident2 = Binder.clearCallingIdentity();
                                                                            if (this.mPermissionReviewRequired) {
                                                                                if (!requestTargetProviderPermissionsReviewIfNeededLocked(cpi8, r3, userId3)) {
                                                                                    resetPriorityAfterLockedSection();
                                                                                    return null;
                                                                                }
                                                                            }
                                                                            try {
                                                                                checkTime(startTime2, "getContentProviderImpl: before getApplicationInfo");
                                                                                ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(cpi8.applicationInfo.packageName, 1024, userId3);
                                                                                checkTime(startTime2, "getContentProviderImpl: after getApplicationInfo");
                                                                                if (ai == null) {
                                                                                    try {
                                                                                        Slog.w(TAG, "No package info for content provider " + cpi8.name);
                                                                                        token2 = token4;
                                                                                        try {
                                                                                            Binder.restoreCallingIdentity(ident2);
                                                                                            resetPriorityAfterLockedSection();
                                                                                            return null;
                                                                                        } catch (Throwable th20) {
                                                                                            th = th20;
                                                                                            int i17 = userId3;
                                                                                            ProviderInfo providerInfo10 = cpi8;
                                                                                            int i18 = callingPid;
                                                                                            boolean z18 = stable;
                                                                                            while (true) {
                                                                                                break;
                                                                                            }
                                                                                            resetPriorityAfterLockedSection();
                                                                                            throw th;
                                                                                        }
                                                                                    } catch (RemoteException e3) {
                                                                                        token2 = token4;
                                                                                        ident = ident2;
                                                                                        comp = comp2;
                                                                                        String str4 = msg2;
                                                                                        userId5 = userId3;
                                                                                        contentProviderConnection = null;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        cpr = cpr4;
                                                                                        checkTime(startTime2, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                        if (r3 != null) {
                                                                                        }
                                                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                        }
                                                                                        N = this.mLaunchingProviders.size();
                                                                                        i2 = 0;
                                                                                        while (true) {
                                                                                            i3 = i2;
                                                                                            if (i3 >= N) {
                                                                                            }
                                                                                            i2 = i3 + 1;
                                                                                        }
                                                                                        if (i3 >= N) {
                                                                                        }
                                                                                        checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                        if (firstClass) {
                                                                                        }
                                                                                        this.mProviderMap.putProviderByName(str3, cpr);
                                                                                        try {
                                                                                            conn2 = incProviderCountLocked(r, cpr, token2, stable);
                                                                                            if (conn2 != null) {
                                                                                            }
                                                                                            userId2 = userId6;
                                                                                            r10 = z3;
                                                                                            checkTime(startTime, "getContentProviderImpl: done!");
                                                                                            grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                                                                                            resetPriorityAfterLockedSection();
                                                                                            cpr2 = cpr;
                                                                                            synchronized (cpr2) {
                                                                                                while (cpr2.provider == null) {
                                                                                                    if (cpr2.launchingApp == null) {
                                                                                                        Slog.w(TAG, "Unable to launch app " + cpi.applicationInfo.packageName + SliceClientPermissions.SliceAuthority.DELIMITER + cpi.applicationInfo.uid + " for provider " + str3 + ": launching app became null");
                                                                                                        Object[] objArr = new Object[4];
                                                                                                        objArr[0] = Integer.valueOf(UserHandle.getUserId(cpi.applicationInfo.uid));
                                                                                                        objArr[r10] = cpi.applicationInfo.packageName;
                                                                                                        objArr[2] = Integer.valueOf(cpi.applicationInfo.uid);
                                                                                                        objArr[3] = str3;
                                                                                                        EventLog.writeEvent(EventLogTags.AM_PROVIDER_LOST_PROCESS, objArr);
                                                                                                        return null;
                                                                                                    }
                                                                                                    try {
                                                                                                        Slog.v(TAG_MU, "Waiting to start provider " + cpr2 + " launchingApp=" + cpr2.launchingApp + " caller pid= " + Binder.getCallingPid());
                                                                                                        if (conn2 != null) {
                                                                                                            conn2.waiting = r10;
                                                                                                        }
                                                                                                        cpr2.wait();
                                                                                                        if (conn2 != null) {
                                                                                                            conn2.waiting = false;
                                                                                                        }
                                                                                                        str2 = TAG;
                                                                                                        str = "Successfully start provider " + cpr2 + " launchingApp=" + cpr2.launchingApp + " caller pid= " + Binder.getCallingPid();
                                                                                                    } catch (InterruptedException e4) {
                                                                                                        if (conn2 != null) {
                                                                                                            conn2.waiting = false;
                                                                                                        }
                                                                                                        str2 = TAG;
                                                                                                        str = "Successfully start provider " + cpr2 + " launchingApp=" + cpr2.launchingApp + " caller pid= " + Binder.getCallingPid();
                                                                                                    } catch (Throwable th21) {
                                                                                                        if (conn2 != null) {
                                                                                                            conn2.waiting = false;
                                                                                                        }
                                                                                                        Slog.v(TAG, "Successfully start provider " + cpr2 + " launchingApp=" + cpr2.launchingApp + " caller pid= " + Binder.getCallingPid());
                                                                                                        throw th21;
                                                                                                    }
                                                                                                    Slog.v(str2, str);
                                                                                                }
                                                                                            }
                                                                                        } catch (Throwable th22) {
                                                                                            th = th22;
                                                                                            userId4 = userId6;
                                                                                            while (true) {
                                                                                                break;
                                                                                            }
                                                                                            resetPriorityAfterLockedSection();
                                                                                            throw th;
                                                                                        }
                                                                                    } catch (Throwable th23) {
                                                                                        th = th23;
                                                                                        IBinder iBinder8 = token4;
                                                                                        ident = ident2;
                                                                                        ComponentName componentName = comp2;
                                                                                        String str5 = msg2;
                                                                                        int i19 = userId3;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        throw th;
                                                                                    }
                                                                                } else {
                                                                                    token2 = token4;
                                                                                    ident = ident2;
                                                                                    try {
                                                                                        r1 = r1;
                                                                                        contentProviderConnection = null;
                                                                                        ComponentName comp3 = comp2;
                                                                                        String str6 = msg2;
                                                                                        userId5 = userId3;
                                                                                        comp = comp3;
                                                                                        try {
                                                                                            ContentProviderRecord contentProviderRecord = new ContentProviderRecord(this, cpi8, getAppInfoForUser(ai, userId3), comp3, singleton);
                                                                                            Binder.restoreCallingIdentity(ident);
                                                                                            cpr = contentProviderRecord;
                                                                                        } catch (RemoteException e5) {
                                                                                            Binder.restoreCallingIdentity(ident);
                                                                                            cpr = cpr4;
                                                                                            checkTime(startTime2, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                            if (r3 != null) {
                                                                                            }
                                                                                            if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                            }
                                                                                            N = this.mLaunchingProviders.size();
                                                                                            i2 = 0;
                                                                                            while (true) {
                                                                                                i3 = i2;
                                                                                                if (i3 >= N) {
                                                                                                }
                                                                                                i2 = i3 + 1;
                                                                                            }
                                                                                            if (i3 >= N) {
                                                                                            }
                                                                                            checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                            if (firstClass) {
                                                                                            }
                                                                                            this.mProviderMap.putProviderByName(str3, cpr);
                                                                                            conn2 = incProviderCountLocked(r, cpr, token2, stable);
                                                                                            if (conn2 != null) {
                                                                                            }
                                                                                            userId2 = userId6;
                                                                                            r10 = z3;
                                                                                            checkTime(startTime, "getContentProviderImpl: done!");
                                                                                            grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                                                                                            resetPriorityAfterLockedSection();
                                                                                            cpr2 = cpr;
                                                                                            synchronized (cpr2) {
                                                                                            }
                                                                                        } catch (Throwable th24) {
                                                                                            th = th24;
                                                                                            ProviderInfo providerInfo11 = cpi8;
                                                                                            int i20 = callingPid;
                                                                                            int i21 = callingUid;
                                                                                            IBinder iBinder9 = token2;
                                                                                            int i22 = userId5;
                                                                                            boolean z182 = stable;
                                                                                            while (true) {
                                                                                                break;
                                                                                            }
                                                                                            resetPriorityAfterLockedSection();
                                                                                            throw th;
                                                                                        }
                                                                                    } catch (RemoteException e6) {
                                                                                        comp = comp2;
                                                                                        String str7 = msg2;
                                                                                        userId5 = userId3;
                                                                                        contentProviderConnection = null;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        cpr = cpr4;
                                                                                        checkTime(startTime2, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                        if (r3 != null) {
                                                                                        }
                                                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                        }
                                                                                        N = this.mLaunchingProviders.size();
                                                                                        i2 = 0;
                                                                                        while (true) {
                                                                                            i3 = i2;
                                                                                            if (i3 >= N) {
                                                                                            }
                                                                                            i2 = i3 + 1;
                                                                                        }
                                                                                        if (i3 >= N) {
                                                                                        }
                                                                                        checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                        if (firstClass) {
                                                                                        }
                                                                                        this.mProviderMap.putProviderByName(str3, cpr);
                                                                                        conn2 = incProviderCountLocked(r, cpr, token2, stable);
                                                                                        if (conn2 != null) {
                                                                                        }
                                                                                        userId2 = userId6;
                                                                                        r10 = z3;
                                                                                        checkTime(startTime, "getContentProviderImpl: done!");
                                                                                        grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                                                                                        resetPriorityAfterLockedSection();
                                                                                        cpr2 = cpr;
                                                                                        synchronized (cpr2) {
                                                                                        }
                                                                                    } catch (Throwable th25) {
                                                                                        th = th25;
                                                                                        ComponentName componentName2 = comp2;
                                                                                        String str8 = msg2;
                                                                                        int i23 = userId3;
                                                                                        Binder.restoreCallingIdentity(ident);
                                                                                        throw th;
                                                                                    }
                                                                                }
                                                                            } catch (RemoteException e7) {
                                                                                comp = comp2;
                                                                                String str9 = msg2;
                                                                                userId5 = userId3;
                                                                                token2 = token4;
                                                                                ident = ident2;
                                                                                contentProviderConnection = null;
                                                                                Binder.restoreCallingIdentity(ident);
                                                                                cpr = cpr4;
                                                                                checkTime(startTime2, "getContentProviderImpl: now have ContentProviderRecord");
                                                                                if (r3 != null) {
                                                                                }
                                                                                if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                                }
                                                                                N = this.mLaunchingProviders.size();
                                                                                i2 = 0;
                                                                                while (true) {
                                                                                    i3 = i2;
                                                                                    if (i3 >= N) {
                                                                                    }
                                                                                    i2 = i3 + 1;
                                                                                }
                                                                                if (i3 >= N) {
                                                                                }
                                                                                checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                                if (firstClass) {
                                                                                }
                                                                                this.mProviderMap.putProviderByName(str3, cpr);
                                                                                conn2 = incProviderCountLocked(r, cpr, token2, stable);
                                                                                if (conn2 != null) {
                                                                                }
                                                                                userId2 = userId6;
                                                                                r10 = z3;
                                                                                checkTime(startTime, "getContentProviderImpl: done!");
                                                                                grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                                                                                resetPriorityAfterLockedSection();
                                                                                cpr2 = cpr;
                                                                                synchronized (cpr2) {
                                                                                }
                                                                            } catch (Throwable th26) {
                                                                                th = th26;
                                                                                ComponentName componentName3 = comp2;
                                                                                String str10 = msg2;
                                                                                int i24 = userId3;
                                                                                IBinder iBinder10 = token4;
                                                                                ident = ident2;
                                                                                Binder.restoreCallingIdentity(ident);
                                                                                throw th;
                                                                            }
                                                                        } catch (Throwable th27) {
                                                                            th = th27;
                                                                            int i25 = userId3;
                                                                            ProviderInfo providerInfo12 = cpi8;
                                                                            boolean z19 = z5;
                                                                            IBinder iBinder11 = token4;
                                                                            int i26 = callingPid;
                                                                            int userId13 = callingUid;
                                                                            int i27 = i25;
                                                                            while (true) {
                                                                                break;
                                                                            }
                                                                            resetPriorityAfterLockedSection();
                                                                            throw th;
                                                                        }
                                                                    } else {
                                                                        comp = comp2;
                                                                        String str11 = msg2;
                                                                        userId5 = userId3;
                                                                        token2 = token4;
                                                                        contentProviderConnection = null;
                                                                        cpr = cpr4;
                                                                    }
                                                                    checkTime(startTime2, "getContentProviderImpl: now have ContentProviderRecord");
                                                                    if (r3 != null) {
                                                                        if (cpr.canRunHere(r3)) {
                                                                            ContentProviderHolder newHolder = cpr.newHolder(contentProviderConnection);
                                                                            resetPriorityAfterLockedSection();
                                                                            return newHolder;
                                                                        }
                                                                    }
                                                                    try {
                                                                        if (ActivityManagerDebugConfig.DEBUG_PROVIDER) {
                                                                            StringBuilder sb2 = new StringBuilder();
                                                                            sb2.append("LAUNCHING REMOTE PROVIDER (myuid ");
                                                                            sb2.append(r3 != null ? Integer.valueOf(r3.uid) : contentProviderConnection);
                                                                            sb2.append(" pruid ");
                                                                            sb2.append(cpr.appInfo.uid);
                                                                            sb2.append("): ");
                                                                            sb2.append(cpr.info.name);
                                                                            sb2.append(" callers=");
                                                                            sb2.append(Debug.getCallers(6));
                                                                            Slog.w(TAG, sb2.toString());
                                                                        }
                                                                        N = this.mLaunchingProviders.size();
                                                                        i2 = 0;
                                                                        while (true) {
                                                                            i3 = i2;
                                                                            if (i3 >= N) {
                                                                                break;
                                                                            } else if (this.mLaunchingProviders.get(i3) == cpr) {
                                                                                break;
                                                                            } else {
                                                                                i2 = i3 + 1;
                                                                            }
                                                                        }
                                                                        if (i3 >= N) {
                                                                            try {
                                                                                long origId3 = Binder.clearCallingIdentity();
                                                                                try {
                                                                                    checkTime(startTime2, "getContentProviderImpl: before set stopped state");
                                                                                    userId7 = userId5;
                                                                                    try {
                                                                                        AppGlobals.getPackageManager().setPackageStoppedState(cpr.appInfo.packageName, false, userId7);
                                                                                        checkTime(startTime2, "getContentProviderImpl: after set stopped state");
                                                                                    } catch (RemoteException e8) {
                                                                                    } catch (IllegalArgumentException e9) {
                                                                                        e = e9;
                                                                                        try {
                                                                                            Slog.w(TAG, "Failed trying to unstop package " + cpr.appInfo.packageName + ": " + e);
                                                                                        } catch (Throwable th28) {
                                                                                            th = th28;
                                                                                            int i28 = userId7;
                                                                                            int i29 = i3;
                                                                                            ProviderInfo providerInfo13 = cpi8;
                                                                                            ProcessRecord processRecord2 = r3;
                                                                                            long j = startTime2;
                                                                                            boolean z20 = checkCrossUser2;
                                                                                        }
                                                                                    }
                                                                                } catch (RemoteException e10) {
                                                                                    userId7 = userId5;
                                                                                } catch (IllegalArgumentException e11) {
                                                                                    e = e11;
                                                                                    userId7 = userId5;
                                                                                    Slog.w(TAG, "Failed trying to unstop package " + cpr.appInfo.packageName + ": " + e);
                                                                                } catch (Throwable th29) {
                                                                                    th = th29;
                                                                                    int i30 = i3;
                                                                                    ProviderInfo providerInfo14 = cpi8;
                                                                                    ProcessRecord processRecord3 = r3;
                                                                                    long j2 = startTime2;
                                                                                    boolean z21 = checkCrossUser2;
                                                                                    int i31 = userId5;
                                                                                    Binder.restoreCallingIdentity(origId3);
                                                                                    throw th;
                                                                                }
                                                                                try {
                                                                                    checkTime(startTime2, "getContentProviderImpl: looking for process record");
                                                                                    proc = getProcessRecordLocked(cpi8.processName, cpr.appInfo.uid, false);
                                                                                    if (proc != null) {
                                                                                        try {
                                                                                            if (proc.thread != null && !proc.killed) {
                                                                                                StringBuilder sb3 = new StringBuilder();
                                                                                                sb3.append("Installing in existing process ");
                                                                                                sb3.append(proc);
                                                                                                sb3.append(", pubProviders.size():");
                                                                                                sb3.append(proc.pubProviders.size());
                                                                                                sb3.append(", pubProviders.containsKey(");
                                                                                                sb3.append(cpi8.name);
                                                                                                sb3.append("):");
                                                                                                int userId14 = userId7;
                                                                                                try {
                                                                                                    sb3.append(proc.pubProviders.containsKey(cpi8.name));
                                                                                                    Slog.d(TAG, sb3.toString());
                                                                                                    if (!proc.pubProviders.containsKey(cpi8.name)) {
                                                                                                        checkTime(startTime2, "getContentProviderImpl: scheduling install");
                                                                                                        proc.pubProviders.put(cpi8.name, cpr);
                                                                                                        try {
                                                                                                            proc.thread.scheduleInstallProvider(cpi8);
                                                                                                        } catch (RemoteException e12) {
                                                                                                        }
                                                                                                    }
                                                                                                    int i32 = i3;
                                                                                                    cpi2 = cpi8;
                                                                                                    r = r3;
                                                                                                    startTime = startTime2;
                                                                                                    boolean z22 = checkCrossUser2;
                                                                                                    userId8 = userId14;
                                                                                                    msg = userId8;
                                                                                                    cpr.launchingApp = proc;
                                                                                                    this.mLaunchingProviders.add(cpr);
                                                                                                    msg = userId8;
                                                                                                    Binder.restoreCallingIdentity(origId3);
                                                                                                    userId6 = userId8;
                                                                                                } catch (Throwable th30) {
                                                                                                    th = th30;
                                                                                                    int i33 = i3;
                                                                                                    ProviderInfo providerInfo15 = cpi8;
                                                                                                    ProcessRecord processRecord4 = r3;
                                                                                                    long j3 = startTime2;
                                                                                                    boolean z23 = checkCrossUser2;
                                                                                                    int i34 = userId14;
                                                                                                    Binder.restoreCallingIdentity(origId3);
                                                                                                    throw th;
                                                                                                }
                                                                                            }
                                                                                        } catch (Throwable th31) {
                                                                                            th = th31;
                                                                                            int i35 = userId7;
                                                                                            int i36 = i3;
                                                                                            ProviderInfo providerInfo16 = cpi8;
                                                                                            ProcessRecord processRecord5 = r3;
                                                                                            long j4 = startTime2;
                                                                                            boolean z24 = checkCrossUser2;
                                                                                            Binder.restoreCallingIdentity(origId3);
                                                                                            throw th;
                                                                                        }
                                                                                    }
                                                                                    userId9 = userId7;
                                                                                } catch (Throwable th32) {
                                                                                    th = th32;
                                                                                    int i37 = userId7;
                                                                                    int i38 = i3;
                                                                                    ProviderInfo providerInfo17 = cpi8;
                                                                                    ProcessRecord processRecord6 = r3;
                                                                                    long j5 = startTime2;
                                                                                    boolean z25 = checkCrossUser2;
                                                                                    Binder.restoreCallingIdentity(origId3);
                                                                                    throw th;
                                                                                }
                                                                                try {
                                                                                    Slog.i(TAG, "Need to start process " + cpi8.processName + " for provider " + cpi8 + ", callerApp: " + r3);
                                                                                    checkTime(startTime2, "getContentProviderImpl: before start process");
                                                                                    ProcessRecord processRecord7 = proc;
                                                                                    i4 = userId9;
                                                                                    origId = origId3;
                                                                                    int i39 = i3;
                                                                                    cpi3 = cpi8;
                                                                                    boolean z26 = checkCrossUser2;
                                                                                    r = r3;
                                                                                    long startTime3 = startTime2;
                                                                                    try {
                                                                                        msg = i4;
                                                                                        proc = startProcessLocked(cpi8.processName, cpr.appInfo, false, 0, "content provider", new ComponentName(cpi8.applicationInfo.packageName, cpi8.name), false, false, false);
                                                                                        startTime = startTime3;
                                                                                    } catch (Throwable th33) {
                                                                                        th = th33;
                                                                                        origId3 = origId;
                                                                                        ProviderInfo providerInfo18 = cpi3;
                                                                                        long j6 = startTime3;
                                                                                        Binder.restoreCallingIdentity(origId3);
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Throwable th34) {
                                                                                    th = th34;
                                                                                    int i40 = i3;
                                                                                    ProviderInfo providerInfo19 = cpi8;
                                                                                    ProcessRecord processRecord8 = r3;
                                                                                    long j7 = startTime2;
                                                                                    boolean z27 = checkCrossUser2;
                                                                                    int i41 = userId9;
                                                                                    Binder.restoreCallingIdentity(origId3);
                                                                                    throw th;
                                                                                }
                                                                                try {
                                                                                    msg = i4;
                                                                                    checkTime(startTime, "getContentProviderImpl: after start process");
                                                                                    if (proc == null) {
                                                                                        StringBuilder sb4 = new StringBuilder();
                                                                                        sb4.append("Unable to launch app ");
                                                                                        ProviderInfo cpi9 = cpi3;
                                                                                        try {
                                                                                            sb4.append(cpi9.applicationInfo.packageName);
                                                                                            sb4.append(SliceClientPermissions.SliceAuthority.DELIMITER);
                                                                                            sb4.append(cpi9.applicationInfo.uid);
                                                                                            sb4.append(" for provider ");
                                                                                            sb4.append(str3);
                                                                                            sb4.append(": process is bad");
                                                                                            Slog.w(TAG, sb4.toString());
                                                                                            msg = i4;
                                                                                            Binder.restoreCallingIdentity(origId);
                                                                                            resetPriorityAfterLockedSection();
                                                                                            return null;
                                                                                        } catch (Throwable th35) {
                                                                                            th = th35;
                                                                                            origId3 = origId;
                                                                                            Binder.restoreCallingIdentity(origId3);
                                                                                            throw th;
                                                                                        }
                                                                                    } else {
                                                                                        origId3 = origId;
                                                                                        cpi2 = cpi3;
                                                                                        userId8 = i4;
                                                                                        msg = userId8;
                                                                                        cpr.launchingApp = proc;
                                                                                        this.mLaunchingProviders.add(cpr);
                                                                                        msg = userId8;
                                                                                        Binder.restoreCallingIdentity(origId3);
                                                                                        userId6 = userId8;
                                                                                    }
                                                                                } catch (Throwable th36) {
                                                                                    th = th36;
                                                                                    origId3 = origId;
                                                                                    ProviderInfo providerInfo20 = cpi3;
                                                                                    Binder.restoreCallingIdentity(origId3);
                                                                                    throw th;
                                                                                }
                                                                            } catch (Throwable th37) {
                                                                                th = th37;
                                                                                ProviderInfo providerInfo21 = cpi8;
                                                                                int i42 = callingPid;
                                                                                int i43 = userId5;
                                                                                int i44 = callingUid;
                                                                                IBinder iBinder12 = token2;
                                                                                boolean z28 = stable;
                                                                                while (true) {
                                                                                    break;
                                                                                }
                                                                                resetPriorityAfterLockedSection();
                                                                                throw th;
                                                                            }
                                                                        } else {
                                                                            int i45 = i3;
                                                                            cpi2 = cpi8;
                                                                            r = r3;
                                                                            startTime = startTime2;
                                                                            boolean z29 = checkCrossUser2;
                                                                            userId6 = userId5;
                                                                        }
                                                                    } catch (Throwable th38) {
                                                                        th = th38;
                                                                        ProviderInfo providerInfo22 = cpi8;
                                                                        IBinder iBinder13 = token2;
                                                                        boolean z30 = stable;
                                                                        int i46 = callingPid;
                                                                        int i47 = userId5;
                                                                        int i48 = callingUid;
                                                                        while (true) {
                                                                            break;
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                        throw th;
                                                                    }
                                                                    try {
                                                                        checkTime(startTime, "getContentProviderImpl: updating data structures");
                                                                        if (firstClass) {
                                                                            msg = userId6;
                                                                            this.mProviderMap.putProviderByClass(comp, cpr);
                                                                            msg = userId6;
                                                                        } else {
                                                                            ComponentName componentName4 = comp;
                                                                        }
                                                                        this.mProviderMap.putProviderByName(str3, cpr);
                                                                        conn2 = incProviderCountLocked(r, cpr, token2, stable);
                                                                        if (conn2 != null) {
                                                                            z3 = true;
                                                                            try {
                                                                                conn2.waiting = true;
                                                                            } catch (Throwable th39) {
                                                                                th = th39;
                                                                                ContentProviderConnection contentProviderConnection6 = conn2;
                                                                            }
                                                                        } else {
                                                                            z3 = true;
                                                                        }
                                                                        userId2 = userId6;
                                                                        r10 = z3;
                                                                    } catch (Throwable th40) {
                                                                        th = th40;
                                                                        IBinder iBinder14 = token2;
                                                                        boolean z31 = stable;
                                                                        int i49 = callingPid;
                                                                        int i50 = userId6;
                                                                        int i51 = callingUid;
                                                                        while (true) {
                                                                            break;
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                        throw th;
                                                                    }
                                                                } catch (Throwable th41) {
                                                                    th = th41;
                                                                    i = userId3;
                                                                    ProviderInfo providerInfo23 = cpi8;
                                                                    boolean z32 = z5;
                                                                    IBinder iBinder15 = token4;
                                                                    int i52 = callingPid;
                                                                    int userId15 = i;
                                                                    int userId16 = callingUid;
                                                                    while (true) {
                                                                        break;
                                                                    }
                                                                    resetPriorityAfterLockedSection();
                                                                    throw th;
                                                                }
                                                            } else {
                                                                String msg3 = msg2;
                                                                userId4 = userId3;
                                                                ProviderInfo providerInfo24 = cpi8;
                                                                ProcessRecord processRecord9 = r3;
                                                                long j8 = startTime2;
                                                                boolean z33 = z5;
                                                                IBinder iBinder16 = token4;
                                                                boolean z34 = checkCrossUser2;
                                                                try {
                                                                    throw new SecurityException(msg3);
                                                                } catch (Throwable th42) {
                                                                    th = th42;
                                                                    while (true) {
                                                                        break;
                                                                    }
                                                                    resetPriorityAfterLockedSection();
                                                                    throw th;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    z2 = false;
                                                    boolean singleton2 = z2;
                                                    if (!singleton2) {
                                                    }
                                                    try {
                                                        cpi8.applicationInfo = getAppInfoForUser(cpi8.applicationInfo, userId3);
                                                        checkTime(startTime2, "getContentProviderImpl: got app info for user");
                                                        checkTime(startTime2, "getContentProviderImpl: before checkContentProviderPermission");
                                                        checkContentProviderPermissionLocked = checkContentProviderPermissionLocked(cpi8, r3, userId3, singleton2);
                                                        String msg22 = checkContentProviderPermissionLocked;
                                                        if (checkContentProviderPermissionLocked != null) {
                                                        }
                                                    } catch (Throwable th43) {
                                                        th = th43;
                                                        i = userId3;
                                                        ProviderInfo providerInfo25 = cpi8;
                                                        boolean z35 = z5;
                                                        IBinder iBinder17 = token4;
                                                        int userId152 = i;
                                                        int userId162 = callingUid;
                                                        while (true) {
                                                            break;
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                } catch (Throwable th44) {
                                                    th = th44;
                                                    ProviderInfo providerInfo26 = cpi8;
                                                    boolean z36 = z5;
                                                    IBinder iBinder18 = token4;
                                                    int i53 = callingUid;
                                                    while (true) {
                                                        break;
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                }
                                            }
                                        } else {
                                            ProcessRecord processRecord10 = r3;
                                            startTime = startTime2;
                                            boolean z37 = z5;
                                            IBinder iBinder19 = token4;
                                            boolean z38 = checkCrossUser2;
                                            r10 = 1;
                                            callingPid = callingPid2;
                                            cpr = cpr3;
                                            conn2 = conn;
                                        }
                                        checkTime(startTime, "getContentProviderImpl: done!");
                                        grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                                    }
                                } catch (Throwable th45) {
                                    th = th45;
                                    boolean z62 = z5;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            z = false;
                            providerRunning = z;
                            if (providerRunning) {
                            }
                            if (!providerRunning) {
                            }
                            checkTime(startTime, "getContentProviderImpl: done!");
                            grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                        } catch (Throwable th46) {
                            th = th46;
                            boolean z39 = z5;
                            IBinder iBinder20 = token4;
                            int i54 = userId10;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (Throwable th47) {
                        th = th47;
                        int i55 = userId11;
                        boolean z40 = z5;
                        IBinder iBinder21 = token4;
                        while (true) {
                            break;
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                userId2 = userId10;
                checkCrossUser = z4;
                if (cpr3 != null) {
                }
                z = false;
                providerRunning = z;
                if (providerRunning) {
                }
                if (!providerRunning) {
                }
                try {
                    checkTime(startTime, "getContentProviderImpl: done!");
                    grantEphemeralAccessLocked(userId2, null, cpi.applicationInfo.uid, UserHandle.getAppId(Binder.getCallingUid()));
                } catch (Throwable th48) {
                    th = th48;
                    ContentProviderConnection contentProviderConnection7 = conn2;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th49) {
                th = th49;
                int i56 = userId11;
                int i57 = callingUid3;
                boolean z41 = z5;
                IBinder iBinder22 = token4;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        return cpr2 != null ? cpr2.newHolder(conn2) : null;
    }

    private boolean requestTargetProviderPermissionsReviewIfNeededLocked(ProviderInfo cpi, ProcessRecord r, int userId) {
        boolean callerForeground = true;
        if (!getPackageManagerInternalLocked().isPermissionsReviewRequired(cpi.packageName, userId)) {
            return true;
        }
        if (r != null && r.setSchedGroup == 0) {
            callerForeground = false;
        }
        if (!callerForeground) {
            Slog.w(TAG, "u" + userId + " Instantiating a provider in package" + cpi.packageName + " requires a permissions review");
            return false;
        }
        final Intent intent = new Intent("android.intent.action.REVIEW_PERMISSIONS");
        intent.addFlags(276824064);
        intent.putExtra("android.intent.extra.PACKAGE_NAME", cpi.packageName);
        if (ActivityManagerDebugConfig.DEBUG_PERMISSIONS_REVIEW) {
            Slog.i(TAG, "u" + userId + " Launching permission review for package " + cpi.packageName);
        }
        final UserHandle userHandle = new UserHandle(userId);
        this.mHandler.post(new Runnable() {
            public void run() {
                ActivityManagerService.this.mContext.startActivityAsUser(intent, userHandle);
            }
        });
        return false;
    }

    /* access modifiers changed from: package-private */
    public IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    /* access modifiers changed from: package-private */
    public ActivityStartController getActivityStartController() {
        return this.mActivityStartController;
    }

    /* access modifiers changed from: package-private */
    public LockTaskController getLockTaskController() {
        return this.mLockTaskController;
    }

    /* access modifiers changed from: package-private */
    public ClientLifecycleManager getLifecycleManager() {
        return this.mLifecycleManager;
    }

    /* access modifiers changed from: package-private */
    public PackageManagerInternal getPackageManagerInternalLocked() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    public ContentProviderHolder getContentProvider(IApplicationThread caller, String name, int userId, boolean stable) {
        enforceNotIsolatedCaller("getContentProvider");
        if (caller != null) {
            return getContentProviderImpl(caller, name, null, stable, userId);
        }
        String msg = "null IApplicationThread when getting content provider " + name;
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public ContentProviderHolder getContentProviderExternal(String name, int userId, IBinder token) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
        return getContentProviderExternalUnchecked(name, token, this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "getContentProvider", null));
    }

    private ContentProviderHolder getContentProviderExternalUnchecked(String name, IBinder token, int userId) {
        return getContentProviderImpl(null, name, token, true, userId);
    }

    public void removeContentProvider(IBinder connection, boolean stable) {
        enforceNotIsolatedCaller("removeContentProvider");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ContentProviderConnection conn = (ContentProviderConnection) connection;
                if (conn == null) {
                    throw new NullPointerException("connection is null");
                } else if (decProviderCountLocked(conn, null, null, stable)) {
                    updateOomAdjLocked();
                }
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (ClassCastException e) {
            String msg = "removeContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void removeContentProviderExternal(String name, IBinder token) {
        enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
        int userId = UserHandle.getCallingUserId();
        long ident = Binder.clearCallingIdentity();
        try {
            removeContentProviderExternalUnchecked(name, token, userId);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0030, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0094, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0097, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x002d, code lost:
        resetPriorityAfterLockedSection();
     */
    private void removeContentProviderExternalUnchecked(String name, IBinder token, int userId) {
        int userId2 = this.mHwAMSEx.getContentProviderUserId(name, userId);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ContentProviderRecord cpr = this.mProviderMap.getProviderByName(name, userId2);
                if (cpr != null) {
                    ContentProviderRecord localCpr = this.mProviderMap.getProviderByClass(new ComponentName(cpr.info.packageName, cpr.info.name), userId2);
                    if (!localCpr.hasExternalProcessHandles()) {
                        Slog.e(TAG, "Attmpt to remove content provider: " + localCpr + " with no external references.");
                    } else if (localCpr.removeExternalProcessHandleLocked(token)) {
                        updateOomAdjLocked();
                    } else {
                        Slog.e(TAG, "Attmpt to remove content provider " + localCpr + " with no external reference for token: " + token + ".");
                    }
                } else if (ActivityManagerDebugConfig.DEBUG_ALL) {
                    Slog.v(TAG, name + " content provider not found in providers list");
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public final void publishContentProviders(IApplicationThread caller, List<ContentProviderHolder> providers) {
        int N;
        List<ContentProviderHolder> list = providers;
        if (list != null) {
            enforceNotIsolatedCaller("publishContentProviders");
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord r = getRecordForAppLocked(caller);
                    if (ActivityManagerDebugConfig.DEBUG_MU) {
                        Slog.v(TAG_MU, "ProcessRecord uid = " + r.uid);
                    }
                    if (r != null) {
                        long origId = Binder.clearCallingIdentity();
                        Flog.i(103, "publishContentProviders app: " + r + ", providers.size: " + N);
                        for (int i = 0; i < N; i++) {
                            ContentProviderHolder src = list.get(i);
                            if (!(src == null || src.info == null)) {
                                if (src.provider != null) {
                                    ContentProviderRecord dst = r.pubProviders.get(src.info.name);
                                    if (dst == null) {
                                        continue;
                                    } else {
                                        if (ActivityManagerDebugConfig.DEBUG_MU) {
                                            Slog.v(TAG_MU, "ContentProviderRecord uid = " + dst.uid);
                                        }
                                        this.mProviderMap.putProviderByClass(new ComponentName(dst.info.packageName, dst.info.name), dst);
                                        String[] names = dst.info.authority.split(";");
                                        for (String putProviderByName : names) {
                                            this.mProviderMap.putProviderByName(putProviderByName, dst);
                                        }
                                        boolean wasInLaunchingProviders = false;
                                        int launchingCount = this.mLaunchingProviders.size();
                                        int j = 0;
                                        while (j < launchingCount) {
                                            if (this.mLaunchingProviders.get(j) == dst) {
                                                this.mLaunchingProviders.remove(j);
                                                j--;
                                                launchingCount--;
                                                wasInLaunchingProviders = true;
                                            }
                                            j++;
                                        }
                                        if (wasInLaunchingProviders) {
                                            this.mHandler.removeMessages(57, r);
                                        }
                                        synchronized (dst) {
                                            dst.provider = src.provider;
                                            dst.proc = r;
                                            dst.notifyAll();
                                        }
                                        updateOomAdjLocked(r, true);
                                        maybeUpdateProviderUsageStatsLocked(r, src.info.packageName, src.info.authority);
                                    }
                                }
                            }
                        }
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append("Unable to find app for caller ");
                    try {
                        sb.append(caller);
                        sb.append(" (pid=");
                        sb.append(Binder.getCallingPid());
                        sb.append(") when publishing content providers");
                        throw new SecurityException(sb.toString());
                    } catch (Throwable th) {
                        th = th;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    IApplicationThread iApplicationThread = caller;
                }
            }
        }
    }

    public boolean refContentProvider(IBinder connection, int stable, int unstable) {
        boolean z;
        try {
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (stable > 0) {
                            conn.numStableIncs += stable;
                        }
                        int stable2 = stable + conn.stableCount;
                        if (stable2 >= 0) {
                            if (unstable > 0) {
                                conn.numUnstableIncs += unstable;
                            }
                            int unstable2 = unstable + conn.unstableCount;
                            if (unstable2 < 0) {
                                throw new IllegalStateException("unstableCount < 0: " + unstable2);
                            } else if (stable2 + unstable2 > 0) {
                                conn.stableCount = stable2;
                                conn.unstableCount = unstable2;
                                z = !conn.dead;
                            } else {
                                throw new IllegalStateException("ref counts can't go to zero here: stable=" + stable2 + " unstable=" + unstable2);
                            }
                        } else {
                            throw new IllegalStateException("stableCount < 0: " + stable2);
                        }
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                return z;
            }
            throw new NullPointerException("connection is null");
        } catch (ClassCastException e) {
            String msg = "refContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00b2, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00b5, code lost:
        return;
     */
    public void unstableProviderDied(IBinder connection) {
        IContentProvider provider;
        long ident;
        try {
            ContentProviderConnection conn = (ContentProviderConnection) connection;
            if (conn != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        provider = conn.provider.provider;
                    } finally {
                        while (true) {
                            resetPriorityAfterLockedSection();
                        }
                    }
                }
                resetPriorityAfterLockedSection();
                if (provider != null) {
                    if (provider.asBinder().pingBinder()) {
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                Slog.w(TAG, "unstableProviderDied: caller " + Binder.getCallingUid() + " says " + conn + " died, but we don't agree");
                            } catch (Throwable th) {
                                while (true) {
                                    throw th;
                                }
                            }
                        }
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            if (conn.provider.provider != provider) {
                                resetPriorityAfterLockedSection();
                                return;
                            }
                            ProcessRecord proc = conn.provider.proc;
                            if (proc != null) {
                                if (proc.thread != null) {
                                    reportUidInfoMessageLocked(TAG, "Process " + proc.processName + " (pid " + proc.pid + ") early provider death", proc.info.uid);
                                    ident = Binder.clearCallingIdentity();
                                    appDiedLocked(proc);
                                    Binder.restoreCallingIdentity(ident);
                                    resetPriorityAfterLockedSection();
                                }
                            }
                        } catch (Throwable th2) {
                            while (true) {
                                resetPriorityAfterLockedSection();
                                throw th2;
                            }
                        }
                    }
                }
            } else {
                throw new NullPointerException("connection is null");
            }
        } catch (ClassCastException e) {
            String msg = "refContentProvider: " + connection + " not a ContentProviderConnection";
            Slog.w(TAG, msg);
            throw new IllegalArgumentException(msg);
        }
    }

    public void appNotRespondingViaProvider(IBinder connection) {
        enforceCallingPermission("android.permission.REMOVE_TASKS", "appNotRespondingViaProvider()");
        ContentProviderConnection conn = (ContentProviderConnection) connection;
        if (conn == null) {
            Slog.w(TAG, "ContentProviderConnection is null");
            return;
        }
        final ProcessRecord host = conn.provider.proc;
        if (host == null) {
            Slog.w(TAG, "Failed to find hosting ProcessRecord");
        } else {
            this.mHandler.post(new Runnable() {
                public void run() {
                    ActivityManagerService.this.mAppErrors.appNotResponding(host, null, null, false, "ContentProvider not responding");
                }
            });
        }
    }

    public final void installSystemProviders() {
        List<ProviderInfo> providers;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                providers = generateApplicationProvidersLocked((ProcessRecord) this.mProcessNames.get("system", 1000));
                if (providers != null) {
                    for (int i = providers.size() - 1; i >= 0; i--) {
                        if ((providers.get(i).applicationInfo.flags & 1) == 0) {
                            Slog.w(TAG, "Not installing system proc provider " + pi.name + ": not system .apk");
                            providers.remove(i);
                        }
                    }
                }
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        List<ProviderInfo> providers2 = providers;
        if (providers2 != null) {
            this.mSystemThread.installSystemProviders(providers2);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mSystemProvidersInstalled = true;
                Slog.i(TAG, "installSystemProviders success");
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        this.mConstants.start(this.mContext.getContentResolver());
        this.mCoreSettingsObserver = new CoreSettingsObserver(this);
        this.mFontScaleSettingObserver = new FontScaleSettingObserver();
        this.mDevelopmentSettingsObserver = new DevelopmentSettingsObserver();
        GlobalSettingsToPropertiesMapper.start(this.mContext.getContentResolver());
        RescueParty.onSettingsProviderPublished(this.mContext);
    }

    /* access modifiers changed from: package-private */
    public void startPersistentApps(int matchFlags) {
        if (this.mFactoryTest != 1) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (ApplicationInfo app : AppGlobals.getPackageManager().getPersistentApplications(1024 | matchFlags).getList()) {
                        if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(app.packageName)) {
                            addAppLocked(app, null, false, null);
                        }
                    }
                } catch (RemoteException e) {
                }
                try {
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x00bd A[Catch:{ RemoteException -> 0x0111, SecurityException -> 0x010f }] */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x00cb A[ADDED_TO_REGION, Catch:{ RemoteException -> 0x0111, SecurityException -> 0x010f }] */
    public void installEncryptionUnawareProviders(int userId) {
        int NA;
        SparseArray<ProcessRecord> apps;
        int NP;
        int matchFlags;
        int NA2;
        SparseArray<ProcessRecord> apps2;
        int NP2;
        int matchFlags2;
        boolean processMatch;
        boolean z;
        int i = userId;
        int matchFlags3 = 8;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int NP3 = this.mProcessNames.getMap().size();
                int ip = 0;
                while (true) {
                    int ip2 = ip;
                    if (ip2 < NP3) {
                        SparseArray<ProcessRecord> apps3 = (SparseArray) this.mProcessNames.getMap().valueAt(ip2);
                        int NA3 = apps3.size();
                        int ia = 0;
                        while (true) {
                            int ia2 = ia;
                            if (ia2 >= NA3) {
                                break;
                            }
                            ProcessRecord app = apps3.valueAt(ia2);
                            if (app.userId == i && app.thread != null) {
                                if (!app.unlocked) {
                                    int NG = app.pkgList.size();
                                    int ig = 0;
                                    while (true) {
                                        int ig2 = ig;
                                        if (ig2 >= NG) {
                                            break;
                                        }
                                        try {
                                            String pkgName = app.pkgList.keyAt(ig2);
                                            PackageInfo pkgInfo = AppGlobals.getPackageManager().getPackageInfo(pkgName, 262152, i);
                                            if (pkgInfo != null && !ArrayUtils.isEmpty(pkgInfo.providers)) {
                                                ProviderInfo[] providerInfoArr = pkgInfo.providers;
                                                int length = providerInfoArr.length;
                                                int i2 = 0;
                                                while (i2 < length) {
                                                    String pkgName2 = pkgName;
                                                    ProviderInfo pi = providerInfoArr[i2];
                                                    matchFlags2 = matchFlags3;
                                                    try {
                                                        if (!Objects.equals(pi.processName, app.processName)) {
                                                            try {
                                                                if (!pi.multiprocess) {
                                                                    processMatch = false;
                                                                    NP2 = NP3;
                                                                    apps2 = apps3;
                                                                    NA2 = NA3;
                                                                    try {
                                                                        if (isSingleton(pi.processName, pi.applicationInfo, pi.name, pi.flags)) {
                                                                            if (app.userId != 0) {
                                                                                z = false;
                                                                                boolean userMatch = z;
                                                                                if (processMatch || !userMatch) {
                                                                                    Log.v(TAG, "Skipping " + pi);
                                                                                } else {
                                                                                    Log.v(TAG, "Installing " + pi);
                                                                                    app.thread.scheduleInstallProvider(pi);
                                                                                }
                                                                                i2++;
                                                                                pkgName = pkgName2;
                                                                                matchFlags3 = matchFlags2;
                                                                                NP3 = NP2;
                                                                                apps3 = apps2;
                                                                                NA3 = NA2;
                                                                                int i3 = userId;
                                                                            }
                                                                        }
                                                                        z = true;
                                                                        boolean userMatch2 = z;
                                                                        if (processMatch) {
                                                                        }
                                                                        Log.v(TAG, "Skipping " + pi);
                                                                        i2++;
                                                                        pkgName = pkgName2;
                                                                        matchFlags3 = matchFlags2;
                                                                        NP3 = NP2;
                                                                        apps3 = apps2;
                                                                        NA3 = NA2;
                                                                        int i32 = userId;
                                                                    } catch (RemoteException e) {
                                                                    } catch (SecurityException e2) {
                                                                        Log.e(TAG, "Catch a security exception to protect the system process");
                                                                        ig = ig2 + 1;
                                                                        matchFlags3 = matchFlags2;
                                                                        NP3 = NP2;
                                                                        apps3 = apps2;
                                                                        NA3 = NA2;
                                                                        i = userId;
                                                                    }
                                                                }
                                                            } catch (RemoteException e3) {
                                                                NP2 = NP3;
                                                                apps2 = apps3;
                                                                NA2 = NA3;
                                                            } catch (SecurityException e4) {
                                                                NP2 = NP3;
                                                                apps2 = apps3;
                                                                NA2 = NA3;
                                                                Log.e(TAG, "Catch a security exception to protect the system process");
                                                                ig = ig2 + 1;
                                                                matchFlags3 = matchFlags2;
                                                                NP3 = NP2;
                                                                apps3 = apps2;
                                                                NA3 = NA2;
                                                                i = userId;
                                                            }
                                                        }
                                                        processMatch = true;
                                                        NP2 = NP3;
                                                        try {
                                                            apps2 = apps3;
                                                        } catch (RemoteException e5) {
                                                            apps2 = apps3;
                                                            NA2 = NA3;
                                                        } catch (SecurityException e6) {
                                                            apps2 = apps3;
                                                            NA2 = NA3;
                                                            Log.e(TAG, "Catch a security exception to protect the system process");
                                                            ig = ig2 + 1;
                                                            matchFlags3 = matchFlags2;
                                                            NP3 = NP2;
                                                            apps3 = apps2;
                                                            NA3 = NA2;
                                                            i = userId;
                                                        }
                                                    } catch (RemoteException e7) {
                                                        NP2 = NP3;
                                                        apps2 = apps3;
                                                        NA2 = NA3;
                                                    } catch (SecurityException e8) {
                                                        NP2 = NP3;
                                                        apps2 = apps3;
                                                        NA2 = NA3;
                                                        Log.e(TAG, "Catch a security exception to protect the system process");
                                                        ig = ig2 + 1;
                                                        matchFlags3 = matchFlags2;
                                                        NP3 = NP2;
                                                        apps3 = apps2;
                                                        NA3 = NA2;
                                                        i = userId;
                                                    }
                                                    try {
                                                        NA2 = NA3;
                                                        if (isSingleton(pi.processName, pi.applicationInfo, pi.name, pi.flags)) {
                                                        }
                                                        z = true;
                                                        boolean userMatch22 = z;
                                                        if (processMatch) {
                                                        }
                                                        Log.v(TAG, "Skipping " + pi);
                                                        i2++;
                                                        pkgName = pkgName2;
                                                        matchFlags3 = matchFlags2;
                                                        NP3 = NP2;
                                                        apps3 = apps2;
                                                        NA3 = NA2;
                                                        int i322 = userId;
                                                    } catch (RemoteException e9) {
                                                        NA2 = NA3;
                                                    } catch (SecurityException e10) {
                                                        NA2 = NA3;
                                                        Log.e(TAG, "Catch a security exception to protect the system process");
                                                        ig = ig2 + 1;
                                                        matchFlags3 = matchFlags2;
                                                        NP3 = NP2;
                                                        apps3 = apps2;
                                                        NA3 = NA2;
                                                        i = userId;
                                                    }
                                                }
                                            }
                                            matchFlags2 = matchFlags3;
                                            NP2 = NP3;
                                            apps2 = apps3;
                                            NA2 = NA3;
                                        } catch (RemoteException e11) {
                                            matchFlags2 = matchFlags3;
                                            NP2 = NP3;
                                            apps2 = apps3;
                                            NA2 = NA3;
                                        } catch (SecurityException e12) {
                                            matchFlags2 = matchFlags3;
                                            NP2 = NP3;
                                            apps2 = apps3;
                                            NA2 = NA3;
                                            Log.e(TAG, "Catch a security exception to protect the system process");
                                        } catch (Throwable th) {
                                            th = th;
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                        ig = ig2 + 1;
                                        matchFlags3 = matchFlags2;
                                        NP3 = NP2;
                                        apps3 = apps2;
                                        NA3 = NA2;
                                        i = userId;
                                    }
                                } else {
                                    matchFlags = matchFlags3;
                                    NP = NP3;
                                    apps = apps3;
                                    NA = NA3;
                                    ia = ia2 + 1;
                                    matchFlags3 = matchFlags;
                                    NP3 = NP;
                                    apps3 = apps;
                                    NA3 = NA;
                                    i = userId;
                                }
                            }
                            matchFlags = matchFlags3;
                            NP = NP3;
                            apps = apps3;
                            NA = NA3;
                            ia = ia2 + 1;
                            matchFlags3 = matchFlags;
                            NP3 = NP;
                            apps3 = apps;
                            NA3 = NA;
                            i = userId;
                        }
                        int i4 = NP3;
                        ip = ip2 + 1;
                        i = userId;
                    } else {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:38:0x008c, code lost:
        r6 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0090, code lost:
        throw r6;
     */
    public String getProviderMimeType(Uri uri, int userId) {
        enforceNotIsolatedCaller("getProviderMimeType");
        String name = uri.getAuthority();
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        long ident = 0;
        boolean clearedIdentity = false;
        int userId2 = this.mUserController.unsafeConvertIncomingUser(userId);
        if (canClearIdentity(callingPid, callingUid, userId2)) {
            clearedIdentity = true;
            ident = Binder.clearCallingIdentity();
        }
        try {
            ContentProviderHolder holder = getContentProviderExternalUnchecked(name, new AwareAppStartBinder(callingPid, callingUid, null), userId2);
            if (holder != null) {
                String type = holder.provider.getType(uri);
                if (!clearedIdentity) {
                    ident = Binder.clearCallingIdentity();
                }
                if (holder != null) {
                    try {
                        removeContentProviderExternalUnchecked(name, null, userId2);
                    } catch (Throwable th) {
                        throw th;
                    }
                }
                Binder.restoreCallingIdentity(ident);
                return type;
            }
            if (!clearedIdentity) {
                ident = Binder.clearCallingIdentity();
            }
            if (holder != null) {
                try {
                    removeContentProviderExternalUnchecked(name, null, userId2);
                } catch (Throwable th2) {
                    Binder.restoreCallingIdentity(ident);
                    throw th2;
                }
            }
            Binder.restoreCallingIdentity(ident);
            return null;
        } catch (RemoteException e) {
            Log.w(TAG, "Content provider dead retrieving " + uri, e);
            if (!clearedIdentity) {
                ident = Binder.clearCallingIdentity();
            }
            if (0 != 0) {
                removeContentProviderExternalUnchecked(name, null, userId2);
            }
            return null;
        } catch (Exception e2) {
            try {
                Log.w(TAG, "Exception while determining type of " + uri, e2);
                if (!clearedIdentity) {
                    ident = Binder.clearCallingIdentity();
                }
                if (0 != 0) {
                    removeContentProviderExternalUnchecked(name, null, userId2);
                }
                return null;
            } catch (Throwable th3) {
                if (!clearedIdentity) {
                    ident = Binder.clearCallingIdentity();
                }
                if (0 != 0) {
                    removeContentProviderExternalUnchecked(name, null, userId2);
                }
                throw th3;
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        } finally {
        }
    }

    private boolean canClearIdentity(int callingPid, int callingUid, int userId) {
        if (UserHandle.getUserId(callingUid) == userId || checkComponentPermission("android.permission.INTERACT_ACROSS_USERS", callingPid, callingUid, -1, true) == 0 || checkComponentPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingPid, callingUid, -1, true) == 0) {
            return true;
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final ProcessRecord newProcessRecordLocked(ApplicationInfo info, String customProcess, boolean isolated, int isolatedUid) {
        ApplicationInfo applicationInfo = info;
        String proc = customProcess != null ? customProcess : applicationInfo.processName;
        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
        int userId = UserHandle.getUserId(applicationInfo.uid);
        if (this.mHwAMSEx.shouldPreventStartProcess(proc, userId)) {
            return null;
        }
        int uid = applicationInfo.uid;
        if (isolated) {
            if (isolatedUid == 0) {
                int stepsLeft = 1000;
                do {
                    if (this.mNextIsolatedProcessUid < 99000 || this.mNextIsolatedProcessUid > 99999) {
                        this.mNextIsolatedProcessUid = 99000;
                    }
                    uid = UserHandle.getUid(userId, this.mNextIsolatedProcessUid);
                    this.mNextIsolatedProcessUid++;
                    if (this.mIsolatedProcesses.indexOfKey(uid) >= 0) {
                        stepsLeft--;
                    }
                } while (stepsLeft > 0);
                return null;
            }
            uid = isolatedUid;
            getPackageManagerInternalLocked().addIsolatedUid(uid, applicationInfo.uid);
            this.mBatteryStatsService.addIsolatedUid(uid, applicationInfo.uid);
        }
        ProcessRecord r = new ProcessRecord(this, stats, applicationInfo, proc, uid);
        Flog.i(100, "new Process app=" + r + ", name: " + r.processName);
        if (!this.mBooted && !this.mBooting && userId == 0 && (applicationInfo.flags & 9) == 9) {
            r.curSchedGroup = 2;
            r.setSchedGroup = 2;
            r.persistent = true;
            r.maxAdj = -800;
        }
        if (isolated && isolatedUid != 0) {
            r.maxAdj = -700;
        }
        addProcessNameLocked(r);
        return r;
    }

    private boolean uidOnBackgroundWhitelist(int uid) {
        int appId = UserHandle.getAppId(uid);
        for (int i : this.mBackgroundAppIdWhitelist) {
            if (appId == i) {
                return true;
            }
        }
        return false;
    }

    public boolean isBackgroundRestricted(String packageName) {
        int callingUid = Binder.getCallingUid();
        try {
            if (AppGlobals.getPackageManager().getPackageUid(packageName, 268435456, UserHandle.getUserId(callingUid)) == callingUid) {
                return isBackgroundRestrictedNoCheck(callingUid, packageName);
            }
            throw new IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + packageName);
        } catch (RemoteException e) {
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isBackgroundRestrictedNoCheck(int uid, String packageName) {
        return this.mAppOpsService.checkOperation(70, uid, packageName) != 0;
    }

    public void backgroundWhitelistUid(int uid) {
        if (Binder.getCallingUid() == 1000) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Adding uid " + uid + " to bg uid whitelist");
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int N = this.mBackgroundAppIdWhitelist.length;
                    int[] newList = new int[(N + 1)];
                    System.arraycopy(this.mBackgroundAppIdWhitelist, 0, newList, 0, N);
                    newList[N] = UserHandle.getAppId(uid);
                    this.mBackgroundAppIdWhitelist = newList;
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("Only the OS may call backgroundWhitelistUid()");
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        return addAppLocked(info, customProcess, isolated, false, abiOverride);
    }

    /* access modifiers changed from: package-private */
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean disableHiddenApiChecks, String abiOverride) {
        ProcessRecord app;
        String str;
        if (!isolated) {
            app = getProcessRecordLocked(customProcess != null ? customProcess : info.processName, info.uid, true);
        } else {
            app = null;
        }
        if (app == null) {
            app = newProcessRecordLocked(info, customProcess, isolated, 0);
            updateLruProcessLocked(app, false, null);
            updateOomAdjLocked();
        }
        try {
            AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, UserHandle.getUserId(app.uid));
        } catch (RemoteException e) {
        } catch (IllegalArgumentException e2) {
            Slog.w(TAG, "Failed trying to unstop package " + info.packageName + ": " + e2);
        }
        if ((info.flags & 9) == 9) {
            app.persistent = true;
            app.maxAdj = -800;
        }
        if (app.thread == null && this.mPersistentStartingProcesses.indexOf(app) < 0) {
            this.mPersistentStartingProcesses.add(app);
            if (customProcess != null) {
                str = customProcess;
            } else {
                str = app.processName;
            }
            startProcessLocked(app, "added application", str, disableHiddenApiChecks, abiOverride);
        } else if (!this.mPersistentReady && app.thread != null && "com.android.phone".equals(app.processName)) {
            Slog.i(TAG, " phone process is running before persist ready");
            Intent intent = new Intent();
            intent.setPackage("com.android.phone");
            intent.setAction("com.android.phone.action.FAKE_BOOT_SERVICE");
            this.mContext.startService(intent);
        }
        return app;
    }

    public void unhandledBack() {
        long origId;
        enforceCallingPermission("android.permission.FORCE_BACK", "unhandledBack()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                getFocusedStack().unhandledBackLocked();
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public ParcelFileDescriptor openContentUri(String uriString) throws RemoteException {
        enforceNotIsolatedCaller("openContentUri");
        int userId = UserHandle.getCallingUserId();
        Uri uri = Uri.parse(uriString);
        String name = uri.getAuthority();
        ContentProviderHolder cph = getContentProviderExternalUnchecked(name, null, userId);
        if (cph != null) {
            Binder token = new Binder();
            sCallerIdentity.set(new Identity(token, Binder.getCallingPid(), Binder.getCallingUid()));
            try {
                ParcelFileDescriptor pfd = cph.provider.openFile(null, uri, "r", null, token);
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, null, userId);
                return pfd;
            } catch (FileNotFoundException e) {
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, null, userId);
                return null;
            } catch (Throwable th) {
                sCallerIdentity.remove();
                removeContentProviderExternalUnchecked(name, null, userId);
                throw th;
            }
        } else {
            Slog.d(TAG, "Failed to get provider for authority '" + name + "'");
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public boolean isSleepingOrShuttingDownLocked() {
        return isSleepingLocked() || this.mShuttingDown;
    }

    /* access modifiers changed from: package-private */
    public boolean isShuttingDownLocked() {
        return this.mShuttingDown;
    }

    /* access modifiers changed from: package-private */
    public boolean isSleepingLocked() {
        return this.mSleeping;
    }

    /* access modifiers changed from: package-private */
    public void reportGlobalUsageEventLocked(int event) {
        this.mUsageStatsService.reportEvent(PackageManagerService.PLATFORM_PACKAGE_NAME, this.mUserController.getCurrentUserId(), event);
        int[] profiles = this.mUserController.getCurrentProfileIds();
        if (profiles != null) {
            for (int i = profiles.length - 1; i >= 0; i--) {
                this.mUsageStatsService.reportEvent(null, profiles[i], event);
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void reportCurWakefulnessUsageEventLocked() {
        int i;
        if (this.mWakefulness == 1) {
            i = 15;
        } else {
            i = 16;
        }
        reportGlobalUsageEventLocked(i);
    }

    /* access modifiers changed from: package-private */
    public void reportCurKeyguardUsageEventLocked() {
        int i;
        if (this.mKeyguardShown) {
            i = 17;
        } else {
            i = 18;
        }
        reportGlobalUsageEventLocked(i);
    }

    /* access modifiers changed from: package-private */
    public void onWakefulnessChanged(int wakefulness) {
        this.mDAProxy.onWakefulnessChanged(wakefulness);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int i = 1;
                boolean wasAwake = this.mWakefulness == 1;
                boolean isAwake = wakefulness == 1;
                this.mWakefulness = wakefulness;
                if (wasAwake != isAwake) {
                    this.mServices.updateScreenStateLocked(isAwake);
                    reportCurWakefulnessUsageEventLocked();
                    MainHandler mainHandler = this.mHandler;
                    if (!isAwake) {
                        i = 0;
                    }
                    mainHandler.obtainMessage(64, i, 0).sendToTarget();
                }
                updateOomAdjLocked();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void finishRunningVoiceLocked() {
        if (this.mRunningVoice != null) {
            this.mRunningVoice = null;
            this.mVoiceWakeLock.release();
            updateSleepIfNeededLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public void startTimeTrackingFocusedActivityLocked() {
        ActivityRecord resumedActivity = this.mStackSupervisor.getResumedActivityLocked();
        if (!this.mSleeping && this.mCurAppTimeTracker != null && resumedActivity != null) {
            this.mCurAppTimeTracker.start(resumedActivity.packageName);
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void updateSleepIfNeededLocked() {
        Trace.traceBegin(64, "updateSleepIfNeededLocked");
        boolean shouldSleep = !this.mStackSupervisor.hasAwakeDisplay();
        boolean wasSleeping = this.mSleeping;
        if (ActivityManagerDebugConfig.DEBUG_KEYGUARD) {
            Slog.d(TAG_KEYGUARD, "updateSleep shouldSleep:" + shouldSleep + " wasSleeping:" + wasSleeping + " callers=" + Debug.getCallers(5));
        } else {
            Flog.i(107, "updateSleep shouldSleep:" + shouldSleep + " wasSleeping:" + wasSleeping);
        }
        if (!shouldSleep) {
            if (wasSleeping) {
                this.mSleeping = false;
                startTimeTrackingFocusedActivityLocked();
                this.mTopProcessState = 2;
                this.mStackSupervisor.comeOutOfSleepIfNeededLocked();
            }
            this.mStackSupervisor.applySleepTokensLocked(true);
            if (wasSleeping) {
                updateOomAdjLocked();
            }
        } else if (!this.mSleeping && shouldSleep) {
            this.mSleeping = true;
            if (this.mCurAppTimeTracker != null) {
                this.mCurAppTimeTracker.stop();
            }
            this.mTopProcessState = 11;
            this.mStackSupervisor.goingToSleepLocked();
            updateResumedAppTrace(null);
            updateOomAdjLocked();
        }
        Trace.traceEnd(64);
    }

    /* access modifiers changed from: package-private */
    public void notifyTaskPersisterLocked(TaskRecord task, boolean flush) {
        this.mRecentTasks.notifyTaskPersisterLocked(task, flush);
    }

    public void notifyPinnedStackAnimationStarted() {
        this.mTaskChangeNotificationController.notifyPinnedStackAnimationStarted();
    }

    public void notifyPinnedStackAnimationEnded() {
        this.mTaskChangeNotificationController.notifyPinnedStackAnimationEnded();
    }

    public void notifyCleartextNetwork(int uid, byte[] firstPacket) {
        this.mHandler.obtainMessage(49, uid, 0, firstPacket).sendToTarget();
    }

    public boolean shutdown(int timeout) {
        if (checkCallingPermission("android.permission.SHUTDOWN") == 0) {
            boolean timedout = false;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mShuttingDown = true;
                    this.mStackSupervisor.prepareForShutdownLocked();
                    updateEventDispatchingLocked();
                    timedout = this.mStackSupervisor.shutdownLocked(timeout);
                } catch (IndexOutOfBoundsException e) {
                    Slog.e(TAG, "index of stack in display out of bounds!", e);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.shutdown();
            if (this.mUsageStatsService != null) {
                this.mUsageStatsService.prepareShutdown();
            }
            this.mBatteryStatsService.shutdown();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mProcessStats.shutdownLocked();
                    notifyTaskPersisterLocked(null, true);
                } catch (Throwable th2) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th2;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return timedout;
        }
        throw new SecurityException("Requires permission android.permission.SHUTDOWN");
    }

    public final void activitySlept(IBinder token) {
        Slog.v(TAG, "Activity slept: token=" + token + " callingPid=" + Binder.getCallingPid());
        long origId = Binder.clearCallingIdentity();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    this.mStackSupervisor.activitySleptLocked(r);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(origId);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void startRunningVoiceLocked(IVoiceInteractionSession session, int targetUid) {
        Slog.d(TAG, "<<<  startRunningVoiceLocked()");
        this.mVoiceWakeLock.setWorkSource(new WorkSource(targetUid));
        if (this.mRunningVoice == null || this.mRunningVoice.asBinder() != session.asBinder()) {
            boolean wasRunningVoice = this.mRunningVoice != null;
            this.mRunningVoice = session;
            if (!wasRunningVoice) {
                this.mVoiceWakeLock.acquire();
                updateSleepIfNeededLocked();
            }
        }
    }

    private void updateEventDispatchingLocked() {
        this.mWindowManager.setEventDispatching(this.mBooted && !this.mShuttingDown);
    }

    public void setLockScreenShown(boolean keyguardShowing, boolean aodShowing, int secondaryDisplayShowing) {
        long ident;
        if (checkCallingPermission("android.permission.DEVICE_POWER") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    Flog.i(107, "setKeyguardShowing: " + keyguardShowing + " aodShowing: " + aodShowing + " by pid:" + Binder.getCallingPid());
                    ident = Binder.clearCallingIdentity();
                    if (this.mKeyguardShown != keyguardShowing) {
                        this.mKeyguardShown = keyguardShowing;
                        reportCurKeyguardUsageEventLocked();
                    }
                    this.mKeyguardController.setKeyguardShown(keyguardShowing, aodShowing, secondaryDisplayShowing);
                    if (keyguardShowing) {
                        exitSingleHandMode();
                    }
                    Binder.restoreCallingIdentity(ident);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            this.mHandler.obtainMessage(65, keyguardShowing, 0).sendToTarget();
            return;
        }
        throw new SecurityException("Requires permission android.permission.DEVICE_POWER");
    }

    public void notifyLockedProfile(int userId) {
        long ident;
        try {
            if (AppGlobals.getPackageManager().isUidPrivileged(Binder.getCallingUid())) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        ident = Binder.clearCallingIdentity();
                        if (this.mUserController.shouldConfirmCredentials(userId)) {
                            if (this.mKeyguardController.isKeyguardLocked()) {
                                startHomeActivityLocked(this.mUserController.getCurrentUserId(), "notifyLockedProfile");
                            }
                            this.mStackSupervisor.lockAllProfileTasks(userId);
                        }
                        Binder.restoreCallingIdentity(ident);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
                return;
            }
            throw new SecurityException("Only privileged app can call notifyLockedProfile");
        } catch (RemoteException ex) {
            throw new SecurityException("Fail to check is caller a privileged app", ex);
        }
    }

    public void startConfirmDeviceCredentialIntent(Intent intent, Bundle options) {
        long ident;
        ActivityOptions activityOptions;
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "startConfirmDeviceCredentialIntent");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                intent.addFlags(276840448);
                if (options != null) {
                    activityOptions = new ActivityOptions(options);
                } else {
                    activityOptions = ActivityOptions.makeBasic();
                }
                activityOptions.setLaunchTaskId(this.mStackSupervisor.getHomeActivity().getTask().taskId);
                this.mContext.startActivityAsUser(intent, activityOptions.toBundle(), UserHandle.CURRENT);
                Binder.restoreCallingIdentity(ident);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void stopAppSwitches() {
        enforceCallerIsRecentsOrHasPermission("android.permission.STOP_APP_SWITCHES", "stopAppSwitches");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppSwitchesAllowedTime = SystemClock.uptimeMillis() + 5000;
                this.mDidAppSwitch = false;
                this.mActivityStartController.schedulePendingActivityLaunches(5000);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void resumeAppSwitches() {
        enforceCallerIsRecentsOrHasPermission("android.permission.STOP_APP_SWITCHES", "resumeAppSwitches");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppSwitchesAllowedTime = 0;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public boolean checkAllowAppSwitchUid(int uid) {
        ArrayMap<String, Integer> types = this.mAllowAppSwitchUids.get(UserHandle.getUserId(uid));
        if (types != null) {
            for (int i = types.size() - 1; i >= 0; i--) {
                if (types.valueAt(i).intValue() == uid) {
                    return true;
                }
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public boolean checkAppSwitchAllowedLocked(int sourcePid, int sourceUid, int callingPid, int callingUid, String name) {
        if (this.mAppSwitchesAllowedTime < SystemClock.uptimeMillis() || this.mRecentTasks.isCallerRecents(sourceUid) || checkComponentPermission("android.permission.STOP_APP_SWITCHES", sourcePid, sourceUid, -1, true) == 0 || checkAllowAppSwitchUid(sourceUid)) {
            return true;
        }
        if (callingUid != -1 && callingUid != sourceUid && (checkComponentPermission("android.permission.STOP_APP_SWITCHES", callingPid, callingUid, -1, true) == 0 || checkAllowAppSwitchUid(callingUid))) {
            return true;
        }
        Slog.w(TAG, name + " request from " + sourceUid + " stopped");
        return false;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:41:0x0079, code lost:
        r0 = th;
     */
    public void setDebugApp(String packageName, boolean waitForDebugger, boolean persistent) {
        long ident;
        long ident2;
        String str = packageName;
        boolean z = waitForDebugger;
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long ident3 = Binder.clearCallingIdentity();
        if (persistent) {
            try {
                ContentResolver resolver = this.mContext.getContentResolver();
                Settings.Global.putString(resolver, "debug_app", str);
                Settings.Global.putInt(resolver, "wait_for_debugger", z ? 1 : 0);
            } catch (Throwable th) {
                th = th;
                ident = ident3;
            }
        }
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (!persistent) {
                        try {
                            this.mOrigDebugApp = this.mDebugApp;
                            this.mOrigWaitForDebugger = this.mWaitForDebugger;
                        } catch (Throwable th2) {
                            th = th2;
                            ident = ident3;
                        }
                    }
                    this.mDebugApp = str;
                    this.mWaitForDebugger = z;
                    this.mDebugTransient = !persistent;
                    if (str != null) {
                        ident2 = ident3;
                        try {
                            forceStopPackageLocked(str, -1, false, false, true, true, false, -1, "set debug app");
                        } catch (Throwable th3) {
                            th = th3;
                            ident = ident2;
                        }
                    } else {
                        ident2 = ident3;
                    }
                    try {
                        try {
                            resetPriorityAfterLockedSection();
                            Binder.restoreCallingIdentity(ident2);
                        } catch (Throwable th4) {
                            th = th4;
                            ident = ident2;
                            Binder.restoreCallingIdentity(ident);
                            throw th;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                        ident = ident2;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th6) {
                                th = th6;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th7) {
                    th = th7;
                    ident = ident3;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th8) {
            th = th8;
            ident = ident3;
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0064, code lost:
        return;
     */
    public void setAgentApp(String packageName, String agent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (agent != null) {
                    if (this.mAppAgentMap == null) {
                        this.mAppAgentMap = new HashMap();
                    }
                    if (this.mAppAgentMap.size() >= 100) {
                        Slog.e(TAG, "App agent map has too many entries, cannot add " + packageName + SliceClientPermissions.SliceAuthority.DELIMITER + agent);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mAppAgentMap.put(packageName, agent);
                } else if (this.mAppAgentMap != null) {
                    this.mAppAgentMap.remove(packageName);
                    if (this.mAppAgentMap.isEmpty()) {
                        this.mAppAgentMap = null;
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void setTrackAllocationApp(ApplicationInfo app, String processName) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if ((app.flags & 2) == 0) {
                        throw new SecurityException("Process not debuggable: " + app.packageName);
                    }
                }
                this.mTrackAllocationApp = processName;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if ((app.flags & 2) == 0) {
                        throw new SecurityException("Process not debuggable: " + app.packageName);
                    }
                }
                this.mProfileApp = processName;
                if (!(this.mProfilerInfo == null || this.mProfilerInfo.profileFd == null)) {
                    try {
                        this.mProfilerInfo.profileFd.close();
                    } catch (IOException e) {
                    }
                }
                this.mProfilerInfo = new ProfilerInfo(profilerInfo);
                this.mProfileType = 0;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void setNativeDebuggingAppLocked(ApplicationInfo app, String processName) {
        if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (app.flags & 2) != 0) {
            this.mNativeDebuggingApp = processName;
            return;
        }
        throw new SecurityException("Process not debuggable: " + app.packageName);
    }

    public void setAlwaysFinish(boolean enabled) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long ident = Binder.clearCallingIdentity();
        try {
            Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", enabled);
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mAlwaysFinishActivities = enabled;
            }
            resetPriorityAfterLockedSection();
            Binder.restoreCallingIdentity(ident);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public void setActivityController(IActivityController controller, boolean imAMonkey) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "setActivityController()");
        int pid = controller == null ? 0 : Binder.getCallingPid();
        Watchdog.getInstance().processStarted("ActivityController", pid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mController = controller;
                this.mControllerIsAMonkey = imAMonkey;
                Slog.d(TAG, "setActivityController mControllerIsAMonkey:" + imAMonkey + " callingPid:" + pid + " callingUid:" + Binder.getCallingUid());
                Watchdog.getInstance().setActivityController(controller);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setUserIsMonkey(boolean userIsMonkey) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord proc = this.mPidsSelfLocked.get(callingPid);
                    if (proc == null) {
                        throw new SecurityException("Unknown process: " + callingPid);
                    } else if (proc.instr == null || proc.instr.mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                Slog.d(TAG, "setUserIsMonkey userIsMonkey:" + userIsMonkey + " callingPid:" + Binder.getCallingPid() + " callingUid:" + Binder.getCallingUid());
                this.mUserIsMonkey = userIsMonkey;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean isUserAMonkey() {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mUserIsMonkey) {
                    if (this.mController == null || !this.mControllerIsAMonkey) {
                        z = false;
                    }
                }
                z = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    @Deprecated
    public void requestBugReport(int bugreportType) {
        String extraOptions = null;
        switch (bugreportType) {
            case 0:
                break;
            case 1:
                extraOptions = "bugreportplus";
                break;
            case 2:
                extraOptions = "bugreportremote";
                break;
            case 3:
                extraOptions = "bugreportwear";
                break;
            case 4:
                extraOptions = "bugreporttelephony";
                break;
            case 5:
                extraOptions = "bugreportwifi";
                break;
            default:
                throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + bugreportType);
        }
        String type = extraOptions == null ? "bugreport" : extraOptions;
        Slog.i(TAG, type + " requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        if (extraOptions != null) {
            SystemProperties.set("dumpstate.options", extraOptions);
        }
        SystemProperties.set("ctl.start", "bugreport");
    }

    @Deprecated
    private void requestBugReportWithDescription(String shareTitle, String shareDescription, int bugreportType) {
        if (!TextUtils.isEmpty(shareTitle)) {
            if (shareTitle.length() <= 50) {
                if (!TextUtils.isEmpty(shareDescription)) {
                    try {
                        if (shareDescription.getBytes("UTF-8").length <= 91) {
                            SystemProperties.set("dumpstate.options.description", shareDescription);
                        } else {
                            throw new IllegalArgumentException("shareTitle should be less than 91 bytes");
                        }
                    } catch (UnsupportedEncodingException e) {
                        throw new IllegalArgumentException("shareDescription: UnsupportedEncodingException");
                    }
                }
                SystemProperties.set("dumpstate.options.title", shareTitle);
            } else {
                throw new IllegalArgumentException("shareTitle should be less than 50 characters");
            }
        }
        Slog.d(TAG, "Bugreport notification title " + shareTitle + " description " + shareDescription);
        requestBugReport(bugreportType);
    }

    @Deprecated
    public void requestTelephonyBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 4);
    }

    @Deprecated
    public void requestWifiBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 5);
    }

    public static long getInputDispatchingTimeoutLocked(ActivityRecord r) {
        return r != null ? getInputDispatchingTimeoutLocked(r.app) : (long) KEY_DISPATCHING_TIMEOUT;
    }

    public static long getInputDispatchingTimeoutLocked(ProcessRecord r) {
        if (r == null || (r.instr == null && !r.usingWrapper)) {
            return (long) KEY_DISPATCHING_TIMEOUT;
        }
        return (long) INSTRUMENTATION_KEY_DISPATCHING_TIMEOUT;
    }

    public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
        ProcessRecord proc;
        long timeout;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(pid);
                    }
                    timeout = getInputDispatchingTimeoutLocked(proc);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            if (inputDispatchingTimedOut(proc, null, null, aboveSystem, reason)) {
                return -1;
            }
            return timeout;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:23:0x005c, code lost:
        resetPriorityAfterLockedSection();
        r13 = r10.pid;
        r14 = r9.mHandler;
        r3 = r13;
        r4 = r10;
        r5 = r18;
        r6 = r19;
        r7 = r20;
        r8 = r12;
        r1 = new com.android.server.am.ActivityManagerService.AnonymousClass16(r9);
        r14.post(r1);
     */
    public boolean inputDispatchingTimedOut(ProcessRecord proc, ActivityRecord activity, ActivityRecord parent, boolean aboveSystem, String reason) {
        String annotation;
        ProcessRecord processRecord = proc;
        String str = reason;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") == 0) {
            if (str == null) {
                annotation = "Input dispatching timed out";
            } else {
                annotation = "Input dispatching timed out (" + str + ")";
            }
            String annotation2 = annotation;
            if (processRecord != null) {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (processRecord.debugging) {
                            resetPriorityAfterLockedSection();
                            return false;
                        } else if (processRecord.instr != null) {
                            Bundle info = new Bundle();
                            info.putString("shortMsg", "keyDispatchingTimedOut");
                            info.putString("longMsg", annotation2);
                            finishInstrumentationLocked(processRecord, 0, info);
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    } catch (Throwable th) {
                        while (true) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
            }
            return true;
        }
        throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
    }

    public Bundle getAssistContextExtras(int requestType) {
        PendingAssistExtras pae = enqueueAssistContext(requestType, null, null, null, null, null, true, true, UserHandle.getCallingUserId(), null, 500, 0);
        if (pae == null) {
            return null;
        }
        synchronized (pae) {
            while (!pae.haveResult) {
                try {
                    pae.wait();
                } catch (InterruptedException e) {
                }
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                buildAssistBundleLocked(pae, pae.result);
                this.mPendingAssistExtras.remove(pae);
                this.mUiHandler.removeCallbacks(pae);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return pae.extras;
    }

    public boolean isAssistDataAllowedOnCurrentActivity() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityStack focusedStack = getFocusedStack();
                if (focusedStack != null) {
                    if (!focusedStack.isActivityTypeAssistant()) {
                        ActivityRecord activity = focusedStack.getTopActivity();
                        if (activity == null) {
                            resetPriorityAfterLockedSection();
                            return false;
                        }
                        int userId = activity.userId;
                        resetPriorityAfterLockedSection();
                        return !DevicePolicyCache.getInstance().getScreenCaptureDisabled(userId);
                    }
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public boolean showAssistFromActivity(IBinder token, Bundle args) {
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord caller = ActivityRecord.forTokenLocked(token);
                ActivityRecord top = getFocusedStack().getTopActivity();
                if (top != caller) {
                    Slog.w(TAG, "showAssistFromActivity failed: caller " + caller + " is not current top " + top);
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return false;
                } else if (!top.nowVisible) {
                    Slog.w(TAG, "showAssistFromActivity failed: caller " + caller + " is not visible");
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return false;
                } else {
                    resetPriorityAfterLockedSection();
                    boolean showSessionForActiveService = this.mAssistUtils.showSessionForActiveService(args, 8, null, token);
                    Binder.restoreCallingIdentity(ident);
                    return showSessionForActiveService;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public boolean requestAssistContextExtras(int requestType, IAssistDataReceiver receiver, Bundle receiverExtras, IBinder activityToken, boolean focused, boolean newSessionId) {
        return enqueueAssistContext(requestType, null, null, receiver, receiverExtras, activityToken, focused, newSessionId, UserHandle.getCallingUserId(), null, 2000, 0) != null;
    }

    public boolean requestAutofillData(IAssistDataReceiver receiver, Bundle receiverExtras, IBinder activityToken, int flags) {
        return enqueueAssistContext(2, null, null, receiver, receiverExtras, activityToken, true, true, UserHandle.getCallingUserId(), null, 2000, flags) != null;
    }

    private PendingAssistExtras enqueueAssistContext(int requestType, Intent intent, String hint, IAssistDataReceiver receiver, Bundle receiverExtras, IBinder activityToken, boolean focused, boolean newSessionId, int userHandle, Bundle args, long timeout, int flags) {
        IBinder iBinder = activityToken;
        Bundle bundle = args;
        enforceCallingPermission("android.permission.GET_TOP_ACTIVITY_INFO", "enqueueAssistContext()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord activity = getFocusedStack().getTopActivity();
                if (activity == null) {
                    Slog.w(TAG, "getAssistContextExtras failed: no top activity");
                    resetPriorityAfterLockedSection();
                    return null;
                }
                if (activity.app != null) {
                    if (activity.app.thread != null) {
                        if (!focused) {
                            activity = ActivityRecord.forTokenLocked(activityToken);
                            if (activity == null) {
                                Slog.w(TAG, "enqueueAssistContext failed: activity for token=" + iBinder + " couldn't be found");
                                resetPriorityAfterLockedSection();
                                return null;
                            }
                            if (activity.app != null) {
                                if (activity.app.thread == null) {
                                }
                            }
                            long j = timeout;
                            Slog.w(TAG, "enqueueAssistContext failed: no process for " + activity);
                            resetPriorityAfterLockedSection();
                            return null;
                        } else if (iBinder != null) {
                            if (activity != ActivityRecord.forTokenLocked(activityToken)) {
                                Slog.w(TAG, "enqueueAssistContext failed: caller " + caller + " is not current top " + activity);
                                resetPriorityAfterLockedSection();
                                return null;
                            }
                        }
                        ActivityRecord activity2 = activity;
                        Bundle extras = new Bundle();
                        if (bundle != null) {
                            extras.putAll(bundle);
                        }
                        extras.putString("android.intent.extra.ASSIST_PACKAGE", activity2.packageName);
                        extras.putInt("android.intent.extra.ASSIST_UID", activity2.app.uid);
                        Bundle bundle2 = extras;
                        PendingAssistExtras pendingAssistExtras = new PendingAssistExtras(activity2, extras, intent, hint, receiver, receiverExtras, userHandle);
                        PendingAssistExtras pae = pendingAssistExtras;
                        pae.isHome = activity2.isActivityTypeHome();
                        if (newSessionId) {
                            this.mViSessionId++;
                        }
                        try {
                            activity2.app.thread.requestAssistContextExtras(activity2.appToken, pae, requestType, this.mViSessionId, flags);
                            this.mPendingAssistExtras.add(pae);
                            try {
                                this.mUiHandler.postDelayed(pae, timeout);
                            } catch (RemoteException e) {
                            }
                        } catch (RemoteException e2) {
                            long j2 = timeout;
                            Slog.w(TAG, "getAssistContextExtras failed: crash calling " + activity2);
                            resetPriorityAfterLockedSection();
                            return null;
                        }
                        try {
                            resetPriorityAfterLockedSection();
                            return pae;
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                }
                long j3 = timeout;
                Slog.w(TAG, "getAssistContextExtras failed: no process for " + activity);
                resetPriorityAfterLockedSection();
                return null;
            } catch (Throwable th2) {
                th = th2;
                long j4 = timeout;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void pendingAssistExtrasTimedOut(PendingAssistExtras pae) {
        IAssistDataReceiver receiver;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mPendingAssistExtras.remove(pae);
                receiver = pae.receiver;
            } catch (Throwable receiver2) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw receiver2;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (receiver != null) {
            Bundle sendBundle = new Bundle();
            sendBundle.putBundle("receiverExtras", pae.receiverExtras);
            try {
                pae.receiver.onHandleAssistData(sendBundle);
            } catch (RemoteException e) {
            }
        }
    }

    private void buildAssistBundleLocked(PendingAssistExtras pae, Bundle result) {
        if (result != null) {
            pae.extras.putBundle("android.intent.extra.ASSIST_CONTEXT", result);
        }
        if (pae.hint != null) {
            pae.extras.putBoolean(pae.hint, true);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:15:0x002b, code lost:
        r2 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x002d, code lost:
        monitor-enter(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:?, code lost:
        boostPriorityForLockedSection();
        buildAssistBundleLocked(r0, r11);
        r3 = r9.mPendingAssistExtras.remove(r0);
        r9.mUiHandler.removeCallbacks(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x003f, code lost:
        if (r3 != false) goto L_0x0046;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0041, code lost:
        monitor-exit(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0042, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0045, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:?, code lost:
        r4 = r0.receiver;
        r1 = r4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0049, code lost:
        if (r4 == null) goto L_0x006f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x004b, code lost:
        r2 = new android.os.Bundle();
        r2.putBundle("data", r0.extras);
        r2.putParcelable("structure", r0.structure);
        r2.putParcelable("content", r0.content);
        r2.putBundle("receiverExtras", r0.receiverExtras);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x006f, code lost:
        monitor-exit(r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x0070, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0073, code lost:
        if (r1 == null) goto L_0x007b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:?, code lost:
        r1.onHandleAssistData(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x007b, code lost:
        r3 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x008b, code lost:
        if (android.text.TextUtils.equals(r0.intent.getAction(), "android.service.voice.VoiceInteractionService") == false) goto L_0x00a3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x008d, code lost:
        r0.intent.putExtras(r0.extras);
        r9.mContext.startServiceAsUser(r0.intent, new android.os.UserHandle(r0.userHandle));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00a3, code lost:
        r0.intent.replaceExtras(r0.extras);
        r0.intent.setFlags(872415232);
        closeSystemDialogs(com.android.server.policy.PhoneWindowManager.SYSTEM_DIALOG_REASON_ASSIST);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:?, code lost:
        r9.mContext.startActivityAsUser(r0.intent, new android.os.UserHandle(r0.userHandle));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00c5, code lost:
        r5 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:?, code lost:
        android.util.Slog.w(TAG, "No activity to handle assist action.", r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x00d2, code lost:
        r5 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00d3, code lost:
        android.os.Binder.restoreCallingIdentity(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00d6, code lost:
        throw r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x00d7, code lost:
        r3 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x00d9, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x00dc, code lost:
        throw r3;
     */
    public void reportAssistContextExtras(IBinder token, Bundle extras, AssistStructure structure, AssistContent content, Uri referrer) {
        long ident;
        PendingAssistExtras pae = (PendingAssistExtras) token;
        synchronized (pae) {
            pae.result = extras;
            pae.structure = structure;
            pae.content = content;
            if (referrer != null) {
                pae.extras.putParcelable("android.intent.extra.REFERRER", referrer);
            }
            if (structure != null) {
                structure.setHomeActivity(pae.isHome);
            }
            pae.haveResult = true;
            pae.notifyAll();
            if (pae.intent == null && pae.receiver == null) {
                return;
            }
        }
        return;
        Binder.restoreCallingIdentity(ident);
    }

    public boolean launchAssistIntent(Intent intent, int requestType, String hint, int userHandle, Bundle args) {
        return enqueueAssistContext(requestType, intent, hint, null, null, null, true, true, userHandle, args, 500, 0) != null;
    }

    public void registerProcessObserver(IProcessObserver observer) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.register(observer);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unregisterProcessObserver(IProcessObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mProcessObservers.unregister(observer);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getUidProcessState(int uid, String callingPackage) {
        int i;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mActiveUids.get(uid);
                i = uidRec != null ? uidRec.curProcState : 19;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return i;
    }

    public void registerUidObserver(IUidObserver observer, int which, int cutpoint, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.register(observer, new UidObserverRegistration(Binder.getCallingUid(), callingPackage, which, cutpoint));
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unregisterUidObserver(IUidObserver observer) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mUidObservers.unregister(observer);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean isUidActive(int uid, String callingPackage) {
        boolean isUidActiveLocked;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isUidActiveLocked = isUidActiveLocked(uid);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return isUidActiveLocked;
    }

    /* access modifiers changed from: package-private */
    public boolean isUidActiveLocked(int uid) {
        UidRecord uidRecord = this.mActiveUids.get(uid);
        return uidRecord != null && !uidRecord.setIdle;
    }

    public boolean convertFromTranslucent(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
                boolean translucentChanged = r.changeWindowTranslucency(true);
                if (translucentChanged) {
                    this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                }
                this.mWindowManager.setAppFullscreen(token, true);
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(origId);
                return translucentChanged;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public boolean convertToTranslucent(IBinder token, Bundle options) {
        SafeActivityOptions safeOptions = SafeActivityOptions.fromBundle(options);
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return false;
                }
                TaskRecord task = r.getTask();
                int index = task.mActivities.lastIndexOf(r);
                if (index > 0) {
                    task.mActivities.get(index - 1).returningOptions = safeOptions != null ? safeOptions.getOptions(r) : null;
                }
                boolean translucentChanged = r.changeWindowTranslucency(false);
                if (translucentChanged) {
                    r.getStack().convertActivityToTranslucent(r);
                }
                this.mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, false);
                this.mWindowManager.setAppFullscreen(token, false);
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(origId);
                return translucentChanged;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:11:0x001b, code lost:
        resetPriorityAfterLockedSection();
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0021, code lost:
        return r3;
     */
    public Bundle getActivityOptions(IBinder token) {
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                Bundle bundle = null;
                if (r != null) {
                    ActivityOptions activityOptions = r.takeOptionsLocked();
                    if (activityOptions != null) {
                        bundle = activityOptions.toBundle();
                    }
                } else {
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(origId);
                    return null;
                }
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    public void setImmersive(IBinder token, boolean immersive) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    r.immersive = immersive;
                    if (r == this.mStackSupervisor.getResumedActivityLocked()) {
                        if (ActivityManagerDebugConfig.DEBUG_IMMERSIVE) {
                            Slog.d(TAG, "Frontmost changed immersion: " + r);
                        }
                        applyUpdateLockStateLocked(r);
                    }
                } else {
                    throw new IllegalArgumentException();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public boolean isImmersive(IBinder token) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    z = r.immersive;
                } else {
                    throw new IllegalArgumentException();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    public void setVrThread(int tid) {
        enforceSystemHasVrFeature();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int pid = Binder.getCallingPid();
                    this.mVrController.setVrThreadLocked(tid, pid, this.mPidsSelfLocked.get(pid));
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setPersistentVrThread(int tid) {
        if (checkCallingPermission("android.permission.RESTRICTED_VR_ACCESS") == 0) {
            enforceSystemHasVrFeature();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        int pid = Binder.getCallingPid();
                        this.mVrController.setPersistentVrThreadLocked(tid, pid, this.mPidsSelfLocked.get(pid));
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = "Permission Denial: setPersistentVrThread() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.RESTRICTED_VR_ACCESS";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    static boolean scheduleAsRegularPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, 0, 0);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    static boolean scheduleAsFifoPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, 1073741825, 1);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    private void enforceSystemHasVrFeature() {
        if (!this.mContext.getPackageManager().hasSystemFeature("android.hardware.vr.high_performance")) {
            throw new UnsupportedOperationException("VR mode not supported on this device!");
        }
    }

    public void setRenderThread(int tid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int pid = Binder.getCallingPid();
                if (pid == Process.myPid()) {
                    demoteSystemServerRenderThread(tid);
                    resetPriorityAfterLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord proc = this.mPidsSelfLocked.get(pid);
                    if (proc == null || proc.renderThreadTid != 0 || tid <= 0) {
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d("UI_FIFO", "Didn't set thread from setRenderThread? PID: " + pid + ", TID: " + tid + " FIFO: " + this.mUseFifoUiScheduling);
                        }
                    } else if (Process.isThreadInProcess(pid, tid)) {
                        proc.renderThreadTid = tid;
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d("UI_FIFO", "Set RenderThread tid " + tid + " for pid " + pid);
                        }
                        if (proc.curSchedGroup == 3) {
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.d("UI_FIFO", "Promoting " + tid + "out of band");
                            }
                            if (this.mUseFifoUiScheduling) {
                                Process.setThreadScheduler(proc.renderThreadTid, 1073741825, 1);
                            } else {
                                if (this.mCpusetSwitch) {
                                    this.mDAProxy.setVipThread(proc.pid, proc.renderThreadTid, true);
                                }
                                Process.setThreadPriority(proc.renderThreadTid, -10);
                            }
                        }
                    } else {
                        throw new IllegalArgumentException("Render thread does not belong to process");
                    }
                }
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private void demoteSystemServerRenderThread(int tid) {
        Process.setThreadPriority(tid, 10);
    }

    public int setVrMode(IBinder token, boolean enabled, ComponentName packageName) {
        ActivityRecord r;
        enforceSystemHasVrFeature();
        VrManagerInternal vrService = (VrManagerInternal) LocalServices.getService(VrManagerInternal.class);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                r = ActivityRecord.isInStackLocked(token);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (r != null) {
            int hasVrPackage = vrService.hasVrPackage(packageName, r.userId);
            int err = hasVrPackage;
            if (hasVrPackage != 0) {
                return err;
            }
            long callingId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    boostPriorityForLockedSection();
                    r.requestedVrComponent = enabled ? packageName : null;
                    if (r == this.mStackSupervisor.getResumedActivityLocked()) {
                        applyUpdateVrModeLocked(r);
                    }
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
                return 0;
            } catch (Throwable th2) {
                Binder.restoreCallingIdentity(callingId);
                throw th2;
            }
        } else {
            throw new IllegalArgumentException();
        }
    }

    public boolean isVrModePackageEnabled(ComponentName packageName) {
        enforceSystemHasVrFeature();
        return ((VrManagerInternal) LocalServices.getService(VrManagerInternal.class)).hasVrPackage(packageName, UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        boolean z;
        enforceNotIsolatedCaller("startActivity");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = getFocusedStack().topRunningActivityLocked();
                Slog.d(TAG, "isTopActivityImmersive r: " + r);
                z = r != null ? r.immersive : false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* access modifiers changed from: package-private */
    public boolean shouldDisableNonVrUiLocked() {
        return this.mVrController.shouldDisableNonVrUiLocked();
    }

    public boolean isTopOfTask(IBinder token) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r != null) {
                    z = r.getTask().getTopActivity() == r;
                } else {
                    throw new IllegalArgumentException();
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        return z;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:25:0x006c, code lost:
        r4 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x006d, code lost:
        if (r3 == false) goto L_0x0073;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:?, code lost:
        updateOomAdjLocked(r4, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:?, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0077, code lost:
        android.os.Binder.restoreCallingIdentity(r1);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x007b, code lost:
        return;
     */
    public void setHasTopUi(boolean hasTopUi) throws RemoteException {
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") == 0) {
            int pid = Binder.getCallingPid();
            long origId = Binder.clearCallingIdentity();
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        boolean changed = false;
                        synchronized (this.mPidsSelfLocked) {
                            ProcessRecord pr = this.mPidsSelfLocked.get(pid);
                            if (pr == null) {
                                Slog.w(TAG, "setHasTopUi called on unknown pid: " + pid);
                                resetPriorityAfterLockedSection();
                            } else if (pr.hasTopUi != hasTopUi) {
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    Slog.d(TAG, "Setting hasTopUi=" + hasTopUi + " for pid=" + pid);
                                }
                                pr.hasTopUi = hasTopUi;
                                changed = true;
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            String msg = "Permission Denial: setHasTopUi() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERNAL_SYSTEM_WINDOW";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0040, code lost:
        if (r1.runningRemoteAnimation != r7) goto L_0x0047;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0043, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0046, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:?, code lost:
        r1.runningRemoteAnimation = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x004b, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_OOM_ADJ == false) goto L_0x006d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x004d, code lost:
        android.util.Slog.i(TAG, "Setting runningRemoteAnimation=" + r1.runningRemoteAnimation + " for pid=" + r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x006d, code lost:
        updateOomAdjLocked(r1, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0072, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x0075, code lost:
        return;
     */
    public void setRunningRemoteAnimation(int pid, boolean runningRemoteAnimation) {
        if (pid == Process.myPid()) {
            Slog.wtf(TAG, "system can't run remote animation");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pid);
                    if (pr == null) {
                        Slog.w(TAG, "setRunningRemoteAnimation called on unknown pid: " + pid);
                        resetPriorityAfterLockedSection();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void enterSafeMode() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException e) {
                    }
                }
                this.mSafeMode = true;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void showSafeModeOverlay() {
        View v = LayoutInflater.from(this.mContext).inflate(17367258, null);
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        lp.type = 2015;
        lp.width = -2;
        lp.height = -2;
        lp.gravity = 8388691;
        lp.format = v.getBackground().getOpacity();
        lp.flags = 24;
        lp.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(v, lp);
    }

    public void noteWakeupAlarm(IIntentSender sender, WorkSource workSource, int sourceUid, String sourcePkg, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteWakupAlarm[ sourcePkg=" + sourcePkg + ", sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteWakupAlarm(sourcePkg, sourceUid, workSource, tag);
    }

    public void noteAlarmStart(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteAlarmStart[sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteAlarmStart(tag, workSource, sourceUid);
    }

    public void noteAlarmFinish(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender != null && (sender instanceof PendingIntentRecord)) {
                PendingIntentRecord rec = (PendingIntentRecord) sender;
                sourceUid = rec.uid == Binder.getCallingUid() ? 1000 : rec.uid;
            } else {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteAlarmFinish[sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteAlarmFinish(tag, workSource, sourceUid);
    }

    public boolean killPids(int[] pids, String pReason, boolean secure) {
        if (Binder.getCallingUid() == 1000) {
            String reason = pReason == null ? "Unknown" : pReason;
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int i = 0;
                int worstType = 0;
                for (int i2 : pids) {
                    ProcessRecord proc = this.mPidsSelfLocked.get(i2);
                    if (proc != null) {
                        int type = proc.setAdj;
                        if (type > worstType) {
                            worstType = type;
                        }
                    }
                }
                if (worstType < 906 && worstType > 900) {
                    worstType = 900;
                }
                if (!secure && worstType < 500) {
                    worstType = 500;
                }
                Slog.w(TAG, "Killing processes " + reason + " at adjustment " + worstType);
                while (true) {
                    int i3 = i;
                    if (i3 < pids.length) {
                        ProcessRecord proc2 = this.mPidsSelfLocked.get(pids[i3]);
                        if (proc2 != null) {
                            if (proc2.setAdj >= worstType && !proc2.killedByAm) {
                                proc2.kill(reason, true);
                                killed = true;
                            }
                        }
                        i = i3 + 1;
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killPids only available to the system");
    }

    public void killUid(int appId, int userId, String reason) {
        long identity;
        String str;
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                identity = Binder.clearCallingIdentity();
                if (reason != null) {
                    str = reason;
                } else {
                    str = "kill uid";
                }
                killPackageProcessesLocked(null, appId, userId, -800, false, true, true, true, str);
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean killProcessesBelowForeground(String reason) {
        if (Binder.getCallingUid() == 1000) {
            return killProcessesBelowAdj(0, reason);
        }
        throw new SecurityException("killProcessesBelowForeground() only available to system");
    }

    private boolean killProcessesBelowAdj(int belowAdj, String reason) {
        if (Binder.getCallingUid() == 1000) {
            boolean killed = false;
            synchronized (this.mPidsSelfLocked) {
                int size = this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    int keyAt = this.mPidsSelfLocked.keyAt(i);
                    ProcessRecord proc = this.mPidsSelfLocked.valueAt(i);
                    if (proc != null) {
                        if (proc.setAdj > belowAdj && !proc.killedByAm) {
                            proc.kill(reason, true);
                            killed = true;
                        }
                    }
                }
            }
            return killed;
        }
        throw new SecurityException("killProcessesBelowAdj() only available to system");
    }

    public void hang(IBinder who, boolean allowRestart) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            IBinder.DeathRecipient death = new IBinder.DeathRecipient() {
                public void binderDied() {
                    synchronized (this) {
                        notifyAll();
                    }
                }
            };
            try {
                who.linkToDeath(death, 0);
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        Watchdog.getInstance().setAllowRestart(allowRestart);
                        Slog.i(TAG, "Hanging system process at request of pid " + Binder.getCallingPid());
                        synchronized (death) {
                            while (who.isBinderAlive()) {
                                try {
                                    death.wait();
                                } catch (InterruptedException e) {
                                }
                            }
                        }
                        Watchdog.getInstance().setAllowRestart(true);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
            } catch (RemoteException e2) {
                Slog.w(TAG, "hang: given caller IBinder is already dead.");
            }
        } else {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            Log.i(TAG, "Sending shutdown broadcast...");
            BroadcastReceiver br = new BroadcastReceiver() {
                public void onReceive(Context context, Intent intent) {
                    Log.i(ActivityManagerService.TAG, "Shutting down activity manager...");
                    ActivityManagerService.this.shutdown(10000);
                    Log.i(ActivityManagerService.TAG, "Shutdown complete, restarting!");
                    Process.killProcess(Process.myPid());
                    System.exit(10);
                }
            };
            Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
            intent.addFlags(268435456);
            intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
            br.onReceive(this.mContext, intent);
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    private long getLowRamTimeSinceIdle(long now) {
        long j = this.mLowRamTimeSinceLastIdle;
        long j2 = 0;
        if (this.mLowRamStartTime > 0) {
            j2 = now - this.mLowRamStartTime;
        }
        return j + j2;
    }

    public void performIdleMaintenance() {
        int i;
        boolean z;
        int i2;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long now = SystemClock.uptimeMillis();
                    long timeSinceLastIdle = now - this.mLastIdleTime;
                    long lowRamSinceLastIdle = getLowRamTimeSinceIdle(now);
                    this.mLastIdleTime = now;
                    long j = 0;
                    this.mLowRamTimeSinceLastIdle = 0;
                    if (this.mLowRamStartTime != 0) {
                        this.mLowRamStartTime = now;
                    }
                    int i3 = 128;
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("Idle maintenance over ");
                    TimeUtils.formatDuration(timeSinceLastIdle, sb);
                    sb.append(" low RAM for ");
                    TimeUtils.formatDuration(lowRamSinceLastIdle, sb);
                    Slog.i(TAG, sb.toString());
                    boolean z2 = true;
                    boolean doKilling = lowRamSinceLastIdle > timeSinceLastIdle / 3;
                    int i4 = this.mLruProcesses.size() - 1;
                    while (true) {
                        int i5 = i4;
                        if (i5 >= 0) {
                            ProcessRecord proc = this.mLruProcesses.get(i5);
                            if (proc.notCachedSinceIdle) {
                                if (proc.setProcState >= 4 && proc.setProcState <= 9 && doKilling && proc.initialIdlePss != j && proc.lastPss > (proc.initialIdlePss * 3) / 2) {
                                    StringBuilder sb2 = new StringBuilder(i3);
                                    sb2.append("Kill");
                                    sb2.append(proc.processName);
                                    sb2.append(" in idle maint: pss=");
                                    sb2.append(proc.lastPss);
                                    sb2.append(", swapPss=");
                                    sb2.append(proc.lastSwapPss);
                                    sb2.append(", initialPss=");
                                    sb2.append(proc.initialIdlePss);
                                    sb2.append(", period=");
                                    TimeUtils.formatDuration(timeSinceLastIdle, sb2);
                                    sb2.append(", lowRamPeriod=");
                                    TimeUtils.formatDuration(lowRamSinceLastIdle, sb2);
                                    Slog.wtfQuiet(TAG, sb2.toString());
                                    proc.kill("idle maint (pss " + proc.lastPss + " from " + proc.initialIdlePss + ")", z2);
                                }
                                i2 = i5;
                                i = i3;
                                z = z2;
                            } else if (proc.setProcState >= 13 || proc.setProcState < 0) {
                                i2 = i5;
                                i = i3;
                                z = z2;
                            } else {
                                proc.notCachedSinceIdle = z2;
                                proc.initialIdlePss = 0;
                                i2 = i5;
                                z = z2;
                                i = 128;
                                proc.nextPssTime = ProcessList.computeNextPssTime(proc.setProcState, null, this.mTestPssMode, isSleepingLocked(), now);
                            }
                            i4 = i2 - 1;
                            z2 = z;
                            i3 = i;
                            j = 0;
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
    }

    public void sendIdleJobTrigger() {
        long ident;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
            long ident2 = Binder.clearCallingIdentity();
            try {
                long ident3 = ident2;
                try {
                    broadcastIntent(null, new Intent(ACTION_TRIGGER_IDLE).setPackage(PackageManagerService.PLATFORM_PACKAGE_NAME).addFlags(1073741824), null, null, 0, null, null, null, -1, null, false, false, -1);
                    Binder.restoreCallingIdentity(ident3);
                } catch (Throwable th) {
                    th = th;
                    ident = ident3;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                ident = ident2;
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
        } else {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x01f2, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x01f5, code lost:
        if (r12 == false) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:103:0x01f7, code lost:
        setAlwaysFinish(false);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:?, code lost:
        return;
     */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x0141 A[SYNTHETIC, Splitter:B:68:0x0141] */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x016e  */
    /* JADX WARNING: Removed duplicated region for block: B:86:0x01b6  */
    /* JADX WARNING: Removed duplicated region for block: B:89:0x01c5  */
    /* JADX WARNING: Removed duplicated region for block: B:94:0x01d9 A[SYNTHETIC, Splitter:B:94:0x01d9] */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x01e9  */
    public void retrieveSettings() {
        Configuration globalConfig;
        ContentResolver resolver = this.mContext.getContentResolver();
        boolean freeformWindowManagement = HwFreeFormUtils.isFreeFormEnable() || this.mContext.getPackageManager().hasSystemFeature("android.software.freeform_window_management") || Settings.Global.getInt(resolver, "enable_freeform_support", 0) != 0;
        boolean supportsMultiWindow = ActivityManager.supportsMultiWindow(this.mContext);
        boolean supportsPictureInPicture = supportsMultiWindow && this.mContext.getPackageManager().hasSystemFeature("android.software.picture_in_picture");
        boolean supportsSplitScreenMultiWindow = ActivityManager.supportsSplitScreenMultiWindow(this.mContext);
        boolean supportsMultiDisplay = this.mContext.getPackageManager().hasSystemFeature("android.software.activities_on_secondary_displays");
        String debugApp = Settings.Global.getString(resolver, "debug_app");
        boolean waitForDebugger = Settings.Global.getInt(resolver, "wait_for_debugger", 0) != 0;
        boolean alwaysFinishActivities = Settings.Global.getInt(resolver, "always_finish_activities", 0) != 0;
        boolean forceRtl = Settings.Global.getInt(resolver, "debug.force_rtl", 0) != 0;
        boolean forceResizable = Settings.Global.getInt(resolver, "force_resizable_activities", 0) != 0;
        long waitForNetworkTimeoutMs = Settings.Global.getLong(resolver, "network_access_timeout_ms", NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
        boolean supportsLeanbackOnly = this.mContext.getPackageManager().hasSystemFeature("android.software.leanback_only");
        this.mHiddenApiBlacklist.registerObserver();
        long waitForNetworkTimeoutMs2 = waitForNetworkTimeoutMs;
        SystemProperties.set("debug.force_rtl", forceRtl ? "1" : "0");
        Configuration configuration = new Configuration();
        Settings.System.getConfiguration(resolver, configuration);
        HwThemeManager.retrieveSimpleUIConfig(resolver, configuration, this.mUserController.getCurrentUserId());
        if (forceRtl) {
            configuration.setLayoutDirection(configuration.locale);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOrigDebugApp = debugApp;
                this.mDebugApp = debugApp;
                this.mOrigWaitForDebugger = waitForDebugger;
                this.mWaitForDebugger = waitForDebugger;
                this.mAlwaysFinishActivities = alwaysFinishActivities;
                this.mSupportsLeanbackOnly = supportsLeanbackOnly;
                this.mForceResizableActivities = forceResizable;
                boolean multiWindowFormEnabled = freeformWindowManagement || supportsSplitScreenMultiWindow || supportsPictureInPicture || supportsMultiDisplay;
                if (!supportsMultiWindow && !forceResizable) {
                    boolean z = supportsLeanbackOnly;
                } else if (multiWindowFormEnabled) {
                    try {
                        this.mSupportsMultiWindow = true;
                        boolean z2 = supportsLeanbackOnly;
                        try {
                            this.mSupportsFreeformWindowManagement = freeformWindowManagement;
                            this.mSupportsSplitScreenMultiWindow = supportsSplitScreenMultiWindow;
                            this.mSupportsPictureInPicture = supportsPictureInPicture;
                            this.mSupportsMultiDisplay = supportsMultiDisplay;
                            boolean z3 = multiWindowFormEnabled;
                            this.mWindowManager.setForceResizableTasks(this.mForceResizableActivities);
                            this.mWindowManager.setSupportsPictureInPicture(this.mSupportsPictureInPicture);
                            updateConfigurationLocked(configuration, null, true);
                            globalConfig = getGlobalConfiguration();
                            if (!ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                                try {
                                    String str = TAG_CONFIGURATION;
                                    ContentResolver contentResolver = resolver;
                                    try {
                                        StringBuilder sb = new StringBuilder();
                                        Configuration configuration2 = configuration;
                                        try {
                                            sb.append("Initial config: ");
                                            sb.append(globalConfig);
                                            Slog.v(str, sb.toString());
                                        } catch (Throwable th) {
                                            th = th;
                                        }
                                    } catch (Throwable th2) {
                                        th = th2;
                                        Configuration configuration3 = configuration;
                                        long j = waitForNetworkTimeoutMs2;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    ContentResolver contentResolver2 = resolver;
                                    Configuration configuration4 = configuration;
                                    long j2 = waitForNetworkTimeoutMs2;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } else {
                                Configuration configuration5 = configuration;
                            }
                            Resources res = this.mContext.getResources();
                            this.mThumbnailWidth = res.getDimensionPixelSize(17104898);
                            this.mThumbnailHeight = res.getDimensionPixelSize(17104897);
                            this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(res.getString(17039767));
                            this.mUserController.mUserSwitchUiEnabled = !res.getBoolean(17956918);
                            this.mUserController.mMaxRunningUsers = res.getInteger(17694822);
                            if ((globalConfig.uiMode & 4) != 4) {
                                this.mFullscreenThumbnailScale = ((float) res.getInteger(17694970)) / ((float) globalConfig.screenWidthDp);
                            } else {
                                this.mFullscreenThumbnailScale = res.getFraction(18022411, 1, 1);
                            }
                            if (!SystemProperties.getBoolean("ro.build.hw_emui_lite.enable", false)) {
                                Configuration configuration6 = globalConfig;
                                this.mFullscreenThumbnailScale *= res.getFraction(34668545, 1, 1);
                            }
                            Resources resources = res;
                            try {
                                this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs2;
                            } catch (Throwable th4) {
                                th = th4;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            ContentResolver contentResolver3 = resolver;
                            Configuration configuration7 = configuration;
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        boolean z4 = supportsLeanbackOnly;
                        ContentResolver contentResolver4 = resolver;
                        Configuration configuration8 = configuration;
                        long j3 = waitForNetworkTimeoutMs2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                try {
                    this.mSupportsMultiWindow = false;
                    this.mSupportsFreeformWindowManagement = false;
                    this.mSupportsSplitScreenMultiWindow = false;
                    this.mSupportsPictureInPicture = false;
                    this.mSupportsMultiDisplay = false;
                    boolean z32 = multiWindowFormEnabled;
                    this.mWindowManager.setForceResizableTasks(this.mForceResizableActivities);
                    this.mWindowManager.setSupportsPictureInPicture(this.mSupportsPictureInPicture);
                    updateConfigurationLocked(configuration, null, true);
                    globalConfig = getGlobalConfiguration();
                    if (!ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                    }
                } catch (Throwable th7) {
                    th = th7;
                    ContentResolver contentResolver5 = resolver;
                    Configuration configuration9 = configuration;
                    long j4 = waitForNetworkTimeoutMs2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                try {
                    Resources res2 = this.mContext.getResources();
                    this.mThumbnailWidth = res2.getDimensionPixelSize(17104898);
                    this.mThumbnailHeight = res2.getDimensionPixelSize(17104897);
                    this.mAppErrors.loadAppsNotReportingCrashesFromConfigLocked(res2.getString(17039767));
                    this.mUserController.mUserSwitchUiEnabled = !res2.getBoolean(17956918);
                    this.mUserController.mMaxRunningUsers = res2.getInteger(17694822);
                    if ((globalConfig.uiMode & 4) != 4) {
                    }
                    if (!SystemProperties.getBoolean("ro.build.hw_emui_lite.enable", false)) {
                    }
                    Resources resources2 = res2;
                    this.mWaitForNetworkTimeoutMs = waitForNetworkTimeoutMs2;
                } catch (Throwable th8) {
                    th = th8;
                    long j5 = waitForNetworkTimeoutMs2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th9) {
                th = th9;
                ContentResolver contentResolver6 = resolver;
                Configuration configuration10 = configuration;
                boolean z5 = supportsLeanbackOnly;
                long j6 = waitForNetworkTimeoutMs2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        throw th;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:101:0x023a, code lost:
        if (android.app.AppGlobals.getPackageManager().hasSystemUidErrors() == false) goto L_0x0250;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x023c, code lost:
        android.util.Slog.e(TAG, "UIDs on the system are inconsistent, you need to wipe your data partition or your device will be unstable.");
        r15.mUiHandler.obtainMessage(14).sendToTarget();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:0x0323, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x0324, code lost:
        r1 = r26;
        r6 = r33;
        r5 = r15;
        r3 = r31;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x005e, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:141:0x032f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:142:0x0330, code lost:
        r30 = r15;
        r1 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:?, code lost:
        sTheRealBuildSerial = android.os.IDeviceIdentifiersPolicyService.Stub.asInterface(android.os.ServiceManager.getService("device_identifiers")).getSerial();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x03c3, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x03c4, code lost:
        r28 = r9;
        r5 = r10;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x03d1, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:184:0x03d3, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:185:0x03d4, code lost:
        r5 = r10;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:188:0x03db, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:189:0x03de, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:190:0x03df, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:191:0x03e1, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:192:0x03e2, code lost:
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:?, code lost:
        monitor-exit(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:195:0x03e8, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:0x03eb, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x03ec, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x03ee, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:199:0x03ef, code lost:
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:201:?, code lost:
        monitor-exit(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x03f5, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x03f8, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x03f9, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:219:0x0415, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00a4, code lost:
        monitor-enter(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00a9, code lost:
        if (r11 == null) goto L_0x00df;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:?, code lost:
        r1 = r11.size() - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00b0, code lost:
        if (r1 < 0) goto L_0x00df;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00b2, code lost:
        android.util.Slog.i(TAG, "Removing system update proc: " + r2);
        removeProcessLocked(r2, true, false, "system update done");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00d4, code lost:
        r1 = r1 - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00d7, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00d8, code lost:
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:?, code lost:
        r15.mProcessesReady = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x00e1, code lost:
        monitor-exit(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00e2, code lost:
        resetPriorityAfterLockedSection();
        android.util.Jlog.d(33, "JL_BOOT_PROGRESS_AMS_READY");
        android.util.Slog.i(TAG, "System now ready");
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.BOOT_PROGRESS_AMS_READY, android.os.SystemClock.uptimeMillis());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00fc, code lost:
        monitor-enter(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0102, code lost:
        if (r15.mFactoryTest != 1) goto L_0x017a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:?, code lost:
        r1 = r15.mContext.getPackageManager().resolveActivity(new android.content.Intent("android.intent.action.FACTORY_TEST"), 1024);
        r2 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x0119, code lost:
        if (r1 == null) goto L_0x0145;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x011b, code lost:
        r4 = r1.activityInfo;
        r5 = r4.applicationInfo;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:58:0x0122, code lost:
        if ((r5.flags & 1) == 0) goto L_0x0136;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x0124, code lost:
        r15.mTopAction = "android.intent.action.FACTORY_TEST";
        r15.mTopData = null;
        r15.mTopComponent = new android.content.ComponentName(r5.packageName, r4.name);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x0136, code lost:
        r2 = r15.mContext.getResources().getText(17040052);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:62:0x0145, code lost:
        r2 = r15.mContext.getResources().getText(17040051);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:63:0x0153, code lost:
        if (r2 == null) goto L_0x017a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:0x0155, code lost:
        r15.mTopAction = null;
        r15.mTopData = null;
        r15.mTopComponent = null;
        r3 = android.os.Message.obtain();
        r3.what = 3;
        r3.getData().putCharSequence("msg", r2);
        r15.mUiHandler.sendMessage(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:65:0x0172, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:66:0x0173, code lost:
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:?, code lost:
        monitor-exit(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x017b, code lost:
        resetPriorityAfterLockedSection();
        retrieveSettings();
        r10 = r15.mUserController.getCurrentUserId();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x0187, code lost:
        monitor-enter(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:?, code lost:
        boostPriorityForLockedSection();
        readGrantedUriPermissionsLocked();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:73:0x018e, code lost:
        monitor-exit(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x018f, code lost:
        resetPriorityAfterLockedSection();
        r9 = (android.os.PowerManagerInternal) com.android.server.LocalServices.getService(android.os.PowerManagerInternal.class);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x019b, code lost:
        if (r9 == null) goto L_0x01b2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x019d, code lost:
        r9.registerLowPowerModeObserver(12, new com.android.server.am.$$Lambda$ActivityManagerService$eFxS8Z_MXzP9a8ro45rBMHy3bk(r15));
        updateForceBackgroundCheck(r9.getLowPowerState(12).batterySaverEnabled);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x01b2, code lost:
        android.util.Slog.wtf(TAG, "PowerManagerInternal not found.");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x01b9, code lost:
        if (r14 == null) goto L_0x01be;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x01bb, code lost:
        r32.run();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x01be, code lost:
        r13.traceBegin("ActivityManagerStartApps");
        r15.mBatteryStatsService.noteEvent(32775, java.lang.Integer.toString(r10), r10);
        r15.mBatteryStatsService.noteEvent(32776, java.lang.Integer.toString(r10), r10);
        r15.mSystemServiceManager.startUser(r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x01e0, code lost:
        monitor-enter(r31);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:?, code lost:
        boostPriorityForLockedSection();
        r15.mHwAMSEx.registerBroadcastReceiver();
        startPersistentApps(com.android.server.pm.DumpState.DUMP_FROZEN);
        r15.mPersistentReady = true;
        r15.mBooting = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x01f6, code lost:
        if (android.os.UserManager.isSplitSystemUser() == false) goto L_0x0229;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x0205, code lost:
        if (android.provider.Settings.Secure.getInt(r15.mContext.getContentResolver(), "user_setup_complete", 0) == 0) goto L_0x0229;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:8:0x0019, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:?, code lost:
        android.app.AppGlobals.getPackageManager().setComponentEnabledSetting(new android.content.ComponentName(r15.mContext, com.android.internal.app.SystemUserHomeActivity.class), 1, 0, 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x0218, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x021d, code lost:
        throw r0.rethrowAsRuntimeException();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x021e, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x021f, code lost:
        r28 = r9;
        r5 = r10;
        r18 = r11;
        r6 = r13;
        r4 = r14;
        r3 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:?, code lost:
        android.hwtheme.HwThemeManager.linkDataSkinDirAsUser(r10);
        startHomeActivityLocked(r10, "systemReady");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x001c, code lost:
        return;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:141:0x032f A[ExcHandler: Throwable (th java.lang.Throwable), Splitter:B:119:0x02ca] */
    public void systemReady(Runnable goingCallback, TimingsTraceLog traceLog) {
        ArrayList<ProcessRecord> procsToKill;
        boolean currentUserId;
        PowerManagerInternal pmi;
        long ident;
        int currentUserId2;
        long ident2;
        Intent intent;
        int currentUserId3;
        int i = goingCallback;
        int i2 = traceLog;
        i2.traceBegin("PhaseActivityManagerReady");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mSystemReady) {
                    this.mHasHeavyWeightFeature = this.mContext.getPackageManager().hasSystemFeature("android.software.cant_save_state");
                    this.mLocalDeviceIdleController = (DeviceIdleController.LocalService) LocalServices.getService(DeviceIdleController.LocalService.class);
                    this.mAssistUtils = new AssistUtils(this.mContext);
                    this.mVrController.onSystemReady();
                    this.mUserController.onSystemReady();
                    this.mRecentTasks.onSystemReadyLocked();
                    this.mSystemReady = true;
                    this.mHwAMSEx.startPushService();
                    SystemProperties.set("sys.super_power_save", "false");
                } else if (i != null) {
                    goingCallback.run();
                }
            } finally {
                th = th;
                TimingsTraceLog timingsTraceLog = i2;
                Runnable runnable = i;
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        if (!Build.isBuildConsistent()) {
            Slog.e(TAG, "Build fingerprint is not consistent, warning user");
            this.mUiHandler.obtainMessage(15).sendToTarget();
        }
        long ident3 = Binder.clearCallingIdentity();
        try {
            Intent intent2 = new Intent("android.intent.action.USER_STARTED");
            intent2.addFlags(1342177280);
            intent2.putExtra("android.intent.extra.user_handle", currentUserId);
            long ident4 = ident3;
            PowerManagerInternal powerManagerInternal = pmi;
            currentUserId = currentUserId;
            ArrayList<ProcessRecord> arrayList = procsToKill;
            try {
                broadcastIntentLocked(null, null, intent2, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, currentUserId);
                intent = new Intent("android.intent.action.USER_STARTING");
                intent.addFlags(1073741824);
                currentUserId3 = currentUserId;
            } catch (Throwable th) {
                th = th;
                ident = ident4;
                TimingsTraceLog timingsTraceLog2 = traceLog;
                int i3 = currentUserId;
                Runnable runnable2 = goingCallback;
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
            try {
                intent.putExtra("android.intent.extra.user_handle", currentUserId3);
                currentUserId2 = currentUserId3;
                try {
                    broadcastIntentLocked(null, null, intent, null, new IIntentReceiver.Stub() {
                        public void performReceive(Intent intent, int resultCode, String data, Bundle extras, boolean ordered, boolean sticky, int sendingUser) throws RemoteException {
                        }
                    }, 0, null, null, new String[]{"android.permission.INTERACT_ACROSS_USERS"}, -1, null, true, false, MY_PID, 1000, -1);
                    try {
                        Binder.restoreCallingIdentity(ident4);
                    } catch (Throwable th2) {
                        e = th2;
                        TimingsTraceLog timingsTraceLog3 = traceLog;
                        int i4 = currentUserId2;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    ident = ident4;
                    TimingsTraceLog timingsTraceLog4 = traceLog;
                    int i5 = currentUserId2;
                    Runnable runnable3 = goingCallback;
                    Binder.restoreCallingIdentity(ident);
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                ident = ident4;
                TimingsTraceLog timingsTraceLog5 = traceLog;
                int i6 = currentUserId3;
                Runnable runnable4 = goingCallback;
                Binder.restoreCallingIdentity(ident);
                throw th;
            }
        } catch (Throwable th5) {
            th = th5;
            ident = ident3;
            PowerManagerInternal powerManagerInternal2 = pmi;
            ArrayList<ProcessRecord> arrayList2 = procsToKill;
            TimingsTraceLog timingsTraceLog6 = traceLog;
            int i7 = currentUserId;
            Runnable runnable5 = i;
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
        try {
            this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
            this.mUserController.sendUserSwitchBroadcasts(-1, currentUserId2);
            BinderInternal.nSetBinderProxyCountWatermarks(6000, 5500);
            BinderInternal.nSetBinderProxyCountEnabled(true);
            BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() {
                public void onLimitReached(int uid) {
                    Slog.wtf(ActivityManagerService.TAG, "Uid " + uid + " sent too many Binders to uid " + Process.myUid());
                    if (uid == 1000) {
                        Slog.i(ActivityManagerService.TAG, "Skipping kill (uid is SYSTEM)");
                    } else {
                        ActivityManagerService.this.killUid(UserHandle.getAppId(uid), UserHandle.getUserId(uid), "Too many Binders sent to SYSTEM");
                    }
                }
            }, this.mHandler);
            traceLog.traceEnd();
            traceLog.traceEnd();
            resetPriorityAfterLockedSection();
            this.mHwAMSEx.systemReady(goingCallback, traceLog);
            return;
        } catch (Throwable th6) {
            e = th6;
            TimingsTraceLog timingsTraceLog7 = traceLog;
            int i8 = currentUserId2;
            Runnable runnable6 = goingCallback;
            resetPriorityAfterLockedSection();
            throw e;
        }
        synchronized (this.mPidsSelfLocked) {
            try {
                int i9 = this.mPidsSelfLocked.size() - 1;
                procsToKill = null;
                while (i9 >= 0) {
                    try {
                        ProcessRecord proc = this.mPidsSelfLocked.valueAt(i9);
                        if (!isAllowedWhileBooting(proc.info)) {
                            if (procsToKill == null) {
                                procsToKill = new ArrayList<>();
                            }
                            procsToKill.add(proc);
                        }
                        i9--;
                    } catch (Throwable th7) {
                        th = th7;
                        ArrayList<ProcessRecord> arrayList3 = procsToKill;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th8) {
                                th = th8;
                            }
                        }
                        throw th;
                    }
                }
                try {
                } catch (Throwable th9) {
                    th = th9;
                    TimingsTraceLog timingsTraceLog8 = i2;
                    Runnable runnable7 = i;
                    ArrayList<ProcessRecord> arrayList4 = procsToKill;
                    while (true) {
                        break;
                    }
                    throw th;
                }
            } catch (Throwable th10) {
                th = th10;
                while (true) {
                    break;
                }
                throw th;
            }
        }
    }

    /* access modifiers changed from: private */
    public void updateForceBackgroundCheck(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mForceBackgroundCheck != enabled) {
                    this.mForceBackgroundCheck = enabled;
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("Force background check ");
                        sb.append(enabled ? "enabled" : "disabled");
                        Slog.i(TAG, sb.toString());
                    }
                    if (this.mForceBackgroundCheck) {
                        doStopUidForIdleUidsLocked();
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void killAppAtUsersRequest(ProcessRecord app, Dialog fromDialog) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppErrors.killAppAtUserRequestLocked(app, fromDialog);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void skipCurrentReceiverLocked(ProcessRecord app) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipCurrentReceiverLocked(app);
        }
    }

    public void handleApplicationCrash(IBinder app, ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        String str;
        IBinder iBinder = app;
        ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo = crashInfo;
        ProcessRecord r = findAppProcess(iBinder, "Crash");
        if (iBinder == null) {
            str = "system_server";
        } else if (r == null) {
            str = Binder.getCallingPid() == MY_PID ? "system_server" : "mystery";
        } else {
            str = r.processName;
        }
        String processName = str;
        if (r != null) {
            this.mDAProxy.notifyProcessWillDie(false, true, false, null, r.pid, r.uid);
        }
        if (!(parcelableCrashInfo == null || parcelableCrashInfo.stackTrace == null)) {
            String stackTrace = parcelableCrashInfo.stackTrace;
            if (stackTrace.endsWith("-loghandler")) {
                this.mLastAppCrashedPid = r == null ? -1 : r.pid;
                String str2 = stackTrace;
                addErrorToDropBox("crash", r, processName, null, null, null, null, null, parcelableCrashInfo);
                return;
            }
        }
        handleApplicationCrashInner("crash", r, processName, parcelableCrashInfo);
    }

    /* access modifiers changed from: package-private */
    public void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName, ApplicationErrorReport.CrashInfo crashInfo) {
        int i;
        ProcessRecord processRecord = r;
        ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
        Object[] objArr = new Object[8];
        objArr[0] = Integer.valueOf(Binder.getCallingPid());
        objArr[1] = Integer.valueOf(UserHandle.getUserId(Binder.getCallingUid()));
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(processRecord == null ? -1 : processRecord.info.flags);
        objArr[4] = crashInfo2.exceptionClassName;
        objArr[5] = crashInfo2.exceptionMessage;
        objArr[6] = crashInfo2.throwFileName;
        objArr[7] = Integer.valueOf(crashInfo2.throwLineNumber);
        EventLog.writeEvent(EventLogTags.AM_CRASH, objArr);
        StatsLog.write(78, Binder.getCallingUid(), eventType, processName, Binder.getCallingPid(), (processRecord == null || processRecord.info == null) ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : processRecord.info.packageName, (processRecord == null || processRecord.info == null) ? 0 : processRecord.info.isInstantApp() ? 2 : 1, processRecord != null ? r.isInterestingToUserLocked() ? 2 : 1 : 0);
        if (processRecord == null || processRecord.pid != this.mLastAppCrashedPid) {
            i = -1;
            addErrorToDropBox(eventType, processRecord, processName, null, null, null, null, null, crashInfo2);
        } else {
            Slog.e(TAG, "The same pid with last one, do not add dropbox and clear mLastCrashedPid. mLastAppCrashedPid==" + this.mLastAppCrashedPid);
            i = -1;
        }
        this.mLastAppCrashedPid = i;
        this.mAppErrors.crashApplication(processRecord, crashInfo2);
    }

    public void handleApplicationStrictModeViolation(IBinder app, int violationMask, StrictMode.ViolationInfo info) {
        ProcessRecord r = findAppProcess(app, "StrictMode");
        if ((2097152 & violationMask) != 0) {
            Integer stackFingerprint = Integer.valueOf(info.hashCode());
            boolean logIt = true;
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                if (this.mAlreadyLoggedViolatedStacks.contains(stackFingerprint)) {
                    logIt = false;
                } else {
                    if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                        this.mAlreadyLoggedViolatedStacks.clear();
                    }
                    this.mAlreadyLoggedViolatedStacks.add(stackFingerprint);
                }
            }
            if (logIt) {
                logStrictModeViolationToDropBox(r, info);
            }
        }
        if ((131072 & violationMask) != 0) {
            AppErrorResult result = new AppErrorResult();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    long origId = Binder.clearCallingIdentity();
                    Message msg = Message.obtain();
                    msg.what = 26;
                    HashMap<String, Object> data = new HashMap<>();
                    data.put(IZRHungService.PARA_RESULT, result);
                    data.put("app", r);
                    data.put("violationMask", Integer.valueOf(violationMask));
                    data.put("info", info);
                    msg.obj = data;
                    this.mUiHandler.sendMessage(msg);
                    Binder.restoreCallingIdentity(origId);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            int res = result.get();
            Slog.w(TAG, "handleApplicationStrictModeViolation; res=" + res);
        }
    }

    private void logStrictModeViolationToDropBox(ProcessRecord process, StrictMode.ViolationInfo info) {
        if (info != null) {
            boolean isSystemApp = process == null || (process.info.flags & NetworkConstants.ICMPV6_ECHO_REPLY_TYPE) != 0;
            String processName = process == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : process.processName;
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService("dropbox");
            String dropboxTag = processClass(process) + "_strictmode";
            if (this.mSystemProvidersInstalled && dbox != null && dbox.isTagEnabled(dropboxTag)) {
                StringBuilder sb = new StringBuilder(1024);
                synchronized (sb) {
                    appendDropBoxProcessHeaders(process, processName, sb);
                    sb.append("Build: ");
                    sb.append(Build.FINGERPRINT);
                    sb.append("\n");
                    sb.append("System-App: ");
                    sb.append(isSystemApp);
                    sb.append("\n");
                    sb.append("Uptime-Millis: ");
                    sb.append(info.violationUptimeMillis);
                    sb.append("\n");
                    if (info.violationNumThisLoop != 0) {
                        sb.append("Loop-Violation-Number: ");
                        sb.append(info.violationNumThisLoop);
                        sb.append("\n");
                    }
                    if (info.numAnimationsRunning != 0) {
                        sb.append("Animations-Running: ");
                        sb.append(info.numAnimationsRunning);
                        sb.append("\n");
                    }
                    if (info.broadcastIntentAction != null) {
                        sb.append("Broadcast-Intent-Action: ");
                        sb.append(info.broadcastIntentAction);
                        sb.append("\n");
                    }
                    if (info.durationMillis != -1) {
                        sb.append("Duration-Millis: ");
                        sb.append(info.durationMillis);
                        sb.append("\n");
                    }
                    if (info.numInstances != -1) {
                        sb.append("Instance-Count: ");
                        sb.append(info.numInstances);
                        sb.append("\n");
                    }
                    if (info.tags != null) {
                        for (String tag : info.tags) {
                            sb.append("Span-Tag: ");
                            sb.append(tag);
                            sb.append("\n");
                        }
                    }
                    sb.append("\n");
                    sb.append(info.getStackTrace());
                    sb.append("\n");
                    if (info.getViolationDetails() != null) {
                        sb.append(info.getViolationDetails());
                        sb.append("\n");
                    }
                }
                IoThread.getHandler().post(new Runnable(dbox, dropboxTag, sb.toString()) {
                    private final /* synthetic */ DropBoxManager f$0;
                    private final /* synthetic */ String f$1;
                    private final /* synthetic */ String f$2;

                    {
                        this.f$0 = r1;
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        this.f$0.addText(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public boolean handleApplicationWtf(IBinder app, String tag, boolean system, ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        if (system) {
            MainHandler mainHandler = this.mHandler;
            final int i = callingUid;
            final int i2 = callingPid;
            final IBinder iBinder = app;
            final String str = tag;
            final ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo = crashInfo;
            AnonymousClass21 r0 = new Runnable() {
                public void run() {
                    ActivityManagerService.this.handleApplicationWtfInner(i, i2, iBinder, str, parcelableCrashInfo);
                }
            };
            mainHandler.post(r0);
            return false;
        }
        ProcessRecord r = handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
        boolean isFatal = Build.IS_ENG || Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean isSystem = r == null || r.persistent;
        if (!isFatal || isSystem) {
            ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo2 = crashInfo;
            return false;
        }
        this.mAppErrors.crashApplication(r, crashInfo);
        return true;
    }

    /* access modifiers changed from: package-private */
    public ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag, ApplicationErrorReport.CrashInfo crashInfo) {
        String str;
        IBinder iBinder = app;
        String str2 = tag;
        ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
        ProcessRecord r = findAppProcess(iBinder, "WTF");
        if (iBinder == null) {
            str = "system_server";
        } else {
            str = r == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        }
        String processName = str;
        Object[] objArr = new Object[6];
        objArr[0] = Integer.valueOf(UserHandle.getUserId(callingUid));
        objArr[1] = Integer.valueOf(callingPid);
        objArr[2] = processName;
        objArr[3] = Integer.valueOf(r == null ? -1 : r.info.flags);
        objArr[4] = str2;
        objArr[5] = crashInfo2 == null ? BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS : crashInfo2.exceptionMessage;
        EventLog.writeEvent(EventLogTags.AM_WTF, objArr);
        StatsLog.write(80, callingUid, str2, processName, callingPid);
        addErrorToDropBox("wtf", r, processName, null, null, str2, null, null, crashInfo2);
        return r;
    }

    private ProcessRecord findAppProcess(IBinder app, String reason) {
        if (app == null) {
            return null;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int NP = this.mProcessNames.getMap().size();
                for (int ip = 0; ip < NP; ip++) {
                    SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                    int NA = apps.size();
                    int ia = 0;
                    while (ia < NA) {
                        ProcessRecord p = apps.valueAt(ia);
                        if (p.thread == null || p.thread.asBinder() != app) {
                            ia++;
                        } else {
                            resetPriorityAfterLockedSection();
                            return p;
                        }
                    }
                }
                Slog.w(TAG, "Can't find mystery application for " + reason + " from pid=" + Binder.getCallingPid() + " uid=" + Binder.getCallingUid() + ": " + app);
                resetPriorityAfterLockedSection();
                return null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    private void appendDropBoxProcessHeaders(ProcessRecord process, String processName, StringBuilder sb) {
        String pkg;
        if (process == null) {
            sb.append("Process: ");
            sb.append(processName);
            sb.append("\n");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                sb.append("Process: ");
                sb.append(processName);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(process.pid);
                sb.append("\n");
                int flags = process.info.flags;
                IPackageManager pm = AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(Integer.toHexString(flags));
                sb.append("\n");
                for (int ip = 0; ip < process.pkgList.size(); ip++) {
                    pkg = process.pkgList.keyAt(ip);
                    sb.append("Package: ");
                    sb.append(pkg);
                    PackageInfo pi = pm.getPackageInfo(pkg, 0, UserHandle.getCallingUserId());
                    if (pi != null) {
                        sb.append(" v");
                        sb.append(pi.getLongVersionCode());
                        if (pi.versionName != null) {
                            sb.append(" (");
                            sb.append(pi.versionName);
                            sb.append(")");
                        }
                    }
                    sb.append("\n");
                }
                if (process.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
                if (!sIsMygote) {
                    sb.append("SYSVMTYPE: Art\n");
                    sb.append("APPVMTYPE: Art\n");
                    resetPriorityAfterLockedSection();
                    return;
                }
                sb.append("SYSVMTYPE: Maple\n");
                if ((process.info.hwFlags & DumpState.DUMP_SERVICE_PERMISSIONS) == 0) {
                    sb.append("APPVMTYPE: Art\n");
                    resetPriorityAfterLockedSection();
                    return;
                }
                try {
                    IHwPackageManager hwPM = HwPackageManager.getService();
                    if (hwPM == null) {
                        sb.append("APPVMTYPE: Unknown\n");
                        resetPriorityAfterLockedSection();
                        return;
                    } else if (hwPM.getMapleEnableFlag(process.info.packageName)) {
                        sb.append("APPVMTYPE: Maple\n");
                    } else {
                        sb.append("APPVMTYPE: Art\n");
                    }
                } catch (RemoteException e) {
                    sb.append("APPVMTYPE: Unknown\n");
                }
            } catch (RemoteException e2) {
                Slog.e(TAG, "Error getting package info: " + pkg, e2);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    private static String processClass(ProcessRecord process) {
        if (process == null || process.pid == MY_PID) {
            return "system_server";
        }
        if ((process.info.flags & 1) != 0) {
            return "system_app";
        }
        return "data_app";
    }

    public void addErrorToDropBox(String eventType, ProcessRecord process, String processName, ActivityRecord activity, ActivityRecord parent, String subject, String report, File dataFile, ApplicationErrorReport.CrashInfo crashInfo) {
        String dropboxTag;
        String str = eventType;
        ProcessRecord processRecord = process;
        ActivityRecord activityRecord = activity;
        ActivityRecord activityRecord2 = parent;
        String str2 = subject;
        ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
        if (ServiceManager.getService("dropbox") != null) {
            DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
            String str3 = processName;
            if ("mystery".equals(str3)) {
                dropboxTag = "data_app_" + str;
                str3 = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
            } else {
                dropboxTag = processClass(process) + "_" + str;
            }
            String processName2 = str3;
            final String dropboxTag2 = dropboxTag;
            if (!this.mSystemProvidersInstalled || dbox == null) {
                String str4 = processName2;
                DropBoxManager dropBoxManager = dbox;
            } else if (!dbox.isTagEnabled(dropboxTag2)) {
                String str5 = dropboxTag2;
                String str6 = processName2;
                DropBoxManager dropBoxManager2 = dbox;
            } else {
                long now = SystemClock.elapsedRealtime();
                if (now - this.mWtfClusterStart > JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY) {
                    this.mWtfClusterStart = now;
                    this.mWtfClusterCount = 1;
                } else {
                    int i = this.mWtfClusterCount;
                    this.mWtfClusterCount = i + 1;
                    if (i >= 5) {
                        return;
                    }
                }
                StringBuilder sb = new StringBuilder(1024);
                appendDropBoxProcessHeaders(processRecord, processName2, sb);
                if (processRecord != null) {
                    sb.append("Foreground: ");
                    sb.append(process.isInterestingToUserLocked() ? "Yes" : "No");
                    sb.append("\n");
                }
                if (activityRecord != null) {
                    sb.append("Activity: ");
                    sb.append(activityRecord.shortComponentName);
                    sb.append("\n");
                }
                if (!(activityRecord2 == null || activityRecord2.app == null || activityRecord2.app.pid == processRecord.pid)) {
                    sb.append("Parent-Process: ");
                    sb.append(activityRecord2.app.processName);
                    sb.append("\n");
                }
                if (!(activityRecord2 == null || activityRecord2 == activityRecord)) {
                    sb.append("Parent-Activity: ");
                    sb.append(activityRecord2.shortComponentName);
                    sb.append("\n");
                }
                if (str2 != null) {
                    sb.append("Subject: ");
                    sb.append(str2);
                    sb.append("\n");
                }
                if (processRecord != null) {
                    long j = now;
                    sb.append("Lifetime: ");
                    sb.append(((SystemClock.elapsedRealtime() - processRecord.startTime) / 1000) + "s");
                    sb.append("\n");
                }
                sb.append("Build: ");
                sb.append(Build.FINGERPRINT);
                sb.append("\n");
                if (Debug.isDebuggerConnected()) {
                    sb.append("Debugger: Connected\n");
                }
                sb.append("\n");
                if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE)) || this.mController != null) {
                    boolean needCpuInfo = "watchdog".equals(str);
                    if (!(!"crash".equals(str) || crashInfo2 == null || crashInfo2.exceptionClassName == null)) {
                        needCpuInfo = crashInfo2.exceptionClassName.contains("TimeoutException");
                    }
                    if (needCpuInfo) {
                        synchronized (this.mProcessCpuThread) {
                            sb.append(this.mProcessCpuTracker.printCurrentLoad());
                            sb.append(this.mProcessCpuTracker.printCurrentState(SystemClock.uptimeMillis()));
                        }
                        sb.append("\n");
                    }
                }
                final String str7 = report;
                final StringBuilder sb2 = sb;
                String str8 = dropboxTag2;
                String str9 = processName2;
                final File file = dataFile;
                DropBoxManager dbox2 = dbox;
                final ApplicationErrorReport.CrashInfo crashInfo3 = crashInfo2;
                final DropBoxManager dropBoxManager3 = dbox2;
                AnonymousClass22 r1 = new Thread("Error dump: " + dropboxTag2) {
                    /* JADX WARNING: Code restructure failed: missing block: B:41:0x0143, code lost:
                        if (r4 == null) goto L_0x014e;
                     */
                    public void run() {
                        if (str7 != null) {
                            sb2.append(str7);
                        }
                        int lines = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), "logcat_for_" + dropboxTag2, 0);
                        int maxDataFileSize = (ActivityManagerService.DROPBOX_MAX_SIZE - sb2.length()) - (lines * 100);
                        if (file != null && maxDataFileSize > 0) {
                            try {
                                if (Log.HWINFO) {
                                    sb2.append(FileUtils.readTextFile(file, 0, null));
                                } else {
                                    sb2.append(FileUtils.readTextFile(file, maxDataFileSize, "\n\n[[TRUNCATED]]"));
                                }
                            } catch (IOException e) {
                                Slog.e(ActivityManagerService.TAG, "Error reading " + file, e);
                            }
                        }
                        if (!(crashInfo3 == null || crashInfo3.stackTrace == null)) {
                            sb2.append(crashInfo3.stackTrace);
                        }
                        if (lines > 0) {
                            sb2.append("\n");
                            InputStreamReader input = null;
                            try {
                                Process logcat = new ProcessBuilder(new String[]{"/system/bin/timeout", "-k", "15s", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", "system", "-b", "main", "-b", "crash", "-t", String.valueOf(lines)}).redirectErrorStream(true).start();
                                try {
                                    logcat.getOutputStream().close();
                                } catch (IOException e2) {
                                }
                                try {
                                    logcat.getErrorStream().close();
                                } catch (IOException e3) {
                                }
                                input = new InputStreamReader(logcat.getInputStream());
                                char[] buf = new char[8192];
                                while (true) {
                                    int read = input.read(buf);
                                    int num = read;
                                    if (read > 0) {
                                        sb2.append(buf, 0, num);
                                    }
                                    try {
                                        break;
                                    } catch (IOException e4) {
                                    }
                                }
                            } catch (IOException e5) {
                                Slog.e(ActivityManagerService.TAG, "Error running logcat", e5);
                            } catch (Throwable th) {
                                if (input != null) {
                                    try {
                                        input.close();
                                    } catch (IOException e6) {
                                    }
                                }
                                throw th;
                            }
                            input.close();
                        }
                        dropBoxManager3.addText(dropboxTag2, sb2.toString());
                    }
                };
                if (processRecord == null) {
                    int oldMask = StrictMode.allowThreadDiskWritesMask();
                    try {
                        r1.run();
                        StrictMode.setThreadPolicyMask(oldMask);
                    } catch (Throwable th) {
                        StrictMode.setThreadPolicyMask(oldMask);
                        throw th;
                    }
                } else {
                    r1.start();
                }
            }
        }
    }

    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETPROCESSESINERRORSTATE);
        enforceNotIsolatedCaller("getProcessesInErrorState");
        List<ActivityManager.ProcessErrorStateInfo> errList = null;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", Binder.getCallingUid()) == 0;
        int userId = UserHandle.getUserId(Binder.getCallingUid());
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = this.mLruProcesses.get(i);
                    if (allUsers || app.userId == userId) {
                        if (app.thread != null && (app.crashing || app.notResponding)) {
                            ActivityManager.ProcessErrorStateInfo report = null;
                            if (app.crashing) {
                                report = app.crashingReport;
                            } else if (app.notResponding) {
                                report = app.notRespondingReport;
                            }
                            if (report != null) {
                                if (errList == null) {
                                    errList = new ArrayList<>(1);
                                }
                                errList.add(report);
                            } else {
                                Slog.w(TAG, "Missing app error report, app = " + app.processName + " crashing = " + app.crashing + " notResponding = " + app.notResponding);
                            }
                        }
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return errList;
    }

    static int procStateToImportance(int procState, int memAdj, ActivityManager.RunningAppProcessInfo currApp, int clientTargetSdk) {
        int imp = ActivityManager.RunningAppProcessInfo.procStateToImportanceForTargetSdk(procState, clientTargetSdk);
        if (imp == 400) {
            currApp.lru = memAdj;
        } else {
            currApp.lru = 0;
        }
        return imp;
    }

    private void fillInProcMemInfo(ProcessRecord app, ActivityManager.RunningAppProcessInfo outInfo, int clientTargetSdk) {
        outInfo.pid = app.pid;
        outInfo.uid = app.info.uid;
        if (this.mHeavyWeightProcess == app) {
            outInfo.flags |= 1;
        }
        if (app.persistent) {
            outInfo.flags |= 2;
        }
        if (app.activities.size() > 0) {
            outInfo.flags |= 4;
        }
        outInfo.lastTrimLevel = app.trimMemoryLevel;
        outInfo.importance = procStateToImportance(app.curProcState, app.curAdj, outInfo, clientTargetSdk);
        outInfo.importanceReasonCode = app.adjTypeCode;
        outInfo.processState = app.curProcState;
    }

    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_GETRUNNINGAPPPROCESSES);
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int clientTargetSdk = getPackageManagerInternalLocked().getUidTargetSdkVersion(callingUid);
        List<ActivityManager.RunningAppProcessInfo> runList = null;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean allUids = isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int i = this.mLruProcesses.size() - 1;
                while (true) {
                    int i2 = i;
                    if (i2 >= 0) {
                        ProcessRecord app = this.mLruProcesses.get(i2);
                        if ((allUsers || app.userId == userId) && (allUids || app.uid == callingUid)) {
                            if (!"com.huawei.android.pushagent.PushService".equals(app.processName)) {
                                if (app.thread != null && !app.crashing && !app.notResponding) {
                                    ActivityManager.RunningAppProcessInfo currApp = new ActivityManager.RunningAppProcessInfo(app.processName, app.pid, app.getPackageList());
                                    fillInProcMemInfo(app, currApp, clientTargetSdk);
                                    if (app.adjSource instanceof ProcessRecord) {
                                        currApp.importanceReasonPid = ((ProcessRecord) app.adjSource).pid;
                                        currApp.importanceReasonImportance = ActivityManager.RunningAppProcessInfo.procStateToImportance(app.adjSourceProcState);
                                    } else if (app.adjSource instanceof ActivityRecord) {
                                        ActivityRecord r = (ActivityRecord) app.adjSource;
                                        if (r.app != null) {
                                            currApp.importanceReasonPid = r.app.pid;
                                        }
                                    }
                                    if (app.adjTarget instanceof ComponentName) {
                                        currApp.importanceReasonComponent = (ComponentName) app.adjTarget;
                                    }
                                    if (runList == null) {
                                        runList = new ArrayList<>();
                                    }
                                    runList.add(currApp);
                                }
                            }
                        }
                        i = i2 - 1;
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return runList;
    }

    public List<ApplicationInfo> getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List<ActivityManager.RunningAppProcessInfo> runningApps = getRunningAppProcesses();
        List<ApplicationInfo> retList = new ArrayList<>();
        if (runningApps != null && runningApps.size() > 0) {
            Set<String> extList = new HashSet<>();
            Iterator<ActivityManager.RunningAppProcessInfo> it = runningApps.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ActivityManager.RunningAppProcessInfo app = it.next();
                if (app.pkgList != null) {
                    for (String pkg : app.pkgList) {
                        extList.add(pkg);
                    }
                }
            }
            IPackageManager pm = AppGlobals.getPackageManager();
            for (String pkg2 : extList) {
                try {
                    ApplicationInfo info = pm.getApplicationInfo(pkg2, 0, UserHandle.getCallingUserId());
                    if (!(info == null || (info.flags & 262144) == 0)) {
                        retList.add(info);
                    }
                } catch (RemoteException e) {
                }
            }
        }
        return retList;
    }

    public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outState) {
        ProcessRecord proc;
        if (outState != null) {
            enforceNotIsolatedCaller("getMyMemoryState");
            int clientTargetSdk = getPackageManagerInternalLocked().getUidTargetSdkVersion(Binder.getCallingUid());
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                    }
                    if (proc != null) {
                        fillInProcMemInfo(proc, outState, clientTargetSdk);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new IllegalArgumentException("outState is null");
    }

    public int getMemoryTrimLevel() {
        int i;
        enforceNotIsolatedCaller("getMyMemoryState");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                i = this.mLastMemoryLevel;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return i;
    }

    /* JADX WARNING: type inference failed for: r1v1, types: [android.os.Binder] */
    /* JADX WARNING: Multi-variable type inference failed */
    public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) {
        new ActivityManagerShellCommand(this, false).exec(this, in, out, err, args, callback, resultReceiver);
    }

    /* access modifiers changed from: package-private */
    public ActivityManagerInternal.SleepToken acquireSleepToken(String tag, int displayId) {
        ActivityManagerInternal.SleepToken token;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                token = this.mStackSupervisor.createSleepTokenLocked(tag, displayId);
                updateSleepIfNeededLocked();
            } catch (Throwable token2) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw token2;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return token;
    }

    /* access modifiers changed from: protected */
    public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
    }

    /* JADX INFO: finally extract failed */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v160, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v164, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v206, resolved type: java.lang.String} */
    /* JADX WARNING: type inference failed for: r2v36, types: [android.os.Binder] */
    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:218:0x0382, code lost:
        resetPriorityAfterLockedSection();
        r34 = r9;
        r33 = r14;
        r15 = r26;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:472:0x0778, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:528:0x0830, code lost:
        resetPriorityAfterLockedSection();
        r7.dumpWithClient();
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:529:0x0839, code lost:
        monitor-enter(r37);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:531:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:532:0x083d, code lost:
        if (r14 == false) goto L_0x084c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:535:?, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:536:0x0845, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:537:0x0846, code lost:
        r22 = r7;
        r35 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:540:0x084e, code lost:
        if (r10.mRecentTasks == null) goto L_0x0855;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:542:?, code lost:
        r10.mRecentTasks.dump(r12, r14, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:544:?, code lost:
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:545:0x0858, code lost:
        if (r14 == false) goto L_0x085f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:548:?, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:550:?, code lost:
        dumpLastANRLocked(r12);
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:551:0x0865, code lost:
        if (r14 == false) goto L_0x086c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:554:?, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:556:?, code lost:
        dumpActivityStarterLocked(r12, r15);
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:557:0x0872, code lost:
        if (r14 == false) goto L_0x0879;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:560:?, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:562:?, code lost:
        dumpActivityContainersLocked(r12);
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:563:0x087f, code lost:
        if (r14 == false) goto L_0x0886;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:566:?, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:567:0x0886, code lost:
        r22 = r7;
        r35 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:569:?, code lost:
        dumpActivitiesLocked(r11, r12, r13, r25, r14, r16, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:570:0x089d, code lost:
        if (r10.mAssociations.size() <= 0) goto L_0x08b6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:571:0x089f, code lost:
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:572:0x08a2, code lost:
        if (r14 == false) goto L_0x08a9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:573:0x08a4, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:574:0x08a9, code lost:
        dumpAssociationsLocked(r11, r12, r13, r25, r14, r16, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:575:0x08b6, code lost:
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:576:0x08b9, code lost:
        if (r14 == false) goto L_0x08c0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:577:0x08bb, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:578:0x08c0, code lost:
        dumpProcessesLocked(r11, r12, r13, r25, r14, r15, r23);
        r39.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:579:0x08d0, code lost:
        if (r14 == false) goto L_0x08d7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:580:0x08d2, code lost:
        r12.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:581:0x08d7, code lost:
        dumpHandler(r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:582:0x08da, code lost:
        monitor-exit(r37);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:583:0x08db, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:584:0x08e0, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:585:0x08e1, code lost:
        r22 = r7;
        r35 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:587:?, code lost:
        monitor-exit(r37);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:588:0x08e6, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:589:0x08e9, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:590:0x08ea, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:708:0x0a2d, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x01f9, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:463:0x0767  */
    /* JADX WARNING: Removed duplicated region for block: B:465:0x076d  */
    public void doDump(FileDescriptor fd, PrintWriter pw, String[] args, boolean useProto) {
        boolean dumpAll;
        int opti;
        long origId;
        long origId2;
        long origId3;
        int opti2;
        boolean dumpAll2;
        long origId4;
        boolean dumpAll3;
        int opti3;
        boolean z;
        long origId5;
        boolean dumpAll4;
        String dumpPackage;
        int opti4;
        boolean dumpAll5;
        int opti5;
        int opti6;
        String dumpPackage2;
        long origId6;
        boolean dumpAll6;
        int opti7;
        int opti8;
        String dumpPackage3;
        int opti9;
        boolean dumpAll7;
        int opti10;
        int opti11;
        boolean dumpAll8;
        int opti12;
        boolean dumpAll9;
        int opti13;
        boolean dumpAll10;
        int opti14;
        boolean dumpAll11;
        ActiveServices.ServiceDumper dumper;
        int opti15;
        String name;
        String[] newArgs;
        String name2;
        String[] newArgs2;
        String dumpPackage4;
        String[] newArgs3;
        String name3;
        boolean dumpCheckinFormat;
        FileDescriptor fileDescriptor = fd;
        PrintWriter printWriter = pw;
        String[] args2 = args;
        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mContext, TAG, printWriter)) {
            Log.i(TAG, "Start dump, calling from : pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
            boolean logRequestHandled = HwSlog.handleLogRequest(args);
            if (!logRequestHandled) {
                boolean dumpAll12 = false;
                boolean dumpClient = false;
                boolean dumpCheckin = false;
                boolean dumpCheckinFormat2 = false;
                boolean dumpNormalPriority = false;
                boolean dumpVisibleStacksOnly = false;
                boolean dumpFocusedStackOnly = false;
                String dumpPackage5 = null;
                int opti16 = 0;
                while (opti16 < args2.length) {
                    String opt = args2[opti16];
                    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
                        break;
                    }
                    opti16++;
                    if ("-a".equals(opt)) {
                        dumpAll12 = true;
                    } else if ("-c".equals(opt)) {
                        dumpClient = true;
                    } else if ("-v".equals(opt)) {
                        dumpVisibleStacksOnly = true;
                    } else if ("-f".equals(opt)) {
                        dumpFocusedStackOnly = true;
                    } else if (!"-p".equals(opt)) {
                        if ("--checkin".equals(opt)) {
                            dumpCheckinFormat = true;
                            dumpCheckin = true;
                        } else if ("-C".equals(opt)) {
                            dumpCheckinFormat = true;
                        } else if ("--normal-priority".equals(opt)) {
                            dumpNormalPriority = true;
                        } else if ("-h".equals(opt)) {
                            ActivityManagerShellCommand.dumpHelp(printWriter, true);
                            return;
                        } else {
                            printWriter.println("Unknown argument: " + opt + "; use -h for help");
                        }
                        dumpCheckinFormat2 = dumpCheckinFormat;
                    } else if (opti16 < args2.length) {
                        dumpPackage5 = args2[opti16];
                        opti16++;
                        dumpClient = true;
                    } else {
                        printWriter.println("Error: -p option requires package argument");
                        return;
                    }
                }
                long origId7 = Binder.clearCallingIdentity();
                if (useProto) {
                    ProtoOutputStream proto = new ProtoOutputStream(fileDescriptor);
                    String cmd = opti16 < args2.length ? args2[opti16] : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS;
                    int opti17 = opti16 + 1;
                    if ("activities".equals(cmd)) {
                    } else if ("a".equals(cmd)) {
                        String str = cmd;
                    } else {
                        if ("broadcasts".equals(cmd)) {
                        } else if ("b".equals(cmd)) {
                            String str2 = cmd;
                        } else {
                            if ("provider".equals(cmd)) {
                                if (opti17 >= args2.length) {
                                    name3 = null;
                                    newArgs3 = EMPTY_STRING_ARRAY;
                                } else {
                                    name3 = args2[opti17];
                                    int opti18 = opti17 + 1;
                                    String[] newArgs4 = new String[(args2.length - opti18)];
                                    if (args2.length > 2) {
                                        System.arraycopy(args2, opti18, newArgs4, 0, args2.length - opti18);
                                    }
                                    newArgs3 = newArgs4;
                                }
                                if (!dumpProviderProto(fileDescriptor, printWriter, name3, newArgs3)) {
                                    printWriter.println("No providers match: " + name3);
                                    printWriter.println("Use -h for help.");
                                }
                            } else if ("service".equals(cmd)) {
                                this.mServices.writeToProto(proto, 1146756268033L);
                            } else {
                                if ("processes".equals(cmd)) {
                                } else if ("p".equals(cmd)) {
                                    String str3 = cmd;
                                } else {
                                    synchronized (this) {
                                        try {
                                            boostPriorityForLockedSection();
                                            long activityToken = proto.start(1146756268033L);
                                            writeActivitiesToProtoLocked(proto);
                                            proto.end(activityToken);
                                            long broadcastToken = proto.start(1146756268034L);
                                            writeBroadcastsToProtoLocked(proto);
                                            proto.end(broadcastToken);
                                            long j = activityToken;
                                            long activityToken2 = proto.start(1146756268035L);
                                            String str4 = cmd;
                                            try {
                                                long j2 = broadcastToken;
                                                this.mServices.writeToProto(proto, 1146756268033L);
                                                proto.end(activityToken2);
                                                long processToken = proto.start(1146756268036L);
                                                writeProcessesToProtoLocked(proto, dumpPackage5);
                                                proto.end(processToken);
                                            } catch (Throwable th) {
                                                th = th;
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            String str5 = cmd;
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    }
                                }
                                if (opti17 < args2.length) {
                                    dumpPackage5 = args2[opti17];
                                    opti17++;
                                }
                                int opti19 = opti17;
                                String dumpPackage6 = dumpPackage5;
                                synchronized (this) {
                                    try {
                                        boostPriorityForLockedSection();
                                        writeProcessesToProtoLocked(proto, dumpPackage6);
                                    } catch (Throwable th3) {
                                        while (true) {
                                            resetPriorityAfterLockedSection();
                                            throw th3;
                                        }
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                String str6 = dumpPackage6;
                                int i = opti19;
                                proto.flush();
                                Binder.restoreCallingIdentity(origId7);
                                return;
                            }
                            proto.flush();
                            Binder.restoreCallingIdentity(origId7);
                            return;
                        }
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                writeBroadcastsToProtoLocked(proto);
                            } catch (Throwable th4) {
                                while (true) {
                                    resetPriorityAfterLockedSection();
                                    throw th4;
                                }
                            }
                        }
                        resetPriorityAfterLockedSection();
                        proto.flush();
                        Binder.restoreCallingIdentity(origId7);
                        return;
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            writeActivitiesToProtoLocked(proto);
                        } catch (Throwable th5) {
                            while (true) {
                                resetPriorityAfterLockedSection();
                                throw th5;
                            }
                        }
                    }
                    resetPriorityAfterLockedSection();
                    proto.flush();
                    Binder.restoreCallingIdentity(origId7);
                    return;
                }
                int dumpAppId = getAppId(dumpPackage5);
                boolean more = false;
                if (opti16 < args2.length) {
                    String cmd2 = args2[opti16];
                    int opti20 = opti16 + 1;
                    if ("activities".equals(cmd2)) {
                        origId4 = origId7;
                        dumpAll3 = dumpAll12;
                        boolean z2 = logRequestHandled;
                        opti3 = opti20;
                        String str7 = cmd2;
                    } else if ("a".equals(cmd2)) {
                        origId4 = origId7;
                        dumpAll3 = dumpAll12;
                        boolean z3 = logRequestHandled;
                        opti3 = opti20;
                        Object obj = cmd2;
                    } else {
                        if ("lastanr".equals(cmd2)) {
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    dumpLastANRLocked(printWriter);
                                } catch (Throwable th6) {
                                    while (true) {
                                        resetPriorityAfterLockedSection();
                                        throw th6;
                                    }
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else if ("starter".equals(cmd2)) {
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    dumpActivityStarterLocked(printWriter, dumpPackage5);
                                } catch (Throwable th7) {
                                    while (true) {
                                        resetPriorityAfterLockedSection();
                                        throw th7;
                                    }
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else if ("containers".equals(cmd2)) {
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    dumpActivityContainersLocked(printWriter);
                                } catch (Throwable th8) {
                                    while (true) {
                                        resetPriorityAfterLockedSection();
                                        throw th8;
                                    }
                                }
                            }
                            resetPriorityAfterLockedSection();
                        } else {
                            if ("recents".equals(cmd2)) {
                                origId5 = origId7;
                                z = true;
                                dumpAll4 = dumpAll12;
                                boolean z4 = logRequestHandled;
                                opti2 = opti20;
                                String str8 = cmd2;
                            } else if ("r".equals(cmd2)) {
                                origId5 = origId7;
                                z = true;
                                dumpAll4 = dumpAll12;
                                boolean z5 = logRequestHandled;
                                opti2 = opti20;
                                Object obj2 = cmd2;
                            } else {
                                if (!"binder-proxies".equals(cmd2)) {
                                    if ("broadcasts".equals(cmd2)) {
                                        origId6 = origId7;
                                        dumpAll6 = dumpAll12;
                                        boolean z6 = logRequestHandled;
                                        opti5 = opti20;
                                        String str9 = cmd2;
                                    } else if ("b".equals(cmd2)) {
                                        origId6 = origId7;
                                        dumpAll6 = dumpAll12;
                                        boolean z7 = logRequestHandled;
                                        opti5 = opti20;
                                        String str10 = cmd2;
                                    } else if ("broadcast-stats".equals(cmd2)) {
                                        if (opti20 < args2.length) {
                                            dumpPackage4 = args2[opti20];
                                            opti = opti20 + 1;
                                        } else {
                                            opti = opti20;
                                            dumpPackage4 = dumpPackage5;
                                        }
                                        synchronized (this) {
                                            try {
                                                boostPriorityForLockedSection();
                                                if (dumpCheckinFormat2) {
                                                    origId3 = origId7;
                                                    try {
                                                        dumpBroadcastStatsCheckinLocked(fileDescriptor, printWriter, args2, opti, dumpCheckin, dumpPackage4);
                                                    } catch (Throwable th9) {
                                                        th = th9;
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                } else {
                                                    origId3 = origId7;
                                                    dumpBroadcastStatsLocked(fileDescriptor, printWriter, args2, opti, true, dumpPackage4);
                                                }
                                            } catch (Throwable th10) {
                                                th = th10;
                                                long j3 = origId7;
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        }
                                    } else {
                                        origId3 = origId7;
                                        if ("intents".equals(cmd2)) {
                                            dumpAll5 = dumpAll12;
                                            boolean z8 = logRequestHandled;
                                            opti7 = opti20;
                                            String str11 = cmd2;
                                        } else if ("i".equals(cmd2)) {
                                            dumpAll5 = dumpAll12;
                                            boolean z9 = logRequestHandled;
                                            opti7 = opti20;
                                            String str12 = cmd2;
                                        } else {
                                            if ("processes".equals(cmd2)) {
                                                opti8 = opti20;
                                                dumpAll7 = dumpAll12;
                                                boolean z10 = logRequestHandled;
                                                String str13 = cmd2;
                                            } else if ("p".equals(cmd2)) {
                                                opti8 = opti20;
                                                dumpAll7 = dumpAll12;
                                                boolean z11 = logRequestHandled;
                                                String str14 = cmd2;
                                            } else {
                                                if ("oom".equals(cmd2)) {
                                                    opti11 = opti20;
                                                    dumpAll8 = dumpAll12;
                                                    boolean z12 = logRequestHandled;
                                                    String str15 = cmd2;
                                                } else if ("o".equals(cmd2)) {
                                                    opti11 = opti20;
                                                    dumpAll8 = dumpAll12;
                                                    boolean z13 = logRequestHandled;
                                                    String str16 = cmd2;
                                                } else {
                                                    if ("permissions".equals(cmd2)) {
                                                        opti12 = opti20;
                                                        dumpAll9 = dumpAll12;
                                                        boolean z14 = logRequestHandled;
                                                        String str17 = cmd2;
                                                    } else if ("perm".equals(cmd2)) {
                                                        opti12 = opti20;
                                                        dumpAll9 = dumpAll12;
                                                        boolean z15 = logRequestHandled;
                                                        String str18 = cmd2;
                                                    } else if ("provider".equals(cmd2)) {
                                                        if (opti20 >= args2.length) {
                                                            name2 = null;
                                                            newArgs2 = EMPTY_STRING_ARRAY;
                                                        } else {
                                                            name2 = args2[opti20];
                                                            opti20++;
                                                            String[] newArgs5 = new String[(args2.length - opti20)];
                                                            if (args2.length > 2) {
                                                                System.arraycopy(args2, opti20, newArgs5, 0, args2.length - opti20);
                                                            }
                                                            newArgs2 = newArgs5;
                                                        }
                                                        opti15 = opti20;
                                                        if (!dumpProvider(fileDescriptor, printWriter, name2, newArgs2, 0, dumpAll12)) {
                                                            printWriter.println("No providers match: " + name2);
                                                            printWriter.println("Use -h for help.");
                                                        }
                                                    } else {
                                                        if ("providers".equals(cmd2)) {
                                                            opti13 = opti20;
                                                            dumpAll10 = dumpAll12;
                                                            boolean z16 = logRequestHandled;
                                                            String str19 = cmd2;
                                                        } else if ("prov".equals(cmd2)) {
                                                            opti13 = opti20;
                                                            dumpAll10 = dumpAll12;
                                                            boolean z17 = logRequestHandled;
                                                            String str20 = cmd2;
                                                        } else if ("service".equals(cmd2)) {
                                                            if (opti20 >= args2.length) {
                                                                name = null;
                                                                newArgs = EMPTY_STRING_ARRAY;
                                                            } else {
                                                                name = args2[opti20];
                                                                opti20++;
                                                                String[] newArgs6 = new String[(args2.length - opti20)];
                                                                if (args2.length > 2) {
                                                                    System.arraycopy(args2, opti20, newArgs6, 0, args2.length - opti20);
                                                                }
                                                                newArgs = newArgs6;
                                                            }
                                                            opti15 = opti20;
                                                            if (!this.mServices.dumpService(fileDescriptor, printWriter, name, newArgs, 0, dumpAll12)) {
                                                                printWriter.println("No services match: " + name);
                                                                printWriter.println("Use -h for help.");
                                                            }
                                                        } else if ("package".equals(cmd2)) {
                                                            if (opti20 >= args2.length) {
                                                                printWriter.println("package: no package name specified");
                                                                printWriter.println("Use -h for help.");
                                                            } else {
                                                                dumpPackage5 = args2[opti20];
                                                                int opti21 = opti20 + 1;
                                                                String[] newArgs7 = new String[(args2.length - opti21)];
                                                                if (args2.length > 2) {
                                                                    System.arraycopy(args2, opti21, newArgs7, 0, args2.length - opti21);
                                                                }
                                                                opti20 = 0;
                                                                more = true;
                                                                args2 = newArgs7;
                                                            }
                                                            opti15 = opti20;
                                                        } else {
                                                            if ("associations".equals(cmd2)) {
                                                                opti14 = opti20;
                                                                dumpAll11 = dumpAll12;
                                                                boolean z18 = logRequestHandled;
                                                                String str21 = cmd2;
                                                            } else if ("as".equals(cmd2)) {
                                                                opti14 = opti20;
                                                                dumpAll11 = dumpAll12;
                                                                boolean z19 = logRequestHandled;
                                                                String str22 = cmd2;
                                                            } else {
                                                                if ("settings".equals(cmd2)) {
                                                                    synchronized (this) {
                                                                        try {
                                                                            boostPriorityForLockedSection();
                                                                            this.mConstants.dump(printWriter);
                                                                        } catch (Throwable th11) {
                                                                            while (true) {
                                                                                resetPriorityAfterLockedSection();
                                                                                throw th11;
                                                                            }
                                                                        }
                                                                    }
                                                                    resetPriorityAfterLockedSection();
                                                                } else {
                                                                    if ("services".equals(cmd2)) {
                                                                        opti10 = opti20;
                                                                        dumpAll2 = dumpAll12;
                                                                        boolean z20 = logRequestHandled;
                                                                        String str23 = cmd2;
                                                                    } else if ("s".equals(cmd2)) {
                                                                        opti10 = opti20;
                                                                        dumpAll2 = dumpAll12;
                                                                        boolean z21 = logRequestHandled;
                                                                        String str24 = cmd2;
                                                                    } else if ("locks".equals(cmd2)) {
                                                                        LockGuard.dump(fd, pw, args);
                                                                    } else if ("handler".equals(cmd2)) {
                                                                        synchronized (this) {
                                                                            try {
                                                                                boostPriorityForLockedSection();
                                                                                dumpHandler(printWriter);
                                                                            } catch (Throwable th12) {
                                                                                while (true) {
                                                                                    resetPriorityAfterLockedSection();
                                                                                    throw th12;
                                                                                }
                                                                            }
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                    } else {
                                                                        int opti22 = opti20;
                                                                        opti10 = opti22;
                                                                        boolean z22 = logRequestHandled;
                                                                        dumpAll2 = dumpAll12;
                                                                        if (!dumpActivity(fileDescriptor, printWriter, cmd2, args2, opti22, dumpAll12, dumpVisibleStacksOnly, dumpFocusedStackOnly)) {
                                                                            if (new ActivityManagerShellCommand(this, true).exec(this, null, fileDescriptor, null, args2, null, new ResultReceiver(null)) < 0) {
                                                                                printWriter.println("Bad activity command, or no activities match: " + cmd);
                                                                                printWriter.println("Use -h for help.");
                                                                            }
                                                                        }
                                                                        opti2 = opti10;
                                                                        opti = opti2;
                                                                        if (more) {
                                                                            Binder.restoreCallingIdentity(origId3);
                                                                            return;
                                                                        }
                                                                        origId = origId3;
                                                                    }
                                                                    if (dumpClient) {
                                                                        synchronized (this) {
                                                                            try {
                                                                                boostPriorityForLockedSection();
                                                                                dumper = this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, args2, opti10, true, dumpPackage5);
                                                                            } catch (Throwable th13) {
                                                                                while (true) {
                                                                                    resetPriorityAfterLockedSection();
                                                                                    throw th13;
                                                                                }
                                                                            }
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                        dumper.dumpWithClient();
                                                                    } else {
                                                                        synchronized (this) {
                                                                            try {
                                                                                boostPriorityForLockedSection();
                                                                                this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, args2, opti10, true, dumpPackage5).dumpLocked();
                                                                            } catch (Throwable th14) {
                                                                                while (true) {
                                                                                    resetPriorityAfterLockedSection();
                                                                                    throw th14;
                                                                                }
                                                                            }
                                                                        }
                                                                        resetPriorityAfterLockedSection();
                                                                    }
                                                                    opti2 = opti10;
                                                                    opti = opti2;
                                                                    if (more) {
                                                                    }
                                                                }
                                                                dumpAll2 = dumpAll12;
                                                                opti2 = opti20;
                                                                opti = opti2;
                                                                if (more) {
                                                                }
                                                            }
                                                            synchronized (this) {
                                                                try {
                                                                    boostPriorityForLockedSection();
                                                                    dumpAssociationsLocked(fileDescriptor, printWriter, args2, opti10, true, dumpClient, dumpPackage5);
                                                                } catch (Throwable th15) {
                                                                    while (true) {
                                                                        resetPriorityAfterLockedSection();
                                                                        throw th15;
                                                                    }
                                                                }
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            opti2 = opti10;
                                                            opti = opti2;
                                                            if (more) {
                                                            }
                                                        }
                                                        synchronized (this) {
                                                            try {
                                                                boostPriorityForLockedSection();
                                                                dumpProvidersLocked(fileDescriptor, printWriter, args2, opti10, true, null);
                                                            } catch (Throwable th16) {
                                                                while (true) {
                                                                    resetPriorityAfterLockedSection();
                                                                    throw th16;
                                                                }
                                                            }
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        opti2 = opti10;
                                                        opti = opti2;
                                                        if (more) {
                                                        }
                                                    }
                                                    synchronized (this) {
                                                        try {
                                                            boostPriorityForLockedSection();
                                                            dumpPermissionsLocked(fileDescriptor, printWriter, args2, opti10, true, null);
                                                        } catch (Throwable th17) {
                                                            while (true) {
                                                                resetPriorityAfterLockedSection();
                                                                throw th17;
                                                            }
                                                        }
                                                    }
                                                    resetPriorityAfterLockedSection();
                                                    opti2 = opti10;
                                                    opti = opti2;
                                                    if (more) {
                                                    }
                                                }
                                                synchronized (this) {
                                                    try {
                                                        boostPriorityForLockedSection();
                                                        dumpOomLocked(fileDescriptor, printWriter, args2, opti10, true);
                                                    } catch (Throwable th18) {
                                                        while (true) {
                                                            resetPriorityAfterLockedSection();
                                                            throw th18;
                                                        }
                                                    }
                                                }
                                                resetPriorityAfterLockedSection();
                                                opti2 = opti10;
                                                opti = opti2;
                                                if (more) {
                                                }
                                            }
                                            int opti23 = opti8;
                                            if (opti23 < args2.length) {
                                                dumpPackage3 = args2[opti23];
                                                opti9 = opti23 + 1;
                                            } else {
                                                opti9 = opti23;
                                                dumpPackage3 = dumpPackage5;
                                            }
                                            synchronized (this) {
                                                try {
                                                    boostPriorityForLockedSection();
                                                    dumpProcessesLocked(fileDescriptor, printWriter, args2, opti9, true, dumpPackage3, dumpAppId);
                                                } catch (Throwable th19) {
                                                    while (true) {
                                                        resetPriorityAfterLockedSection();
                                                        throw th19;
                                                    }
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            dumpPackage5 = dumpPackage3;
                                            opti = opti9;
                                            if (more) {
                                            }
                                        }
                                        if (opti7 < args2.length) {
                                            dumpPackage = args2[opti7];
                                            opti4 = opti7 + 1;
                                        } else {
                                            opti4 = opti7;
                                            dumpPackage = dumpPackage5;
                                        }
                                        synchronized (this) {
                                            try {
                                                boostPriorityForLockedSection();
                                                dumpPendingIntentsLocked(fileDescriptor, printWriter, args2, opti4, true, dumpPackage);
                                            } catch (Throwable th20) {
                                                while (true) {
                                                    resetPriorityAfterLockedSection();
                                                    throw th20;
                                                }
                                            }
                                        }
                                        resetPriorityAfterLockedSection();
                                        opti = opti4;
                                        dumpPackage5 = dumpPackage;
                                        if (more) {
                                        }
                                    }
                                    if (opti5 < args2.length) {
                                        dumpPackage2 = args2[opti5];
                                        opti6 = opti5 + 1;
                                    } else {
                                        opti6 = opti5;
                                        dumpPackage2 = dumpPackage5;
                                    }
                                    synchronized (this) {
                                        try {
                                            boostPriorityForLockedSection();
                                            dumpBroadcastsLocked(fileDescriptor, printWriter, args2, opti4, true, dumpPackage);
                                        } catch (Throwable th21) {
                                            while (true) {
                                                resetPriorityAfterLockedSection();
                                                throw th21;
                                            }
                                        }
                                    }
                                    resetPriorityAfterLockedSection();
                                    opti = opti4;
                                    dumpPackage5 = dumpPackage;
                                    if (more) {
                                    }
                                } else if (opti20 >= args2.length) {
                                    dumpBinderProxiesCounts(printWriter, BinderInternal.nGetBinderProxyPerUidCounts(), "Counts of Binder Proxies held by SYSTEM");
                                } else {
                                    String uid = args2[opti20];
                                    System.gc();
                                    System.runFinalization();
                                    System.gc();
                                    printWriter.println(BinderInternal.nGetBinderProxyCount(Integer.parseInt(uid)));
                                    opti15 = opti20 + 1;
                                    origId3 = origId7;
                                }
                                dumpAll = dumpAll12;
                                if (more) {
                                }
                            }
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    if (this.mRecentTasks != null) {
                                        this.mRecentTasks.dump(printWriter, z, dumpPackage5);
                                    }
                                } catch (Throwable th22) {
                                    while (true) {
                                        resetPriorityAfterLockedSection();
                                        throw th22;
                                    }
                                }
                            }
                            resetPriorityAfterLockedSection();
                            opti = opti2;
                            if (more) {
                            }
                        }
                        origId3 = origId7;
                        dumpAll2 = dumpAll12;
                        opti2 = opti20;
                        opti = opti2;
                        if (more) {
                        }
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            dumpActivitiesLocked(fileDescriptor, printWriter, args2, opti2, true, dumpClient, dumpPackage5);
                        } catch (Throwable th23) {
                            th = th23;
                            long j4 = origId3;
                            while (true) {
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    }
                    resetPriorityAfterLockedSection();
                    opti = opti2;
                    if (more) {
                    }
                } else {
                    origId = origId7;
                    dumpAll = dumpAll12;
                    boolean z23 = logRequestHandled;
                    opti = opti16;
                }
                if (dumpCheckinFormat2) {
                    dumpBroadcastStatsCheckinLocked(fileDescriptor, printWriter, args2, opti, dumpCheckin, dumpPackage5);
                    origId2 = origId;
                    boolean z24 = dumpAll;
                } else {
                    long origId8 = origId;
                    if (dumpClient) {
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                this.mConstants.dump(printWriter);
                                pw.println();
                                boolean dumpAll13 = dumpAll;
                                if (dumpAll13) {
                                    try {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    } catch (Throwable th24) {
                                        th = th24;
                                        long j5 = origId8;
                                    }
                                }
                                try {
                                    dumpPendingIntentsLocked(fileDescriptor, printWriter, args2, opti, dumpAll13, dumpPackage5);
                                    pw.println();
                                    if (dumpAll13) {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    }
                                    dumpBroadcastsLocked(fileDescriptor, printWriter, args2, opti, dumpAll13, dumpPackage5);
                                    pw.println();
                                    if (dumpAll13) {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    }
                                    if (dumpAll13 || dumpPackage5 != null) {
                                        dumpBroadcastStatsLocked(fileDescriptor, printWriter, args2, opti, dumpAll13, dumpPackage5);
                                        pw.println();
                                        if (dumpAll13) {
                                            printWriter.println("-------------------------------------------------------------------------------");
                                        }
                                    }
                                    dumpProvidersLocked(fileDescriptor, printWriter, args2, opti, dumpAll13, dumpPackage5);
                                    pw.println();
                                    if (dumpAll13) {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    }
                                    dumpPermissionsLocked(fileDescriptor, printWriter, args2, opti, dumpAll13, dumpPackage5);
                                    pw.println();
                                    if (dumpAll13) {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    }
                                    ActiveServices.ServiceDumper sdumper = this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, args2, opti, dumpAll13, dumpPackage5);
                                } catch (Throwable th25) {
                                    th = th25;
                                    long j6 = origId8;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th26) {
                                            th = th26;
                                        }
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th27) {
                                th = th27;
                                long j7 = origId8;
                                boolean z25 = dumpAll;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    } else {
                        origId2 = origId8;
                        boolean dumpAll14 = dumpAll;
                        synchronized (this) {
                            boostPriorityForLockedSection();
                            this.mConstants.dump(printWriter);
                            pw.println();
                            if (dumpAll14) {
                                try {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                } catch (Throwable th28) {
                                    th = th28;
                                    long j8 = origId2;
                                }
                            }
                            dumpPendingIntentsLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5);
                            pw.println();
                            if (dumpAll14) {
                                printWriter.println("-------------------------------------------------------------------------------");
                            }
                            dumpBroadcastsLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5);
                            pw.println();
                            if (dumpAll14) {
                                printWriter.println("-------------------------------------------------------------------------------");
                            }
                            if (dumpAll14 || dumpPackage5 != null) {
                                dumpBroadcastStatsLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5);
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                            }
                            dumpProvidersLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5);
                            pw.println();
                            if (dumpAll14) {
                                printWriter.println("-------------------------------------------------------------------------------");
                            }
                            dumpPermissionsLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5);
                            pw.println();
                            if (dumpAll14) {
                                printWriter.println("-------------------------------------------------------------------------------");
                            }
                            try {
                                this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5).dumpLocked();
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                                if (this.mRecentTasks != null) {
                                    this.mRecentTasks.dump(printWriter, dumpAll14, dumpPackage5);
                                }
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                                dumpLastANRLocked(printWriter);
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                                dumpActivityStarterLocked(printWriter, dumpPackage5);
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                                dumpActivityContainersLocked(printWriter);
                                if (!dumpNormalPriority) {
                                    pw.println();
                                    if (dumpAll14) {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    }
                                    dumpActivitiesLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpClient, dumpPackage5);
                                }
                                if (this.mAssociations.size() > 0) {
                                    pw.println();
                                    if (dumpAll14) {
                                        printWriter.println("-------------------------------------------------------------------------------");
                                    }
                                    dumpAssociationsLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpClient, dumpPackage5);
                                }
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                                dumpProcessesLocked(fileDescriptor, printWriter, args2, opti, dumpAll14, dumpPackage5, dumpAppId);
                                pw.println();
                                if (dumpAll14) {
                                    printWriter.println("-------------------------------------------------------------------------------");
                                }
                                dumpHandler(printWriter);
                            } catch (Throwable th29) {
                                th = th29;
                                long j9 = origId2;
                                while (true) {
                                    try {
                                        break;
                                    } catch (Throwable th30) {
                                        th = th30;
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    }
                }
                Binder.restoreCallingIdentity(origId2);
            }
        }
    }

    private void writeActivitiesToProtoLocked(ProtoOutputStream proto) {
        this.mStackSupervisor.writeToProto(proto, 1146756268033L);
    }

    private void dumpLastANRLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER LAST ANR (dumpsys activity lastanr)");
        if (this.mLastANRState == null) {
            pw.println("  <no ANR has occurred since boot>");
        } else {
            pw.println(this.mLastANRState);
        }
    }

    private void dumpHandler(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER HANDLER (dumpsys activity handler)");
        pw.println();
        pw.println(" mHandler:");
        this.mHandler.dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" mUiHandler:");
        this.mUiHandler.dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" UiThread.getHandler(): ");
        UiThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" FgThread.getHandler(): ");
        FgThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" IoThread.getHandler(): ");
        IoThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" DisplayThread.getHandler(): ");
        DisplayThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" AnimationThread.getHandler(): ");
        AnimationThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println();
        pw.println(" SurfaceAnimationThread.getHandler(): ");
        SurfaceAnimationThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
        pw.println();
        pw.println(" BackgroundThread.getHandler(): ");
        BackgroundThread.getHandler().dump(new PrintWriterPrinter(pw), " ");
    }

    private void dumpActivityContainersLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER STARTER (dumpsys activity containers)");
        this.mStackSupervisor.dumpChildrenNames(pw, " ");
        pw.println(" ");
    }

    private void dumpActivityStarterLocked(PrintWriter pw, String dumpPackage) {
        pw.println("ACTIVITY MANAGER STARTER (dumpsys activity starter)");
        this.mActivityStartController.dump(pw, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, dumpPackage);
    }

    /* access modifiers changed from: package-private */
    public void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        dumpActivitiesLocked(fd, pw, args, opti, dumpAll, dumpClient, dumpPackage, "ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)");
    }

    /* access modifiers changed from: package-private */
    public void dumpActivitiesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage, String header) {
        pw.println(header);
        boolean printedAnything = this.mStackSupervisor.dumpActivitiesLocked(fd, pw, dumpAll, dumpClient, dumpPackage);
        boolean needSep = printedAnything;
        if (ActivityStackSupervisor.printThisActivity(pw, this.mStackSupervisor.getResumedActivityLocked(), dumpPackage, needSep, "  ResumedActivity: ")) {
            printedAnything = true;
            needSep = false;
        }
        if (dumpPackage == null) {
            if (needSep) {
                pw.println();
            }
            printedAnything = true;
            this.mStackSupervisor.dump(pw, "  ");
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        int N1;
        int dumpUid;
        ArrayMap<String, Association> sourceProcesses;
        ActivityManagerService activityManagerService = this;
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        printWriter.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int dumpUid2 = 0;
        int i = false;
        if (str != null) {
            try {
                dumpUid2 = AppGlobals.getPackageManager().getPackageUid(str, DumpState.DUMP_CHANGES, 0);
            } catch (RemoteException e) {
            }
        }
        boolean printedAnything = false;
        long now = SystemClock.uptimeMillis();
        int i1 = 0;
        int N12 = activityManagerService.mAssociations.size();
        while (i1 < N12) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
            int i2 = 0;
            int N2 = targetComponents2.size();
            while (i2 < N2) {
                SparseArray<ArrayMap<String, Association>> sourceUids = targetComponents2.valueAt(i2);
                int i3 = 0;
                int N3 = sourceUids.size();
                while (i3 < N3) {
                    ArrayMap<String, Association> sourceProcesses2 = sourceUids.valueAt(i3);
                    int N4 = sourceProcesses2.size();
                    boolean printedAnything2 = printedAnything;
                    int i4 = 0;
                    while (true) {
                        int N42 = N4;
                        if (i4 >= N42) {
                            break;
                        }
                        int N43 = N42;
                        Association ass = sourceProcesses2.valueAt(i4);
                        if (str != null) {
                            sourceProcesses = sourceProcesses2;
                            if (!ass.mTargetComponent.getPackageName().equals(str) && UserHandle.getAppId(ass.mSourceUid) != dumpUid2) {
                                dumpUid = dumpUid2;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                i4++;
                                N4 = N43;
                                sourceProcesses2 = sourceProcesses;
                                dumpUid2 = dumpUid;
                                N12 = N1;
                                targetComponents2 = targetComponents;
                                str = dumpPackage;
                            }
                        } else {
                            sourceProcesses = sourceProcesses2;
                        }
                        printedAnything2 = true;
                        printWriter.print("  ");
                        printWriter.print(ass.mTargetProcess);
                        printWriter.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        UserHandle.formatUid(printWriter, ass.mTargetUid);
                        printWriter.print(" <- ");
                        printWriter.print(ass.mSourceProcess);
                        printWriter.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        UserHandle.formatUid(printWriter, ass.mSourceUid);
                        pw.println();
                        printWriter.print("    via ");
                        printWriter.print(ass.mTargetComponent.flattenToShortString());
                        pw.println();
                        printWriter.print("    ");
                        dumpUid = dumpUid2;
                        long dur = ass.mTime;
                        if (ass.mNesting > 0) {
                            N1 = N12;
                            targetComponents = targetComponents2;
                            dur += now - ass.mStartTime;
                        } else {
                            N1 = N12;
                            targetComponents = targetComponents2;
                        }
                        TimeUtils.formatDuration(dur, printWriter);
                        printWriter.print(" (");
                        printWriter.print(ass.mCount);
                        printWriter.print(" times)");
                        printWriter.print("  ");
                        int i5 = 0;
                        while (i5 < ass.mStateTimes.length) {
                            long amt = ass.mStateTimes[i5];
                            long dur2 = dur;
                            if (ass.mLastState - 0 == i5) {
                                amt += now - ass.mLastStateUptime;
                            }
                            if (amt != 0) {
                                printWriter.print(" ");
                                printWriter.print(ProcessList.makeProcStateString(i5 + 0));
                                printWriter.print("=");
                                TimeUtils.formatDuration(amt, printWriter);
                                if (ass.mLastState - 0 == i5) {
                                    printWriter.print("*");
                                }
                            }
                            i5++;
                            dur = dur2;
                        }
                        pw.println();
                        if (ass.mNesting > 0) {
                            printWriter.print("    Currently active: ");
                            TimeUtils.formatDuration(now - ass.mStartTime, printWriter);
                            pw.println();
                        }
                        i4++;
                        N4 = N43;
                        sourceProcesses2 = sourceProcesses;
                        dumpUid2 = dumpUid;
                        N12 = N1;
                        targetComponents2 = targetComponents;
                        str = dumpPackage;
                    }
                    int i6 = N12;
                    ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap = targetComponents2;
                    i3++;
                    i = false;
                    printedAnything = printedAnything2;
                    dumpUid2 = dumpUid2;
                    str = dumpPackage;
                }
                int dumpUid3 = dumpUid2;
                int dumpUid4 = i;
                int i7 = N12;
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap2 = targetComponents2;
                i2++;
                dumpUid2 = dumpUid3;
                str = dumpPackage;
            }
            int dumpUid5 = dumpUid2;
            int dumpUid6 = i;
            int i8 = N12;
            i1++;
            dumpUid2 = dumpUid5;
            activityManagerService = this;
            str = dumpPackage;
        }
        if (!printedAnything) {
            printWriter.println("  (nothing)");
        }
    }

    private int getAppId(String dumpPackage) {
        if (dumpPackage != null) {
            try {
                return UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(dumpPackage, 0).uid);
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            }
        }
        return -1;
    }

    /* access modifiers changed from: package-private */
    public boolean dumpUids(PrintWriter pw, String dumpPackage, int dumpAppId, SparseArray<UidRecord> uids, String header, boolean needSep) {
        boolean printed = false;
        for (int i = 0; i < uids.size(); i++) {
            UidRecord uidRec = uids.valueAt(i);
            if (dumpPackage == null || UserHandle.getAppId(uidRec.uid) == dumpAppId) {
                if (!printed) {
                    printed = true;
                    if (needSep) {
                        pw.println();
                    }
                    pw.print("  ");
                    pw.println(header);
                    needSep = true;
                }
                pw.print("    UID ");
                UserHandle.formatUid(pw, uidRec.uid);
                pw.print(": ");
                pw.println(uidRec);
            }
        }
        return printed;
    }

    /* access modifiers changed from: package-private */
    public boolean dumpBinderProxiesCounts(PrintWriter pw, SparseIntArray counts, String header) {
        if (counts == null) {
            return false;
        }
        pw.println(header);
        for (int i = 0; i < counts.size(); i++) {
            int uid = counts.keyAt(i);
            int binderCount = counts.valueAt(i);
            pw.print("    UID ");
            pw.print(uid);
            pw.print(", binder count = ");
            pw.print(binderCount);
            pw.print(", package(s)= ");
            String[] pkgNames = this.mContext.getPackageManager().getPackagesForUid(uid);
            if (pkgNames != null) {
                for (String print : pkgNames) {
                    pw.print(print);
                    pw.print("; ");
                }
            } else {
                pw.print("NO PACKAGE NAME FOUND");
            }
            pw.println();
        }
        pw.println();
        return true;
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x0209, code lost:
        r0 = r3;
     */
    @GuardedBy("this")
    public void dumpProcessesLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage, int dumpAppId) {
        int numPers;
        int numPers2;
        boolean needSep;
        PrintWriter printWriter = pw;
        boolean z = dumpAll;
        String str = dumpPackage;
        boolean needSep2 = false;
        printWriter.println("ACTIVITY MANAGER RUNNING PROCESSES (dumpsys activity processes)");
        if (z) {
            int NP = this.mProcessNames.getMap().size();
            int numPers3 = 0;
            boolean numPers4 = false;
            int ip = 0;
            while (ip < NP) {
                SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
                int NA = procs.size();
                int numPers5 = numPers3;
                boolean needSep3 = numPers4;
                for (int ia = 0; ia < NA; ia++) {
                    ProcessRecord r = procs.valueAt(ia);
                    if (str == null || r.pkgList.containsKey(str)) {
                        if (!needSep3) {
                            printWriter.println("  All known processes:");
                            needSep3 = true;
                        }
                        printWriter.print(r.persistent ? "  *PERS*" : "  *APP*");
                        printWriter.print(" UID ");
                        printWriter.print(procs.keyAt(ia));
                        printWriter.print(" ");
                        printWriter.println(r);
                        r.dump(printWriter, "    ");
                        if (r.persistent) {
                            numPers5++;
                        }
                    }
                }
                ip++;
                numPers4 = needSep3;
                numPers3 = numPers5;
            }
            needSep2 = numPers4;
            numPers = numPers3;
        } else {
            numPers = 0;
        }
        if (this.mIsolatedProcesses.size() > 0) {
            boolean printed = false;
            boolean needSep4 = needSep2;
            for (int i = 0; i < this.mIsolatedProcesses.size(); i++) {
                ProcessRecord r2 = this.mIsolatedProcesses.valueAt(i);
                if (str == null || r2.pkgList.containsKey(str)) {
                    if (!printed) {
                        if (needSep4) {
                            pw.println();
                        }
                        printWriter.println("  Isolated process list (sorted by uid):");
                        printed = true;
                        needSep4 = true;
                    }
                    printWriter.print("    Isolated #");
                    printWriter.print(i);
                    printWriter.print(": ");
                    printWriter.println(r2);
                }
            }
            needSep2 = needSep4;
        }
        if (this.mActiveInstrumentation.size() > 0) {
            boolean printed2 = false;
            boolean needSep5 = needSep2;
            for (int i2 = 0; i2 < this.mActiveInstrumentation.size(); i2++) {
                ActiveInstrumentation ai = this.mActiveInstrumentation.get(i2);
                if (str == null || ai.mClass.getPackageName().equals(str) || ai.mTargetInfo.packageName.equals(str)) {
                    if (!printed2) {
                        if (needSep5) {
                            pw.println();
                        }
                        printWriter.println("  Active instrumentation:");
                        printed2 = true;
                        needSep5 = true;
                    }
                    printWriter.print("    Instrumentation #");
                    printWriter.print(i2);
                    printWriter.print(": ");
                    printWriter.println(ai);
                    ai.dump(printWriter, "      ");
                }
            }
            needSep2 = needSep5;
        }
        if (this.mActiveUids.size() > 0) {
            if (dumpUids(printWriter, str, dumpAppId, this.mActiveUids, "UID states:", needSep2)) {
                needSep2 = true;
            }
        }
        if (z && this.mValidateUids.size() > 0) {
            if (dumpUids(printWriter, str, dumpAppId, this.mValidateUids, "UID validation:", needSep2)) {
                needSep2 = true;
            }
        }
        if (this.mLruProcesses.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            printWriter.print("  Process LRU list (sorted by oom_adj, ");
            printWriter.print(this.mLruProcesses.size());
            printWriter.print(" total, non-act at ");
            printWriter.print(this.mLruProcesses.size() - this.mLruProcessActivityStart);
            printWriter.print(", non-svc at ");
            printWriter.print(this.mLruProcesses.size() - this.mLruProcessServiceStart);
            printWriter.println("):");
            dumpProcessOomList(printWriter, this, this.mLruProcesses, "    ", "Proc", "PERS", false, str);
            needSep2 = true;
        }
        if (z || str != null) {
            synchronized (this.mPidsSelfLocked) {
                boolean printed3 = false;
                boolean needSep6 = needSep2;
                int i3 = 0;
                while (i3 < this.mPidsSelfLocked.size()) {
                    try {
                        try {
                            ProcessRecord r3 = this.mPidsSelfLocked.valueAt(i3);
                            if (str == null || r3.pkgList.containsKey(str)) {
                                if (!printed3) {
                                    if (needSep6) {
                                        pw.println();
                                    }
                                    needSep6 = true;
                                    printWriter.println("  PID mappings:");
                                    printed3 = true;
                                }
                                printWriter.print("    PID #");
                                printWriter.print(this.mPidsSelfLocked.keyAt(i3));
                                printWriter.print(": ");
                                printWriter.println(this.mPidsSelfLocked.valueAt(i3));
                            }
                            i3++;
                        } catch (Throwable th) {
                            th = th;
                            FileDescriptor fileDescriptor = fd;
                            int i4 = dumpAppId;
                            int i5 = numPers;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th2) {
                                    th = th2;
                                }
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        FileDescriptor fileDescriptor2 = fd;
                        int i6 = dumpAppId;
                        int i7 = numPers;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                boolean printed4 = false;
                needSep = needSep2;
                for (int i8 = 0; i8 < this.mImportantProcesses.size(); i8++) {
                    ProcessRecord r4 = this.mPidsSelfLocked.get(this.mImportantProcesses.valueAt(i8).pid);
                    if (str != null) {
                        if (r4 != null) {
                            if (!r4.pkgList.containsKey(str)) {
                            }
                        }
                    }
                    if (!printed4) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        printWriter.println("  Foreground Processes:");
                        printed4 = true;
                    }
                    printWriter.print("    PID #");
                    printWriter.print(this.mImportantProcesses.keyAt(i8));
                    printWriter.print(": ");
                    printWriter.println(this.mImportantProcesses.valueAt(i8));
                }
            }
            needSep2 = needSep;
        }
        if (this.mPersistentStartingProcesses.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            needSep2 = true;
            printWriter.println("  Persisent processes that are starting:");
            dumpProcessList(printWriter, this, this.mPersistentStartingProcesses, "    ", "Starting Norm", "Restarting PERS", str);
        }
        if (this.mRemovedProcesses.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            needSep2 = true;
            printWriter.println("  Processes that are being removed:");
            dumpProcessList(printWriter, this, this.mRemovedProcesses, "    ", "Removed Norm", "Removed PERS", str);
        }
        if (this.mProcessesOnHold.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            needSep2 = true;
            printWriter.println("  Processes that are on old until the system is ready:");
            dumpProcessList(printWriter, this, this.mProcessesOnHold, "    ", "OnHold Norm", "OnHold PERS", str);
        }
        boolean needSep7 = this.mAppErrors.dumpLocked(fd, printWriter, dumpProcessesToGc(printWriter, needSep2, str), str);
        if (str == null) {
            pw.println();
            needSep7 = false;
            this.mUserController.dump(printWriter, z);
        }
        if (this.mHomeProcess != null && (str == null || this.mHomeProcess.pkgList.containsKey(str))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mHomeProcess: " + this.mHomeProcess);
        }
        if (this.mPreviousProcess != null && (str == null || this.mPreviousProcess.pkgList.containsKey(str))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mPreviousProcess: " + this.mPreviousProcess);
        }
        if (z && (this.mPreviousProcess == null || str == null || this.mPreviousProcess.pkgList.containsKey(str))) {
            StringBuilder sb = new StringBuilder(128);
            sb.append("  mPreviousProcessVisibleTime: ");
            TimeUtils.formatDuration(this.mPreviousProcessVisibleTime, sb);
            printWriter.println(sb);
        }
        if (this.mHeavyWeightProcess != null && (str == null || this.mHeavyWeightProcess.pkgList.containsKey(str))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mHeavyWeightProcess: " + this.mHeavyWeightProcess);
        }
        if (z && this.mPendingStarts.size() > 0) {
            if (needSep7) {
                pw.println();
            }
            needSep7 = true;
            printWriter.println("  mPendingStarts: ");
            int len = this.mPendingStarts.size();
            for (int i9 = 0; i9 < len; i9++) {
                printWriter.println("    " + this.mPendingStarts.keyAt(i9) + ": " + this.mPendingStarts.valueAt(i9));
            }
        }
        if (str == null) {
            printWriter.println("  mGlobalConfiguration: " + getGlobalConfiguration());
            this.mStackSupervisor.dumpDisplayConfigs(printWriter, "  ");
        }
        if (z) {
            if (str == null) {
                printWriter.println("  mConfigWillChange: " + getFocusedStack().mConfigWillChange);
            }
            if (this.mCompatModePackages.getPackages().size() > 0) {
                boolean printed5 = false;
                for (Map.Entry<String, Integer> entry : this.mCompatModePackages.getPackages().entrySet()) {
                    String pkg = entry.getKey();
                    int mode = entry.getValue().intValue();
                    if (str == null || str.equals(pkg)) {
                        if (!printed5) {
                            printWriter.println("  mScreenCompatPackages:");
                            printed5 = true;
                        }
                        printWriter.print("    ");
                        printWriter.print(pkg);
                        printWriter.print(": ");
                        printWriter.print(mode);
                        pw.println();
                    }
                }
            }
            int NI = this.mUidObservers.getRegisteredCallbackCount();
            boolean printed6 = false;
            for (int i10 = 0; i10 < NI; i10++) {
                UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i10);
                if (str == null || str.equals(reg.pkg)) {
                    if (!printed6) {
                        printWriter.println("  mUidObservers:");
                        printed6 = true;
                    }
                    printWriter.print("    ");
                    UserHandle.formatUid(printWriter, reg.uid);
                    printWriter.print(" ");
                    printWriter.print(reg.pkg);
                    printWriter.print(":");
                    if ((reg.which & 4) != 0) {
                        printWriter.print(" IDLE");
                    }
                    if ((reg.which & 8) != 0) {
                        printWriter.print(" ACT");
                    }
                    if ((reg.which & 2) != 0) {
                        printWriter.print(" GONE");
                    }
                    if ((reg.which & 1) != 0) {
                        printWriter.print(" STATE");
                        printWriter.print(" (cut=");
                        printWriter.print(reg.cutpoint);
                        printWriter.print(")");
                    }
                    pw.println();
                    if (reg.lastProcStates != null) {
                        int NJ = reg.lastProcStates.size();
                        for (int j = 0; j < NJ; j++) {
                            printWriter.print("      Last ");
                            UserHandle.formatUid(printWriter, reg.lastProcStates.keyAt(j));
                            printWriter.print(": ");
                            printWriter.println(reg.lastProcStates.valueAt(j));
                        }
                    }
                }
            }
            printWriter.println("  mDeviceIdleWhitelist=" + Arrays.toString(this.mDeviceIdleWhitelist));
            printWriter.println("  mDeviceIdleExceptIdleWhitelist=" + Arrays.toString(this.mDeviceIdleExceptIdleWhitelist));
            printWriter.println("  mDeviceIdleTempWhitelist=" + Arrays.toString(this.mDeviceIdleTempWhitelist));
            if (this.mPendingTempWhitelist.size() > 0) {
                printWriter.println("  mPendingTempWhitelist:");
                for (int i11 = 0; i11 < this.mPendingTempWhitelist.size(); i11++) {
                    PendingTempWhitelist ptw = this.mPendingTempWhitelist.valueAt(i11);
                    printWriter.print("    ");
                    UserHandle.formatUid(printWriter, ptw.targetUid);
                    printWriter.print(": ");
                    TimeUtils.formatDuration(ptw.duration, printWriter);
                    printWriter.print(" ");
                    printWriter.println(ptw.tag);
                }
            }
        }
        if (str == null) {
            printWriter.println("  mWakefulness=" + PowerManagerInternal.wakefulnessToString(this.mWakefulness));
            printWriter.println("  mSleepTokens=" + this.mStackSupervisor.mSleepTokens);
            printWriter.println("  mSleeping=" + this.mSleeping);
            printWriter.println("  mShuttingDown=" + this.mShuttingDown + " mTestPssMode=" + this.mTestPssMode);
            if (this.mRunningVoice != null) {
                printWriter.println("  mRunningVoice=" + this.mRunningVoice);
                printWriter.println("  mVoiceWakeLock" + this.mVoiceWakeLock);
            }
            printWriter.println("  mVrController=" + this.mVrController);
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(this.mDebugApp) || str.equals(this.mOrigDebugApp))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mDebugApp=" + this.mDebugApp + "/orig=" + this.mOrigDebugApp + " mDebugTransient=" + this.mDebugTransient + " mOrigWaitForDebugger=" + this.mOrigWaitForDebugger);
        }
        if (this.mCurAppTimeTracker != null) {
            this.mCurAppTimeTracker.dumpWithHeader(printWriter, "  ", true);
        }
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            printWriter.println("  Mem watch processes:");
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2 = this.mMemWatchProcesses.getMap();
            boolean needSep8 = needSep7;
            int i12 = 0;
            while (i12 < procs2.size()) {
                String proc = procs2.keyAt(i12);
                SparseArray<Pair<Long, String>> uids = procs2.valueAt(i12);
                boolean needSep9 = needSep8;
                int j2 = 0;
                while (j2 < uids.size()) {
                    if (needSep9) {
                        pw.println();
                        needSep9 = false;
                    }
                    StringBuilder sb2 = new StringBuilder();
                    sb2.append("    ");
                    sb2.append(proc);
                    sb2.append('/');
                    UserHandle.formatUid(sb2, uids.keyAt(j2));
                    Pair<Long, String> val = uids.valueAt(j2);
                    sb2.append(": ");
                    int numPers6 = numPers;
                    DebugUtils.sizeValueToString(((Long) val.first).longValue(), sb2);
                    if (val.second != null) {
                        sb2.append(", report to ");
                        sb2.append((String) val.second);
                    }
                    printWriter.println(sb2.toString());
                    j2++;
                    numPers = numPers6;
                }
                i12++;
                needSep8 = needSep9;
            }
            numPers2 = numPers;
            printWriter.print("  mMemWatchDumpProcName=");
            printWriter.println(this.mMemWatchDumpProcName);
            printWriter.print("  mMemWatchDumpFile=");
            printWriter.println(this.mMemWatchDumpFile);
            printWriter.print("  mMemWatchDumpPid=");
            printWriter.print(this.mMemWatchDumpPid);
            printWriter.print(" mMemWatchDumpUid=");
            printWriter.println(this.mMemWatchDumpUid);
            needSep7 = needSep8;
        } else {
            numPers2 = numPers;
        }
        if (this.mTrackAllocationApp != null && (str == null || str.equals(this.mTrackAllocationApp))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mTrackAllocationApp=" + this.mTrackAllocationApp);
        }
        if (!(this.mProfileApp == null && this.mProfileProc == null && (this.mProfilerInfo == null || (this.mProfilerInfo.profileFile == null && this.mProfilerInfo.profileFd == null))) && (str == null || str.equals(this.mProfileApp))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mProfileApp=" + this.mProfileApp + " mProfileProc=" + this.mProfileProc);
            if (this.mProfilerInfo != null) {
                printWriter.println("  mProfileFile=" + this.mProfilerInfo.profileFile + " mProfileFd=" + this.mProfilerInfo.profileFd);
                printWriter.println("  mSamplingInterval=" + this.mProfilerInfo.samplingInterval + " mAutoStopProfiler=" + this.mProfilerInfo.autoStopProfiler + " mStreamingOutput=" + this.mProfilerInfo.streamingOutput);
                StringBuilder sb3 = new StringBuilder();
                sb3.append("  mProfileType=");
                sb3.append(this.mProfileType);
                printWriter.println(sb3.toString());
            }
        }
        if (this.mNativeDebuggingApp != null && (str == null || str.equals(this.mNativeDebuggingApp))) {
            if (needSep7) {
                pw.println();
                needSep7 = false;
            }
            printWriter.println("  mNativeDebuggingApp=" + this.mNativeDebuggingApp);
        }
        if (this.mAllowAppSwitchUids.size() > 0) {
            boolean printed7 = false;
            boolean printed8 = needSep7;
            int i13 = 0;
            while (i13 < this.mAllowAppSwitchUids.size()) {
                ArrayMap<String, Integer> types = this.mAllowAppSwitchUids.valueAt(i13);
                boolean needSep10 = printed8;
                boolean printed9 = printed7;
                for (int j3 = 0; j3 < types.size(); j3++) {
                    if (str == null) {
                        int i14 = dumpAppId;
                    } else if (UserHandle.getAppId(types.valueAt(j3).intValue()) != dumpAppId) {
                    }
                    if (needSep10) {
                        pw.println();
                        needSep10 = false;
                    }
                    if (!printed9) {
                        printWriter.println("  mAllowAppSwitchUids:");
                        printed9 = true;
                    }
                    printWriter.print("    User ");
                    printWriter.print(this.mAllowAppSwitchUids.keyAt(i13));
                    printWriter.print(": Type ");
                    printWriter.print(types.keyAt(j3));
                    printWriter.print(" = ");
                    UserHandle.formatUid(printWriter, types.valueAt(j3).intValue());
                    pw.println();
                }
                int i15 = dumpAppId;
                i13++;
                printed7 = printed9;
                printed8 = needSep10;
            }
            int i16 = dumpAppId;
            boolean z2 = printed8;
        } else {
            int i17 = dumpAppId;
        }
        if (str == null) {
            if (this.mAlwaysFinishActivities) {
                printWriter.println("  mAlwaysFinishActivities=" + this.mAlwaysFinishActivities);
            }
            if (this.mController != null) {
                printWriter.println("  mController=" + this.mController + " mControllerIsAMonkey=" + this.mControllerIsAMonkey);
            }
            if (z) {
                printWriter.println("  Total persistent processes: " + numPers2);
                printWriter.println("  mProcessesReady=" + this.mProcessesReady + " mSystemReady=" + this.mSystemReady + " mBooted=" + this.mBooted + " mFactoryTest=" + this.mFactoryTest);
                StringBuilder sb4 = new StringBuilder();
                sb4.append("  mBooting=");
                sb4.append(this.mBooting);
                sb4.append(" mCallFinishBooting=");
                sb4.append(this.mCallFinishBooting);
                sb4.append(" mBootAnimationComplete=");
                sb4.append(this.mBootAnimationComplete);
                printWriter.println(sb4.toString());
                printWriter.print("  mLastPowerCheckUptime=");
                TimeUtils.formatDuration(this.mLastPowerCheckUptime, printWriter);
                printWriter.println(BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                printWriter.println("  mGoingToSleep=" + this.mStackSupervisor.mGoingToSleep);
                printWriter.println("  mLaunchingActivity=" + this.mStackSupervisor.mLaunchingActivity);
                printWriter.println("  mAdjSeq=" + this.mAdjSeq + " mLruSeq=" + this.mLruSeq);
                printWriter.println("  mNumNonCachedProcs=" + this.mNumNonCachedProcs + " (" + this.mLruProcesses.size() + " total) mNumCachedHiddenProcs=" + this.mNumCachedHiddenProcs + " mNumServiceProcs=" + this.mNumServiceProcs + " mNewNumServiceProcs=" + this.mNewNumServiceProcs);
                StringBuilder sb5 = new StringBuilder();
                sb5.append("  mAllowLowerMemLevel=");
                sb5.append(this.mAllowLowerMemLevel);
                sb5.append(" mLastMemoryLevel=");
                sb5.append(this.mLastMemoryLevel);
                sb5.append(" mLastNumProcesses=");
                sb5.append(this.mLastNumProcesses);
                printWriter.println(sb5.toString());
                long now = SystemClock.uptimeMillis();
                printWriter.print("  mLastIdleTime=");
                TimeUtils.formatDuration(now, this.mLastIdleTime, printWriter);
                printWriter.print(" mLowRamSinceLastIdle=");
                TimeUtils.formatDuration(getLowRamTimeSinceIdle(now), printWriter);
                pw.println();
                pw.println();
                printWriter.print("  mUidChangeDispatchCount=");
                printWriter.print(this.mUidChangeDispatchCount);
                pw.println();
                printWriter.println("  Slow UID dispatches:");
                int N = this.mUidObservers.beginBroadcast();
                int i18 = 0;
                while (true) {
                    int i19 = i18;
                    if (i19 >= N) {
                        break;
                    }
                    UidObserverRegistration r5 = (UidObserverRegistration) this.mUidObservers.getBroadcastCookie(i19);
                    printWriter.print("    ");
                    printWriter.print(this.mUidObservers.getBroadcastItem(i19).getClass().getTypeName());
                    printWriter.print(": ");
                    printWriter.print(r5.mSlowDispatchCount);
                    printWriter.print(" / Max ");
                    printWriter.print(r5.mMaxDispatchTime);
                    printWriter.println("ms");
                    i18 = i19 + 1;
                }
                this.mUidObservers.finishBroadcast();
                pw.println();
                printWriter.println("  ServiceManager statistics:");
                ServiceManager.sStatLogger.dump(printWriter, "    ");
                pw.println();
                printWriter.println("  mForceBackgroundCheck=" + this.mForceBackgroundCheck);
            }
        }
        printWriter.println("  mForceBackgroundCheck=" + this.mForceBackgroundCheck);
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void writeProcessesToProtoLocked(ProtoOutputStream proto, String dumpPackage) {
        String str;
        ProtoOutputStream protoOutputStream = proto;
        String str2 = dumpPackage;
        int NP = this.mProcessNames.getMap().size();
        int numPers = 0;
        for (int ip = 0; ip < NP; ip++) {
            SparseArray<ProcessRecord> procs = (SparseArray) this.mProcessNames.getMap().valueAt(ip);
            int NA = procs.size();
            for (int ia = 0; ia < NA; ia++) {
                ProcessRecord r = procs.valueAt(ia);
                if (str2 == null || r.pkgList.containsKey(str2)) {
                    r.writeToProto(protoOutputStream, 2246267895809L);
                    if (r.persistent) {
                        numPers++;
                    }
                }
            }
        }
        for (int i = 0; i < this.mIsolatedProcesses.size(); i++) {
            ProcessRecord r2 = this.mIsolatedProcesses.valueAt(i);
            if (str2 == null || r2.pkgList.containsKey(str2)) {
                r2.writeToProto(protoOutputStream, 2246267895810L);
            }
        }
        for (int i2 = 0; i2 < this.mActiveInstrumentation.size(); i2++) {
            ActiveInstrumentation ai = this.mActiveInstrumentation.get(i2);
            if (str2 == null || ai.mClass.getPackageName().equals(str2) || ai.mTargetInfo.packageName.equals(str2)) {
                ai.writeToProto(protoOutputStream, 2246267895811L);
            }
        }
        int whichAppId = getAppId(str2);
        for (int i3 = 0; i3 < this.mActiveUids.size(); i3++) {
            UidRecord uidRec = this.mActiveUids.valueAt(i3);
            if (str2 == null || UserHandle.getAppId(uidRec.uid) == whichAppId) {
                uidRec.writeToProto(protoOutputStream, 2246267895812L);
            }
        }
        for (int i4 = 0; i4 < this.mValidateUids.size(); i4++) {
            UidRecord uidRec2 = this.mValidateUids.valueAt(i4);
            if (str2 == null || UserHandle.getAppId(uidRec2.uid) == whichAppId) {
                uidRec2.writeToProto(protoOutputStream, 2246267895813L);
            }
        }
        int numPers2 = numPers;
        if (this.mLruProcesses.size() > 0) {
            long lruToken = protoOutputStream.start(1146756268038L);
            int total = this.mLruProcesses.size();
            protoOutputStream.write(1120986464257L, total);
            protoOutputStream.write(1120986464258L, total - this.mLruProcessActivityStart);
            protoOutputStream.write(1120986464259L, total - this.mLruProcessServiceStart);
            long lruToken2 = lruToken;
            int i5 = total;
            int i6 = whichAppId;
            writeProcessOomListToProto(protoOutputStream, 2246267895812L, this, this.mLruProcesses, false, str2);
            protoOutputStream.end(lruToken2);
        }
        if (str2 != null) {
            synchronized (this.mPidsSelfLocked) {
                for (int i7 = 0; i7 < this.mPidsSelfLocked.size(); i7++) {
                    ProcessRecord r3 = this.mPidsSelfLocked.valueAt(i7);
                    if (r3.pkgList.containsKey(str2)) {
                        r3.writeToProto(protoOutputStream, 2246267895815L);
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                for (int i8 = 0; i8 < this.mImportantProcesses.size(); i8++) {
                    ImportanceToken it = this.mImportantProcesses.valueAt(i8);
                    ProcessRecord r4 = this.mPidsSelfLocked.get(it.pid);
                    if (str2 != null) {
                        if (r4 != null) {
                            if (!r4.pkgList.containsKey(str2)) {
                            }
                        }
                    }
                    it.writeToProto(protoOutputStream, 2246267895816L);
                }
            }
        }
        for (int i9 = 0; i9 < this.mPersistentStartingProcesses.size(); i9++) {
            ProcessRecord r5 = this.mPersistentStartingProcesses.get(i9);
            if (str2 == null || str2.equals(r5.info.packageName)) {
                r5.writeToProto(protoOutputStream, 2246267895817L);
            }
        }
        for (int i10 = 0; i10 < this.mRemovedProcesses.size(); i10++) {
            ProcessRecord r6 = this.mRemovedProcesses.get(i10);
            if (str2 == null || str2.equals(r6.info.packageName)) {
                r6.writeToProto(protoOutputStream, 2246267895818L);
            }
        }
        for (int i11 = 0; i11 < this.mProcessesOnHold.size(); i11++) {
            ProcessRecord r7 = this.mProcessesOnHold.get(i11);
            if (str2 == null || str2.equals(r7.info.packageName)) {
                r7.writeToProto(protoOutputStream, 2246267895819L);
            }
        }
        writeProcessesToGcToProto(protoOutputStream, 2246267895820L, str2);
        this.mAppErrors.writeToProto(protoOutputStream, 1146756268045L, str2);
        if (str2 == null) {
            this.mUserController.writeToProto(protoOutputStream, 1146756268046L);
            getGlobalConfiguration().writeToProto(protoOutputStream, 1146756268051L);
            protoOutputStream.write(1133871366165L, getFocusedStack().mConfigWillChange);
        }
        if (this.mHomeProcess != null && (str2 == null || this.mHomeProcess.pkgList.containsKey(str2))) {
            this.mHomeProcess.writeToProto(protoOutputStream, 1146756268047L);
        }
        if (this.mPreviousProcess != null && (str2 == null || this.mPreviousProcess.pkgList.containsKey(str2))) {
            this.mPreviousProcess.writeToProto(protoOutputStream, 1146756268048L);
            protoOutputStream.write(1112396529681L, this.mPreviousProcessVisibleTime);
        }
        if (this.mHeavyWeightProcess != null && (str2 == null || this.mHeavyWeightProcess.pkgList.containsKey(str2))) {
            this.mHeavyWeightProcess.writeToProto(protoOutputStream, 1146756268050L);
        }
        for (Map.Entry<String, Integer> entry : this.mCompatModePackages.getPackages().entrySet()) {
            String pkg = entry.getKey();
            int mode = entry.getValue().intValue();
            if (str2 == null || str2.equals(pkg)) {
                long compatToken = protoOutputStream.start(2246267895830L);
                protoOutputStream.write(1138166333441L, pkg);
                protoOutputStream.write(1120986464258L, mode);
                protoOutputStream.end(compatToken);
            }
        }
        int NI = this.mUidObservers.getRegisteredCallbackCount();
        for (int i12 = 0; i12 < NI; i12++) {
            UidObserverRegistration reg = (UidObserverRegistration) this.mUidObservers.getRegisteredCallbackCookie(i12);
            if (str2 == null || str2.equals(reg.pkg)) {
                reg.writeToProto(protoOutputStream, 2246267895831L);
            }
        }
        for (int v : this.mDeviceIdleWhitelist) {
            protoOutputStream.write(2220498092056L, v);
        }
        for (int v2 : this.mDeviceIdleTempWhitelist) {
            protoOutputStream.write(2220498092057L, v2);
        }
        if (this.mPendingTempWhitelist.size() > 0) {
            for (int i13 = 0; i13 < this.mPendingTempWhitelist.size(); i13++) {
                this.mPendingTempWhitelist.valueAt(i13).writeToProto(protoOutputStream, 2246267895834L);
            }
        }
        if (str2 == null) {
            long sleepToken = protoOutputStream.start(1146756268059L);
            protoOutputStream.write(1159641169921L, PowerManagerInternal.wakefulnessToProtoEnum(this.mWakefulness));
            Iterator<ActivityManagerInternal.SleepToken> it2 = this.mStackSupervisor.mSleepTokens.iterator();
            while (it2.hasNext()) {
                protoOutputStream.write(2237677961218L, it2.next().toString());
            }
            protoOutputStream.write(1133871366147L, this.mSleeping);
            protoOutputStream.write(1133871366148L, this.mShuttingDown);
            protoOutputStream.write(1133871366149L, this.mTestPssMode);
            protoOutputStream.end(sleepToken);
            if (this.mRunningVoice != null) {
                long vrToken = protoOutputStream.start(1146756268060L);
                protoOutputStream.write(1138166333441L, this.mRunningVoice.toString());
                this.mVoiceWakeLock.writeToProto(protoOutputStream, 1146756268034L);
                protoOutputStream.end(vrToken);
            }
            this.mVrController.writeToProto(protoOutputStream, 1146756268061L);
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str2 == null || str2.equals(this.mDebugApp) || str2.equals(this.mOrigDebugApp))) {
            long debugAppToken = protoOutputStream.start(1146756268062L);
            protoOutputStream.write(1138166333441L, this.mDebugApp);
            protoOutputStream.write(1138166333442L, this.mOrigDebugApp);
            protoOutputStream.write(1133871366147L, this.mDebugTransient);
            protoOutputStream.write(1133871366148L, this.mOrigWaitForDebugger);
            protoOutputStream.end(debugAppToken);
        }
        if (this.mCurAppTimeTracker != null) {
            this.mCurAppTimeTracker.writeToProto(protoOutputStream, 1146756268063L, true);
        }
        if (this.mMemWatchProcesses.getMap().size() > 0) {
            long token = protoOutputStream.start(1146756268064L);
            ArrayMap<String, SparseArray<Pair<Long, String>>> procs2 = this.mMemWatchProcesses.getMap();
            int i14 = 0;
            while (i14 < procs2.size()) {
                String proc = procs2.keyAt(i14);
                SparseArray<Pair<Long, String>> uids = procs2.valueAt(i14);
                long ptoken = protoOutputStream.start(2246267895809L);
                protoOutputStream.write(1138166333441L, proc);
                int j = 0;
                while (j < uids.size()) {
                    long utoken = protoOutputStream.start(2246267895810L);
                    Pair<Long, String> val = uids.valueAt(j);
                    protoOutputStream.write(1120986464257L, uids.keyAt(j));
                    protoOutputStream.write(1138166333442L, DebugUtils.sizeValueToString(((Long) val.first).longValue(), new StringBuilder()));
                    protoOutputStream.write(1138166333443L, (String) val.second);
                    protoOutputStream.end(utoken);
                    j++;
                    NI = NI;
                    procs2 = procs2;
                    NP = NP;
                    proc = proc;
                    uids = uids;
                    String str3 = dumpPackage;
                }
                ArrayMap<String, SparseArray<Pair<Long, String>>> arrayMap = procs2;
                int i15 = NP;
                String str4 = proc;
                SparseArray<Pair<Long, String>> sparseArray = uids;
                protoOutputStream.end(ptoken);
                i14++;
                String str5 = dumpPackage;
            }
            ArrayMap<String, SparseArray<Pair<Long, String>>> arrayMap2 = procs2;
            int i16 = NP;
            long dtoken = protoOutputStream.start(1146756268034L);
            protoOutputStream.write(1138166333441L, this.mMemWatchDumpProcName);
            protoOutputStream.write(1138166333442L, this.mMemWatchDumpFile);
            protoOutputStream.write(1120986464259L, this.mMemWatchDumpPid);
            protoOutputStream.write(1120986464260L, this.mMemWatchDumpUid);
            protoOutputStream.end(dtoken);
            protoOutputStream.end(token);
        } else {
            int i17 = NP;
        }
        if (this.mTrackAllocationApp != null) {
            str = dumpPackage;
            if (str == null || str.equals(this.mTrackAllocationApp)) {
                protoOutputStream.write(1138166333473L, this.mTrackAllocationApp);
            }
        } else {
            str = dumpPackage;
        }
        if (!(this.mProfileApp == null && this.mProfileProc == null && (this.mProfilerInfo == null || (this.mProfilerInfo.profileFile == null && this.mProfilerInfo.profileFd == null))) && (str == null || str.equals(this.mProfileApp))) {
            long token2 = protoOutputStream.start(1146756268066L);
            protoOutputStream.write(1138166333441L, this.mProfileApp);
            this.mProfileProc.writeToProto(protoOutputStream, 1146756268034L);
            if (this.mProfilerInfo != null) {
                this.mProfilerInfo.writeToProto(protoOutputStream, 1146756268035L);
                protoOutputStream.write(1120986464260L, this.mProfileType);
            }
            protoOutputStream.end(token2);
        }
        if (str == null || str.equals(this.mNativeDebuggingApp)) {
            protoOutputStream.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (str == null) {
            protoOutputStream.write(1133871366180L, this.mAlwaysFinishActivities);
            if (this.mController != null) {
                long token3 = protoOutputStream.start(1146756268069L);
                protoOutputStream.write(1138166333441L, this.mController.toString());
                protoOutputStream.write(1133871366146L, this.mControllerIsAMonkey);
                protoOutputStream.end(token3);
            }
            protoOutputStream.write(1120986464294L, numPers2);
            protoOutputStream.write(1133871366183L, this.mProcessesReady);
            protoOutputStream.write(1133871366184L, this.mSystemReady);
            protoOutputStream.write(1133871366185L, this.mBooted);
            protoOutputStream.write(1120986464298L, this.mFactoryTest);
            protoOutputStream.write(1133871366187L, this.mBooting);
            protoOutputStream.write(1133871366188L, this.mCallFinishBooting);
            protoOutputStream.write(1133871366189L, this.mBootAnimationComplete);
            protoOutputStream.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mStackSupervisor.mGoingToSleep.writeToProto(protoOutputStream, 1146756268079L);
            this.mStackSupervisor.mLaunchingActivity.writeToProto(protoOutputStream, 1146756268080L);
            protoOutputStream.write(1120986464305L, this.mAdjSeq);
            protoOutputStream.write(1120986464306L, this.mLruSeq);
            protoOutputStream.write(1120986464307L, this.mNumNonCachedProcs);
            protoOutputStream.write(1120986464309L, this.mNumServiceProcs);
            protoOutputStream.write(1120986464310L, this.mNewNumServiceProcs);
            protoOutputStream.write(1133871366199L, this.mAllowLowerMemLevel);
            protoOutputStream.write(1120986464312L, this.mLastMemoryLevel);
            protoOutputStream.write(1120986464313L, this.mLastNumProcesses);
            long now = SystemClock.uptimeMillis();
            ProtoUtils.toDuration(protoOutputStream, 1146756268090L, this.mLastIdleTime, now);
            protoOutputStream.write(1112396529723L, getLowRamTimeSinceIdle(now));
            return;
        }
    }

    /* access modifiers changed from: package-private */
    public void writeProcessesToGcToProto(ProtoOutputStream proto, long fieldId, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord r = this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                    long token = proto.start(fieldId);
                    r.writeToProto(proto, 1146756268033L);
                    proto.write(1133871366146L, r.reportLowMemory);
                    proto.write(1112396529667L, now);
                    proto.write(1112396529668L, r.lastRequestedGc);
                    proto.write(1112396529669L, r.lastLowMemory);
                    proto.end(token);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public boolean dumpProcessesToGc(PrintWriter pw, boolean needSep, String dumpPackage) {
        if (this.mProcessesToGc.size() > 0) {
            boolean printed = false;
            long now = SystemClock.uptimeMillis();
            for (int i = 0; i < this.mProcessesToGc.size(); i++) {
                ProcessRecord proc = this.mProcessesToGc.get(i);
                if (dumpPackage == null || dumpPackage.equals(proc.info.packageName)) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Processes that are waiting to GC:");
                        printed = true;
                    }
                    pw.print("    Process ");
                    pw.println(proc);
                    pw.print("      lowMem=");
                    pw.print(proc.reportLowMemory);
                    pw.print(", last gced=");
                    pw.print(now - proc.lastRequestedGc);
                    pw.print(" ms ago, last lowMem=");
                    pw.print(now - proc.lastLowMemory);
                    pw.println(" ms ago");
                }
            }
        }
        return needSep;
    }

    /* access modifiers changed from: package-private */
    public void printOomLevel(PrintWriter pw, String name, int adj) {
        pw.print("    ");
        if (adj >= 0) {
            pw.print(' ');
            if (adj < 10) {
                pw.print(' ');
            }
        } else if (adj > -10) {
            pw.print(' ');
        }
        pw.print(adj);
        pw.print(": ");
        pw.print(name);
        pw.print(" (");
        pw.print(stringifySize(this.mProcessList.getMemLevel(adj), 1024));
        pw.println(")");
    }

    /* access modifiers changed from: package-private */
    public boolean dumpOomLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll) {
        boolean needSep = false;
        if (this.mLruProcesses.size() > 0) {
            if (0 != 0) {
                pw.println();
            }
            pw.println("  OOM levels:");
            printOomLevel(pw, "SYSTEM_ADJ", -900);
            printOomLevel(pw, "PERSISTENT_PROC_ADJ", -800);
            printOomLevel(pw, "PERSISTENT_SERVICE_ADJ", -700);
            printOomLevel(pw, "FOREGROUND_APP_ADJ", 0);
            printOomLevel(pw, "VISIBLE_APP_ADJ", 100);
            printOomLevel(pw, "PERCEPTIBLE_APP_ADJ", 200);
            printOomLevel(pw, "BACKUP_APP_ADJ", 300);
            printOomLevel(pw, "HEAVY_WEIGHT_APP_ADJ", 400);
            printOomLevel(pw, "SERVICE_ADJ", 500);
            printOomLevel(pw, "HOME_APP_ADJ", 600);
            printOomLevel(pw, "PREVIOUS_APP_ADJ", 700);
            printOomLevel(pw, "SERVICE_B_ADJ", 800);
            printOomLevel(pw, "CACHED_APP_MIN_ADJ", 900);
            printOomLevel(pw, "CACHED_APP_MAX_ADJ", 906);
            if (1 != 0) {
                pw.println();
            }
            pw.print("  Process OOM control (");
            pw.print(this.mLruProcesses.size());
            pw.print(" total, non-act at ");
            pw.print(this.mLruProcesses.size() - this.mLruProcessActivityStart);
            pw.print(", non-svc at ");
            pw.print(this.mLruProcesses.size() - this.mLruProcessServiceStart);
            pw.println("):");
            dumpProcessOomList(pw, this, this.mLruProcesses, "    ", "Proc", "PERS", true, null);
            needSep = true;
        }
        dumpProcessesToGc(pw, needSep, null);
        pw.println();
        pw.println("  mHomeProcess: " + this.mHomeProcess);
        pw.println("  mPreviousProcess: " + this.mPreviousProcess);
        if (this.mHeavyWeightProcess != null) {
            pw.println("  mHeavyWeightProcess: " + this.mHeavyWeightProcess);
        }
        return true;
    }

    /* access modifiers changed from: protected */
    public boolean dumpProvider(FileDescriptor fd, PrintWriter pw, String name, String[] args, int opti, boolean dumpAll) {
        return this.mProviderMap.dumpProvider(fd, pw, name, args, opti, dumpAll);
    }

    /* access modifiers changed from: protected */
    public boolean dumpProviderProto(FileDescriptor fd, PrintWriter pw, String name, String[] args) {
        return this.mProviderMap.dumpProviderProto(fd, pw, name, args);
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0024, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0025, code lost:
        r7 = new java.lang.String[(r10.length - r11)];
        java.lang.System.arraycopy(r10, r11, r7, 0, r10.length - r11);
        r1 = false;
        r2 = r15.size() - 1;
        r3 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0039, code lost:
        r6 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x003a, code lost:
        if (r6 < 0) goto L_0x00c3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x003c, code lost:
        r5 = r15.get(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0043, code lost:
        if (r1 == false) goto L_0x0048;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0045, code lost:
        r24.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x004a, code lost:
        monitor-enter(r22);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:?, code lost:
        boostPriorityForLockedSection();
        r0 = r5.getTask();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0052, code lost:
        if (r3 == r0) goto L_0x0083;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0054, code lost:
        r3 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:?, code lost:
        r9.print("TASK ");
        r9.print(r3.affinity);
        r9.print(" id=");
        r9.print(r3.taskId);
        r9.print(" userId=");
        r9.println(r3.userId);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0073, code lost:
        if (r28 == false) goto L_0x0083;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0075, code lost:
        r3.dump(r9, "  ");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x007b, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x007c, code lost:
        r19 = r5;
        r20 = r6;
        r21 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0083, code lost:
        r18 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:?, code lost:
        monitor-exit(r22);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x0086, code lost:
        resetPriorityAfterLockedSection();
        r19 = r5;
        dumpActivity("  ", r23, r9, r15.get(r6), r7, r28);
        r2 = r6 - 1;
        r1 = true;
        r3 = r18;
        r7 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x00ab, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00ac, code lost:
        r19 = r5;
        r20 = r6;
        r21 = r7;
        r3 = r18;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00b5, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00b6, code lost:
        r19 = r5;
        r20 = r6;
        r21 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:?, code lost:
        monitor-exit(r22);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00bd, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00c0, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00c1, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00c3, code lost:
        r21 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00c5, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:8:0x001a, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0022, code lost:
        if (r15.size() > 0) goto L_0x0025;
     */
    public boolean dumpActivity(FileDescriptor fd, PrintWriter pw, String name, String[] args, int opti, boolean dumpAll, boolean dumpVisibleStacksOnly, boolean dumpFocusedStackOnly) {
        PrintWriter printWriter = pw;
        String[] strArr = args;
        int i = opti;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                try {
                    ArrayList<ActivityRecord> activities = this.mStackSupervisor.getDumpActivitiesLocked(name, dumpVisibleStacksOnly, dumpFocusedStackOnly);
                } catch (Throwable th) {
                    th = th;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
                String str = name;
                boolean z = dumpVisibleStacksOnly;
                boolean z2 = dumpFocusedStackOnly;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private void dumpActivity(String prefix, FileDescriptor fd, PrintWriter pw, ActivityRecord r, String[] args, boolean dumpAll) {
        TransferPipe tp;
        String innerPrefix = prefix + "  ";
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                pw.print(prefix);
                pw.print("ACTIVITY ");
                pw.print(r.shortComponentName);
                pw.print(" ");
                pw.print(Integer.toHexString(System.identityHashCode(r)));
                pw.print(" pid=");
                if (r.app != null) {
                    pw.println(r.app.pid);
                } else {
                    pw.println("(not running)");
                }
                if (dumpAll) {
                    r.dump(pw, innerPrefix);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (r.app != null && r.app.thread != null) {
            pw.flush();
            try {
                tp = new TransferPipe();
                r.app.thread.dumpActivity(tp.getWriteFd(), r.appToken, innerPrefix, args);
                tp.go(fd);
                tp.kill();
            } catch (IOException e) {
                pw.println(innerPrefix + "Failure while dumping the activity: " + e);
            } catch (RemoteException e2) {
                pw.println(innerPrefix + "Got a RemoteException while dumping the activity");
            } catch (Throwable th2) {
                tp.kill();
                throw th2;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void writeBroadcastsToProtoLocked(ProtoOutputStream proto) {
        ProtoOutputStream protoOutputStream = proto;
        if (this.mRegisteredReceivers.size() > 0) {
            for (ReceiverList r : this.mRegisteredReceivers.values()) {
                r.writeToProto(protoOutputStream, 2246267895809L);
            }
        }
        this.mReceiverResolver.writeToProto(protoOutputStream, 1146756268034L);
        int user = 0;
        for (BroadcastQueue q : this.mBroadcastQueues) {
            q.writeToProto(protoOutputStream, 2246267895811L);
        }
        while (true) {
            int user2 = user;
            long token = 1138166333441L;
            if (user2 < this.mStickyBroadcasts.size()) {
                long token2 = protoOutputStream.start(2246267895812L);
                protoOutputStream.write(1120986464257L, this.mStickyBroadcasts.keyAt(user2));
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user2).entrySet()) {
                    long actionToken = protoOutputStream.start(2246267895810L);
                    protoOutputStream.write(token, ent.getKey());
                    Iterator it = ent.getValue().iterator();
                    while (it.hasNext()) {
                        ((Intent) it.next()).writeToProto(protoOutputStream, 2246267895810L, false, true, true, false);
                        actionToken = actionToken;
                        token2 = token2;
                        it = it;
                        ent = ent;
                    }
                    Map.Entry<String, ArrayList<Intent>> entry = ent;
                    long j = token2;
                    protoOutputStream.end(actionToken);
                    token = 1138166333441L;
                }
                protoOutputStream.end(token2);
                user = user2 + 1;
            } else {
                long handlerToken = protoOutputStream.start(1146756268037L);
                protoOutputStream.write(1138166333441L, this.mHandler.toString());
                this.mHandler.getLooper().writeToProto(protoOutputStream, 1146756268034L);
                protoOutputStream.end(handlerToken);
                return;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        boolean dumpAll2;
        boolean onlyHistory;
        boolean dumpAll3;
        PrintWriter printWriter = pw;
        String[] strArr = args;
        int i = opti;
        boolean needSep = false;
        boolean printedAnything = false;
        String str = dumpPackage;
        if ("history".equals(str)) {
            if (i >= strArr.length || !"-s".equals(strArr[i])) {
                dumpAll3 = dumpAll;
            } else {
                dumpAll3 = false;
            }
            str = null;
            onlyHistory = true;
            dumpAll2 = dumpAll3;
        } else {
            dumpAll2 = dumpAll;
            onlyHistory = false;
        }
        String dumpPackage2 = str;
        printWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        if (!onlyHistory && dumpAll2) {
            if (this.mRegisteredReceivers.size() > 0) {
                boolean printed = false;
                for (ReceiverList r : this.mRegisteredReceivers.values()) {
                    if (dumpPackage2 == null || (r.app != null && dumpPackage2.equals(r.app.info.packageName))) {
                        if (!printed) {
                            printWriter.println("  Registered Receivers:");
                            needSep = true;
                            printed = true;
                            printedAnything = true;
                        }
                        printWriter.print("  * ");
                        printWriter.println(r);
                        r.dump(printWriter, "    ");
                    }
                }
            }
            boolean needSep2 = needSep;
            boolean printedAnything2 = printedAnything;
            if (this.mReceiverResolver.dump(printWriter, needSep2 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", dumpPackage2, false, false)) {
                needSep = true;
                printedAnything = true;
            } else {
                needSep = needSep2;
                printedAnything = printedAnything2;
            }
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        int length = broadcastQueueArr.length;
        int i2 = 0;
        boolean needSep3 = needSep;
        boolean printedAnything3 = printedAnything;
        int i3 = 0;
        while (i3 < length) {
            needSep3 = broadcastQueueArr[i3].dumpLocked(fd, printWriter, strArr, i, dumpAll2, dumpPackage2, needSep3);
            printedAnything3 |= needSep3;
            i3++;
            i2 = i2;
            length = length;
            strArr = args;
        }
        int i4 = i2;
        if (!onlyHistory && this.mStickyBroadcasts != null && dumpPackage2 == null) {
            int needSep4 = true;
            int user = i4;
            while (user < this.mStickyBroadcasts.size()) {
                if (needSep4) {
                    pw.println();
                }
                needSep4 = true;
                printedAnything3 = true;
                printWriter.print("  Sticky broadcasts for user ");
                printWriter.print(this.mStickyBroadcasts.keyAt(user));
                printWriter.println(":");
                StringBuilder sb = new StringBuilder(128);
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    printWriter.print("  * Sticky action ");
                    printWriter.print(ent.getKey());
                    if (dumpAll2) {
                        printWriter.println(":");
                        ArrayList<Intent> intents = ent.getValue();
                        int N = intents.size();
                        int i5 = i4;
                        while (i5 < N) {
                            sb.setLength(i4);
                            sb.append("    Intent: ");
                            intents.get(i5).toShortString(sb, true, true, false, false);
                            printWriter.println(sb.toString());
                            Bundle bundle = intents.get(i5).getExtras();
                            if (bundle != null) {
                                printWriter.print("      ");
                                printWriter.println(bundle.toString());
                            }
                            i5++;
                            i4 = 0;
                        }
                    } else {
                        printWriter.println(BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                    }
                    i4 = 0;
                }
                user++;
                i4 = 0;
            }
            int user2 = needSep4;
        }
        if (!onlyHistory && dumpAll2) {
            pw.println();
            for (BroadcastQueue queue : this.mBroadcastQueues) {
                printWriter.println("  mBroadcastsScheduled [" + queue.mQueueName + "]=" + queue.mBroadcastsScheduled);
            }
            printWriter.println("  mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(printWriter), "    ");
            printWriter.println("  mUiHandler:");
            this.mUiHandler.dump(new PrintWriterPrinter(printWriter), "    ");
            printedAnything3 = true;
        }
        if (!printedAnything3) {
            printWriter.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            pw.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
            long now = SystemClock.elapsedRealtime();
            if (this.mLastBroadcastStats != null) {
                pw.print("  Last stats (from ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, now, pw);
                pw.print(" to ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, now, pw);
                pw.print(", ");
                TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, pw);
                pw.println(" uptime):");
                if (!this.mLastBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                    pw.println("    (nothing)");
                }
                pw.println();
            }
            pw.print("  Current stats (from ");
            TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, now, pw);
            pw.print(" to now, ");
            TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, pw);
            pw.println(" uptime):");
            if (!this.mCurBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                pw.println("    (nothing)");
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean fullCheckin, String dumpPackage) {
        if (this.mCurBroadcastStats != null) {
            if (this.mLastBroadcastStats != null) {
                this.mLastBroadcastStats.dumpCheckinStats(pw, dumpPackage);
                if (fullCheckin) {
                    this.mLastBroadcastStats = null;
                    return;
                }
            }
            this.mCurBroadcastStats.dumpCheckinStats(pw, dumpPackage);
            if (fullCheckin) {
                this.mCurBroadcastStats = null;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpProvidersLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        new ItemMatcher().build(args, opti);
        pw.println("ACTIVITY MANAGER CONTENT PROVIDERS (dumpsys activity providers)");
        boolean needSep = this.mProviderMap.dumpProvidersLocked(pw, dumpAll, dumpPackage);
        boolean printedAnything = false | needSep;
        if (this.mLaunchingProviders.size() > 0) {
            boolean printed = false;
            for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
                ContentProviderRecord r = this.mLaunchingProviders.get(i);
                if (dumpPackage == null || dumpPackage.equals(r.name.getPackageName())) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        pw.println("  Launching content providers:");
                        printed = true;
                        printedAnything = true;
                    }
                    pw.print("  Launching #");
                    pw.print(i);
                    pw.print(": ");
                    pw.println(r);
                }
            }
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void dumpPermissionsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        boolean needSep = false;
        boolean printedAnything = false;
        printWriter.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        if (this.mGrantedUriPermissions.size() > 0) {
            boolean printed = false;
            int dumpUid = -2;
            int uid = 0;
            if (str != null) {
                try {
                    dumpUid = this.mContext.getPackageManager().getPackageUidAsUser(str, DumpState.DUMP_CHANGES, 0);
                } catch (PackageManager.NameNotFoundException e) {
                    dumpUid = -1;
                }
            }
            while (true) {
                int i = uid;
                if (i >= this.mGrantedUriPermissions.size()) {
                    break;
                }
                int uid2 = this.mGrantedUriPermissions.keyAt(i);
                if (dumpUid < -1 || UserHandle.getAppId(uid2) == dumpUid) {
                    ArrayMap<GrantUri, UriPermission> perms = this.mGrantedUriPermissions.valueAt(i);
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        needSep = true;
                        printWriter.println("  Granted Uri Permissions:");
                        printed = true;
                        printedAnything = true;
                    }
                    printWriter.print("  * UID ");
                    printWriter.print(uid2);
                    printWriter.println(" holds:");
                    for (UriPermission perm : perms.values()) {
                        printWriter.print("    ");
                        printWriter.println(perm);
                        if (dumpAll) {
                            perm.dump(printWriter, "      ");
                        }
                    }
                }
                uid = i + 1;
            }
        }
        if (!printedAnything) {
            printWriter.println("  (nothing)");
        }
    }

    /* access modifiers changed from: package-private */
    public void dumpPendingIntentsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        PrintWriter printWriter = pw;
        String str = dumpPackage;
        boolean printed = false;
        printWriter.println("ACTIVITY MANAGER PENDING INTENTS (dumpsys activity intents)");
        if (this.mIntentSenderRecords.size() > 0) {
            ArrayMap<String, ArrayList<PendingIntentRecord>> byPackage = new ArrayMap<>();
            ArrayList<WeakReference<PendingIntentRecord>> weakRefs = new ArrayList<>();
            Iterator<WeakReference<PendingIntentRecord>> it = this.mIntentSenderRecords.values().iterator();
            while (it.hasNext()) {
                WeakReference<PendingIntentRecord> ref = it.next();
                PendingIntentRecord rec = ref != null ? (PendingIntentRecord) ref.get() : null;
                if (rec == null) {
                    weakRefs.add(ref);
                } else if (str == null || str.equals(rec.key.packageName)) {
                    ArrayList<PendingIntentRecord> list = byPackage.get(rec.key.packageName);
                    if (list == null) {
                        list = new ArrayList<>();
                        byPackage.put(rec.key.packageName, list);
                    }
                    list.add(rec);
                }
            }
            boolean printed2 = false;
            for (int i = 0; i < byPackage.size(); i++) {
                ArrayList<PendingIntentRecord> intents = byPackage.valueAt(i);
                printed2 = true;
                printWriter.print("  * ");
                printWriter.print(byPackage.keyAt(i));
                printWriter.print(": ");
                printWriter.print(intents.size());
                printWriter.println(" items");
                for (int j = 0; j < intents.size(); j++) {
                    printWriter.print("    #");
                    printWriter.print(j);
                    printWriter.print(": ");
                    printWriter.println(intents.get(j));
                    if (dumpAll) {
                        intents.get(j).dump(printWriter, "      ");
                    }
                }
            }
            if (weakRefs.size() > 0) {
                printed = true;
                printWriter.println("  * WEAK REFS:");
                for (int i2 = 0; i2 < weakRefs.size(); i2++) {
                    printWriter.print("    #");
                    printWriter.print(i2);
                    printWriter.print(": ");
                    printWriter.println(weakRefs.get(i2));
                }
            } else {
                printed = printed2;
            }
        }
        if (!printed) {
            printWriter.println("  (nothing)");
        }
    }

    private static final int dumpProcessList(PrintWriter pw, ActivityManagerService service, List list, String prefix, String normalLabel, String persistentLabel, String dumpPackage) {
        int numPers = 0;
        for (int i = list.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) list.get(i);
            if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                Object[] objArr = new Object[4];
                objArr[0] = prefix;
                objArr[1] = r.persistent ? persistentLabel : normalLabel;
                objArr[2] = Integer.valueOf(i);
                objArr[3] = r.toString();
                pw.println(String.format("%s%s #%2d: %s", objArr));
                if (r.persistent) {
                    numPers++;
                }
            }
        }
        return numPers;
    }

    private static final ArrayList<Pair<ProcessRecord, Integer>> sortProcessOomList(List<ProcessRecord> origList, String dumpPackage) {
        ArrayList<Pair<ProcessRecord, Integer>> list = new ArrayList<>(origList.size());
        for (int i = 0; i < origList.size(); i++) {
            ProcessRecord r = origList.get(i);
            if (dumpPackage == null || r.pkgList.containsKey(dumpPackage)) {
                list.add(new Pair(origList.get(i), Integer.valueOf(i)));
            }
        }
        Collections.sort(list, new Comparator<Pair<ProcessRecord, Integer>>() {
            public int compare(Pair<ProcessRecord, Integer> object1, Pair<ProcessRecord, Integer> object2) {
                int i = 1;
                if (((ProcessRecord) object1.first).setAdj != ((ProcessRecord) object2.first).setAdj) {
                    if (((ProcessRecord) object1.first).setAdj > ((ProcessRecord) object2.first).setAdj) {
                        i = -1;
                    }
                    return i;
                } else if (((ProcessRecord) object1.first).setProcState != ((ProcessRecord) object2.first).setProcState) {
                    if (((ProcessRecord) object1.first).setProcState > ((ProcessRecord) object2.first).setProcState) {
                        i = -1;
                    }
                    return i;
                } else if (((Integer) object1.second).intValue() == ((Integer) object2.second).intValue()) {
                    return 0;
                } else {
                    if (((Integer) object1.second).intValue() > ((Integer) object2.second).intValue()) {
                        i = -1;
                    }
                    return i;
                }
            }
        });
        return list;
    }

    private static final boolean writeProcessOomListToProto(ProtoOutputStream proto, long fieldId, ActivityManagerService service, List<ProcessRecord> origList, boolean inclDetails, String dumpPackage) {
        long curUptime;
        ArrayList<Pair<ProcessRecord, Integer>> list;
        ProtoOutputStream protoOutputStream = proto;
        ArrayList<Pair<ProcessRecord, Integer>> list2 = sortProcessOomList(origList, dumpPackage);
        if (list2.isEmpty()) {
            return false;
        }
        long curUptime2 = SystemClock.uptimeMillis();
        boolean z = true;
        int i = list2.size() - 1;
        while (i >= 0) {
            ProcessRecord r = (ProcessRecord) list2.get(i).first;
            long token = proto.start(fieldId);
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj);
            protoOutputStream.write(1133871366145L, r.persistent);
            protoOutputStream.write(1120986464258L, (origList.size() - (z ? 1 : 0)) - ((Integer) list2.get(i).second).intValue());
            protoOutputStream.write(1138166333443L, oomAdj);
            int schedGroup = -1;
            int i2 = r.setSchedGroup;
            if (i2 != 0) {
                switch (i2) {
                    case 2:
                        schedGroup = 1;
                        break;
                    case 3:
                        schedGroup = 2;
                        break;
                    case 4:
                        schedGroup = 3;
                        break;
                }
            } else {
                schedGroup = 0;
            }
            if (schedGroup != -1) {
                protoOutputStream.write(1159641169924L, schedGroup);
            }
            if (r.foregroundActivities) {
                protoOutputStream.write(1133871366149L, z);
            } else if (r.foregroundServices) {
                protoOutputStream.write(1133871366150L, z);
            }
            protoOutputStream.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r.curProcState));
            ProcessRecord r2 = r;
            protoOutputStream.write(1120986464264L, r2.trimMemoryLevel);
            r2.writeToProto(protoOutputStream, 1146756268041L);
            protoOutputStream.write(1138166333450L, r2.adjType);
            if (!(r2.adjSource == null && r2.adjTarget == null)) {
                if (r2.adjTarget instanceof ComponentName) {
                    ((ComponentName) r2.adjTarget).writeToProto(protoOutputStream, 1146756268043L);
                } else if (r2.adjTarget != null) {
                    protoOutputStream.write(1138166333452L, r2.adjTarget.toString());
                }
                if (r2.adjSource instanceof ProcessRecord) {
                    ((ProcessRecord) r2.adjSource).writeToProto(protoOutputStream, 1146756268045L);
                } else if (r2.adjSource != null) {
                    protoOutputStream.write(1138166333454L, r2.adjSource.toString());
                }
            }
            if (inclDetails) {
                long detailToken = protoOutputStream.start(1146756268047L);
                protoOutputStream.write(1120986464257L, r2.maxAdj);
                protoOutputStream.write(1120986464258L, r2.curRawAdj);
                protoOutputStream.write(1120986464259L, r2.setRawAdj);
                protoOutputStream.write(1120986464260L, r2.curAdj);
                protoOutputStream.write(1120986464261L, r2.setAdj);
                protoOutputStream.write(1159641169927L, ProcessList.makeProcStateProtoEnum(r2.curProcState));
                protoOutputStream.write(1159641169928L, ProcessList.makeProcStateProtoEnum(r2.setProcState));
                protoOutputStream.write(1138166333449L, DebugUtils.sizeValueToString(r2.lastPss * 1024, new StringBuilder()));
                protoOutputStream.write(1138166333450L, DebugUtils.sizeValueToString(r2.lastSwapPss * 1024, new StringBuilder()));
                protoOutputStream.write(1138166333451L, DebugUtils.sizeValueToString(r2.lastCachedPss * 1024, new StringBuilder()));
                protoOutputStream.write(1133871366156L, r2.cached);
                protoOutputStream.write(1133871366157L, r2.empty);
                protoOutputStream.write(1133871366158L, r2.hasAboveClient);
                if (r2.setProcState < 9 || r2.lastCpuTime == 0) {
                    list = list2;
                    curUptime = curUptime2;
                    String str = oomAdj;
                    int i3 = schedGroup;
                } else {
                    long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
                    list = list2;
                    curUptime = curUptime2;
                    long timeUsed = r2.curCpuTime - r2.lastCpuTime;
                    long cpuTimeToken = protoOutputStream.start(1146756268047L);
                    String str2 = oomAdj;
                    int i4 = schedGroup;
                    protoOutputStream.write(1112396529665L, uptimeSince);
                    protoOutputStream.write(1112396529666L, timeUsed);
                    long j = timeUsed;
                    protoOutputStream.write(1108101562371L, (100.0d * ((double) timeUsed)) / ((double) uptimeSince));
                    protoOutputStream.end(cpuTimeToken);
                }
                protoOutputStream.end(detailToken);
            } else {
                list = list2;
                curUptime = curUptime2;
                String str3 = oomAdj;
                int i5 = schedGroup;
            }
            protoOutputStream.end(token);
            i--;
            list2 = list;
            curUptime2 = curUptime;
            List<ProcessRecord> list3 = origList;
            String str4 = dumpPackage;
            z = true;
        }
        long j2 = curUptime2;
        return true;
    }

    private static final boolean dumpProcessOomList(PrintWriter pw, ActivityManagerService service, List<ProcessRecord> origList, String prefix, String normalLabel, String persistentLabel, boolean inclDetails, String dumpPackage) {
        char schedGroup;
        char foreground;
        char c;
        long curUptime;
        ArrayList<Pair<ProcessRecord, Integer>> list;
        PrintWriter printWriter = pw;
        String str = prefix;
        ArrayList<Pair<ProcessRecord, Integer>> list2 = sortProcessOomList(origList, dumpPackage);
        if (list2.isEmpty()) {
            return false;
        }
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince = curUptime2 - service.mLastPowerCheckUptime;
        int i = list2.size() - 1;
        while (i >= 0) {
            ProcessRecord r = (ProcessRecord) list2.get(i).first;
            String oomAdj = ProcessList.makeOomAdjString(r.setAdj);
            switch (r.setSchedGroup) {
                case 0:
                    schedGroup = 'B';
                    break;
                case 1:
                    schedGroup = 'R';
                    break;
                case 2:
                    schedGroup = 'F';
                    break;
                case 3:
                    schedGroup = 'T';
                    break;
                default:
                    schedGroup = '?';
                    break;
            }
            if (r.foregroundActivities) {
                foreground = 'A';
            } else if (r.foregroundServices != 0) {
                foreground = 'S';
            } else {
                foreground = ' ';
            }
            String procState = ProcessList.makeProcStateString(r.curProcState);
            printWriter.print(str);
            printWriter.print(r.persistent ? persistentLabel : normalLabel);
            printWriter.print(" #");
            int num = (origList.size() - 1) - ((Integer) list2.get(i).second).intValue();
            if (num < 10) {
                printWriter.print(' ');
            }
            printWriter.print(num);
            printWriter.print(": ");
            printWriter.print(oomAdj);
            printWriter.print(' ');
            printWriter.print(schedGroup);
            printWriter.print('/');
            printWriter.print(foreground);
            printWriter.print('/');
            printWriter.print(procState);
            printWriter.print(" trm:");
            int i2 = num;
            if (r.trimMemoryLevel < 10) {
                c = ' ';
                printWriter.print(' ');
            } else {
                c = ' ';
            }
            printWriter.print(r.trimMemoryLevel);
            printWriter.print(c);
            printWriter.print(r.toShortString());
            printWriter.print(" (");
            printWriter.print(r.adjType);
            printWriter.println(')');
            if (!(r.adjSource == null && r.adjTarget == null)) {
                printWriter.print(str);
                printWriter.print("    ");
                if (r.adjTarget instanceof ComponentName) {
                    printWriter.print(((ComponentName) r.adjTarget).flattenToShortString());
                } else if (r.adjTarget != null) {
                    printWriter.print(r.adjTarget.toString());
                } else {
                    printWriter.print("{null}");
                }
                printWriter.print("<=");
                if (r.adjSource instanceof ProcessRecord) {
                    printWriter.print("Proc{");
                    printWriter.print(((ProcessRecord) r.adjSource).toShortString());
                    printWriter.println("}");
                } else if (r.adjSource != null) {
                    printWriter.println(r.adjSource.toString());
                } else {
                    printWriter.println("{null}");
                }
            }
            if (inclDetails) {
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("oom: max=");
                printWriter.print(r.maxAdj);
                printWriter.print(" curRaw=");
                printWriter.print(r.curRawAdj);
                printWriter.print(" setRaw=");
                printWriter.print(r.setRawAdj);
                printWriter.print(" cur=");
                printWriter.print(r.curAdj);
                printWriter.print(" set=");
                printWriter.println(r.setAdj);
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("state: cur=");
                printWriter.print(ProcessList.makeProcStateString(r.curProcState));
                printWriter.print(" set=");
                printWriter.print(ProcessList.makeProcStateString(r.setProcState));
                printWriter.print(" lastPss=");
                DebugUtils.printSizeValue(printWriter, r.lastPss * 1024);
                printWriter.print(" lastSwapPss=");
                DebugUtils.printSizeValue(printWriter, r.lastSwapPss * 1024);
                printWriter.print(" lastCachedPss=");
                DebugUtils.printSizeValue(printWriter, r.lastCachedPss * 1024);
                pw.println();
                printWriter.print(str);
                printWriter.print("    ");
                printWriter.print("cached=");
                printWriter.print(r.cached);
                printWriter.print(" empty=");
                printWriter.print(r.empty);
                printWriter.print(" hasAboveClient=");
                printWriter.println(r.hasAboveClient);
                if (r.setProcState >= 9 && r.lastCpuTime != 0) {
                    list = list2;
                    curUptime = curUptime2;
                    long timeUsed = r.curCpuTime - r.lastCpuTime;
                    printWriter.print(str);
                    printWriter.print("    ");
                    printWriter.print("run cpu over ");
                    TimeUtils.formatDuration(uptimeSince, printWriter);
                    printWriter.print(" used ");
                    TimeUtils.formatDuration(timeUsed, printWriter);
                    printWriter.print(" (");
                    printWriter.print((SINGLE_DISPATCH_THRESHOLD_MS * timeUsed) / uptimeSince);
                    printWriter.println("%)");
                    i--;
                    list2 = list;
                    curUptime2 = curUptime;
                    List<ProcessRecord> list3 = origList;
                    String str2 = dumpPackage;
                }
            }
            list = list2;
            curUptime = curUptime2;
            i--;
            list2 = list;
            curUptime2 = curUptime;
            List<ProcessRecord> list32 = origList;
            String str22 = dumpPackage;
        }
        long j = curUptime2;
        return true;
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x007a, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x007d, code lost:
        return r0;
     */
    public ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs, String[] args) {
        ArrayList<ProcessRecord> procs;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (args == null || args.length <= start || args[start].charAt(0) == '-') {
                    procs = new ArrayList<>(this.mLruProcesses);
                } else {
                    procs = new ArrayList<>();
                    int pid = -1;
                    try {
                        pid = Integer.parseInt(args[start]);
                    } catch (NumberFormatException e) {
                    }
                    for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                        ProcessRecord proc = this.mLruProcesses.get(i);
                        if (proc.pid > 0 && proc.pid == pid) {
                            procs.add(proc);
                        } else if (allPkgs && proc.pkgList != null && proc.pkgList.containsKey(args[start])) {
                            procs.add(proc);
                        } else if (proc.processName.equals(args[start])) {
                            procs.add(proc);
                        }
                    }
                    if (procs.size() <= 0) {
                        resetPriorityAfterLockedSection();
                        return null;
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void dumpGraphicsHardwareUsage(FileDescriptor fd, PrintWriter pw, String[] args) {
        TransferPipe tp;
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        pw.println("Applications Graphics Acceleration Info:");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
        for (int i = procs.size() + -1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            if (r.thread != null) {
                pw.println("\n** Graphics info for pid " + r.pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    tp = new TransferPipe();
                    r.thread.dumpGfxInfo(tp.getWriteFd(), args);
                    tp.go(fd);
                    tp.kill();
                } catch (IOException e) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                } catch (RemoteException e2) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (Throwable th) {
                    tp.kill();
                    throw th;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void dumpDbInfo(FileDescriptor fd, PrintWriter pw, String[] args) {
        TransferPipe tp;
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        pw.println("Applications Database Info:");
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            if (r.thread != null) {
                pw.println("\n** Database info for pid " + r.pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    tp = new TransferPipe();
                    r.thread.dumpDbInfo(tp.getWriteFd(), args);
                    tp.go(fd);
                    tp.kill();
                } catch (IOException e) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                } catch (RemoteException e2) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (Throwable th) {
                    tp.kill();
                    throw th;
                }
            }
        }
    }

    private static void sortMemItems(List<MemItem> items) {
        Collections.sort(items, new Comparator<MemItem>() {
            public int compare(MemItem lhs, MemItem rhs) {
                if (lhs.pss < rhs.pss) {
                    return 1;
                }
                if (lhs.pss > rhs.pss) {
                    return -1;
                }
                return 0;
            }
        });
    }

    static final void dumpMemItems(PrintWriter pw, String prefix, String tag, ArrayList<MemItem> items, boolean sort, boolean isCompact, boolean dumpSwapPss) {
        int i;
        PrintWriter printWriter = pw;
        String str = prefix;
        String str2 = tag;
        if (sort && !isCompact) {
            sortMemItems(items);
        }
        char c = 0;
        int i2 = 0;
        while (true) {
            int i3 = i2;
            if (i3 < items.size()) {
                MemItem mi = items.get(i3);
                if (isCompact) {
                    i = i3;
                    if (mi.isProc) {
                        printWriter.print("proc,");
                        printWriter.print(str2);
                        printWriter.print(",");
                        printWriter.print(mi.shortLabel);
                        printWriter.print(",");
                        printWriter.print(mi.id);
                        printWriter.print(",");
                        printWriter.print(mi.pss);
                        printWriter.print(",");
                        printWriter.print(dumpSwapPss ? Long.valueOf(mi.swapPss) : "N/A");
                        printWriter.println(mi.hasActivities ? ",a" : ",e");
                    } else {
                        printWriter.print(str2);
                        printWriter.print(",");
                        printWriter.print(mi.shortLabel);
                        printWriter.print(",");
                        printWriter.print(mi.pss);
                        printWriter.print(",");
                        printWriter.println(dumpSwapPss ? Long.valueOf(mi.swapPss) : "N/A");
                    }
                } else if (dumpSwapPss) {
                    Object[] objArr = new Object[4];
                    objArr[c] = str;
                    i = i3;
                    objArr[1] = stringifyKBSize(mi.pss);
                    objArr[2] = mi.label;
                    objArr[3] = stringifyKBSize(mi.swapPss);
                    printWriter.printf("%s%s: %-60s (%s in swap)\n", objArr);
                    c = 0;
                } else {
                    i = i3;
                    c = 0;
                    printWriter.printf("%s%s: %s\n", new Object[]{str, stringifyKBSize(mi.pss), mi.label});
                }
                if (mi.subitems != null) {
                    MemItem memItem = mi;
                    dumpMemItems(printWriter, str + "    ", mi.shortLabel, mi.subitems, true, isCompact, dumpSwapPss);
                }
                i2 = i + 1;
            } else {
                ArrayList<MemItem> arrayList = items;
                return;
            }
        }
    }

    static final void dumpMemItems(ProtoOutputStream proto, long fieldId, String tag, ArrayList<MemItem> items, boolean sort, boolean dumpSwapPss) {
        ProtoOutputStream protoOutputStream = proto;
        if (sort) {
            sortMemItems(items);
        }
        int i = 0;
        while (true) {
            int i2 = i;
            if (i2 < items.size()) {
                MemItem mi = items.get(i2);
                long token = proto.start(fieldId);
                protoOutputStream.write(1138166333441L, tag);
                protoOutputStream.write(1138166333442L, mi.shortLabel);
                protoOutputStream.write(1133871366148L, mi.isProc);
                protoOutputStream.write(1120986464259L, mi.id);
                protoOutputStream.write(1133871366149L, mi.hasActivities);
                protoOutputStream.write(1112396529670L, mi.pss);
                if (dumpSwapPss) {
                    protoOutputStream.write(1112396529671L, mi.swapPss);
                }
                if (mi.subitems != null) {
                    dumpMemItems(protoOutputStream, 2246267895816L, mi.shortLabel, mi.subitems, true, dumpSwapPss);
                }
                protoOutputStream.end(token);
                i = i2 + 1;
            } else {
                String str = tag;
                ArrayList<MemItem> arrayList = items;
                return;
            }
        }
    }

    static final void appendMemBucket(StringBuilder out, long memKB, String label, boolean stackLike) {
        int start;
        int start2 = label.lastIndexOf(46);
        if (start2 >= 0) {
            start = start2 + 1;
        } else {
            start = 0;
        }
        int end = label.length();
        for (int i = 0; i < DUMP_MEM_BUCKETS.length; i++) {
            if (DUMP_MEM_BUCKETS[i] >= memKB) {
                out.append(DUMP_MEM_BUCKETS[i] / 1024);
                out.append(stackLike ? "MB." : "MB ");
                out.append(label, start, end);
                return;
            }
        }
        out.append(memKB / 1024);
        out.append(stackLike ? "MB." : "MB ");
        out.append(label, start, end);
    }

    private final void dumpApplicationMemoryUsageHeader(PrintWriter pw, long uptime, long realtime, boolean isCheckinRequest, boolean isCompact) {
        if (isCompact) {
            pw.print("version,");
            pw.println(1);
        }
        if (isCheckinRequest || isCompact) {
            pw.print("time,");
            pw.print(uptime);
            pw.print(",");
            pw.println(realtime);
            return;
        }
        pw.println("Applications Memory Usage (in Kilobytes):");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
    }

    private final long[] getKsmInfo() {
        int[] SINGLE_LONG_FORMAT = {8224};
        long[] longTmp = new long[1];
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", SINGLE_LONG_FORMAT, null, longTmp, null);
        return new long[]{(longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024, (longTmp[0] * 4096) / 1024};
    }

    private static String stringifySize(long size, int order) {
        Locale locale = Locale.US;
        if (order == 1) {
            return String.format(locale, "%,13d", new Object[]{Long.valueOf(size)});
        } else if (order == 1024) {
            return String.format(locale, "%,9dK", new Object[]{Long.valueOf(size / 1024)});
        } else if (order == 1048576) {
            return String.format(locale, "%,5dM", new Object[]{Long.valueOf((size / 1024) / 1024)});
        } else if (order == 1073741824) {
            return String.format(locale, "%,1dG", new Object[]{Long.valueOf(((size / 1024) / 1024) / 1024)});
        } else {
            throw new IllegalArgumentException("Invalid size order");
        }
    }

    private static String stringifyKBSize(long size) {
        return stringifySize(1024 * size, 1024);
    }

    /* access modifiers changed from: package-private */
    public final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, String[] args, boolean brief, PrintWriter categoryPw, boolean asProto) {
        int opti;
        PrintWriter printWriter = pw;
        String[] strArr = args;
        MemoryUsageDumpOptions opts = new MemoryUsageDumpOptions();
        opts.dumpDetails = false;
        opts.dumpFullDetails = false;
        opts.dumpDalvik = false;
        opts.dumpSummaryOnly = false;
        opts.dumpUnreachable = false;
        opts.oomOnly = false;
        opts.isCompact = false;
        opts.localOnly = false;
        opts.packages = false;
        opts.isCheckinRequest = false;
        opts.dumpSwapPss = false;
        opts.dumpProto = asProto;
        int opti2 = 0;
        while (true) {
            opti = opti2;
            if (opti >= strArr.length) {
                break;
            }
            String opt = strArr[opti];
            if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
                break;
            }
            int opti3 = opti + 1;
            if ("-a".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpFullDetails = true;
                opts.dumpDalvik = true;
                opts.dumpSwapPss = true;
            } else if ("-d".equals(opt)) {
                opts.dumpDalvik = true;
            } else if ("-c".equals(opt)) {
                opts.isCompact = true;
            } else if ("-s".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpSummaryOnly = true;
            } else if ("-S".equals(opt)) {
                opts.dumpSwapPss = true;
            } else if ("--unreachable".equals(opt)) {
                opts.dumpUnreachable = true;
            } else if ("--oom".equals(opt)) {
                opts.oomOnly = true;
            } else if ("--local".equals(opt)) {
                opts.localOnly = true;
            } else if ("--package".equals(opt)) {
                opts.packages = true;
            } else if ("--checkin".equals(opt)) {
                opts.isCheckinRequest = true;
            } else if (PriorityDump.PROTO_ARG.equals(opt)) {
                opts.dumpProto = true;
            } else if ("-h".equals(opt)) {
                printWriter.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                printWriter.println("  -a: include all available information for each process.");
                printWriter.println("  -d: include dalvik details.");
                printWriter.println("  -c: dump in a compact machine-parseable representation.");
                printWriter.println("  -s: dump only summary of application memory usage.");
                printWriter.println("  -S: dump also SwapPss.");
                printWriter.println("  --oom: only show processes organized by oom adj.");
                printWriter.println("  --local: only collect details locally, don't call process.");
                printWriter.println("  --package: interpret process arg as package, dumping all");
                printWriter.println("             processes that have loaded that package.");
                printWriter.println("  --checkin: dump data for a checkin");
                printWriter.println("  --proto: dump data to proto");
                printWriter.println("If [process] is specified it can be the name or ");
                printWriter.println("pid of a specific process to dump.");
                return;
            } else {
                printWriter.println("Unknown argument: " + opt + "; use -h for help");
            }
            opti2 = opti3;
        }
        String[] innerArgs = new String[(strArr.length - opti)];
        System.arraycopy(strArr, opti, innerArgs, 0, strArr.length - opti);
        ArrayList<ProcessRecord> procs = collectProcesses(printWriter, opti, opts.packages, strArr);
        if (opts.dumpProto) {
            dumpApplicationMemoryUsage(fd, opts, innerArgs, brief, procs);
        } else {
            dumpApplicationMemoryUsage(fd, printWriter, prefix, opts, innerArgs, brief, procs, categoryPw);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:174:0x042c, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:175:0x0431, code lost:
        if (r5.isCheckinRequest != false) goto L_0x0545;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:176:0x0433, code lost:
        if (r82 == null) goto L_0x0545;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:177:0x0435, code lost:
        r53 = r53 + r13;
        r55 = r55 + r1;
        r10 = new java.lang.StringBuilder();
        r10.append(r3.processName);
        r10.append(" (pid ");
        r15 = r75;
        r10.append(r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x044f, code lost:
        if (r39 == false) goto L_0x0458;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x0451, code lost:
        r16 = " / activities)";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:180:0x0453, code lost:
        r83 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x0458, code lost:
        r16 = ")";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x045b, code lost:
        r10.append(r16);
        r16 = new com.android.server.am.ActivityManagerService.MemItem(r10.toString(), r3.processName, r13, r1, r15, r39);
        r8.add(r16);
        r7 = r80;
        r7.put(r15, r16);
        r6 = r82;
        r85 = r11;
        r45 = r45 + ((long) r6.nativePss);
        r47 = r47 + ((long) r6.nativeSwappedOutPss);
        r42 = r42 + ((long) r6.dalvikPss);
        r35 = r35 + ((long) r6.dalvikSwappedOutPss);
        r10 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x0495, code lost:
        r11 = r81;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:184:0x0498, code lost:
        if (r10 >= r11.length) goto L_0x04c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:185:0x049a, code lost:
        r11[r10] = r11[r10] + ((long) r6.getOtherPss(17 + r10));
        r34[r10] = r34[r10] + ((long) r6.getOtherSwappedOutPss(17 + r10));
        r10 = r10 + 1;
        r81 = r11;
        r3 = r3;
        r13 = r13;
        r15 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:186:0x04c8, code lost:
        r87 = r3;
        r88 = r13;
        r90 = r15;
        r49 = r49 + ((long) r6.otherPss);
        r51 = r51 + ((long) r6.otherSwappedOutPss);
        r3 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:188:0x04dc, code lost:
        if (r3 >= 17) goto L_0x04f9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:189:0x04de, code lost:
        r12 = (long) r6.getOtherPss(r3);
        r78[r3] = r78[r3] + r12;
        r49 = r49 - r12;
        r12 = (long) r6.getOtherSwappedOutPss(r3);
        r72[r3] = r72[r3] + r12;
        r51 = r51 - r12;
        r3 = r3 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:191:0x04fb, code lost:
        if (r4 < 900) goto L_0x0504;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:192:0x04fd, code lost:
        r57 = r57 + r88;
        r59 = r59 + r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:193:0x0504, code lost:
        r12 = r57;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:0x0506, code lost:
        r3 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:195:0x0508, code lost:
        r14 = r77;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:0x050b, code lost:
        if (r3 >= r14.length) goto L_0x0542;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x050d, code lost:
        r15 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x0510, code lost:
        if (r3 == (r14.length - 1)) goto L_0x0526;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:200:0x0516, code lost:
        if (r4 < DUMP_MEM_OOM_ADJ[r3]) goto L_0x0521;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x051e, code lost:
        if (r4 >= DUMP_MEM_OOM_ADJ[r3 + 1]) goto L_0x0521;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x0521, code lost:
        r3 = r3 + 1;
        r77 = r14;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x0526, code lost:
        r14[r3] = r14[r3] + r88;
        r67[r3] = r67[r3] + r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:205:0x0533, code lost:
        if (r61[r3] != null) goto L_0x053c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:206:0x0535, code lost:
        r61[r3] = new java.util.ArrayList<>();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:207:0x053c, code lost:
        r61[r3].add(r16);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:208:0x0542, code lost:
        r15 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:209:0x0543, code lost:
        r2 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:210:0x0545, code lost:
        r14 = r77;
        r7 = r80;
        r11 = r81;
        r15 = true;
        r2 = r82;
        r57 = r57;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:211:0x0553, code lost:
        r10 = r71;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:229:0x05c9, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:313:0x084f, code lost:
        r8 = new java.util.ArrayList<>();
        r16 = new com.android.server.am.ActivityManagerService.MemItem("Native", "Native", r45, r47, -1);
        r8.add(r16);
        r16 = new com.android.server.am.ActivityManagerService.MemItem("Dalvik", "Dalvik", r42, r35, -2);
        r8.add(r16);
        r16 = new com.android.server.am.ActivityManagerService.MemItem("Unknown", "Unknown", r49, r51, -3);
        r8.add(r16);
        r0 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:315:0x0896, code lost:
        if (r0 >= 17) goto L_0x08b2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:316:0x0898, code lost:
        r1 = android.os.Debug.MemoryInfo.getOtherLabel(r0);
        r15 = new com.android.server.am.ActivityManagerService.MemItem(r1, r1, r78[r0], r72[r0], r0);
        r8.add(r15);
        r0 = r0 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:317:0x08b2, code lost:
        r6 = r100;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:318:0x08b5, code lost:
        if (r6.length <= 0) goto L_0x091b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:319:0x08b7, code lost:
        r0 = r8.iterator();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0079, code lost:
        if (r6.size() <= 0) goto L_0x0144;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:321:0x08bf, code lost:
        if (r0.hasNext() == false) goto L_0x091b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:322:0x08c1, code lost:
        r1 = r0.next();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:323:0x08cc, code lost:
        if (r1.id != -2) goto L_0x08d1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:324:0x08ce, code lost:
        r2 = 0;
        r3 = 3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:326:0x08d3, code lost:
        if (r1.id != 0) goto L_0x08d9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:327:0x08d5, code lost:
        r2 = 4;
        r3 = 8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:329:0x08dd, code lost:
        if (r1.id != 10) goto L_0x08e4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x007b, code lost:
        r36 = r3;
        r37 = r5;
        r11 = r6;
        r13 = null;
        r9.dumpApplicationMemoryUsageHeader(r15, r30, r32, r14.isCheckinRequest, r14.isCompact);
        r0 = null;
        r1 = r11.size() - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:330:0x08df, code lost:
        r2 = 9;
        r3 = 11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:332:0x08e8, code lost:
        if (r1.id != 12) goto L_0x08bb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:333:0x08ea, code lost:
        r2 = 12;
        r3 = 13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:334:0x08ee, code lost:
        r1.subitems = new java.util.ArrayList<>();
        r4 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:335:0x08f6, code lost:
        if (r4 > r3) goto L_0x0918;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:336:0x08f8, code lost:
        r10 = android.os.Debug.MemoryInfo.getOtherLabel(17 + r4);
        r11 = r1.subitems;
        r15 = new com.android.server.am.ActivityManagerService.MemItem(r10, r10, r6[r4], r34[r4], r4);
        r11.add(r15);
        r4 = r4 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:338:0x091b, code lost:
        r10 = new java.util.ArrayList<>();
        r0 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0098, code lost:
        if (r1 < 0) goto L_0x012e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:340:0x0924, code lost:
        if (r0 >= r14.length) goto L_0x0956;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:342:0x092a, code lost:
        if (r14[r0] == 0) goto L_0x0953;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:344:0x092e, code lost:
        if (r5.isCompact == false) goto L_0x0937;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:345:0x0930, code lost:
        r1 = DUMP_MEM_OOM_COMPACT_LABEL[r0];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:346:0x0934, code lost:
        r16 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:347:0x0937, code lost:
        r1 = DUMP_MEM_OOM_LABEL[r0];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:348:0x093c, code lost:
        r15 = new com.android.server.am.ActivityManagerService.MemItem(r16, r16, r14[r0], r67[r0], DUMP_MEM_OOM_ADJ[r0]);
        r15.subitems = r61[r0];
        r10.add(r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:349:0x0953, code lost:
        r0 = r0 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x009a, code lost:
        r2 = r11.get(r1);
        r3 = r2.pid;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:351:0x0958, code lost:
        if (r5.dumpSwapPss == 0) goto L_0x0962;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:352:0x095a, code lost:
        if (r101 == false) goto L_0x0962;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:354:0x095e, code lost:
        if (r55 == 0) goto L_0x0962;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:355:0x0960, code lost:
        r0 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:356:0x0962, code lost:
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:357:0x0964, code lost:
        r5.dumpSwapPss = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:358:0x0966, code lost:
        if (r111 != false) goto L_0x09a0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00a4, code lost:
        if (r14.isCheckinRequest != false) goto L_0x00cd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:360:0x096a, code lost:
        if (r5.oomOnly != false) goto L_0x09a0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:362:0x096e, code lost:
        if (r5.isCompact != false) goto L_0x09a0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:363:0x0970, code lost:
        r11 = r107;
        r107.println();
        r11.println("Total PSS by process:");
        r13 = r67;
        r15 = r61;
        r16 = r72;
        r17 = r78;
        r9 = r5;
        r18 = r6;
        r19 = r93;
        dumpMemItems(r11, "  ", "proc", r99, true, r5.isCompact, r5.dumpSwapPss);
        r107.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:364:0x09a0, code lost:
        r18 = r6;
        r15 = r61;
        r13 = r67;
        r16 = r72;
        r17 = r78;
        r19 = r93;
        r11 = r107;
        r9 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:366:0x09b3, code lost:
        if (r9.isCompact != false) goto L_0x09ba;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:367:0x09b5, code lost:
        r11.println("Total PSS by OOM adjustment:");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:368:0x09ba, code lost:
        dumpMemItems(r11, "  ", "oom", r10, false, r9.isCompact, r9.dumpSwapPss);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:369:0x09c9, code lost:
        if (r111 != false) goto L_0x09ef;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:371:0x09cd, code lost:
        if (r9.oomOnly != false) goto L_0x09ef;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:372:0x09cf, code lost:
        if (r113 == null) goto L_0x09d4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:373:0x09d1, code lost:
        r0 = r113;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:374:0x09d4, code lost:
        r0 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:376:0x09d7, code lost:
        if (r9.isCompact != false) goto L_0x09e1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:377:0x09d9, code lost:
        r0.println();
        r0.println("Total PSS by category:");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:378:0x09e1, code lost:
        dumpMemItems(r0, "  ", "cat", r8, true, r9.isCompact, r9.dumpSwapPss);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00a8, code lost:
        if (r14.dumpDetails == false) goto L_0x00cd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:380:0x09f1, code lost:
        if (r9.isCompact != false) goto L_0x09f6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:381:0x09f3, code lost:
        r107.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:382:0x09f6, code lost:
        r1 = new com.android.internal.util.MemInfoReader();
        r1.readMemInfo();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:383:0x0a03, code lost:
        if (r25 <= 0) goto L_0x0a44;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:384:0x0a05, code lost:
        r5 = r105;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:385:0x0a07, code lost:
        monitor-enter(r105);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:387:?, code lost:
        boostPriorityForLockedSection();
        r6 = r1.getRealCachedSizeKb();
        r20 = r1.getFreeSizeKb();
        r22 = r1.getZramTotalSizeKb();
        r39 = r1.getKernelUsedSizeKb();
        com.android.server.am.EventLogTags.writeAmMeminfo(r6 * 1024, r20 * 1024, r22 * 1024, r39 * 1024, r25 * 1024);
        r5.mProcessStats.addSysMemUsageLocked(r6, r20, r22, r39, r25);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:388:0x0a39, code lost:
        monitor-exit(r105);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:389:0x0a3a, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00aa, code lost:
        r15.println("\n** MEMINFO in pid " + r3 + " [" + r2.baseName + "] **");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:390:0x0a3e, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:393:0x0a40, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:394:0x0a43, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:395:0x0a44, code lost:
        r5 = r105;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:396:0x0a46, code lost:
        if (r111 != false) goto L_0x0b06;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:398:0x0a4a, code lost:
        if (r9.isCompact != false) goto L_0x0ad8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:399:0x0a4c, code lost:
        r11.print("Total RAM: ");
        r11.print(stringifyKBSize(r1.getTotalSizeKb()));
        r11.print(" (status ");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00cd, code lost:
        if (r0 != null) goto L_0x00d5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:400:0x0a63, code lost:
        switch(r5.mLastMemoryLevel) {
            case 0: goto L_0x0a85;
            case 1: goto L_0x0a7e;
            case 2: goto L_0x0a77;
            case 3: goto L_0x0a71;
            default: goto L_0x0a66;
        };
     */
    /* JADX WARNING: Code restructure failed: missing block: B:401:0x0a66, code lost:
        r11.print(r5.mLastMemoryLevel);
        r11.println(")");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:402:0x0a71, code lost:
        r11.println("critical)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:403:0x0a77, code lost:
        r11.println("low)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:404:0x0a7e, code lost:
        r11.println("moderate)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:405:0x0a85, code lost:
        r11.println("normal)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:406:0x0a8c, code lost:
        r11.print(" Free RAM: ");
        r11.print(stringifyKBSize((r91 + r1.getCachedSizeKb()) + r1.getFreeSizeKb()));
        r11.print(" (");
        r6 = r91;
        r11.print(stringifyKBSize(r6));
        r11.print(" cached pss + ");
        r11.print(stringifyKBSize(r1.getCachedSizeKb()));
        r11.print(" cached kernel + ");
        r11.print(stringifyKBSize(r1.getFreeSizeKb()));
        r11.println(" free)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:407:0x0ad8, code lost:
        r6 = r91;
        r11.print("ram,");
        r11.print(r1.getTotalSizeKb());
        r11.print(",");
        r11.print((r6 + r1.getCachedSizeKb()) + r1.getFreeSizeKb());
        r11.print(",");
        r11.println(r53 - r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:408:0x0b06, code lost:
        r6 = r91;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:409:0x0b08, code lost:
        r2 = ((((r1.getTotalSizeKb() - (r53 - r55)) - r1.getFreeSizeKb()) - r1.getRealCachedSizeKb()) - r1.getKernelUsedSizeKb()) - r1.getZramTotalSizeKb();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00cf, code lost:
        r0 = new android.os.Debug.MemoryInfo();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:410:0x0b2a, code lost:
        if (r9.isCompact != false) goto L_0x0b72;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:411:0x0b2c, code lost:
        r11.print(" Used RAM: ");
        r103 = r13;
        r11.print(stringifyKBSize((r53 - r6) + r1.getKernelUsedSizeKb()));
        r11.print(" (");
        r11.print(stringifyKBSize(r53 - r6));
        r11.print(" used pss + ");
        r11.print(stringifyKBSize(r1.getKernelUsedSizeKb()));
        r11.print(" kernel)\n");
        r11.print(" Lost RAM: ");
        r11.println(stringifyKBSize(r2));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:412:0x0b72, code lost:
        r103 = r13;
        r11.print("lostram,");
        r11.println(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:413:0x0b7d, code lost:
        if (r111 != false) goto L_0x0d71;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:415:0x0b85, code lost:
        if (r1.getZramTotalSizeKb() == 0) goto L_0x0bec;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:417:0x0b89, code lost:
        if (r9.isCompact != false) goto L_0x0bc7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:418:0x0b8b, code lost:
        r11.print("     ZRAM: ");
        r11.print(stringifyKBSize(r1.getZramTotalSizeKb()));
        r11.print(" physical used for ");
        r11.print(stringifyKBSize(r1.getSwapTotalSizeKb() - r1.getSwapFreeSizeKb()));
        r11.print(" in swap (");
        r11.print(stringifyKBSize(r1.getSwapTotalSizeKb()));
        r11.println(" total swap)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:419:0x0bc7, code lost:
        r11.print("zram,");
        r11.print(r1.getZramTotalSizeKb());
        r11.print(",");
        r11.print(r1.getSwapTotalSizeKb());
        r11.print(",");
        r11.println(r1.getSwapFreeSizeKb());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:420:0x0bec, code lost:
        r0 = getKsmInfo();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:421:0x0bf5, code lost:
        if (r9.isCompact != false) goto L_0x0caa;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:423:0x0bfc, code lost:
        if (r0[1] != 0) goto L_0x0c10;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:425:0x0c02, code lost:
        if (r0[0] != 0) goto L_0x0c10;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:427:0x0c08, code lost:
        if (r0[2] != 0) goto L_0x0c10;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:429:0x0c0e, code lost:
        if (r0[3] == 0) goto L_0x0c4f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00d7, code lost:
        if (r14.dumpDetails != false) goto L_0x00ed;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:430:0x0c10, code lost:
        r11.print("      KSM: ");
        r11.print(stringifyKBSize(r0[1]));
        r11.print(" saved from shared ");
        r11.print(stringifyKBSize(r0[0]));
        r11.print("           ");
        r11.print(stringifyKBSize(r0[2]));
        r11.print(" unshared; ");
        r11.print(stringifyKBSize(r0[3]));
        r11.println(" volatile");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:431:0x0c4f, code lost:
        r11.print("   Tuning: ");
        r11.print(android.app.ActivityManager.staticGetMemoryClass());
        r11.print(" (large ");
        r11.print(android.app.ActivityManager.staticGetLargeMemoryClass());
        r11.print("), oom ");
        r11.print(stringifySize(r5.mProcessList.getMemLevel(906), 1024));
        r11.print(", restore limit ");
        r11.print(stringifyKBSize(r5.mProcessList.getCachedRestoreThresholdKb()));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:432:0x0c93, code lost:
        if (android.app.ActivityManager.isLowRamDeviceStatic() == false) goto L_0x0c9a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:433:0x0c95, code lost:
        r11.print(" (low-ram)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:435:0x0c9e, code lost:
        if (android.app.ActivityManager.isHighEndGfx() == false) goto L_0x0ca5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:436:0x0ca0, code lost:
        r11.print(" (high-end-gfx)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:437:0x0ca5, code lost:
        r107.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:438:0x0caa, code lost:
        r11.print("ksm,");
        r11.print(r0[1]);
        r11.print(",");
        r11.print(r0[0]);
        r11.print(",");
        r11.print(r0[2]);
        r11.print(",");
        r11.println(r0[3]);
        r11.print("tuning,");
        r11.print(android.app.ActivityManager.staticGetMemoryClass());
        r11.print(',');
        r11.print(android.app.ActivityManager.staticGetLargeMemoryClass());
        r11.print(',');
        r11.print(r5.mProcessList.getMemLevel(906) / 1024);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:439:0x0d04, code lost:
        if (android.app.ActivityManager.isLowRamDeviceStatic() == false) goto L_0x0d0b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00d9, code lost:
        if (r111 != false) goto L_0x00e0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:440:0x0d06, code lost:
        r11.print(",low-ram");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:442:0x0d0f, code lost:
        if (android.app.ActivityManager.isHighEndGfx() == false) goto L_0x0d16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:443:0x0d11, code lost:
        r11.print(",high-end-gfx");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:444:0x0d16, code lost:
        r107.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00dd, code lost:
        if (r14.oomOnly != false) goto L_0x00e0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x00e0, code lost:
        r0.dalvikPss = (int) android.os.Debug.getPss(r3, r10, r13);
        r0.dalvikPrivateDirty = (int) r10[0];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x00ed, code lost:
        android.os.Debug.getMemoryInfo(r3, r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x00f0, code lost:
        r4 = r14.isCheckinRequest;
        r5 = r14.dumpFullDetails;
        r6 = r14.dumpDalvik;
        r7 = r14.dumpSummaryOnly;
        r40 = r10;
        r34 = r11;
        r12 = r4;
        r4 = r13;
        r13 = r5;
        r5 = r14;
        r14 = r6;
        r6 = r15;
        android.app.ActivityThread.dumpMemInfoTable(r15, r0, r12, r13, r14, r7, r3, r2.baseName, 0, 0, 0, 0, 0, 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x011c, code lost:
        if (r5.isCheckinRequest == false) goto L_0x0121;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x011e, code lost:
        r107.println();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:51:0x0121, code lost:
        r1 = r1 - 1;
        r12 = r112;
        r13 = r4;
        r14 = r5;
        r15 = r6;
        r11 = r34;
        r10 = r40;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x012e, code lost:
        r40 = r10;
        r34 = r11;
        r5 = r14;
        r6 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0134, code lost:
        return;
     */
    /* JADX WARNING: Removed duplicated region for block: B:116:0x02c7  */
    /* JADX WARNING: Removed duplicated region for block: B:149:0x036a  */
    /* JADX WARNING: Removed duplicated region for block: B:154:0x038d  */
    /* JADX WARNING: Removed duplicated region for block: B:155:0x03a5  */
    /* JADX WARNING: Removed duplicated region for block: B:158:0x03d2 A[SYNTHETIC, Splitter:B:158:0x03d2] */
    /* JADX WARNING: Removed duplicated region for block: B:277:0x06df A[Catch:{ all -> 0x0794 }] */
    /* JADX WARNING: Removed duplicated region for block: B:289:0x0742 A[Catch:{ all -> 0x0710, all -> 0x077c }, LOOP:11: B:287:0x073e->B:289:0x0742, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x076c A[Catch:{ all -> 0x0710, all -> 0x077c }] */
    private final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, MemoryUsageDumpOptions opts, String[] innerArgs, boolean brief, ArrayList<ProcessRecord> procs, PrintWriter categoryPw) {
        long[] dalvikSubitemPss;
        long[] jArr;
        boolean hasSwapPss;
        long[] dalvikSubitemPss2;
        ArrayList<MemItem> procMems;
        int N;
        long[] tmpLong;
        SparseArray<MemItem> procMemsMap;
        Debug.MemoryInfo mi;
        long[] tmpLong2;
        int j;
        int j2;
        IApplicationThread thread;
        int pid;
        long[] miscPss;
        long[] tmpLong3;
        long[] miscSwapPss;
        long[] oomSwapPss;
        int i;
        boolean z;
        long[] oomPss;
        long[] dalvikSubitemPss3;
        MemoryUsageDumpOptions memoryUsageDumpOptions;
        long[] oomPss2;
        int pid2;
        long endTime;
        int reportType;
        int i2;
        long startTime;
        long[] tmpLong4;
        boolean hasSwapPss2;
        boolean hasSwapPss3;
        int oomAdj;
        long[] oomPss3;
        int pid3;
        PrintWriter printWriter;
        ActivityManagerService activityManagerService = this;
        PrintWriter printWriter2 = pw;
        MemoryUsageDumpOptions memoryUsageDumpOptions2 = opts;
        String[] strArr = innerArgs;
        ArrayList<ProcessRecord> arrayList = procs;
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        long[] tmpLong5 = new long[1];
        if (arrayList == null) {
            String proc = "N/A";
            if (strArr.length > 0) {
                String proc2 = strArr[0];
                if (proc2.charAt(0) != '-') {
                    ArrayList<ProcessCpuTracker.Stats> nativeProcs = new ArrayList<>();
                    updateCpuStatsNow();
                    int findPid = -1;
                    try {
                        findPid = Integer.parseInt(strArr[0]);
                    } catch (NumberFormatException e) {
                    }
                    int findPid2 = findPid;
                    synchronized (activityManagerService.mProcessCpuTracker) {
                        try {
                            int N2 = activityManagerService.mProcessCpuTracker.countStats();
                            int i3 = 0;
                            while (i3 < N2) {
                                try {
                                    ProcessCpuTracker.Stats st = activityManagerService.mProcessCpuTracker.getStats(i3);
                                    if (st.pid == findPid2 || (st.baseName != null && st.baseName.equals(strArr[0]))) {
                                        nativeProcs.add(st);
                                    }
                                    i3++;
                                } catch (Throwable th) {
                                    th = th;
                                    int i4 = findPid2;
                                    String str = proc2;
                                    ArrayList<ProcessCpuTracker.Stats> arrayList2 = nativeProcs;
                                    long[] jArr2 = tmpLong5;
                                    MemoryUsageDumpOptions memoryUsageDumpOptions3 = memoryUsageDumpOptions2;
                                    PrintWriter printWriter3 = printWriter2;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th2) {
                                            th = th2;
                                        }
                                    }
                                    throw th;
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            int i5 = findPid2;
                            String str2 = proc2;
                            ArrayList<ProcessCpuTracker.Stats> arrayList3 = nativeProcs;
                            long[] jArr3 = tmpLong5;
                            MemoryUsageDumpOptions memoryUsageDumpOptions4 = memoryUsageDumpOptions2;
                            PrintWriter printWriter4 = printWriter2;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    }
                }
                String proc3 = proc2;
                long[] jArr4 = tmpLong5;
                MemoryUsageDumpOptions memoryUsageDumpOptions5 = memoryUsageDumpOptions2;
                printWriter = printWriter2;
                proc = proc3;
            } else {
                MemoryUsageDumpOptions memoryUsageDumpOptions6 = memoryUsageDumpOptions2;
                printWriter = printWriter2;
            }
            printWriter.println("No process found for: " + proc);
            return;
        }
        SparseArray<MemItem> procMemsMap2 = tmpLong5;
        MemoryUsageDumpOptions memoryUsageDumpOptions7 = memoryUsageDumpOptions2;
        PrintWriter printWriter5 = printWriter2;
        if (!brief && !memoryUsageDumpOptions7.oomOnly && (procs.size() == 1 || memoryUsageDumpOptions7.isCheckinRequest || memoryUsageDumpOptions7.packages)) {
            memoryUsageDumpOptions7.dumpDetails = true;
        }
        int pid4 = memoryUsageDumpOptions7;
        PrintWriter printWriter6 = printWriter5;
        activityManagerService.dumpApplicationMemoryUsageHeader(printWriter5, uptime, realtime, memoryUsageDumpOptions7.isCheckinRequest, memoryUsageDumpOptions7.isCompact);
        ArrayList<MemItem> procMems2 = new ArrayList<>();
        SparseArray<MemItem> procMemsMap3 = new SparseArray<>();
        if (pid4.dumpDalvik) {
            dalvikSubitemPss = new long[14];
        } else {
            dalvikSubitemPss = EmptyArray.LONG;
        }
        if (pid4.dumpDalvik) {
            jArr = new long[14];
        } else {
            jArr = EmptyArray.LONG;
        }
        long[] dalvikSubitemSwapPss = jArr;
        long dalvikPss = 0;
        long myTotalUss = new long[17];
        long myTotalRss = new long[17];
        long[] dalvikSubitemPss4 = new long[DUMP_MEM_OOM_LABEL.length];
        long nativePss = 0;
        int oomSwapPss2 = new long[DUMP_MEM_OOM_LABEL.length];
        long nativeSwapPss = 0;
        ArrayList<MemItem>[] oomProcs = new ArrayList[DUMP_MEM_OOM_LABEL.length];
        Debug.MemoryInfo mi2 = null;
        boolean z2 = true;
        int i6 = procs.size() - 1;
        long dalvikSwapPss = 0;
        long otherPss = 0;
        long otherSwapPss = 0;
        long totalPss = 0;
        long totalSwapPss = 0;
        long dalvikSubitemPss5 = 0;
        long cachedSwapPss = 0;
        boolean hasSwapPss4 = false;
        while (true) {
            int oomPss4 = i6;
            if (oomPss4 < 0) {
                break;
            }
            ArrayList<MemItem>[] oomProcs2 = oomProcs;
            ProcessRecord r = procs.get(oomPss4);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    thread = r.thread;
                    pid = r.pid;
                    oomSwapPss2 = r.getSetAdjWithServices();
                    boolean hasActivities = r.activities.size() > 0 ? z2 : false;
                } finally {
                    th = th;
                    int i7 = oomSwapPss2;
                    ProcessRecord processRecord = r;
                    long j3 = myTotalRss;
                    long j4 = myTotalUss;
                    long[] jArr5 = dalvikSubitemPss;
                    long j5 = dalvikSubitemPss4;
                    int i8 = pid4;
                    int i9 = oomPss4;
                    SparseArray<MemItem> sparseArray = procMemsMap2;
                    long[] jArr6 = dalvikSubitemPss4;
                    Debug.MemoryInfo memoryInfo = mi2;
                    while (true) {
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (thread != null) {
                if (pid4.isCheckinRequest || !pid4.dumpDetails) {
                    oomPss2 = dalvikSubitemPss4;
                    pid2 = pid;
                } else {
                    StringBuilder sb = new StringBuilder();
                    sb.append("\n** MEMINFO in pid ");
                    pid2 = pid;
                    sb.append(pid2);
                    oomPss2 = dalvikSubitemPss4;
                    sb.append(" [");
                    sb.append(r.processName);
                    sb.append("] **");
                    printWriter6.println(sb.toString());
                }
                if (mi2 == null) {
                    mi2 = new Debug.MemoryInfo();
                }
                if (pid4.dumpDetails) {
                    oomSwapPss = oomSwapPss2;
                    i2 = oomPss4;
                    tmpLong4 = procMemsMap2;
                } else if (brief || pid4.oomOnly) {
                    long startTime2 = SystemClock.currentThreadTimeMillis();
                    reportType = 3;
                    oomSwapPss = oomSwapPss2;
                    i2 = oomPss4;
                    tmpLong4 = procMemsMap2;
                    mi2.dalvikPss = (int) Debug.getPss(pid2, tmpLong4, null);
                    endTime = SystemClock.currentThreadTimeMillis();
                    mi2.dalvikPrivateDirty = (int) tmpLong4[0];
                    hasSwapPss2 = hasSwapPss4;
                    startTime = startTime2;
                    if (pid4.dumpDetails == 0) {
                        if (pid4.localOnly) {
                            hasSwapPss3 = hasSwapPss2;
                            miscSwapPss = myTotalRss;
                            pid3 = pid2;
                            miscPss = myTotalUss;
                            tmpLong3 = tmpLong4;
                            oomPss3 = oomPss2;
                            memoryUsageDumpOptions = pid4;
                            i = i2;
                            ActivityThread.dumpMemInfoTable(printWriter6, mi2, pid4.isCheckinRequest, pid4.dumpFullDetails, pid4.dumpDalvik, pid4.dumpSummaryOnly, pid3, r.processName, 0, 0, 0, 0, 0, 0);
                            if (memoryUsageDumpOptions.isCheckinRequest) {
                                pw.println();
                            }
                            FileDescriptor fileDescriptor = fd;
                        } else {
                            hasSwapPss3 = hasSwapPss2;
                            miscSwapPss = myTotalRss;
                            miscPss = myTotalUss;
                            pid3 = pid2;
                            tmpLong3 = tmpLong4;
                            memoryUsageDumpOptions = pid4;
                            oomPss3 = oomPss2;
                            i = i2;
                            pw.flush();
                            try {
                                TransferPipe tp = new TransferPipe();
                                try {
                                    thread.dumpMemInfo(tp.getWriteFd(), mi2, memoryUsageDumpOptions.isCheckinRequest, memoryUsageDumpOptions.dumpFullDetails, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, memoryUsageDumpOptions.dumpUnreachable, innerArgs);
                                    try {
                                        tp.go(fd, memoryUsageDumpOptions.dumpUnreachable ? 30000 : 5000);
                                        try {
                                            tp.kill();
                                        } catch (IOException e2) {
                                            e = e2;
                                            PrintWriter printWriter7 = pw;
                                            if (!memoryUsageDumpOptions.isCheckinRequest) {
                                                printWriter7.println("Got IoException! " + e);
                                                pw.flush();
                                            }
                                            dalvikSubitemPss = (long) mi2.getTotalPss();
                                            myTotalUss = (long) mi2.getTotalUss();
                                            dalvikSubitemPss4 = dalvikSubitemPss;
                                            procMemsMap2 = procMemsMap3;
                                            myTotalRss = (long) mi2.getTotalRss();
                                            mi2 = mi2;
                                            long myTotalSwapPss = (long) mi2.getTotalSwappedOutPss();
                                            synchronized (this) {
                                            }
                                        } catch (RemoteException e3) {
                                            e = e3;
                                            if (!memoryUsageDumpOptions.isCheckinRequest) {
                                                pw.println("Got RemoteException! " + e);
                                                pw.flush();
                                                dalvikSubitemPss = (long) mi2.getTotalPss();
                                                myTotalUss = (long) mi2.getTotalUss();
                                                dalvikSubitemPss4 = dalvikSubitemPss;
                                                procMemsMap2 = procMemsMap3;
                                                myTotalRss = (long) mi2.getTotalRss();
                                                mi2 = mi2;
                                                long myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                                                synchronized (this) {
                                                }
                                            }
                                            PrintWriter printWriter8 = pw;
                                            dalvikSubitemPss = (long) mi2.getTotalPss();
                                            myTotalUss = (long) mi2.getTotalUss();
                                            dalvikSubitemPss4 = dalvikSubitemPss;
                                            procMemsMap2 = procMemsMap3;
                                            myTotalRss = (long) mi2.getTotalRss();
                                            mi2 = mi2;
                                            long myTotalSwapPss22 = (long) mi2.getTotalSwappedOutPss();
                                            synchronized (this) {
                                            }
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                        tp.kill();
                                        throw th;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    FileDescriptor fileDescriptor2 = fd;
                                    tp.kill();
                                    throw th;
                                }
                            } catch (IOException e4) {
                                e = e4;
                                FileDescriptor fileDescriptor3 = fd;
                                PrintWriter printWriter72 = pw;
                                if (!memoryUsageDumpOptions.isCheckinRequest) {
                                }
                                dalvikSubitemPss = (long) mi2.getTotalPss();
                                myTotalUss = (long) mi2.getTotalUss();
                                dalvikSubitemPss4 = dalvikSubitemPss;
                                procMemsMap2 = procMemsMap3;
                                myTotalRss = (long) mi2.getTotalRss();
                                mi2 = mi2;
                                long myTotalSwapPss222 = (long) mi2.getTotalSwappedOutPss();
                                synchronized (this) {
                                }
                            } catch (RemoteException e5) {
                                e = e5;
                                FileDescriptor fileDescriptor4 = fd;
                                if (!memoryUsageDumpOptions.isCheckinRequest) {
                                }
                                PrintWriter printWriter82 = pw;
                                dalvikSubitemPss = (long) mi2.getTotalPss();
                                myTotalUss = (long) mi2.getTotalUss();
                                dalvikSubitemPss4 = dalvikSubitemPss;
                                procMemsMap2 = procMemsMap3;
                                myTotalRss = (long) mi2.getTotalRss();
                                mi2 = mi2;
                                long myTotalSwapPss2222 = (long) mi2.getTotalSwappedOutPss();
                                synchronized (this) {
                                }
                            }
                        }
                        PrintWriter printWriter822 = pw;
                    } else {
                        hasSwapPss3 = hasSwapPss2;
                        miscSwapPss = myTotalRss;
                        miscPss = myTotalUss;
                        pid3 = pid2;
                        tmpLong3 = tmpLong4;
                        memoryUsageDumpOptions = pid4;
                        PrintWriter printWriter9 = printWriter6;
                        oomPss3 = oomPss2;
                        i = i2;
                        FileDescriptor fileDescriptor5 = fd;
                    }
                    dalvikSubitemPss = (long) mi2.getTotalPss();
                    myTotalUss = (long) mi2.getTotalUss();
                    dalvikSubitemPss4 = dalvikSubitemPss;
                    procMemsMap2 = procMemsMap3;
                    myTotalRss = (long) mi2.getTotalRss();
                    mi2 = mi2;
                    long myTotalSwapPss22222 = (long) mi2.getTotalSwappedOutPss();
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            if (r.thread != null) {
                                try {
                                    oomAdj = oomSwapPss2;
                                    if (oomAdj == r.getSetAdjWithServices()) {
                                        try {
                                            r.baseProcessTracker.addPss(dalvikSubitemPss, myTotalUss, myTotalRss, true, reportType, endTime - startTime, r.pkgList);
                                        } catch (Throwable th6) {
                                            th = th6;
                                            ProcessRecord processRecord2 = r;
                                            long j6 = myTotalRss;
                                            long j7 = myTotalUss;
                                            long j8 = dalvikSubitemPss;
                                            long j9 = dalvikSubitemPss4;
                                            int i10 = pid4;
                                            long[] jArr7 = oomPss4;
                                            SparseArray<MemItem> sparseArray2 = procMemsMap2;
                                            long[] jArr8 = dalvikSubitemPss4;
                                            Debug.MemoryInfo memoryInfo2 = mi2;
                                        }
                                    }
                                } catch (Throwable th7) {
                                    th = th7;
                                    while (true) {
                                        try {
                                            break;
                                        } catch (Throwable th8) {
                                            th = th8;
                                        }
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } else {
                                oomAdj = oomSwapPss2;
                            }
                            try {
                            } catch (Throwable th9) {
                                th = th9;
                                ProcessRecord processRecord3 = r;
                                long j10 = myTotalRss;
                                long j11 = myTotalUss;
                                long j12 = dalvikSubitemPss;
                                long j13 = dalvikSubitemPss4;
                                int i11 = pid4;
                                long[] jArr9 = oomPss4;
                                SparseArray<MemItem> sparseArray3 = procMemsMap2;
                                long[] jArr10 = dalvikSubitemPss4;
                                Debug.MemoryInfo memoryInfo3 = mi2;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th10) {
                            th = th10;
                            ProcessRecord processRecord4 = r;
                            long j14 = myTotalRss;
                            long j15 = myTotalUss;
                            long j16 = dalvikSubitemPss;
                            long j17 = dalvikSubitemPss4;
                            int i12 = oomSwapPss2;
                            int i13 = pid4;
                            long[] jArr11 = oomPss4;
                            SparseArray<MemItem> sparseArray4 = procMemsMap2;
                            long[] jArr12 = dalvikSubitemPss4;
                            Debug.MemoryInfo memoryInfo4 = mi2;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } else {
                    oomSwapPss = oomSwapPss2;
                    i2 = oomPss4;
                    tmpLong4 = procMemsMap2;
                }
                long startTime3 = SystemClock.currentThreadTimeMillis();
                Debug.getMemoryInfo(pid2, mi2);
                long endTime2 = SystemClock.currentThreadTimeMillis();
                reportType = 4;
                hasSwapPss2 = mi2.hasSwappedOutPss;
                startTime = startTime3;
                endTime = endTime2;
                if (pid4.dumpDetails == 0) {
                }
                dalvikSubitemPss = (long) mi2.getTotalPss();
                myTotalUss = (long) mi2.getTotalUss();
                dalvikSubitemPss4 = dalvikSubitemPss;
                procMemsMap2 = procMemsMap3;
                myTotalRss = (long) mi2.getTotalRss();
                mi2 = mi2;
                long myTotalSwapPss222222 = (long) mi2.getTotalSwappedOutPss();
                synchronized (this) {
                }
            } else {
                oomSwapPss = oomSwapPss2;
                Debug.MemoryInfo memoryInfo5 = mi2;
                miscSwapPss = myTotalRss;
                miscPss = myTotalUss;
                dalvikSubitemPss3 = dalvikSubitemPss;
                oomPss = dalvikSubitemPss4;
                memoryUsageDumpOptions = pid4;
                i = oomPss4;
                z = z2;
                tmpLong3 = procMemsMap2;
                long j18 = dalvikSubitemPss4;
            }
            i6 = i - 1;
            pid4 = memoryUsageDumpOptions;
            dalvikSubitemPss = dalvikSubitemPss3;
            dalvikSubitemPss4 = oomPss;
            z2 = z;
            oomProcs = oomProcs2;
            oomSwapPss2 = oomSwapPss;
            myTotalRss = miscSwapPss;
            procMemsMap2 = tmpLong3;
            myTotalUss = miscPss;
            printWriter6 = pw;
        }
        long[] oomSwapPss3 = oomSwapPss2;
        ArrayList<MemItem>[] oomProcs3 = oomProcs;
        long[] miscSwapPss2 = myTotalRss;
        long[] miscPss2 = myTotalUss;
        long[] dalvikSubitemPss6 = dalvikSubitemPss;
        long[] oomPss5 = dalvikSubitemPss4;
        MemoryUsageDumpOptions memoryUsageDumpOptions8 = pid4;
        int i14 = z2;
        long[] tmpLong6 = procMemsMap2;
        long cachedPss = dalvikSubitemPss4;
        Debug.MemoryInfo mi3 = mi2;
        if (memoryUsageDumpOptions8.isCheckinRequest || procs.size() <= i14 || memoryUsageDumpOptions8.packages) {
            ArrayList<MemItem> arrayList4 = procMems2;
            boolean z3 = hasSwapPss4;
            long[] jArr13 = dalvikSubitemPss6;
            long j19 = cachedPss;
            ArrayList<MemItem>[] arrayListArr = oomProcs3;
            long[] jArr14 = oomSwapPss3;
            long[] jArr15 = miscSwapPss2;
            long[] jArr16 = tmpLong6;
            long[] jArr17 = miscPss2;
            PrintWriter printWriter10 = pw;
            ActivityManagerService activityManagerService2 = activityManagerService;
            MemoryUsageDumpOptions memoryUsageDumpOptions9 = memoryUsageDumpOptions8;
            ActivityManagerService activityManagerService3 = activityManagerService2;
            Debug.MemoryInfo memoryInfo6 = mi3;
        } else {
            updateCpuStatsNow();
            synchronized (activityManagerService.mProcessCpuTracker) {
                try {
                    int N3 = activityManagerService.mProcessCpuTracker.countStats();
                    long nativeProcTotalPss = 0;
                    Debug.MemoryInfo mi4 = null;
                    int i15 = 0;
                    while (i15 < N3) {
                        try {
                            ProcessCpuTracker.Stats st2 = activityManagerService.mProcessCpuTracker.getStats(i15);
                            long cachedPss2 = cachedPss;
                            try {
                                if (st2.vsize <= 0 || procMemsMap3.indexOfKey(st2.pid) >= 0) {
                                    N = N3;
                                    procMemsMap = procMemsMap3;
                                    procMems = procMems2;
                                    hasSwapPss = hasSwapPss4;
                                    dalvikSubitemPss2 = dalvikSubitemPss6;
                                    tmpLong = tmpLong6;
                                } else {
                                    if (mi4 == null) {
                                        try {
                                            mi = new Debug.MemoryInfo();
                                        } catch (Throwable th11) {
                                            th = th11;
                                            SparseArray<MemItem> sparseArray5 = procMemsMap3;
                                            ArrayList<MemItem> arrayList5 = procMems2;
                                            boolean z4 = hasSwapPss4;
                                            long[] jArr18 = dalvikSubitemPss6;
                                            Debug.MemoryInfo memoryInfo7 = mi4;
                                        }
                                    } else {
                                        mi = mi4;
                                    }
                                    if (!brief) {
                                        try {
                                            if (!memoryUsageDumpOptions8.oomOnly) {
                                                Debug.getMemoryInfo(st2.pid, mi);
                                                procMemsMap = procMemsMap3;
                                                tmpLong2 = tmpLong6;
                                                long myTotalPss = (long) mi.getTotalPss();
                                                tmpLong = tmpLong2;
                                                long myTotalSwapPss3 = (long) mi.getTotalSwappedOutPss();
                                                totalPss += myTotalPss;
                                                totalSwapPss += myTotalSwapPss3;
                                                nativeProcTotalPss += myTotalPss;
                                                StringBuilder sb2 = new StringBuilder();
                                                N = N3;
                                                sb2.append(st2.name);
                                                sb2.append(" (pid ");
                                                sb2.append(st2.pid);
                                                sb2.append(")");
                                                long myTotalSwapPss4 = myTotalSwapPss3;
                                                MemItem memItem = new MemItem(sb2.toString(), st2.name, myTotalPss, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                                MemItem pssItem = memItem;
                                                procMems2.add(pssItem);
                                                nativePss += (long) mi.nativePss;
                                                nativeSwapPss += (long) mi.nativeSwappedOutPss;
                                                dalvikPss += (long) mi.dalvikPss;
                                                dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                                j = 0;
                                                while (j < dalvikSubitemPss6.length) {
                                                    ProcessCpuTracker.Stats st3 = st2;
                                                    ArrayList<MemItem> procMems3 = procMems2;
                                                    try {
                                                        dalvikSubitemPss6[j] = dalvikSubitemPss6[j] + ((long) mi.getOtherPss(17 + j));
                                                        boolean hasSwapPss5 = hasSwapPss4;
                                                        dalvikSubitemPss2 = dalvikSubitemPss6;
                                                        dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + ((long) mi.getOtherSwappedOutPss(17 + j));
                                                        j++;
                                                        st2 = st3;
                                                        procMems2 = procMems3;
                                                        dalvikSubitemPss6 = dalvikSubitemPss2;
                                                        hasSwapPss4 = hasSwapPss5;
                                                    } catch (Throwable th12) {
                                                        th = th12;
                                                        MemoryUsageDumpOptions memoryUsageDumpOptions10 = memoryUsageDumpOptions8;
                                                        long j20 = nativeProcTotalPss;
                                                        ArrayList<MemItem>[] arrayListArr2 = oomProcs3;
                                                        long[] jArr19 = oomSwapPss3;
                                                        long[] jArr20 = miscSwapPss2;
                                                        long[] jArr21 = miscPss2;
                                                        long j21 = cachedPss2;
                                                        SparseArray<MemItem> sparseArray6 = procMemsMap;
                                                        long[] jArr22 = dalvikSubitemPss2;
                                                        PrintWriter printWriter11 = pw;
                                                        while (true) {
                                                            break;
                                                        }
                                                        throw th;
                                                    }
                                                }
                                                ProcessCpuTracker.Stats stats = st2;
                                                procMems = procMems2;
                                                hasSwapPss = hasSwapPss4;
                                                dalvikSubitemPss2 = dalvikSubitemPss6;
                                                long otherPss2 = otherPss + ((long) mi.otherPss);
                                                long otherSwapPss2 = otherSwapPss + ((long) mi.otherSwappedOutPss);
                                                for (j2 = 0; j2 < 17; j2++) {
                                                    long mem = (long) mi.getOtherPss(j2);
                                                    miscPss2[j2] = miscPss2[j2] + mem;
                                                    otherPss2 = otherPss - mem;
                                                    long mem2 = (long) mi.getOtherSwappedOutPss(j2);
                                                    miscSwapPss2[j2] = miscSwapPss2[j2] + mem2;
                                                    otherSwapPss2 = otherSwapPss - mem2;
                                                }
                                                oomPss5[0] = oomPss5[0] + myTotalPss;
                                                oomSwapPss3[0] = oomSwapPss3[0] + myTotalSwapPss4;
                                                if (oomProcs3[0] == null) {
                                                    oomProcs3[0] = new ArrayList<>();
                                                }
                                                oomProcs3[0].add(pssItem);
                                                mi4 = mi;
                                            }
                                        } catch (Throwable th13) {
                                            th = th13;
                                            SparseArray<MemItem> sparseArray7 = procMemsMap3;
                                            ArrayList<MemItem> arrayList6 = procMems2;
                                            boolean z5 = hasSwapPss4;
                                            long[] jArr23 = dalvikSubitemPss6;
                                            PrintWriter printWriter12 = pw;
                                            ActivityManagerService activityManagerService4 = activityManagerService;
                                            MemoryUsageDumpOptions memoryUsageDumpOptions11 = memoryUsageDumpOptions8;
                                            ActivityManagerService activityManagerService5 = activityManagerService4;
                                            while (true) {
                                                break;
                                            }
                                            throw th;
                                        }
                                    }
                                    try {
                                        procMemsMap = procMemsMap3;
                                        tmpLong2 = tmpLong6;
                                        try {
                                            mi.nativePss = (int) Debug.getPss(st2.pid, tmpLong2, null);
                                            mi.nativePrivateDirty = (int) tmpLong2[0];
                                            long myTotalPss2 = (long) mi.getTotalPss();
                                            tmpLong = tmpLong2;
                                            long myTotalSwapPss32 = (long) mi.getTotalSwappedOutPss();
                                            totalPss += myTotalPss2;
                                            totalSwapPss += myTotalSwapPss32;
                                            nativeProcTotalPss += myTotalPss2;
                                        } catch (Throwable th14) {
                                            th = th14;
                                            ArrayList<MemItem> arrayList7 = procMems2;
                                            boolean z6 = hasSwapPss4;
                                            long[] jArr24 = tmpLong2;
                                            long[] jArr25 = dalvikSubitemPss6;
                                            long j22 = nativeProcTotalPss;
                                            ArrayList<MemItem>[] arrayListArr3 = oomProcs3;
                                            long[] jArr26 = oomSwapPss3;
                                            long[] jArr27 = miscSwapPss2;
                                            long[] jArr28 = miscPss2;
                                            long j23 = cachedPss2;
                                            SparseArray<MemItem> sparseArray8 = procMemsMap;
                                            PrintWriter printWriter13 = pw;
                                            ActivityManagerService activityManagerService6 = activityManagerService;
                                            MemoryUsageDumpOptions memoryUsageDumpOptions12 = memoryUsageDumpOptions8;
                                            ActivityManagerService activityManagerService7 = activityManagerService6;
                                            while (true) {
                                                break;
                                            }
                                            throw th;
                                        }
                                    } catch (Throwable th15) {
                                        th = th15;
                                        ArrayList<MemItem> arrayList8 = procMems2;
                                        boolean z7 = hasSwapPss4;
                                        long[] jArr29 = tmpLong6;
                                        SparseArray<MemItem> sparseArray9 = procMemsMap3;
                                        long[] jArr30 = dalvikSubitemPss6;
                                        PrintWriter printWriter14 = pw;
                                        ActivityManagerService activityManagerService8 = activityManagerService;
                                        MemoryUsageDumpOptions memoryUsageDumpOptions13 = memoryUsageDumpOptions8;
                                        ActivityManagerService activityManagerService9 = activityManagerService8;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                    try {
                                        StringBuilder sb22 = new StringBuilder();
                                        N = N3;
                                        sb22.append(st2.name);
                                        sb22.append(" (pid ");
                                        sb22.append(st2.pid);
                                        sb22.append(")");
                                        long myTotalSwapPss42 = myTotalSwapPss32;
                                        MemItem memItem2 = new MemItem(sb22.toString(), st2.name, myTotalPss2, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                        MemItem pssItem2 = memItem2;
                                        procMems2.add(pssItem2);
                                        nativePss += (long) mi.nativePss;
                                        nativeSwapPss += (long) mi.nativeSwappedOutPss;
                                        dalvikPss += (long) mi.dalvikPss;
                                        dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                        j = 0;
                                        while (j < dalvikSubitemPss6.length) {
                                        }
                                        ProcessCpuTracker.Stats stats2 = st2;
                                        procMems = procMems2;
                                        hasSwapPss = hasSwapPss4;
                                        dalvikSubitemPss2 = dalvikSubitemPss6;
                                        long otherPss22 = otherPss + ((long) mi.otherPss);
                                        long otherSwapPss22 = otherSwapPss + ((long) mi.otherSwappedOutPss);
                                        while (j2 < 17) {
                                        }
                                        oomPss5[0] = oomPss5[0] + myTotalPss2;
                                        oomSwapPss3[0] = oomSwapPss3[0] + myTotalSwapPss42;
                                        if (oomProcs3[0] == null) {
                                        }
                                        oomProcs3[0].add(pssItem2);
                                        mi4 = mi;
                                    } catch (Throwable th16) {
                                        th = th16;
                                        ArrayList<MemItem> arrayList9 = procMems2;
                                        boolean z8 = hasSwapPss4;
                                        long[] jArr31 = dalvikSubitemPss6;
                                        long j24 = nativeProcTotalPss;
                                        ArrayList<MemItem>[] arrayListArr4 = oomProcs3;
                                        long[] jArr32 = oomSwapPss3;
                                        long[] jArr33 = miscSwapPss2;
                                        long[] jArr34 = miscPss2;
                                        long j25 = cachedPss2;
                                        SparseArray<MemItem> sparseArray10 = procMemsMap;
                                        PrintWriter printWriter15 = pw;
                                        ActivityManagerService activityManagerService10 = activityManagerService;
                                        MemoryUsageDumpOptions memoryUsageDumpOptions14 = memoryUsageDumpOptions8;
                                        ActivityManagerService activityManagerService11 = activityManagerService10;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                }
                                i15++;
                                cachedPss = cachedPss2;
                                procMemsMap3 = procMemsMap;
                                tmpLong6 = tmpLong;
                                N3 = N;
                                procMems2 = procMems;
                                dalvikSubitemPss6 = dalvikSubitemPss2;
                                hasSwapPss4 = hasSwapPss;
                                activityManagerService = this;
                            } catch (Throwable th17) {
                                th = th17;
                                ArrayList<MemItem> arrayList10 = procMems2;
                                boolean z9 = hasSwapPss4;
                                long[] jArr35 = tmpLong6;
                                SparseArray<MemItem> sparseArray11 = procMemsMap3;
                                long[] jArr36 = dalvikSubitemPss6;
                                Debug.MemoryInfo memoryInfo8 = mi4;
                                PrintWriter printWriter142 = pw;
                                ActivityManagerService activityManagerService82 = activityManagerService;
                                MemoryUsageDumpOptions memoryUsageDumpOptions132 = memoryUsageDumpOptions8;
                                ActivityManagerService activityManagerService92 = activityManagerService82;
                                while (true) {
                                    break;
                                }
                                throw th;
                            }
                        } catch (Throwable th18) {
                            th = th18;
                            ArrayList<MemItem> arrayList11 = procMems2;
                            boolean z10 = hasSwapPss4;
                            long[] jArr37 = tmpLong6;
                            SparseArray<MemItem> sparseArray12 = procMemsMap3;
                            long[] jArr38 = dalvikSubitemPss6;
                            long j26 = cachedPss;
                            Debug.MemoryInfo memoryInfo9 = mi4;
                            long j27 = nativeProcTotalPss;
                            ArrayList<MemItem>[] arrayListArr5 = oomProcs3;
                            long[] jArr39 = oomSwapPss3;
                            long[] jArr40 = miscSwapPss2;
                            long[] jArr41 = miscPss2;
                            PrintWriter printWriter16 = pw;
                            ActivityManagerService activityManagerService12 = activityManagerService;
                            MemoryUsageDumpOptions memoryUsageDumpOptions15 = memoryUsageDumpOptions8;
                            ActivityManagerService activityManagerService13 = activityManagerService12;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    }
                    SparseArray<MemItem> procMemsMap4 = procMemsMap3;
                    ArrayList<MemItem> procMems4 = procMems2;
                    boolean hasSwapPss6 = hasSwapPss4;
                    long[] dalvikSubitemPss7 = dalvikSubitemPss6;
                    long cachedPss3 = cachedPss;
                    long[] jArr42 = tmpLong6;
                    try {
                    } catch (Throwable th19) {
                        th = th19;
                        MemoryUsageDumpOptions memoryUsageDumpOptions16 = memoryUsageDumpOptions8;
                        ArrayList<MemItem>[] arrayListArr6 = oomProcs3;
                        long[] jArr43 = oomSwapPss3;
                        long[] jArr44 = miscSwapPss2;
                        long[] jArr45 = miscPss2;
                        long j28 = cachedPss3;
                        SparseArray<MemItem> sparseArray13 = procMemsMap4;
                        long[] jArr46 = dalvikSubitemPss7;
                        PrintWriter printWriter17 = pw;
                        Debug.MemoryInfo memoryInfo10 = mi4;
                        long j29 = nativeProcTotalPss;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                } catch (Throwable th20) {
                    th = th20;
                    SparseArray<MemItem> sparseArray14 = procMemsMap3;
                    ArrayList<MemItem> arrayList12 = procMems2;
                    boolean z11 = hasSwapPss4;
                    long[] jArr47 = dalvikSubitemPss6;
                    long j30 = cachedPss;
                    ArrayList<MemItem>[] arrayListArr7 = oomProcs3;
                    long[] jArr48 = oomSwapPss3;
                    long[] jArr49 = miscSwapPss2;
                    long[] jArr50 = tmpLong6;
                    long[] jArr51 = miscPss2;
                    PrintWriter printWriter18 = pw;
                    ActivityManagerService activityManagerService14 = activityManagerService;
                    MemoryUsageDumpOptions memoryUsageDumpOptions17 = memoryUsageDumpOptions8;
                    ActivityManagerService activityManagerService15 = activityManagerService14;
                    while (true) {
                        break;
                    }
                    throw th;
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:175:0x04ac, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:176:0x04b1, code lost:
        if (r3.isCheckinRequest != false) goto L_0x05c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:177:0x04b3, code lost:
        if (r2 == null) goto L_0x05c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x04b5, code lost:
        r58 = r58 + r4;
        r60 = r60 + r10;
        r12 = new java.lang.StringBuilder();
        r98 = r6;
        r12.append(r13.processName);
        r12.append(" (pid ");
        r6 = r94;
        r12.append(r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x04d1, code lost:
        if (r66 == false) goto L_0x04d6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:180:0x04d3, code lost:
        r7 = " / activities)";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x04d6, code lost:
        r7 = ")";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x04d8, code lost:
        r12.append(r7);
        r69 = new com.android.server.am.ActivityManagerService.MemItem(r12.toString(), r13.processName, r4, r10, r6, r66);
        r7 = r95;
        r7.add(r69);
        r12 = r96;
        r12.put(r6, r69);
        r100 = r6;
        r101 = r8;
        r19 = r19 + ((long) r2.nativePss);
        r23 = r23 + ((long) r2.nativeSwappedOutPss);
        r45 = r45 + ((long) r2.dalvikPss);
        r47 = r47 + ((long) r2.dalvikSwappedOutPss);
        r6 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x0514, code lost:
        r8 = r53;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:184:0x0517, code lost:
        if (r6 >= r8.length) goto L_0x0549;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:185:0x0519, code lost:
        r8[r6] = r8[r6] + ((long) r2.getOtherPss(17 + r6));
        r42[r6] = r42[r6] + ((long) r2.getOtherSwappedOutPss(17 + r6));
        r6 = r6 + 1;
        r13 = r13;
        r10 = r10;
        r7 = r7;
        r53 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:186:0x0549, code lost:
        r106 = r7;
        r107 = r8;
        r104 = r10;
        r103 = r13;
        r49 = r49 + ((long) r2.otherPss);
        r51 = r51 + ((long) r2.otherSwappedOutPss);
        r6 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:188:0x055f, code lost:
        if (r6 >= 17) goto L_0x057c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:189:0x0561, code lost:
        r7 = (long) r2.getOtherPss(r6);
        r54[r6] = r54[r6] + r7;
        r49 = r49 - r7;
        r7 = (long) r2.getOtherSwappedOutPss(r6);
        r55[r6] = r55[r6] + r7;
        r51 = r51 - r7;
        r6 = r6 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:191:0x057e, code lost:
        if (r14 < 900) goto L_0x0587;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:192:0x0580, code lost:
        r62 = r62 + r4;
        r64 = r64 + r104;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:193:0x0587, code lost:
        r6 = r62;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:0x0589, code lost:
        r6 = r16;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:195:0x058b, code lost:
        r8 = r56;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:0x058e, code lost:
        if (r6 >= r8.length) goto L_0x05c5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x0593, code lost:
        if (r6 == (r8.length - 1)) goto L_0x05a9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:200:0x0599, code lost:
        if (r14 < DUMP_MEM_OOM_ADJ[r6]) goto L_0x05a4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x05a1, code lost:
        if (r14 >= DUMP_MEM_OOM_ADJ[r6 + 1]) goto L_0x05a4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x05a4, code lost:
        r6 = r6 + 1;
        r56 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x05a9, code lost:
        r8[r6] = r8[r6] + r4;
        r57[r6] = r57[r6] + r104;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:205:0x05b6, code lost:
        if (r67[r6] != null) goto L_0x05bf;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:206:0x05b8, code lost:
        r67[r6] = new java.util.ArrayList<>();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:207:0x05bf, code lost:
        r67[r6].add(r69);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:208:0x05c5, code lost:
        r43 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:209:0x05c8, code lost:
        r107 = r53;
        r8 = r56;
        r106 = r95;
        r12 = r96;
        r43 = r2;
        r62 = r62;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:210:0x05d6, code lost:
        r33 = r25;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:229:0x0656, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:336:0x08d8, code lost:
        r1 = new java.util.ArrayList<>();
        r23 = new com.android.server.am.ActivityManagerService.MemItem("Native", "Native", r19, r4, -1);
        r1.add(r23);
        r23 = new com.android.server.am.ActivityManagerService.MemItem("Dalvik", "Dalvik", r45, r47, -2);
        r1.add(r23);
        r23 = new com.android.server.am.ActivityManagerService.MemItem("Unknown", "Unknown", r49, r51, -3);
        r1.add(r23);
        r0 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:338:0x091f, code lost:
        if (r0 >= 17) goto L_0x093c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:339:0x0921, code lost:
        r6 = android.os.Debug.MemoryInfo.getOtherLabel(r0);
        r23 = new com.android.server.am.ActivityManagerService.MemItem(r6, r6, r54[r0], r55[r0], r0);
        r1.add(r23);
        r0 = r0 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:340:0x093c, code lost:
        r6 = r119;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:341:0x093f, code lost:
        if (r6.length <= 0) goto L_0x09a4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:342:0x0941, code lost:
        r0 = r1.iterator();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:344:0x0949, code lost:
        if (r0.hasNext() == false) goto L_0x09a4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:345:0x094b, code lost:
        r7 = r0.next();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:346:0x0956, code lost:
        if (r7.id != -2) goto L_0x095b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:347:0x0958, code lost:
        r8 = 0;
        r9 = 3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:349:0x095d, code lost:
        if (r7.id != 0) goto L_0x0963;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:350:0x095f, code lost:
        r8 = 4;
        r9 = 8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:352:0x0967, code lost:
        if (r7.id != 10) goto L_0x096e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:353:0x0969, code lost:
        r8 = 9;
        r9 = 11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:355:0x0972, code lost:
        if (r7.id != 12) goto L_0x0945;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:356:0x0974, code lost:
        r8 = 12;
        r9 = 13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:357:0x0978, code lost:
        r7.subitems = new java.util.ArrayList<>();
        r12 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:358:0x0980, code lost:
        if (r12 > r9) goto L_0x0945;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:359:0x0982, code lost:
        r14 = android.os.Debug.MemoryInfo.getOtherLabel(17 + r12);
        r15 = r7.subitems;
        r23 = new com.android.server.am.ActivityManagerService.MemItem(r14, r14, r6[r12], r42[r12], r12);
        r15.add(r23);
        r12 = r12 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:360:0x09a4, code lost:
        r7 = new java.util.ArrayList<>();
        r0 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:361:0x09ac, code lost:
        r8 = r112;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:362:0x09af, code lost:
        if (r0 >= r8.length) goto L_0x09e6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:364:0x09b7, code lost:
        if (r8[r0] == 0) goto L_0x09e1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:366:0x09bb, code lost:
        if (r3.isCompact == false) goto L_0x09c4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:367:0x09bd, code lost:
        r9 = DUMP_MEM_OOM_COMPACT_LABEL[r0];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:368:0x09c1, code lost:
        r24 = r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:369:0x09c4, code lost:
        r9 = DUMP_MEM_OOM_LABEL[r0];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:370:0x09c9, code lost:
        r23 = new com.android.server.am.ActivityManagerService.MemItem(r24, r24, r8[r0], r57[r0], DUMP_MEM_OOM_ADJ[r0]);
        r23.subitems = r67[r0];
        r7.add(r23);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:371:0x09e1, code lost:
        r0 = r0 + 1;
        r112 = r8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:373:0x09e8, code lost:
        if (r3.dumpSwapPss == 0) goto L_0x09f4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:374:0x09ea, code lost:
        if (r33 == false) goto L_0x09f4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:376:0x09f0, code lost:
        if (r60 == 0) goto L_0x09f4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:377:0x09f2, code lost:
        r0 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:378:0x09f4, code lost:
        r0 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:379:0x09f6, code lost:
        r3.dumpSwapPss = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:380:0x09fa, code lost:
        if (r3.oomOnly != false) goto L_0x0a11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:381:0x09fc, code lost:
        dumpMemItems(r116, 2246267895813L, "proc", r117, true, r3.dumpSwapPss);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:382:0x0a11, code lost:
        dumpMemItems(r116, 2246267895814L, "oom", r7, false, r3.dumpSwapPss);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:383:0x0a26, code lost:
        if (r132 != false) goto L_0x0a40;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:385:0x0a2a, code lost:
        if (r3.oomOnly != false) goto L_0x0a40;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:386:0x0a2c, code lost:
        dumpMemItems(r116, 2246267895815L, "cat", r1, true, r3.dumpSwapPss);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:387:0x0a40, code lost:
        r9 = new com.android.internal.util.MemInfoReader();
        r9.readMemInfo();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:388:0x0a4f, code lost:
        if (r10 <= 0) goto L_0x0a90;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:389:0x0a51, code lost:
        r15 = r128;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:390:0x0a53, code lost:
        monitor-enter(r128);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:392:?, code lost:
        boostPriorityForLockedSection();
        r17 = r9.getRealCachedSizeKb();
        r23 = r9.getFreeSizeKb();
        r25 = r9.getZramTotalSizeKb();
        r27 = r9.getKernelUsedSizeKb();
        com.android.server.am.EventLogTags.writeAmMeminfo(r17 * 1024, r23 * 1024, r25 * 1024, r27 * 1024, r10 * 1024);
        r15.mProcessStats.addSysMemUsageLocked(r17, r23, r25, r27, r10);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:393:0x0a85, code lost:
        monitor-exit(r128);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:394:0x0a86, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:395:0x0a8a, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:398:0x0a8c, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:399:0x0a8f, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:400:0x0a90, code lost:
        r15 = r128;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:401:0x0a92, code lost:
        if (r132 != false) goto L_0x0ad5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:402:0x0a94, code lost:
        r120 = r1;
        r2 = r116;
        r2.write(1112396529672L, r9.getTotalSizeKb());
        r2.write(1159641169929L, r15.mLastMemoryLevel);
        r13 = r108;
        r2.write(1112396529674L, r13);
        r122 = r4;
        r2.write(1112396529675L, r9.getCachedSizeKb());
        r2.write(1112396529676L, r9.getFreeSizeKb());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:403:0x0ad5, code lost:
        r120 = r1;
        r122 = r4;
        r13 = r108;
        r2 = r116;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:404:0x0adf, code lost:
        r0 = ((((r9.getTotalSizeKb() - (r58 - r60)) - r9.getFreeSizeKb()) - r9.getRealCachedSizeKb()) - r9.getKernelUsedSizeKb()) - r9.getZramTotalSizeKb();
        r124 = r6;
        r2.write(1112396529677L, r58 - r13);
        r2.write(1112396529678L, r9.getKernelUsedSizeKb());
        r2.write(1112396529679L, r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:405:0x0b1a, code lost:
        if (r132 != false) goto L_0x0bd3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:407:0x0b24, code lost:
        if (r9.getZramTotalSizeKb() == 0) goto L_0x0b50;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:408:0x0b26, code lost:
        r2.write(1112396529680L, r9.getZramTotalSizeKb());
        r2.write(1112396529681L, r9.getSwapTotalSizeKb() - r9.getSwapFreeSizeKb());
        r2.write(1112396529682L, r9.getSwapTotalSizeKb());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:409:0x0b50, code lost:
        r3 = getKsmInfo();
        r125 = r0;
        r2.write(1112396529683L, r3[1]);
        r2.write(1112396529684L, r3[0]);
        r2.write(1112396529685L, r3[2]);
        r2.write(1112396529686L, r3[3]);
        r2.write(1120986464279L, android.app.ActivityManager.staticGetMemoryClass());
        r2.write(1120986464280L, android.app.ActivityManager.staticGetLargeMemoryClass());
        r2.write(1112396529689L, r15.mProcessList.getMemLevel(906) / 1024);
        r2.write(1112396529690L, r15.mProcessList.getCachedRestoreThresholdKb());
        r2.write(1133871366171L, android.app.ActivityManager.isLowRamDeviceStatic());
        r2.write(1133871366172L, android.app.ActivityManager.isHighEndGfx());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:410:0x0bd3, code lost:
        r23 = r122;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x0097, code lost:
        if (r5.size() <= 0) goto L_0x0132;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x0099, code lost:
        r0 = new android.util.proto.ProtoOutputStream(r2);
        r0.write(1112396529665L, r10);
        r0.write(1112396529666L, r8);
        r4 = null;
        r6 = r5.size() - 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00b5, code lost:
        if (r6 < 0) goto L_0x012a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00b7, code lost:
        r14 = (com.android.internal.os.ProcessCpuTracker.Stats) r5.get(r6);
        r15 = r14.pid;
        r48 = r8;
        r8 = r0.start(2246267895811L);
        r50 = r10;
        r0.write(1120986464257L, r15);
        r0.write(1138166333442L, r14.baseName);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x00de, code lost:
        if (r4 != null) goto L_0x00e6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x00e0, code lost:
        r4 = new android.os.Debug.MemoryInfo();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x00e8, code lost:
        if (r3.dumpDetails != false) goto L_0x0100;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x00ea, code lost:
        if (r132 != false) goto L_0x00f1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x00ee, code lost:
        if (r3.oomOnly != false) goto L_0x00f1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x00f1, code lost:
        r4.dalvikPss = (int) android.os.Debug.getPss(r15, r7, null);
        r4.dalvikPrivateDirty = (int) r7[0];
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x0100, code lost:
        android.os.Debug.getMemoryInfo(r15, r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x0103, code lost:
        android.app.ActivityThread.dumpMemInfoTable(r0, r4, r3.dumpDalvik, r3.dumpSummaryOnly, 0, 0, 0, 0, 0, 0);
        r0.end(r8);
        r6 = r6 - 1;
        r8 = r48;
        r10 = r50;
        r12 = r131;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x012a, code lost:
        r48 = r8;
        r50 = r10;
        r0.flush();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x0131, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:58:0x0132, code lost:
        r48 = r8;
        r50 = r10;
     */
    /* JADX WARNING: Removed duplicated region for block: B:120:0x02dd  */
    /* JADX WARNING: Removed duplicated region for block: B:153:0x0421  */
    /* JADX WARNING: Removed duplicated region for block: B:156:0x0450 A[SYNTHETIC, Splitter:B:156:0x0450] */
    /* JADX WARNING: Removed duplicated region for block: B:289:0x075f A[Catch:{ all -> 0x07fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:301:0x07b0 A[Catch:{ all -> 0x078b, all -> 0x07ed }, LOOP:11: B:299:0x07ac->B:301:0x07b0, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:304:0x07d9 A[Catch:{ all -> 0x078b, all -> 0x07ed }] */
    /* JADX WARNING: Removed duplicated region for block: B:450:0x079a A[EDGE_INSN: B:450:0x079a->B:298:0x079a ?: BREAK  , SYNTHETIC] */
    private final void dumpApplicationMemoryUsage(FileDescriptor fd, MemoryUsageDumpOptions opts, String[] innerArgs, boolean brief, ArrayList<ProcessRecord> procs) {
        ArrayList<ProcessRecord> arrayList;
        long[] jArr;
        long[] jArr2;
        SparseArray<MemItem> procMemsMap;
        ArrayList<MemItem>[] oomProcs;
        ProtoOutputStream proto;
        long[] dalvikSubitemPss;
        ArrayList<MemItem> procMems;
        ProtoOutputStream proto2;
        long[] tmpLong;
        long[] oomPss;
        int N;
        SparseArray<MemItem> procMemsMap2;
        Debug.MemoryInfo mi;
        long[] tmpLong2;
        long myTotalPss;
        long myTotalSwapPss;
        long nativeProcTotalPss;
        long nativeProcTotalPss2;
        ArrayList<MemItem> procMems2;
        int j;
        long[] dalvikSubitemPss2;
        int j2;
        ArrayList<MemItem> procMems3;
        IApplicationThread thread;
        int pid;
        int oomAdj;
        long[] dalvikSubitemPss3;
        ArrayList<MemItem> procMems4;
        long[] tmpLong3;
        SparseArray<MemItem> procMemsMap3;
        ArrayList<MemItem> procMems5;
        int dalvikSubitemPss4;
        ProcessRecord r;
        long uptimeMs;
        int i;
        int i2;
        SparseArray<MemItem> procMemsMap4;
        long[] oomPss2;
        Debug.MemoryInfo mi2;
        long endTime;
        SparseArray<MemItem> procMemsMap5;
        ArrayList<MemItem> procMems6;
        int reportType;
        long startTime;
        boolean hasSwapPss;
        int i3;
        int pid2;
        int oomAdj2;
        ByteTransferPipe tp;
        int findPid;
        ActivityManagerService activityManagerService = this;
        FileDescriptor fileDescriptor = fd;
        MemoryUsageDumpOptions memoryUsageDumpOptions = opts;
        String[] strArr = innerArgs;
        ArrayList<ProcessRecord> arrayList2 = procs;
        long uptimeMs2 = SystemClock.uptimeMillis();
        long realtimeMs = SystemClock.elapsedRealtime();
        ProcessRecord r2 = new long[1];
        if (arrayList2 == null) {
            if (strArr.length > 0) {
                String proc = strArr[0];
                if (proc.charAt(0) != '-') {
                    ArrayList arrayList3 = new ArrayList();
                    updateCpuStatsNow();
                    int findPid2 = -1;
                    try {
                        findPid2 = Integer.parseInt(strArr[0]);
                    } catch (NumberFormatException e) {
                    }
                    synchronized (activityManagerService.mProcessCpuTracker) {
                        try {
                            int N2 = activityManagerService.mProcessCpuTracker.countStats();
                            int i4 = 0;
                            while (true) {
                                String proc2 = proc;
                                int i5 = i4;
                                if (i5 >= N2) {
                                    break;
                                }
                                int N3 = N2;
                                try {
                                    ProcessCpuTracker.Stats st = activityManagerService.mProcessCpuTracker.getStats(i5);
                                    if (st.pid != findPid2) {
                                        if (st.baseName != null) {
                                            findPid = findPid2;
                                            try {
                                                if (st.baseName.equals(strArr[0]) != 0) {
                                                }
                                            } catch (Throwable th) {
                                                th = th;
                                                long j3 = realtimeMs;
                                                long j4 = uptimeMs2;
                                                while (true) {
                                                    try {
                                                        break;
                                                    } catch (Throwable th2) {
                                                        th = th2;
                                                    }
                                                }
                                                throw th;
                                            }
                                        } else {
                                            findPid = findPid2;
                                        }
                                        i4 = i5 + 1;
                                        proc = proc2;
                                        N2 = N3;
                                        findPid2 = findPid;
                                        ArrayList<ProcessRecord> arrayList4 = procs;
                                    } else {
                                        findPid = findPid2;
                                    }
                                    arrayList3.add(st);
                                    i4 = i5 + 1;
                                    proc = proc2;
                                    N2 = N3;
                                    findPid2 = findPid;
                                    ArrayList<ProcessRecord> arrayList42 = procs;
                                } catch (Throwable th3) {
                                    th = th3;
                                    int i6 = findPid2;
                                    long j5 = realtimeMs;
                                    long j6 = uptimeMs2;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                            }
                            try {
                            } catch (Throwable th4) {
                                th = th4;
                                long j7 = realtimeMs;
                                long j8 = uptimeMs2;
                                while (true) {
                                    break;
                                }
                                throw th;
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            int i7 = findPid2;
                            long j9 = realtimeMs;
                            long j10 = uptimeMs2;
                            String str = proc;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    }
                } else {
                    long j11 = uptimeMs2;
                    String str2 = proc;
                }
            } else {
                long j12 = uptimeMs2;
                Object obj = "N/A";
            }
            Log.d(TAG, "No process found for: " + innerArgs[0]);
            return;
        }
        long realtimeMs2 = realtimeMs;
        long uptimeMs3 = uptimeMs2;
        if (brief || memoryUsageDumpOptions.oomOnly) {
            arrayList = procs;
        } else {
            arrayList = procs;
            if (procs.size() == 1 || memoryUsageDumpOptions.isCheckinRequest || memoryUsageDumpOptions.packages) {
                memoryUsageDumpOptions.dumpDetails = true;
            }
        }
        ProtoOutputStream proto3 = new ProtoOutputStream(fileDescriptor);
        ArrayList<MemItem> procMems7 = uptimeMs3;
        proto3.write(1112396529665L, procMems7);
        int dalvikSubitemPss5 = realtimeMs2;
        proto3.write(1112396529666L, dalvikSubitemPss5);
        ArrayList<MemItem> myTotalSwapPss2 = new ArrayList<>();
        SparseArray<MemItem> myTotalRss = new SparseArray<>();
        long nativePss = 0;
        long nativeSwapPss = 0;
        if (memoryUsageDumpOptions.dumpDalvik) {
            jArr = new long[14];
        } else {
            jArr = EmptyArray.LONG;
        }
        long[] dalvikSubitemPss6 = jArr;
        if (memoryUsageDumpOptions.dumpDalvik) {
            jArr2 = new long[14];
        } else {
            jArr2 = EmptyArray.LONG;
        }
        long[] dalvikSubitemSwapPss = jArr2;
        long[] miscPss = new long[17];
        long[] miscSwapPss = new long[17];
        long[] procMems8 = new long[DUMP_MEM_OOM_LABEL.length];
        long[] oomSwapPss = new long[DUMP_MEM_OOM_LABEL.length];
        ArrayList<MemItem>[] oomProcs2 = new ArrayList[DUMP_MEM_OOM_LABEL.length];
        long realtimeMs3 = 0;
        Debug.MemoryInfo mi3 = null;
        int i8 = procs.size() - 1;
        long dalvikPss = 0;
        long dalvikSwapPss = 0;
        long otherPss = 0;
        long otherSwapPss = 0;
        long totalPss = 0;
        long totalSwapPss = 0;
        long procMemsMap6 = 0;
        long cachedSwapPss = 0;
        boolean hasSwapPss2 = false;
        while (true) {
            oomProcs = oomProcs2;
            long myTotalUss = i8;
            if (myTotalUss < 0) {
                break;
            }
            procMemsMap = arrayList.get(myTotalUss);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    thread = procMemsMap.thread;
                    pid = procMemsMap.pid;
                    oomAdj = procMemsMap.getSetAdjWithServices();
                    boolean hasActivities = procMemsMap.activities.size() > 0;
                } finally {
                    th = th;
                    long j13 = myTotalUss;
                    SparseArray<MemItem> sparseArray = myTotalRss;
                    ArrayList<MemItem> arrayList5 = myTotalSwapPss2;
                    ProcessRecord processRecord = r2;
                    long[] jArr3 = dalvikSubitemPss5;
                    long[] jArr4 = procMems7;
                    ProcessRecord myTotalUss2 = procMemsMap;
                    int i9 = dalvikSubitemPss5;
                    ArrayList<MemItem> arrayList6 = procMems7;
                    SparseArray<MemItem> sparseArray2 = procMemsMap;
                    while (true) {
                        resetPriorityAfterLockedSection();
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (thread == null) {
                i = myTotalUss;
                procMemsMap4 = myTotalRss;
                procMems4 = myTotalSwapPss2;
                tmpLong3 = r2;
                realtimeMs3 = dalvikSubitemPss5;
                uptimeMs = procMems7;
                dalvikSubitemPss3 = dalvikSubitemPss5;
                oomPss2 = procMems7;
                i2 = 0;
            } else {
                if (mi3 == null) {
                    i = myTotalUss;
                    mi2 = new Debug.MemoryInfo();
                } else {
                    i = myTotalUss;
                    mi2 = mi3;
                }
                if (memoryUsageDumpOptions.dumpDetails) {
                    procMemsMap5 = myTotalRss;
                    procMems6 = myTotalSwapPss2;
                    pid2 = pid;
                    i3 = 0;
                } else if (brief || memoryUsageDumpOptions.oomOnly) {
                    startTime = SystemClock.currentThreadTimeMillis();
                    procMemsMap5 = myTotalRss;
                    procMems6 = myTotalSwapPss2;
                    pid2 = pid;
                    mi2.dalvikPss = (int) Debug.getPss(pid2, r2, null);
                    i3 = 0;
                    mi2.dalvikPrivateDirty = (int) r2[0];
                    reportType = 3;
                    hasSwapPss = hasSwapPss2;
                    endTime = SystemClock.currentThreadTimeMillis();
                    long startTime2 = startTime;
                    if (memoryUsageDumpOptions.dumpDetails) {
                        tmpLong3 = r2;
                        realtimeMs3 = dalvikSubitemPss5;
                        dalvikSubitemPss4 = pid2;
                        r = procMemsMap;
                        i2 = i3;
                        procMems5 = procMems6;
                        procMemsMap3 = procMemsMap5;
                        uptimeMs = procMems7;
                    } else if (memoryUsageDumpOptions.localOnly) {
                        long aToken = proto3.start(2246267895812L);
                        long mToken = proto3.start(1146756268033L);
                        proto3.write(1120986464257L, pid2);
                        proto3.write(1138166333442L, procMemsMap.processName);
                        ActivityThread.dumpMemInfoTable(proto3, mi2, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, 0, 0, 0, 0, 0, 0);
                        proto3.end(mToken);
                        proto3.end(aToken);
                        dalvikSubitemPss4 = pid2;
                        r = procMemsMap;
                        i2 = i3;
                        procMems5 = procMems6;
                        procMemsMap3 = procMemsMap5;
                        tmpLong3 = r2;
                        realtimeMs3 = dalvikSubitemPss5;
                        uptimeMs = procMems7;
                    } else {
                        long[] tmpLong4 = r2;
                        long realtimeMs4 = dalvikSubitemPss5;
                        try {
                            ByteTransferPipe tp2 = new ByteTransferPipe();
                            try {
                                long uptimeMs4 = procMems7;
                                try {
                                    i2 = i3;
                                    dalvikSubitemPss4 = pid2;
                                    r = procMemsMap;
                                    procMemsMap3 = procMemsMap5;
                                    procMems5 = procMems6;
                                    tmpLong3 = tmpLong4;
                                    realtimeMs3 = realtimeMs4;
                                    tp = tp2;
                                    uptimeMs = uptimeMs4;
                                } catch (Throwable th6) {
                                    th = th6;
                                    int i10 = pid2;
                                    ProcessRecord processRecord2 = procMemsMap;
                                    int i11 = i3;
                                    ArrayList<MemItem> arrayList7 = procMems6;
                                    SparseArray<MemItem> sparseArray3 = procMemsMap5;
                                    long[] jArr5 = tmpLong4;
                                    long j14 = realtimeMs4;
                                    long j15 = uptimeMs4;
                                    tp = tp2;
                                    tp.kill();
                                    throw th;
                                }
                                try {
                                    thread.dumpMemInfoProto(tp2.getWriteFd(), mi2, memoryUsageDumpOptions.dumpFullDetails, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, memoryUsageDumpOptions.dumpUnreachable, strArr);
                                    proto3.write(2246267895812L, tp.get());
                                    try {
                                        tp.kill();
                                    } catch (IOException e2) {
                                        e = e2;
                                        Log.e(TAG, "Got IOException!", e);
                                        long myTotalPss2 = (long) mi2.getTotalPss();
                                        myTotalUss = (long) mi2.getTotalUss();
                                        myTotalRss = (long) mi2.getTotalRss();
                                        myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                                        synchronized (this) {
                                        }
                                    } catch (RemoteException e3) {
                                        e = e3;
                                        Log.e(TAG, "Got RemoteException!", e);
                                        long myTotalPss22 = (long) mi2.getTotalPss();
                                        myTotalUss = (long) mi2.getTotalUss();
                                        myTotalRss = (long) mi2.getTotalRss();
                                        myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                                        synchronized (this) {
                                        }
                                    }
                                } catch (Throwable th7) {
                                    th = th7;
                                    tp.kill();
                                    throw th;
                                }
                            } catch (Throwable th8) {
                                th = th8;
                                int i12 = pid2;
                                ProcessRecord processRecord3 = procMemsMap;
                                int i13 = i3;
                                ArrayList<MemItem> arrayList8 = procMems6;
                                SparseArray<MemItem> sparseArray4 = procMemsMap5;
                                long[] jArr6 = tmpLong4;
                                long j16 = realtimeMs4;
                                tp = tp2;
                                long j17 = procMems7;
                                tp.kill();
                                throw th;
                            }
                        } catch (IOException e4) {
                            e = e4;
                            dalvikSubitemPss4 = pid2;
                            r = procMemsMap;
                            i2 = i3;
                            procMems5 = procMems6;
                            procMemsMap3 = procMemsMap5;
                            tmpLong3 = tmpLong4;
                            realtimeMs3 = realtimeMs4;
                            uptimeMs = procMems7;
                            Log.e(TAG, "Got IOException!", e);
                            long myTotalPss222 = (long) mi2.getTotalPss();
                            myTotalUss = (long) mi2.getTotalUss();
                            myTotalRss = (long) mi2.getTotalRss();
                            myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                            synchronized (this) {
                            }
                        } catch (RemoteException e5) {
                            e = e5;
                            dalvikSubitemPss4 = pid2;
                            r = procMemsMap;
                            i2 = i3;
                            procMems5 = procMems6;
                            procMemsMap3 = procMemsMap5;
                            tmpLong3 = tmpLong4;
                            realtimeMs3 = realtimeMs4;
                            uptimeMs = procMems7;
                            Log.e(TAG, "Got RemoteException!", e);
                            long myTotalPss2222 = (long) mi2.getTotalPss();
                            myTotalUss = (long) mi2.getTotalUss();
                            myTotalRss = (long) mi2.getTotalRss();
                            myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                            synchronized (this) {
                            }
                        }
                    }
                    long myTotalPss22222 = (long) mi2.getTotalPss();
                    myTotalUss = (long) mi2.getTotalUss();
                    myTotalRss = (long) mi2.getTotalRss();
                    myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            r2 = r;
                            try {
                                if (r2.thread != null) {
                                    try {
                                        oomAdj2 = oomAdj;
                                        if (oomAdj2 == r2.getSetAdjWithServices()) {
                                            try {
                                                r2.baseProcessTracker.addPss(myTotalPss22222, myTotalUss, myTotalRss, true, reportType, endTime - startTime2, r2.pkgList);
                                            } catch (Throwable th9) {
                                                th = th9;
                                            }
                                        }
                                    } catch (Throwable th10) {
                                        th = th10;
                                        int i14 = oomAdj;
                                        long j18 = myTotalUss;
                                        long j19 = myTotalRss;
                                        long j20 = myTotalSwapPss2;
                                        ProcessRecord processRecord4 = r2;
                                        long[] jArr7 = dalvikSubitemPss5;
                                        long[] jArr8 = procMems7;
                                        long myTotalUss3 = procMemsMap;
                                        int i15 = dalvikSubitemPss5;
                                        ArrayList<MemItem> arrayList9 = procMems7;
                                        SparseArray<MemItem> sparseArray5 = procMemsMap;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th11) {
                                                th = th11;
                                            }
                                        }
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } else {
                                    oomAdj2 = oomAdj;
                                }
                                try {
                                } catch (Throwable th12) {
                                    th = th12;
                                    long j21 = myTotalUss;
                                    long j22 = myTotalRss;
                                    long j23 = myTotalSwapPss2;
                                    ProcessRecord processRecord5 = r2;
                                    long[] jArr9 = dalvikSubitemPss5;
                                    long[] jArr10 = procMems7;
                                    long myTotalUss4 = procMemsMap;
                                    int i16 = dalvikSubitemPss5;
                                    ArrayList<MemItem> arrayList10 = procMems7;
                                    SparseArray<MemItem> sparseArray6 = procMemsMap;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th13) {
                                th = th13;
                                long j24 = myTotalUss;
                                long j25 = myTotalRss;
                                long j26 = myTotalSwapPss2;
                                ProcessRecord processRecord6 = r2;
                                long[] jArr11 = dalvikSubitemPss5;
                                long[] jArr12 = procMems7;
                                long myTotalUss5 = procMemsMap;
                                int i17 = oomAdj;
                                int i18 = dalvikSubitemPss5;
                                ArrayList<MemItem> arrayList11 = procMems7;
                                SparseArray<MemItem> sparseArray7 = procMemsMap;
                                while (true) {
                                    break;
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th14) {
                            th = th14;
                            long j27 = myTotalUss;
                            long j28 = myTotalRss;
                            long j29 = myTotalSwapPss2;
                            long[] jArr13 = dalvikSubitemPss5;
                            long[] jArr14 = procMems7;
                            long myTotalUss6 = procMemsMap;
                            int i19 = oomAdj;
                            ProcessRecord processRecord7 = r;
                            int i20 = dalvikSubitemPss5;
                            ArrayList<MemItem> arrayList12 = procMems7;
                            SparseArray<MemItem> sparseArray8 = procMemsMap;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } else {
                    procMemsMap5 = myTotalRss;
                    procMems6 = myTotalSwapPss2;
                    pid2 = pid;
                    i3 = 0;
                }
                startTime = SystemClock.currentThreadTimeMillis();
                Debug.getMemoryInfo(pid2, mi2);
                long endTime2 = SystemClock.currentThreadTimeMillis();
                reportType = 4;
                hasSwapPss = mi2.hasSwappedOutPss;
                endTime = endTime2;
                long startTime22 = startTime;
                if (memoryUsageDumpOptions.dumpDetails) {
                }
                long myTotalPss222222 = (long) mi2.getTotalPss();
                myTotalUss = (long) mi2.getTotalUss();
                myTotalRss = (long) mi2.getTotalRss();
                myTotalSwapPss2 = (long) mi2.getTotalSwappedOutPss();
                synchronized (this) {
                }
            }
            i8 = i - 1;
            procMems8 = oomPss2;
            myTotalRss = procMemsMap4;
            dalvikSubitemPss5 = realtimeMs3;
            oomProcs2 = oomProcs;
            procMems7 = uptimeMs;
            r2 = tmpLong3;
            myTotalSwapPss2 = procMems4;
            dalvikSubitemPss6 = dalvikSubitemPss3;
            strArr = innerArgs;
            arrayList = procs;
        }
        SparseArray<MemItem> procMemsMap7 = myTotalRss;
        ArrayList<MemItem> procMems9 = myTotalSwapPss2;
        long[] tmpLong5 = r2;
        long j30 = dalvikSubitemPss5;
        long j31 = procMems7;
        long[] dalvikSubitemPss7 = dalvikSubitemPss5;
        long[] oomPss3 = procMems7;
        long cachedPss = procMemsMap;
        if (procs.size() <= 1 || memoryUsageDumpOptions.packages) {
            SparseArray<MemItem> sparseArray9 = procMemsMap7;
            proto = proto3;
            long[] jArr15 = tmpLong5;
            ArrayList<MemItem> arrayList13 = procMems9;
            long[] jArr16 = dalvikSubitemPss7;
            ActivityManagerService activityManagerService2 = activityManagerService;
        } else {
            updateCpuStatsNow();
            synchronized (activityManagerService.mProcessCpuTracker) {
                try {
                    int N4 = activityManagerService.mProcessCpuTracker.countStats();
                    Debug.MemoryInfo mi4 = null;
                    long nativeProcTotalPss3 = 0;
                    int i21 = 0;
                    long nativeSwapPss2 = nativeSwapPss;
                    while (i21 < N4) {
                        try {
                            ProcessCpuTracker.Stats st2 = activityManagerService.mProcessCpuTracker.getStats(i21);
                            long cachedPss2 = cachedPss;
                            try {
                                if (st2.vsize <= 0 || procMemsMap7.indexOfKey(st2.pid) >= 0) {
                                    N = N4;
                                    oomPss = oomPss3;
                                    procMemsMap2 = procMemsMap7;
                                    proto2 = proto3;
                                    tmpLong = tmpLong5;
                                    procMems = procMems9;
                                    dalvikSubitemPss = dalvikSubitemPss7;
                                } else {
                                    if (mi4 == null) {
                                        try {
                                            mi = new Debug.MemoryInfo();
                                        } catch (Throwable th15) {
                                            th = th15;
                                            long j32 = nativeSwapPss2;
                                            long nativeSwapPss3 = nativeProcTotalPss3;
                                            SparseArray<MemItem> sparseArray10 = procMemsMap7;
                                            ProtoOutputStream protoOutputStream = proto3;
                                            Debug.MemoryInfo memoryInfo = mi4;
                                        }
                                    } else {
                                        mi = mi4;
                                    }
                                    if (!brief) {
                                        try {
                                            if (!memoryUsageDumpOptions.oomOnly) {
                                                Debug.getMemoryInfo(st2.pid, mi);
                                                N = N4;
                                                procMemsMap2 = procMemsMap7;
                                                tmpLong2 = tmpLong5;
                                                myTotalPss = (long) mi.getTotalPss();
                                                oomPss = oomPss3;
                                                myTotalSwapPss = (long) mi.getTotalSwappedOutPss();
                                                totalPss += myTotalPss;
                                                nativeProcTotalPss = nativeProcTotalPss3 + myTotalPss;
                                                nativeProcTotalPss2 = nativeProcTotalPss;
                                                try {
                                                    tmpLong = tmpLong2;
                                                    proto2 = proto3;
                                                    try {
                                                        MemItem memItem = new MemItem(st2.name + " (pid " + st2.pid + ")", st2.name, myTotalPss, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                                        MemItem pssItem = memItem;
                                                        procMems2 = procMems9;
                                                    } catch (Throwable th16) {
                                                        th = th16;
                                                        ArrayList<MemItem> arrayList14 = procMems9;
                                                        long j33 = nativeSwapPss2;
                                                        long[] jArr17 = dalvikSubitemPss7;
                                                        long j34 = cachedPss2;
                                                        long[] jArr18 = oomPss;
                                                        long nativeSwapPss4 = nativeProcTotalPss2;
                                                        ProtoOutputStream protoOutputStream2 = proto2;
                                                        while (true) {
                                                            try {
                                                                break;
                                                            } catch (Throwable th17) {
                                                                th = th17;
                                                            }
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Throwable th18) {
                                                    th = th18;
                                                    long[] jArr19 = tmpLong2;
                                                    ArrayList<MemItem> arrayList15 = procMems9;
                                                    long j35 = nativeSwapPss2;
                                                    ProtoOutputStream protoOutputStream3 = proto3;
                                                    long[] jArr20 = dalvikSubitemPss7;
                                                    long j36 = cachedPss2;
                                                    long[] jArr21 = oomPss;
                                                    long nativeSwapPss5 = nativeProcTotalPss2;
                                                    while (true) {
                                                        break;
                                                    }
                                                    throw th;
                                                }
                                                try {
                                                    procMems2.add(pssItem);
                                                    nativePss += (long) mi.nativePss;
                                                    long nativeSwapPss6 = nativeSwapPss2 + ((long) mi.nativeSwappedOutPss);
                                                    try {
                                                        dalvikPss += (long) mi.dalvikPss;
                                                        dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                                        j = 0;
                                                        while (true) {
                                                            dalvikSubitemPss2 = dalvikSubitemPss7;
                                                            try {
                                                                if (j < dalvikSubitemPss2.length) {
                                                                    break;
                                                                }
                                                                procMems3 = procMems2;
                                                                try {
                                                                    dalvikSubitemPss2[j] = dalvikSubitemPss2[j] + ((long) mi.getOtherPss(17 + j));
                                                                    ProcessCpuTracker.Stats st3 = st2;
                                                                    dalvikSubitemPss = dalvikSubitemPss2;
                                                                    dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + ((long) mi.getOtherSwappedOutPss(17 + j));
                                                                    j++;
                                                                    procMems2 = procMems3;
                                                                    st2 = st3;
                                                                    dalvikSubitemPss7 = dalvikSubitemPss;
                                                                } catch (Throwable th19) {
                                                                    th = th19;
                                                                    long j37 = cachedPss2;
                                                                    long[] jArr22 = oomPss;
                                                                    long j38 = nativeProcTotalPss2;
                                                                    ProtoOutputStream protoOutputStream4 = proto2;
                                                                    long[] jArr23 = dalvikSubitemPss;
                                                                    while (true) {
                                                                        break;
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Throwable th20) {
                                                                th = th20;
                                                                ArrayList<MemItem> arrayList16 = procMems2;
                                                                long[] jArr24 = dalvikSubitemPss2;
                                                                long j39 = cachedPss2;
                                                                long[] jArr25 = oomPss;
                                                                long j40 = nativeProcTotalPss2;
                                                                ProtoOutputStream protoOutputStream5 = proto2;
                                                                while (true) {
                                                                    break;
                                                                }
                                                                throw th;
                                                            }
                                                        }
                                                        procMems = procMems2;
                                                        ProcessCpuTracker.Stats stats = st2;
                                                        dalvikSubitemPss = dalvikSubitemPss2;
                                                        long otherPss2 = otherPss + ((long) mi.otherPss);
                                                        long otherSwapPss2 = otherSwapPss + ((long) mi.otherSwappedOutPss);
                                                        for (j2 = 0; j2 < 17; j2++) {
                                                            long mem = (long) mi.getOtherPss(j2);
                                                            miscPss[j2] = miscPss[j2] + mem;
                                                            otherPss2 = otherPss - mem;
                                                            long mem2 = (long) mi.getOtherSwappedOutPss(j2);
                                                            miscSwapPss[j2] = miscSwapPss[j2] + mem2;
                                                            otherSwapPss2 = otherSwapPss - mem2;
                                                        }
                                                        oomPss[0] = oomPss[0] + myTotalPss;
                                                        oomSwapPss[0] = oomSwapPss[0] + myTotalSwapPss;
                                                        if (oomProcs[0] == null) {
                                                            oomProcs[0] = new ArrayList<>();
                                                        }
                                                        oomProcs[0].add(pssItem);
                                                        mi4 = mi;
                                                        nativeSwapPss2 = nativeSwapPss6;
                                                        nativeProcTotalPss3 = nativeProcTotalPss2;
                                                    } catch (Throwable th21) {
                                                        th = th21;
                                                        ArrayList<MemItem> arrayList17 = procMems2;
                                                        while (true) {
                                                            break;
                                                        }
                                                        throw th;
                                                    }
                                                } catch (Throwable th22) {
                                                    th = th22;
                                                    ArrayList<MemItem> arrayList18 = procMems2;
                                                    long j41 = nativeSwapPss2;
                                                    while (true) {
                                                        break;
                                                    }
                                                    throw th;
                                                }
                                            }
                                        } catch (Throwable th23) {
                                            th = th23;
                                            long j42 = nativeSwapPss2;
                                            long nativeSwapPss7 = nativeProcTotalPss3;
                                            SparseArray<MemItem> sparseArray11 = procMemsMap7;
                                            ProtoOutputStream protoOutputStream6 = proto3;
                                            ActivityManagerService activityManagerService3 = activityManagerService;
                                            while (true) {
                                                break;
                                            }
                                            throw th;
                                        }
                                    }
                                    try {
                                        N = N4;
                                        procMemsMap2 = procMemsMap7;
                                        tmpLong2 = tmpLong5;
                                        try {
                                            mi.nativePss = (int) Debug.getPss(st2.pid, tmpLong2, null);
                                            mi.nativePrivateDirty = (int) tmpLong2[0];
                                            myTotalPss = (long) mi.getTotalPss();
                                            oomPss = oomPss3;
                                            myTotalSwapPss = (long) mi.getTotalSwappedOutPss();
                                            totalPss += myTotalPss;
                                            nativeProcTotalPss = nativeProcTotalPss3 + myTotalPss;
                                        } catch (Throwable th24) {
                                            th = th24;
                                            long[] jArr26 = tmpLong2;
                                            ArrayList<MemItem> arrayList19 = procMems9;
                                            long j43 = nativeSwapPss2;
                                            long nativeSwapPss8 = nativeProcTotalPss3;
                                            ProtoOutputStream protoOutputStream7 = proto3;
                                            long[] jArr27 = dalvikSubitemPss7;
                                            long j44 = cachedPss2;
                                            while (true) {
                                                break;
                                            }
                                            throw th;
                                        }
                                    } catch (Throwable th25) {
                                        th = th25;
                                        SparseArray<MemItem> sparseArray12 = procMemsMap7;
                                        long[] jArr28 = tmpLong5;
                                        ArrayList<MemItem> arrayList20 = procMems9;
                                        long j45 = nativeSwapPss2;
                                        long nativeSwapPss9 = nativeProcTotalPss3;
                                        ProtoOutputStream protoOutputStream8 = proto3;
                                        ActivityManagerService activityManagerService4 = activityManagerService;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                    try {
                                        nativeProcTotalPss2 = nativeProcTotalPss;
                                        tmpLong = tmpLong2;
                                        proto2 = proto3;
                                        MemItem memItem2 = new MemItem(st2.name + " (pid " + st2.pid + ")", st2.name, myTotalPss, (long) mi.getSummaryTotalSwapPss(), st2.pid, false);
                                        MemItem pssItem2 = memItem2;
                                        procMems2 = procMems9;
                                        procMems2.add(pssItem2);
                                        nativePss += (long) mi.nativePss;
                                        long nativeSwapPss62 = nativeSwapPss2 + ((long) mi.nativeSwappedOutPss);
                                        dalvikPss += (long) mi.dalvikPss;
                                        dalvikSwapPss += (long) mi.dalvikSwappedOutPss;
                                        j = 0;
                                        while (true) {
                                            dalvikSubitemPss2 = dalvikSubitemPss7;
                                            if (j < dalvikSubitemPss2.length) {
                                            }
                                            dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + ((long) mi.getOtherSwappedOutPss(17 + j));
                                            j++;
                                            procMems2 = procMems3;
                                            st2 = st3;
                                            dalvikSubitemPss7 = dalvikSubitemPss;
                                        }
                                        procMems = procMems2;
                                        ProcessCpuTracker.Stats stats2 = st2;
                                        dalvikSubitemPss = dalvikSubitemPss2;
                                        long otherPss22 = otherPss + ((long) mi.otherPss);
                                        long otherSwapPss22 = otherSwapPss + ((long) mi.otherSwappedOutPss);
                                        while (j2 < 17) {
                                        }
                                        oomPss[0] = oomPss[0] + myTotalPss;
                                        oomSwapPss[0] = oomSwapPss[0] + myTotalSwapPss;
                                        if (oomProcs[0] == null) {
                                        }
                                        oomProcs[0].add(pssItem2);
                                        mi4 = mi;
                                        nativeSwapPss2 = nativeSwapPss62;
                                        nativeProcTotalPss3 = nativeProcTotalPss2;
                                    } catch (Throwable th26) {
                                        th = th26;
                                        long[] jArr29 = tmpLong2;
                                        ArrayList<MemItem> arrayList21 = procMems9;
                                        long j46 = nativeSwapPss2;
                                        ProtoOutputStream protoOutputStream9 = proto3;
                                        long[] jArr30 = dalvikSubitemPss7;
                                        long j47 = cachedPss2;
                                        long[] jArr31 = oomPss;
                                        long nativeSwapPss10 = nativeProcTotalPss;
                                        while (true) {
                                            break;
                                        }
                                        throw th;
                                    }
                                }
                                i21++;
                                cachedPss = cachedPss2;
                                procMemsMap7 = procMemsMap2;
                                N4 = N;
                                oomPss3 = oomPss;
                                tmpLong5 = tmpLong;
                                proto3 = proto2;
                                procMems9 = procMems;
                                dalvikSubitemPss7 = dalvikSubitemPss;
                                activityManagerService = this;
                            } catch (Throwable th27) {
                                th = th27;
                                SparseArray<MemItem> sparseArray13 = procMemsMap7;
                                long[] jArr32 = tmpLong5;
                                ArrayList<MemItem> arrayList22 = procMems9;
                                long j48 = nativeSwapPss2;
                                long nativeSwapPss11 = nativeProcTotalPss3;
                                ProtoOutputStream protoOutputStream10 = proto3;
                                Debug.MemoryInfo memoryInfo2 = mi4;
                                ActivityManagerService activityManagerService42 = activityManagerService;
                                while (true) {
                                    break;
                                }
                                throw th;
                            }
                        } catch (Throwable th28) {
                            th = th28;
                            SparseArray<MemItem> sparseArray14 = procMemsMap7;
                            long[] jArr33 = tmpLong5;
                            ArrayList<MemItem> arrayList23 = procMems9;
                            long j49 = nativeSwapPss2;
                            long j50 = cachedPss;
                            long nativeSwapPss12 = nativeProcTotalPss3;
                            ProtoOutputStream protoOutputStream11 = proto3;
                            Debug.MemoryInfo memoryInfo3 = mi4;
                            long[] jArr34 = dalvikSubitemPss7;
                            ActivityManagerService activityManagerService5 = activityManagerService;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    }
                    long cachedPss3 = cachedPss;
                    long[] oomPss4 = oomPss3;
                    SparseArray<MemItem> sparseArray15 = procMemsMap7;
                    ProtoOutputStream proto4 = proto3;
                    long[] jArr35 = tmpLong5;
                    ArrayList<MemItem> procMems10 = procMems9;
                    long[] dalvikSubitemPss8 = dalvikSubitemPss7;
                    try {
                    } catch (Throwable th29) {
                        th = th29;
                        long j51 = nativeSwapPss2;
                        long j52 = cachedPss3;
                        long[] jArr36 = oomPss4;
                        ProtoOutputStream protoOutputStream12 = proto4;
                        long[] jArr37 = dalvikSubitemPss8;
                        long nativeSwapPss13 = nativeProcTotalPss3;
                        Debug.MemoryInfo memoryInfo4 = mi4;
                        long j53 = j51;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                } catch (Throwable th30) {
                    th = th30;
                    long j54 = cachedPss;
                    SparseArray<MemItem> sparseArray16 = procMemsMap7;
                    long[] jArr38 = tmpLong5;
                    ArrayList<MemItem> arrayList24 = procMems9;
                    long[] jArr39 = dalvikSubitemPss7;
                    ProtoOutputStream protoOutputStream13 = proto3;
                    ActivityManagerService activityManagerService6 = activityManagerService;
                    ProtoOutputStream protoOutputStream14 = protoOutputStream13;
                    while (true) {
                        break;
                    }
                    throw th;
                }
            }
        }
        proto.flush();
    }

    private void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss, long memtrack, String name) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(oomAdj));
        sb.append(' ');
        sb.append(ProcessList.makeProcStateString(procState));
        sb.append(' ');
        ProcessList.appendRamKb(sb, pss);
        sb.append(": ");
        sb.append(name);
        if (memtrack > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(memtrack));
            sb.append(" memtrack)");
        }
    }

    private void appendMemInfo(StringBuilder sb, ProcessMemInfo mi) {
        appendBasicMemEntry(sb, mi.oomAdj, mi.procState, mi.pss, mi.memtrack, mi.name);
        sb.append(" (pid ");
        sb.append(mi.pid);
        sb.append(") ");
        sb.append(mi.adjType);
        sb.append(10);
        if (mi.adjReason != null) {
            sb.append("                      ");
            sb.append(mi.adjReason);
            sb.append(10);
        }
    }

    /* JADX INFO: finally extract failed */
    /* JADX WARNING: type inference failed for: r15v2, types: [boolean, int] */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x051b, code lost:
        resetPriorityAfterLockedSection();
        r2.append(r53.toString());
        android.util.StatsLog.write(81);
        r17 = r2;
        addErrorToDropBox("lowmem", null, "system_server", null, null, r48.toString(), r2.toString(), null, null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x0548, code lost:
        monitor-enter(r56);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:?, code lost:
        boostPriorityForLockedSection();
        r0 = android.os.SystemClock.uptimeMillis();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x0554, code lost:
        if (r13.mLastMemUsageReportTime >= r0) goto L_0x0558;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:112:0x0556, code lost:
        r13.mLastMemUsageReportTime = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:0x0558, code lost:
        monitor-exit(r56);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x0559, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:0x055c, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x055d, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x055f, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x0562, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:137:0x05a6, code lost:
        r0 = th;
     */
    /* JADX WARNING: Unknown variable types count: 1 */
    public void reportMemUsage(ArrayList<ProcessMemInfo> memInfos) {
        List<ProcessCpuTracker.Stats> stats;
        long totalMemtrack;
        long totalPss;
        SparseArray<ProcessMemInfo> infoMap;
        StringBuilder stack;
        StringBuilder tag;
        long totalPss2;
        int statsCount;
        List<ProcessCpuTracker.Stats> stats2;
        int lastOomAdj;
        int N;
        SparseArray<ProcessMemInfo> infoMap2;
        StringBuilder shortNativeBuilder;
        StringBuilder fullNativeBuilder;
        long totalMemtrack2;
        StringBuilder fullJavaBuilder;
        ProcessMemInfo mi;
        StringBuilder fullJavaBuilder2;
        ArrayList<ProcessMemInfo> arrayList = memInfos;
        SparseArray<ProcessMemInfo> infoMap3 = new SparseArray<>(memInfos.size());
        int N2 = memInfos.size();
        for (int i = 0; i < N2; i++) {
            ProcessMemInfo mi2 = arrayList.get(i);
            infoMap3.put(mi2.pid, mi2);
        }
        updateCpuStatsNow();
        long[] memtrackTmp = new long[1];
        synchronized (this.mProcessCpuTracker) {
            try {
                stats = this.mProcessCpuTracker.getStats($$Lambda$ActivityManagerService$dLQ66dH4nIti4hweaVJTGHj2tMU.INSTANCE);
            } catch (Throwable th) {
                th = th;
                long[] jArr = memtrackTmp;
                SparseArray<ProcessMemInfo> sparseArray = infoMap3;
                while (true) {
                    throw th;
                }
            }
        }
        int statsCount2 = stats.size();
        SparseArray<ProcessMemInfo> fullJavaBuilder3 = null;
        for (int i2 = 0; i2 < statsCount2; i2++) {
            ProcessCpuTracker.Stats st = stats.get(i2);
            long pss = Debug.getPss(st.pid, null, memtrackTmp);
            if (pss > 0 && infoMap3.indexOfKey(st.pid) < 0) {
                ProcessMemInfo processMemInfo = new ProcessMemInfo(st.name, st.pid, JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -1, "native", null);
                processMemInfo.pss = pss;
                processMemInfo.memtrack = memtrackTmp[0];
                arrayList.add(processMemInfo);
            }
        }
        int i3 = 0;
        int N3 = memInfos.size();
        long totalMemtrack3 = 0;
        long totalPss3 = 0;
        while (i3 < N3) {
            ProcessMemInfo mi3 = arrayList.get(i3);
            int i4 = i3;
            if (mi3.pss == 0) {
                mi3.pss = Debug.getPss(mi3.pid, null, memtrackTmp);
                mi3.memtrack = memtrackTmp[0];
            }
            totalPss3 += mi3.pss;
            totalMemtrack3 += mi3.memtrack;
            i3 = i4 + 1;
        }
        Collections.sort(arrayList, new Comparator<ProcessMemInfo>() {
            public int compare(ProcessMemInfo lhs, ProcessMemInfo rhs) {
                int i = 1;
                if (lhs.oomAdj != rhs.oomAdj) {
                    if (lhs.oomAdj < rhs.oomAdj) {
                        i = -1;
                    }
                    return i;
                } else if (lhs.pss == rhs.pss) {
                    return 0;
                } else {
                    if (lhs.pss >= rhs.pss) {
                        i = -1;
                    }
                    return i;
                }
            }
        });
        StringBuilder tag2 = new StringBuilder(128);
        StringBuilder stack2 = new StringBuilder(128);
        tag2.append("Low on memory -- ");
        appendMemBucket(tag2, totalPss3, "total", false);
        appendMemBucket(stack2, totalPss3, "total", true);
        StringBuilder fullNativeBuilder2 = new StringBuilder(1024);
        StringBuilder shortNativeBuilder2 = new StringBuilder(1024);
        StringBuilder fullJavaBuilder4 = new StringBuilder(1024);
        long extraNativeRam = 0;
        long extraNativeMemtrack = 0;
        long cachedPss = 0;
        int N4 = memInfos.size();
        long[] jArr2 = memtrackTmp;
        int lastOomAdj2 = Integer.MIN_VALUE;
        boolean firstLine = true;
        int i5 = 0;
        while (true) {
            totalMemtrack = totalMemtrack3;
            int N5 = N4;
            if (i5 >= N5) {
                break;
            }
            ProcessMemInfo mi4 = arrayList.get(i5);
            if (mi4.oomAdj >= 900) {
                totalPss = totalPss3;
                cachedPss += mi4.pss;
            } else {
                totalPss = totalPss3;
            }
            if (mi4.oomAdj != -1000 && (mi4.oomAdj < 500 || mi4.oomAdj == 600 || mi4.oomAdj == 700)) {
                if (lastOomAdj2 != mi4.oomAdj) {
                    lastOomAdj2 = mi4.oomAdj;
                    if (mi4.oomAdj <= 0) {
                        tag2.append(" / ");
                    }
                    if (mi4.oomAdj >= 0) {
                        if (firstLine) {
                            stack2.append(":");
                            firstLine = false;
                        }
                        stack2.append("\n\t at ");
                    } else {
                        stack2.append("$");
                    }
                } else {
                    tag2.append(" ");
                    stack2.append("$");
                }
                if (mi4.oomAdj <= 0) {
                    appendMemBucket(tag2, mi4.pss, mi4.name, false);
                }
                appendMemBucket(stack2, mi4.pss, mi4.name, true);
                if (mi4.oomAdj >= 0 && (i5 + 1 >= N5 || arrayList.get(i5 + 1).oomAdj != lastOomAdj2)) {
                    stack2.append("(");
                    for (int k = 0; k < DUMP_MEM_OOM_ADJ.length; k++) {
                        if (DUMP_MEM_OOM_ADJ[k] == mi4.oomAdj) {
                            stack2.append(DUMP_MEM_OOM_LABEL[k]);
                            stack2.append(":");
                            stack2.append(DUMP_MEM_OOM_ADJ[k]);
                        }
                    }
                    stack2.append(")");
                }
            }
            appendMemInfo(fullNativeBuilder2, mi4);
            if (mi4.oomAdj == -1000) {
                if (mi4.pss >= 512) {
                    fullJavaBuilder2 = shortNativeBuilder2;
                    appendMemInfo(fullJavaBuilder2, mi4);
                } else {
                    fullJavaBuilder2 = shortNativeBuilder2;
                    extraNativeRam += mi4.pss;
                    extraNativeMemtrack += mi4.memtrack;
                }
                N = N5;
                tag = tag2;
                stack = stack2;
                shortNativeBuilder = fullJavaBuilder2;
                statsCount = statsCount2;
                stats2 = stats;
                lastOomAdj = lastOomAdj2;
                infoMap = infoMap3;
                fullJavaBuilder = fullJavaBuilder4;
                totalMemtrack2 = totalMemtrack;
                totalPss2 = totalPss;
                infoMap2 = null;
                fullNativeBuilder = fullNativeBuilder2;
            } else {
                StringBuilder shortNativeBuilder3 = shortNativeBuilder2;
                if (extraNativeRam > 0) {
                    lastOomAdj = lastOomAdj2;
                    fullNativeBuilder = fullNativeBuilder2;
                    N = N5;
                    statsCount = statsCount2;
                    stats2 = stats;
                    totalMemtrack2 = totalMemtrack;
                    mi = mi4;
                    totalPss2 = totalPss;
                    tag = tag2;
                    stack = stack2;
                    shortNativeBuilder = shortNativeBuilder3;
                    infoMap = infoMap3;
                    infoMap2 = null;
                    appendBasicMemEntry(shortNativeBuilder3, JobSchedulerShellCommand.CMD_ERR_NO_PACKAGE, -1, extraNativeRam, extraNativeMemtrack, "(Other native)");
                    shortNativeBuilder.append(10);
                    extraNativeRam = 0;
                } else {
                    N = N5;
                    mi = mi4;
                    tag = tag2;
                    stack = stack2;
                    shortNativeBuilder = shortNativeBuilder3;
                    statsCount = statsCount2;
                    stats2 = stats;
                    lastOomAdj = lastOomAdj2;
                    infoMap = infoMap3;
                    totalMemtrack2 = totalMemtrack;
                    totalPss2 = totalPss;
                    infoMap2 = null;
                    fullNativeBuilder = fullNativeBuilder2;
                }
                fullJavaBuilder = fullJavaBuilder4;
                appendMemInfo(fullJavaBuilder, mi);
            }
            i5++;
            fullJavaBuilder4 = fullJavaBuilder;
            totalMemtrack3 = totalMemtrack2;
            fullNativeBuilder2 = fullNativeBuilder;
            fullJavaBuilder3 = infoMap2;
            N4 = N;
            lastOomAdj2 = lastOomAdj;
            stats = stats2;
            statsCount2 = statsCount;
            totalPss3 = totalPss2;
            tag2 = tag;
            stack2 = stack;
            infoMap3 = infoMap;
            shortNativeBuilder2 = shortNativeBuilder;
            arrayList = memInfos;
        }
        StringBuilder tag3 = tag2;
        StringBuilder stack3 = stack2;
        int statsCount3 = statsCount2;
        List<ProcessCpuTracker.Stats> stats3 = stats;
        int i6 = lastOomAdj2;
        SparseArray<ProcessMemInfo> sparseArray2 = infoMap3;
        StringBuilder shortNativeBuilder4 = shortNativeBuilder2;
        long totalMemtrack4 = totalMemtrack;
        StringBuilder fullNativeBuilder3 = fullNativeBuilder2;
        ? r15 = fullJavaBuilder3;
        StringBuilder fullJavaBuilder5 = fullJavaBuilder4;
        fullJavaBuilder5.append("           ");
        long totalPss4 = totalPss3;
        ProcessList.appendRamKb(fullJavaBuilder5, totalPss4);
        fullJavaBuilder5.append(": TOTAL");
        if (totalMemtrack4 > 0) {
            fullJavaBuilder5.append(" (");
            fullJavaBuilder5.append(stringifyKBSize(totalMemtrack4));
            fullJavaBuilder5.append(" memtrack)");
        }
        fullJavaBuilder5.append("\n");
        MemInfoReader memInfo = new MemInfoReader();
        memInfo.readMemInfo();
        long[] infos = memInfo.getRawInfo();
        StringBuilder memInfoBuilder = new StringBuilder(1024);
        Debug.getMemInfo(infos);
        memInfoBuilder.append("  MemInfo: ");
        memInfoBuilder.append(stringifyKBSize(infos[5]));
        memInfoBuilder.append(" slab, ");
        memInfoBuilder.append(stringifyKBSize(infos[4]));
        memInfoBuilder.append(" shmem, ");
        memInfoBuilder.append(stringifyKBSize(infos[12]));
        memInfoBuilder.append(" vm alloc, ");
        memInfoBuilder.append(stringifyKBSize(infos[13]));
        memInfoBuilder.append(" page tables ");
        memInfoBuilder.append(stringifyKBSize(infos[14]));
        memInfoBuilder.append(" kernel stack\n");
        memInfoBuilder.append("           ");
        memInfoBuilder.append(stringifyKBSize(infos[2]));
        memInfoBuilder.append(" buffers, ");
        long totalMemtrack5 = totalMemtrack4;
        memInfoBuilder.append(stringifyKBSize(infos[3]));
        memInfoBuilder.append(" cached, ");
        memInfoBuilder.append(stringifyKBSize(infos[11]));
        memInfoBuilder.append(" mapped, ");
        memInfoBuilder.append(stringifyKBSize(infos[1]));
        memInfoBuilder.append(" free\n");
        if (infos[10] != 0) {
            memInfoBuilder.append("  ZRAM: ");
            memInfoBuilder.append(stringifyKBSize(infos[10]));
            memInfoBuilder.append(" RAM, ");
            memInfoBuilder.append(stringifyKBSize(infos[8]));
            memInfoBuilder.append(" swap total, ");
            memInfoBuilder.append(stringifyKBSize(infos[9]));
            memInfoBuilder.append(" swap free\n");
        }
        long[] ksm = getKsmInfo();
        if (!(ksm[1] == 0 && ksm[r15] == 0 && ksm[2] == 0 && ksm[3] == 0)) {
            memInfoBuilder.append("  KSM: ");
            memInfoBuilder.append(stringifyKBSize(ksm[1]));
            memInfoBuilder.append(" saved from shared ");
            memInfoBuilder.append(stringifyKBSize(ksm[r15]));
            memInfoBuilder.append("\n       ");
            memInfoBuilder.append(stringifyKBSize(ksm[2]));
            memInfoBuilder.append(" unshared; ");
            memInfoBuilder.append(stringifyKBSize(ksm[3]));
            memInfoBuilder.append(" volatile\n");
        }
        memInfoBuilder.append("  Free RAM: ");
        memInfoBuilder.append(stringifyKBSize(cachedPss + memInfo.getCachedSizeKb() + memInfo.getFreeSizeKb()));
        memInfoBuilder.append("\n");
        memInfoBuilder.append("  Used RAM: ");
        memInfoBuilder.append(stringifyKBSize((totalPss4 - cachedPss) + memInfo.getKernelUsedSizeKb()));
        memInfoBuilder.append("\n");
        memInfoBuilder.append("  Lost RAM: ");
        memInfoBuilder.append(stringifyKBSize(((((memInfo.getTotalSizeKb() - totalPss4) - memInfo.getFreeSizeKb()) - memInfo.getRealCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb()));
        memInfoBuilder.append("\n");
        Slog.i(TAG, "Low on memory:");
        Slog.i(TAG, shortNativeBuilder4.toString());
        Slog.i(TAG, fullJavaBuilder5.toString());
        Slog.i(TAG, memInfoBuilder.toString());
        StringBuilder dropBuilder = new StringBuilder(1024);
        dropBuilder.append("Low on memory:");
        StringBuilder stack4 = stack3;
        dropBuilder.append(stack4);
        dropBuilder.append(10);
        dropBuilder.append(fullNativeBuilder3);
        dropBuilder.append(fullJavaBuilder5);
        dropBuilder.append(10);
        dropBuilder.append(memInfoBuilder);
        dropBuilder.append(10);
        StringWriter catSw = new StringWriter();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                FastPrintWriter fastPrintWriter = new FastPrintWriter(catSw, r15, 256);
                String[] emptyArgs = new String[r15];
                fastPrintWriter.println();
                StringWriter catSw2 = catSw;
                StringBuilder sb = memInfoBuilder;
                long[] jArr3 = infos;
                MemInfoReader memInfoReader = memInfo;
                long j = totalPss4;
                try {
                    dumpProcessesLocked(null, fastPrintWriter, emptyArgs, 0, false, null, -1);
                    fastPrintWriter.println();
                    this.mServices.newServiceDumperLocked(null, fastPrintWriter, emptyArgs, 0, false, null).dumpLocked();
                    fastPrintWriter.println();
                    StringBuilder sb2 = fullJavaBuilder5;
                    StringBuilder sb3 = stack4;
                    int i7 = statsCount3;
                    long j2 = totalMemtrack5;
                    StringBuilder dropBuilder2 = dropBuilder;
                    List<ProcessCpuTracker.Stats> list = stats3;
                    StringBuilder sb4 = fullNativeBuilder3;
                    try {
                        dumpActivitiesLocked(null, fastPrintWriter, emptyArgs, 0, false, false, null);
                        fastPrintWriter.flush();
                    } catch (Throwable th2) {
                        th = th2;
                        StringBuilder sb5 = dropBuilder2;
                        StringBuilder sb6 = tag3;
                        StringWriter stringWriter = catSw2;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th3) {
                                th = th3;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    StringBuilder sb7 = fullJavaBuilder5;
                    StringBuilder sb8 = stack4;
                    StringBuilder sb9 = dropBuilder;
                    StringBuilder sb10 = fullNativeBuilder3;
                    List<ProcessCpuTracker.Stats> list2 = stats3;
                    int i8 = statsCount3;
                    StringBuilder fullNativeBuilder4 = tag3;
                    long j3 = totalMemtrack5;
                    StringWriter stringWriter2 = catSw2;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th5) {
                th = th5;
                StringBuilder sb11 = memInfoBuilder;
                long[] jArr4 = infos;
                MemInfoReader memInfoReader2 = memInfo;
                long j4 = totalPss4;
                StringBuilder sb12 = fullJavaBuilder5;
                StringBuilder sb13 = stack4;
                StringBuilder sb14 = dropBuilder;
                StringBuilder sb15 = fullNativeBuilder3;
                List<ProcessCpuTracker.Stats> list3 = stats3;
                int i9 = statsCount3;
                StringBuilder fullNativeBuilder5 = tag3;
                long j5 = totalMemtrack5;
                StringWriter stringWriter3 = catSw;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    static /* synthetic */ boolean lambda$reportMemUsage$4(ProcessCpuTracker.Stats st) {
        return st.vsize > 0;
    }

    private static boolean scanArgs(String[] args, String value) {
        if (args != null) {
            for (String arg : args) {
                if (value.equals(arg)) {
                    return true;
                }
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public final boolean removeDyingProviderLocked(ProcessRecord proc, ContentProviderRecord cpr, boolean always) {
        boolean inLaunching = this.mLaunchingProviders.contains(cpr);
        if (!inLaunching || always) {
            synchronized (cpr) {
                cpr.launchingApp = null;
                cpr.notifyAll();
            }
            this.mProviderMap.removeProviderByClass(cpr.name, UserHandle.getUserId(cpr.uid));
            String[] names = cpr.info.authority.split(";");
            for (String removeProviderByName : names) {
                this.mProviderMap.removeProviderByName(removeProviderByName, UserHandle.getUserId(cpr.uid));
            }
            if (cpr.proc != null) {
                cpr.proc.pubProviders.remove(cpr.info.name);
            } else {
                ProcessRecord app = getProcessRecordLocked(cpr.info.processName, cpr.appInfo.uid, false);
                if (app != null) {
                    app.pubProviders.remove(cpr.info.name);
                }
            }
        }
        for (int i = cpr.connections.size() - 1; i >= 0; i--) {
            ContentProviderConnection conn = cpr.connections.get(i);
            if (!conn.waiting || !inLaunching || always) {
                ProcessRecord capp = conn.client;
                conn.dead = true;
                if (conn.stableCount > 0) {
                    if (!(capp == this.mHomeProcess || capp.persistent || capp.thread == null || capp.pid == 0 || capp.pid == MY_PID)) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("depends on provider ");
                        sb.append(cpr.name.flattenToShortString());
                        sb.append(" in dying proc ");
                        sb.append(proc != null ? proc.processName : "??");
                        sb.append(" (adj ");
                        sb.append(proc != null ? Integer.valueOf(proc.setAdj) : "??");
                        sb.append(")");
                        capp.kill(sb.toString(), true);
                    }
                } else if (!(capp.thread == null || conn.provider.provider == null)) {
                    try {
                        capp.thread.unstableProviderDied(conn.provider.provider.asBinder());
                    } catch (RemoteException e) {
                    }
                    cpr.connections.remove(i);
                    if (conn.client.conProviders.remove(conn)) {
                        stopAssociationLocked(capp.uid, capp.processName, cpr.uid, cpr.name);
                    }
                }
            }
        }
        if (inLaunching && always) {
            this.mLaunchingProviders.remove(cpr);
        }
        return inLaunching;
    }

    /* access modifiers changed from: protected */
    @GuardedBy("this")
    public boolean cleanUpApplicationRecordLocked(final ProcessRecord app, boolean restarting, boolean allowRestart, int index, boolean replacingPid) {
        Slog.d(TAG, "cleanUpApplicationRecord app: " + app + ", app.bad: " + app.bad + ", restarting: " + restarting + ", allowRestart: " + allowRestart);
        if (index >= 0) {
            removeLruProcessLocked(app);
            ProcessList.remove(app.pid);
        }
        this.mProcessesToGc.remove(app);
        this.mPendingPssProcesses.remove(app);
        ProcessList.abortNextPssTime(app.procStateMemTracker);
        if (app.crashDialog != null && !app.forceCrashReport) {
            app.crashDialog.dismiss();
            app.crashDialog = null;
        }
        if (app.anrDialog != null) {
            app.anrDialog.dismiss();
            app.anrDialog = null;
        }
        if (app.waitDialog != null) {
            app.waitDialog.dismiss();
            app.waitDialog = null;
        }
        app.crashing = false;
        app.notResponding = false;
        app.resetPackageList(this.mProcessStats);
        app.unlinkDeathRecipient();
        app.makeInactive(this.mProcessStats);
        app.waitingToKill = null;
        app.forcingToImportant = null;
        updateProcessForegroundLocked(app, false, false);
        app.foregroundActivities = false;
        app.hasShownUi = false;
        app.treatLikeActivity = false;
        app.hasAboveClient = false;
        app.hasClientActivities = false;
        this.mServices.killServicesLocked(app, allowRestart);
        boolean restart = false;
        for (int i = app.pubProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = app.pubProviders.valueAt(i);
            boolean always = app.bad || !allowRestart;
            if ((removeDyingProviderLocked(app, cpr, always) || always) && cpr.hasConnectionOrHandle()) {
                restart = true;
            }
            cpr.provider = null;
            cpr.proc = null;
        }
        app.pubProviders.clear();
        if (cleanupAppInLaunchingProvidersLocked(app, false)) {
            restart = true;
        }
        if (!app.conProviders.isEmpty()) {
            for (int i2 = app.conProviders.size() - 1; i2 >= 0; i2--) {
                ContentProviderConnection conn = app.conProviders.get(i2);
                conn.provider.connections.remove(conn);
                stopAssociationLocked(app.uid, app.processName, conn.provider.uid, conn.provider.name);
            }
            app.conProviders.clear();
        }
        skipCurrentReceiverLocked(app);
        for (int i3 = app.receivers.size() - 1; i3 >= 0; i3--) {
            removeReceiverLocked(app.receivers.valueAt(i3));
        }
        app.receivers.clear();
        if (this.mBackupTarget != null && app.pid == this.mBackupTarget.app.pid) {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP || ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.d(TAG, "App " + this.mBackupTarget.appInfo + " died during backup");
            }
            this.mHandler.post(new Runnable() {
                public void run() {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService(BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentDisconnected(app.info.packageName);
                    } catch (RemoteException e) {
                    }
                }
            });
        }
        for (int i4 = this.mPendingProcessChanges.size() - 1; i4 >= 0; i4--) {
            ProcessChangeItem item = this.mPendingProcessChanges.get(i4);
            if (app.pid > 0 && item.pid == app.pid) {
                this.mPendingProcessChanges.remove(i4);
                this.mAvailProcessChanges.add(item);
            }
        }
        this.mUiHandler.obtainMessage(32, app.pid, app.info.uid, null).sendToTarget();
        if (restarting) {
            return false;
        }
        if (!app.persistent || app.isolated) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.v(TAG, "Removing non-persistent process during cleanup: " + app);
            }
            if (!replacingPid) {
                removeProcessNameLocked(app.processName, app.uid, app);
            }
            if (this.mHeavyWeightProcess == app) {
                this.mHandler.sendMessage(this.mHandler.obtainMessage(25, this.mHeavyWeightProcess.userId, 0));
                this.mHeavyWeightProcess = null;
            }
        } else if (!app.removed && this.mPersistentStartingProcesses.indexOf(app) < 0) {
            this.mPersistentStartingProcesses.add(app);
            restart = true;
        }
        if ((ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityManagerDebugConfig.DEBUG_CLEANUP) && this.mProcessesOnHold.contains(app)) {
            Slog.v(TAG, "Clean-up removing on hold: " + app);
        }
        this.mProcessesOnHold.remove(app);
        if (app == this.mHomeProcess) {
            this.mHomeProcess = null;
            this.mHwAMSEx.reportHomeProcess(this.mHomeProcess);
        }
        if (app == this.mPreviousProcess) {
            this.mPreviousProcess = null;
        }
        Flog.i(100, "cleanUpApplicationRecordLocked, pid: " + app.pid + ", restart: " + restart);
        if (!isAcquireAppResourceLocked(app)) {
            restart = false;
            clearAppAndAppServiceResource(app);
            for (int i5 = this.mLaunchingProviders.size() - 1; i5 >= 0; i5--) {
                ContentProviderRecord cpr2 = this.mLaunchingProviders.get(i5);
                if (cpr2.launchingApp == app) {
                    Slog.i(TAG, "the host process of " + cpr2 + " do not restart anymore and " + cpr2.connections.size() + " clients waiting for it, notify them to release the Binder!");
                    removeDyingProviderLocked(app, cpr2, true);
                }
            }
        }
        if (app.userId != 0 && !this.mUserController.isUserRunning(app.userId, 0)) {
            restart = false;
        }
        if (!restart || app.isolated) {
            if (app.pid > 0 && app.pid != MY_PID) {
                synchronized (this.mPidsSelfLocked) {
                    this.mPidsSelfLocked.remove(app.pid);
                    this.mHandler.removeMessages(20, app);
                }
                this.mDAProxy.notifyProcessDied(app.pid, app.uid);
                this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
                if (app.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
                }
                app.setPid(0);
            }
            return false;
        }
        if (index < 0) {
            ProcessList.remove(app.pid);
        }
        addProcessNameLocked(app);
        app.pendingStart = false;
        startProcessLocked(app, "restart", app.processName);
        return true;
    }

    /* access modifiers changed from: package-private */
    public boolean checkAppInLaunchingProvidersLocked(ProcessRecord app) {
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            if (this.mLaunchingProviders.get(i).launchingApp == app) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public boolean cleanupAppInLaunchingProvidersLocked(ProcessRecord app, boolean alwaysBad) {
        Flog.i(103, "cleanupAppInLaunchingProvidersLocked app: " + app + ", alwaysBad: " + alwaysBad + ", app.bad: " + app.bad);
        boolean restart = false;
        for (int i = this.mLaunchingProviders.size() - 1; i >= 0; i--) {
            ContentProviderRecord cpr = this.mLaunchingProviders.get(i);
            if (cpr.launchingApp == app) {
                if (alwaysBad || app.bad || !cpr.hasConnectionOrHandle()) {
                    removeDyingProviderLocked(app, cpr, true);
                } else {
                    restart = true;
                }
            }
        }
        return restart;
    }

    public List<ActivityManager.RunningServiceInfo> getServices(int maxNum, int flags) {
        List<ActivityManager.RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean canInteractAcrossUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allowed = isGetTasksAllowed("getServices", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(maxNum, flags, callingUid, allowed, canInteractAcrossUsers);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceInfoLocked;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName name) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(name);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceControlPanelLocked;
    }

    public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, boolean requireForeground, String callingPackage, int userId) throws TransactionTooLargeException {
        boolean z;
        String str;
        long origId;
        ComponentName res;
        Intent intent = service;
        int userId2 = this.mHwAMSEx.getCloneAppUserId(this.mHwAMSEx.getTargetFromIntentForClone(intent), userId);
        enforceNotIsolatedCaller("startService");
        if (intent != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        } else if (userId2 <= 0 || this.mUserController.hasStartedUserState(userId2)) {
            if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                StringBuilder sb = new StringBuilder();
                sb.append("*** startService: ");
                sb.append(intent);
                sb.append(" type=");
                str = resolvedType;
                sb.append(str);
                sb.append(" fg=");
                z = requireForeground;
                sb.append(z);
                Slog.v(TAG, sb.toString());
            } else {
                str = resolvedType;
                z = requireForeground;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId2 = Binder.clearCallingIdentity();
                    try {
                        String str2 = str;
                        origId = origId2;
                        try {
                            res = this.mServices.startServiceLocked(caller, intent, str2, callingPid, callingUid, z, callingPackage, userId2);
                            Binder.restoreCallingIdentity(origId);
                        } catch (Throwable th) {
                            th = th;
                            Binder.restoreCallingIdentity(origId);
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        origId = origId2;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return res;
        } else {
            Slog.w(TAG, "Unable to start service " + intent + " for userId:" + userId2 + " is stopped");
            return null;
        }
    }

    /* access modifiers changed from: package-private */
    public ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, int userId) throws TransactionTooLargeException {
        String str;
        long origId;
        Intent intent = service;
        int userId2 = this.mHwAMSEx.getCloneAppUserId(this.mHwAMSEx.getTargetFromIntentForClone(intent), userId);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                    StringBuilder sb = new StringBuilder();
                    sb.append("startServiceInPackage: ");
                    sb.append(intent);
                    sb.append(" type=");
                    str = resolvedType;
                    try {
                        sb.append(str);
                        Slog.v(TAG, sb.toString());
                    } catch (Throwable th) {
                        th = th;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } else {
                    str = resolvedType;
                }
                origId = Binder.clearCallingIdentity();
                ComponentName res = this.mServices.startServiceLocked(null, intent, str, -1, uid, fgRequired, callingPackage, userId2);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
                return res;
            } catch (Throwable th2) {
                th = th2;
                String str2 = resolvedType;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public int stopService(IApplicationThread caller, Intent service, String resolvedType, int userId) {
        int stopServiceLocked;
        int userId2 = this.mHwAMSEx.getCloneAppUserId(this.mHwAMSEx.getTargetFromIntentForClone(service), userId);
        enforceNotIsolatedCaller("stopService");
        if (service == null || !service.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    stopServiceLocked = this.mServices.stopServiceLocked(caller, service, resolvedType, userId2);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return stopServiceLocked;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public IBinder peekService(Intent service, String resolvedType, String callingPackage) {
        IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    peekServiceLocked = this.mServices.peekServiceLocked(service, resolvedType, callingPackage);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return peekServiceLocked;
        } else {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
    }

    public boolean stopServiceToken(ComponentName className, IBinder token, int startId) {
        boolean stopServiceTokenLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(className, token, startId);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return stopServiceTokenLocked;
    }

    public void setServiceForeground(ComponentName className, IBinder token, int id, Notification notification, int flags) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.setServiceForegroundLocked(className, token, id, notification, flags);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, boolean requireFull, String name, String callerPackage) {
        return this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, requireFull ? 2 : 0, name, callerPackage);
    }

    /* access modifiers changed from: package-private */
    public boolean isSingleton(String componentProcessName, ApplicationInfo aInfo, String className, int flags) {
        boolean result = false;
        if (UserHandle.getAppId(aInfo.uid) >= 10000) {
            if ((flags & 1073741824) != 0) {
                if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", aInfo.uid) == 0) {
                    result = true;
                } else {
                    new ComponentName(aInfo.packageName, className);
                    String msg = "Permission Denial: Component " + comp.flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold " + "android.permission.INTERACT_ACROSS_USERS";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            }
        } else if ("system".equals(componentProcessName)) {
            result = true;
        } else if ("com.huawei.indexsearch".equals(componentProcessName)) {
            result = true;
        } else if ((flags & 1073741824) != 0) {
            result = UserHandle.isSameApp(aInfo.uid, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE) || (aInfo.flags & 8) != 0;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "isSingleton(" + componentProcessName + ", " + aInfo + ", " + className + ", 0x" + Integer.toHexString(flags) + ") = " + result);
        }
        return result;
    }

    /* access modifiers changed from: package-private */
    public boolean isValidSingletonCall(int callingUid, int componentUid) {
        int componentAppId = UserHandle.getAppId(componentUid);
        return UserHandle.isSameApp(callingUid, componentUid) || componentAppId == 1000 || componentAppId == 1001 || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", componentUid) == 0;
    }

    public int bindService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String callingPackage, int userId) throws TransactionTooLargeException {
        int bindServiceLocked;
        Intent intent = service;
        int userId2 = this.mHwAMSEx.getCloneAppUserId(this.mHwAMSEx.getTargetFromIntentForClone(intent), userId);
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_BINDSERVICE);
        enforceNotIsolatedCaller("bindService");
        if (intent != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        } else if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        } else if (userId2 <= 0 || this.mUserController.hasStartedUserState(userId2)) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    bindServiceLocked = this.mServices.bindServiceLocked(caller, token, intent, resolvedType, connection, flags, callingPackage, userId2);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return bindServiceLocked;
        } else {
            Slog.w(TAG, "Unable to bind service " + intent + " for userId:" + userId2 + " is stopped");
            return 0;
        }
    }

    public boolean unbindService(IServiceConnection connection) {
        boolean unbindServiceLocked;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_UNBINDSERVICE);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                unbindServiceLocked = this.mServices.unbindServiceLocked(connection);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return unbindServiceLocked;
    }

    public void publishService(IBinder token, Intent intent, IBinder service) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (token instanceof ServiceRecord) {
                        this.mServices.publishServiceLocked((ServiceRecord) token, intent, service);
                    } else {
                        throw new IllegalArgumentException("Invalid service token");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void unbindFinished(IBinder token, Intent intent, boolean doRebind) {
        if (intent == null || !intent.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    this.mServices.unbindFinishedLocked((ServiceRecord) token, intent, doRebind);
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    public void serviceDoneExecuting(IBinder token, int type, int startId, int res) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (token instanceof ServiceRecord) {
                    this.mServices.serviceDoneExecutingLocked((ServiceRecord) token, type, startId, res);
                } else {
                    Slog.e(TAG, "serviceDoneExecuting: Invalid service token=" + token);
                    throw new IllegalArgumentException("Invalid service token");
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:89:0x019d, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01a6, code lost:
        r0 = th;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:41:0x00e9, B:85:0x019b] */
    public boolean bindBackupAgent(String packageName, int backupMode, int userId) {
        ApplicationInfo app;
        BatteryStatsImpl stats;
        BatteryStatsImpl.Uid.Pkg.Serv ss;
        ComponentName hostingName;
        int oldBackupUid;
        int newBackupUid;
        String str = packageName;
        int i = backupMode;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "bindBackupAgent: app=" + str + " mode=" + i);
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "bindBackupAgent");
        try {
            app = AppGlobals.getPackageManager().getApplicationInfo(str, 1024, userId);
        } catch (RemoteException e) {
            app = null;
        }
        if (app == null) {
            Slog.w(TAG, "Unable to bind backup agent for " + str);
            return false;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                BatteryStatsImpl stats2 = this.mBatteryStatsService.getActiveStatistics();
                synchronized (stats2) {
                    try {
                        ss = stats2.getServiceStatsLocked(app.uid, app.packageName, app.name);
                        try {
                        } catch (Throwable th) {
                            th = th;
                            stats = stats2;
                            ApplicationInfo applicationInfo = app;
                            BatteryStatsImpl.Uid.Pkg.Serv serv = ss;
                            while (true) {
                                break;
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        stats = stats2;
                        ApplicationInfo applicationInfo2 = app;
                        while (true) {
                            break;
                        }
                        throw th;
                    }
                }
                try {
                    AppGlobals.getPackageManager().setPackageStoppedState(app.packageName, false, UserHandle.getUserId(app.uid));
                } catch (RemoteException e2) {
                } catch (IllegalArgumentException e3) {
                    Slog.w(TAG, "Failed trying to unstop package " + app.packageName + ": " + e3);
                } catch (Throwable th3) {
                    th = th3;
                    ApplicationInfo applicationInfo3 = app;
                }
                BackupRecord r = new BackupRecord(ss, app, i);
                if (i == 0) {
                    hostingName = new ComponentName(app.packageName, app.backupAgentName);
                } else {
                    hostingName = new ComponentName(PackageManagerService.PLATFORM_PACKAGE_NAME, "FullBackupAgent");
                }
                BackupRecord r2 = r;
                BatteryStatsImpl.Uid.Pkg.Serv serv2 = ss;
                BatteryStatsImpl batteryStatsImpl = stats2;
                ApplicationInfo app2 = app;
                ProcessRecord proc = startProcessLocked(app.processName, app, false, 0, BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD, hostingName, false, false, false);
                if (proc == null) {
                    Slog.e(TAG, "Unable to start backup agent process " + r2);
                    resetPriorityAfterLockedSection();
                    return false;
                }
                BackupRecord r3 = r2;
                if (UserHandle.isApp(app2.uid) && i == 1) {
                    proc.inFullBackup = true;
                }
                r3.app = proc;
                oldBackupUid = this.mBackupTarget != null ? this.mBackupTarget.appInfo.uid : -1;
                newBackupUid = proc.inFullBackup ? r3.appInfo.uid : -1;
                this.mBackupTarget = r3;
                this.mBackupAppName = app2.packageName;
                updateOomAdjLocked(proc, true);
                if (proc.thread != null) {
                    if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                        Slog.v(TAG, "Agent proc already running: " + proc);
                    }
                    try {
                        proc.thread.scheduleCreateBackupAgent(app2, compatibilityInfoForPackageLocked(app2), i);
                    } catch (RemoteException e4) {
                    }
                } else if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                    Slog.v(TAG, "Agent proc not running, waiting for attach");
                }
            } catch (Throwable th4) {
                th = th4;
                ApplicationInfo applicationInfo4 = app;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        int oldBackupUid2 = oldBackupUid;
        int newBackupUid2 = newBackupUid;
        JobSchedulerInternal js = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
        if (oldBackupUid2 != -1) {
            js.removeBackingUpUid(oldBackupUid2);
        }
        if (newBackupUid2 != -1) {
            js.addBackingUpUid(newBackupUid2);
        }
        return true;
    }

    public void clearPendingBackup() {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "clearPendingBackup");
        }
        enforceCallingPermission("android.permission.BACKUP", "clearPendingBackup");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBackupTarget = null;
                this.mBackupAppName = null;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).clearAllBackingUpUids();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0032, code lost:
        resetPriorityAfterLockedSection();
        r0 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:?, code lost:
        android.app.backup.IBackupManager.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD)).agentConnected(r6, r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0047, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0049, code lost:
        r2 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:?, code lost:
        android.util.Slog.w(TAG, "Exception trying to deliver BackupAgent binding: ");
        r2.printStackTrace();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0055, code lost:
        android.os.Binder.restoreCallingIdentity(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0058, code lost:
        throw r2;
     */
    public void backupAgentCreated(String agentPackageName, IBinder agent) {
        long oldIdent;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "backupAgentCreated: " + agentPackageName + " = " + agent);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (agentPackageName != null) {
                    if (!agentPackageName.equals(this.mBackupAppName)) {
                    }
                }
                Slog.e(TAG, "Backup agent created for " + agentPackageName + " but not requested!");
                resetPriorityAfterLockedSection();
                return;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        Binder.restoreCallingIdentity(oldIdent);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00a5, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00a8, code lost:
        if (r0 == -1) goto L_0x00b5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00aa, code lost:
        ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).removeBackingUpUid(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00b5, code lost:
        return;
     */
    public void unbindBackupAgent(ApplicationInfo appInfo) {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "unbindBackupAgent: " + appInfo);
        }
        if (appInfo == null) {
            Slog.w(TAG, "unbind backup agent for null app");
            return;
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mBackupAppName == null) {
                    Slog.w(TAG, "Unbinding backup agent with no active backup");
                    try {
                        this.mBackupTarget = null;
                        this.mBackupAppName = null;
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                } else if (!this.mBackupAppName.equals(appInfo.packageName)) {
                    Slog.e(TAG, "Unbind of " + appInfo + " but is not the current backup target");
                    this.mBackupTarget = null;
                    this.mBackupAppName = null;
                    resetPriorityAfterLockedSection();
                } else {
                    ProcessRecord proc = this.mBackupTarget.app;
                    updateOomAdjLocked(proc, true);
                    proc.inFullBackup = false;
                    int oldBackupUid = this.mBackupTarget != null ? this.mBackupTarget.appInfo.uid : -1;
                    if (proc.thread != null) {
                        proc.thread.scheduleDestroyBackupAgent(appInfo, compatibilityInfoForPackageLocked(appInfo));
                    }
                    this.mBackupTarget = null;
                    this.mBackupAppName = null;
                    int oldBackupUid2 = oldBackupUid;
                }
            } catch (Exception e) {
                Slog.e(TAG, "Exception when unbinding backup agent:");
                e.printStackTrace();
            } catch (Throwable th) {
                this.mBackupTarget = null;
                this.mBackupAppName = null;
                throw th;
            }
        }
    }

    private boolean isInstantApp(ProcessRecord record, String callerPackage, int uid) {
        if (UserHandle.getAppId(uid) < 10000) {
            return false;
        }
        if (record != null) {
            return record.info.isInstantApp();
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (callerPackage == null) {
            try {
                String[] packageNames = pm.getPackagesForUid(uid);
                if (packageNames == null || packageNames.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                callerPackage = packageNames[0];
            } catch (RemoteException e) {
                Slog.e(TAG, "Error looking up if " + callerPackage + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(uid, callerPackage);
        return pm.isInstantApp(callerPackage, UserHandle.getUserId(uid));
    }

    /* access modifiers changed from: package-private */
    public boolean isPendingBroadcastProcessLocked(int pid) {
        return this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || isThirdPartyAppPendingBroadcastProcessLocked(pid) || isKeyAppPendingBroadcastProcessLocked(pid);
    }

    /* access modifiers changed from: package-private */
    public void skipPendingBroadcastLocked(int pid) {
        Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipPendingBroadcastLocked(pid);
        }
    }

    /* access modifiers changed from: package-private */
    public boolean sendPendingBroadcastsLocked(ProcessRecord app) {
        boolean didSomething = false;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            didSomething |= queue.sendPendingBroadcastsLocked(app);
        }
        return didSomething;
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v19, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v17, resolved type: android.content.Intent} */
    /* JADX WARNING: Code restructure failed: missing block: B:100:?, code lost:
        boostPriorityForLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x01de, code lost:
        if (r13 == null) goto L_0x0204;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x01e2, code lost:
        if (r13.thread == null) goto L_0x01f0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:0x01ee, code lost:
        if (r13.thread.asBinder() == r59.asBinder()) goto L_0x0204;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x01f0, code lost:
        monitor-exit(r58);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x01f1, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x01f5, code lost:
        return null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x01f6, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x01f7, code lost:
        r22 = r5;
        r9 = r7;
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
        r21 = r33;
        r12 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:113:?, code lost:
        r0 = r8.mRegisteredReceivers.get(r61.asBinder());
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x0210, code lost:
        if (r0 != null) goto L_0x02bb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x0214, code lost:
        r1 = r1;
        r21 = r33;
        r22 = r5;
        r34 = r6;
        r9 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:?, code lost:
        r1 = new com.android.server.am.ReceiverList(r8, r13, r11, r14, r7, r10);
        r1 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x022b, code lost:
        if (IS_DEBUG_VERSION == false) goto L_0x0243;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x0235, code lost:
        if (getBgBroadcastQueue().getMtmBRManager() == null) goto L_0x0243;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:123:0x0237, code lost:
        getBgBroadcastQueue().getMtmBRManager().iawareCountDuplicatedReceiver(true, r1, r15);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:125:0x0245, code lost:
        if (r1.app == null) goto L_0x0286;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:126:0x0247, code lost:
        r0 = r1.app.receivers.size();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:127:0x0251, code lost:
        if (r0 >= 1000) goto L_0x025d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:128:0x0253, code lost:
        r1.app.receivers.add(r1);
        r2 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:130:0x0285, code lost:
        throw new java.lang.IllegalStateException("Too many receivers, total of " + r0 + ", registered for pid: " + r1.pid + ", callerPackage: " + r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:132:?, code lost:
        r2 = 0;
        r61.asBinder().linkToDeath(r1, 0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:135:?, code lost:
        r1.linkedToDeath = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:136:0x0292, code lost:
        r8.mRegisteredReceivers.put(r61.asBinder(), r1);
        r0 = r1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x029f, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:140:0x02a2, code lost:
        return r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:141:0x02a3, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:142:0x02a4, code lost:
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x02a9, code lost:
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:144:0x02ad, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x02ae, code lost:
        r22 = r5;
        r9 = r7;
        r21 = r33;
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
        r12 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:146:0x02bb, code lost:
        r22 = r5;
        r34 = r6;
        r9 = r7;
        r21 = r33;
        r2 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:0x02c5, code lost:
        if (r0.uid != r14) goto L_0x040f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:151:0x02c9, code lost:
        if (r0.pid != r11) goto L_0x03df;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:153:0x02cd, code lost:
        if (r0.userId != r9) goto L_0x03af;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x02d1, code lost:
        r3 = r11;
        r11 = r11;
        r4 = r12;
        r5 = r13;
        r6 = r2;
        r7 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:?, code lost:
        r11 = new com.android.server.am.BroadcastFilter(r15, r0, r4, r63, r14, r9, r20, r19);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:158:0x02ea, code lost:
        if (r0.containsFilter(r7) == false) goto L_0x0317;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:?, code lost:
        android.util.Slog.w(TAG, "Receiver with filter " + r7 + " already registered for pid " + r0.pid + ", callerPackage is " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:162:0x0315, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x031f, code lost:
        if (getBgBroadcastQueue().getMtmBRManager() == null) goto L_0x032c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:167:?, code lost:
        getBgBroadcastQueue().getMtmBRManager().iawareCheckCombinedConditon(r7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:169:?, code lost:
        r0.add(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:170:0x0333, code lost:
        if (r11.debugCheck() != false) goto L_0x033c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:173:?, code lost:
        android.util.Slog.w(TAG, "==> For Dynamic broadcast");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:175:?, code lost:
        r8.mReceiverResolver.addFilter(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:176:0x0341, code lost:
        if (r34 == null) goto L_0x03a1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:177:0x0343, code lost:
        r11 = new java.util.ArrayList();
        r11.add(r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x034b, code lost:
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:180:?, code lost:
        r13 = r12.size();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x0352, code lost:
        if (r6 >= r13) goto L_0x039e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x0354, code lost:
        r14 = r12.get(r6);
        r15 = broadcastQueueForIntent(r14);
        r35 = new com.android.server.am.BroadcastRecord(r15, r14, null, null, -1, -1, false, null, null, -1, null, r11, null, 0, null, null, false, true, true, -1);
        r15.enqueueParallelBroadcastLocked(r35);
        r15.scheduleBroadcastsLocked();
        r6 = r6 + 1;
        r0 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:183:0x039e, code lost:
        r57 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:184:0x03a1, code lost:
        r57 = r0;
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:185:0x03a5, code lost:
        monitor-exit(r58);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:186:0x03a6, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:187:0x03a9, code lost:
        return r22;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:188:0x03aa, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:189:0x03ab, code lost:
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:190:0x03af, code lost:
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:193:0x03de, code lost:
        throw new java.lang.IllegalArgumentException("Receiver requested to register for user " + r9 + " was previously registered for user " + r0.userId + " callerPackage is " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:0x03df, code lost:
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:195:0x040e, code lost:
        throw new java.lang.IllegalArgumentException("Receiver requested to register for pid " + r11 + " was previously registered for pid " + r0.pid + " callerPackage is " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:0x040f, code lost:
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r7 = r15;
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x043e, code lost:
        throw new java.lang.IllegalArgumentException("Receiver requested to register for uid " + r14 + " was previously registered for uid " + r0.uid + " callerPackage is " + r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:198:0x043f, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:199:0x0440, code lost:
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
        r12 = r34;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:200:0x0448, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:201:0x0449, code lost:
        r22 = r5;
        r9 = r7;
        r3 = r11;
        r4 = r12;
        r5 = r13;
        r2 = r14;
        r7 = r15;
        r21 = r33;
        r12 = r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:202:0x0454, code lost:
        monitor-exit(r58);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:203:0x0455, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:204:0x0458, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:205:0x0459, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x015d, code lost:
        resetPriorityAfterLockedSection();
        r14 = r4;
        r11 = r21;
        r20 = r1;
        r0 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x0166, code lost:
        if (r2 == null) goto L_0x01a6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:76:0x0168, code lost:
        r1 = r8.mContext.getContentResolver();
        r3 = 0;
        r4 = r2.size();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:77:0x0173, code lost:
        if (r3 >= r4) goto L_0x01a6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x0175, code lost:
        r5 = r2.get(r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x017b, code lost:
        if (r20 == false) goto L_0x018b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x0185, code lost:
        if ((r5.getFlags() & com.android.server.pm.DumpState.DUMP_COMPILER_STATS) != 0) goto L_0x018b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x0187, code lost:
        r33 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x018b, code lost:
        r33 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x0194, code lost:
        if (r15.match(r1, r5, true, TAG) < 0) goto L_0x01a1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:85:0x0196, code lost:
        if (r0 != null) goto L_0x019e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:0x0198, code lost:
        r0 = new java.util.ArrayList<>();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x019e, code lost:
        r0.add(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x01a1, code lost:
        r3 = r3 + 1;
        r2 = r33;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x01a6, code lost:
        r33 = r2;
        r6 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x01a9, code lost:
        if (r6 == null) goto L_0x01b4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x01ab, code lost:
        r5 = r6.get(0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x01b4, code lost:
        r5 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x01b7, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_BROADCAST == false) goto L_0x01d7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x01b9, code lost:
        android.util.Slog.v(TAG, "Register receiver " + r15 + ": " + r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01d7, code lost:
        if (r10 != null) goto L_0x01da;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x01d9, code lost:
        return r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01da, code lost:
        monitor-enter(r58);
     */
    /* JADX WARNING: Multi-variable type inference failed */
    public Intent registerReceiver(IApplicationThread caller, String callerPackage, IIntentReceiver receiver, IntentFilter filter, String permission, int userId, int flags) {
        int i;
        int callingUid;
        int userId2;
        Iterator<String> actions;
        int i2;
        String action;
        ArrayList<Intent> stickyIntents;
        IApplicationThread iApplicationThread = caller;
        String callerPackage2 = callerPackage;
        IIntentReceiver iIntentReceiver = receiver;
        IntentFilter intentFilter = filter;
        enforceNotIsolatedCaller("registerReceiver");
        ArrayList<Intent> stickyIntents2 = null;
        ProcessRecord callerApp = null;
        int i3 = 0;
        boolean visibleToInstantApps = (flags & 1) != 0;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (iApplicationThread != null) {
                    try {
                        callerApp = getRecordForAppLocked(caller);
                        if (callerApp != null) {
                            if (callerApp.info.uid != 1000 && !callerApp.pkgList.containsKey(callerPackage2)) {
                                if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(callerPackage2)) {
                                    throw new SecurityException("Given caller package " + callerPackage2 + " is not running in process " + callerApp);
                                }
                            }
                            callingUid = callerApp.info.uid;
                            i = callerApp.pid;
                        } else {
                            throw new SecurityException("Unable to find app for caller " + iApplicationThread + " (pid=" + Binder.getCallingPid() + ") when registering receiver " + iIntentReceiver);
                        }
                    } catch (Throwable th) {
                        th = th;
                        int i4 = userId;
                        IntentFilter intentFilter2 = intentFilter;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        }
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } else {
                    callerPackage2 = null;
                    callingUid = Binder.getCallingUid();
                    i = Binder.getCallingPid();
                }
                String callerPackage3 = callerPackage2;
                ProcessRecord callerApp2 = callerApp;
                int callingPid = i;
                try {
                    boolean instantApp = isInstantApp(callerApp2, callerPackage3, callingUid);
                    userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, true, 2, "registerReceiver", callerPackage3);
                } catch (Throwable th3) {
                    th = th3;
                    IntentFilter intentFilter3 = intentFilter;
                    int i5 = userId;
                    String str = callerPackage3;
                    ProcessRecord processRecord = callerApp2;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                try {
                    Iterator<String> actions2 = filter.actionsIterator();
                    if (actions2 == null) {
                        try {
                            ArrayList<String> noAction = new ArrayList<>(1);
                            noAction.add(null);
                            actions2 = noAction.iterator();
                        } catch (Throwable th4) {
                            th = th4;
                            IntentFilter intentFilter22 = intentFilter;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    int[] userIds = {-1, UserHandle.getUserId(callingUid)};
                    while (actions2.hasNext()) {
                        try {
                            String action2 = actions2.next();
                            int length = userIds.length;
                            ArrayList<Intent> stickyIntents3 = stickyIntents2;
                            int i6 = i3;
                            while (i6 < length) {
                                try {
                                    ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(userIds[i6]);
                                    if (stickies != null) {
                                        action = action2;
                                        i2 = length;
                                        ArrayList<Intent> intents = stickies.get(action);
                                        if (intents != null) {
                                            if (stickyIntents3 == null) {
                                                actions = actions2;
                                                stickyIntents = new ArrayList<>();
                                            } else {
                                                actions = actions2;
                                                stickyIntents = stickyIntents3;
                                            }
                                            try {
                                                stickyIntents.addAll(intents);
                                                stickyIntents3 = stickyIntents;
                                            } catch (Throwable th5) {
                                                th = th5;
                                                ArrayList<Intent> arrayList = stickyIntents;
                                                IntentFilter intentFilter222 = intentFilter;
                                                while (true) {
                                                    break;
                                                }
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        } else {
                                            actions = actions2;
                                        }
                                    } else {
                                        i2 = length;
                                        actions = actions2;
                                        action = action2;
                                    }
                                    i6++;
                                    action2 = action;
                                    length = i2;
                                    actions2 = actions;
                                } catch (Throwable th6) {
                                    th = th6;
                                    int i7 = userId2;
                                    String str2 = callerPackage3;
                                    ProcessRecord processRecord2 = callerApp2;
                                    IntentFilter intentFilter4 = intentFilter;
                                    ArrayList<Intent> arrayList2 = stickyIntents3;
                                    while (true) {
                                        break;
                                    }
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            Iterator<String> it = actions2;
                            stickyIntents2 = stickyIntents3;
                            i3 = 0;
                        } catch (Throwable th7) {
                            th = th7;
                            ArrayList<Intent> arrayList3 = stickyIntents2;
                            int i8 = userId2;
                            IntentFilter intentFilter5 = intentFilter;
                            String str3 = callerPackage3;
                            ProcessRecord processRecord3 = callerApp2;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th8) {
                    th = th8;
                    int i9 = userId2;
                    IntentFilter intentFilter6 = intentFilter;
                    String str4 = callerPackage3;
                    ProcessRecord processRecord4 = callerApp2;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th9) {
                th = th9;
                IntentFilter intentFilter7 = intentFilter;
                int i10 = userId;
                while (true) {
                    break;
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void unregisterReceiver(IIntentReceiver receiver) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_UNREGISTERRECEIVER);
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG, "Unregister receiver: " + receiver);
        }
        long origId = Binder.clearCallingIdentity();
        boolean doTrim = false;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ReceiverList rl = this.mRegisteredReceivers.get(receiver.asBinder());
                if (rl != null) {
                    BroadcastRecord r = rl.curBroadcast;
                    if (r != null && r == r.queue.getMatchingOrderedReceiver(r)) {
                        if (r.queue.finishReceiverLocked(r, r.resultCode, r.resultData, r.resultExtras, r.resultAbort, false)) {
                            doTrim = true;
                            r.queue.processNextBroadcast(false);
                        }
                    }
                    if (rl.app != null) {
                        rl.app.receivers.remove(rl);
                    }
                    removeReceiverLocked(rl);
                    if (rl.linkedToDeath) {
                        rl.linkedToDeath = false;
                        rl.receiver.asBinder().unlinkToDeath(rl, 0);
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (doTrim) {
                trimApplications();
                Binder.restoreCallingIdentity(origId);
                return;
            }
            Binder.restoreCallingIdentity(origId);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(origId);
            throw th;
        }
    }

    /* access modifiers changed from: package-private */
    public void removeReceiverLocked(ReceiverList rl) {
        this.mRegisteredReceivers.remove(rl.receiver.asBinder());
        for (int i = rl.size() - 1; i >= 0; i--) {
            this.mReceiverResolver.removeFilter((BroadcastFilter) rl.get(i));
        }
        if (IS_DEBUG_VERSION != 0 && getBgBroadcastQueue().getMtmBRManager() != null) {
            getBgBroadcastQueue().getMtmBRManager().iawareCountDuplicatedReceiver(false, rl, null);
        }
    }

    private final void sendPackageBroadcastLocked(int cmd, String[] packages, int userId) {
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord r = this.mLruProcesses.get(i);
            if (r.thread != null && (userId == -1 || r.userId == userId)) {
                try {
                    r.thread.dispatchPackageBroadcast(cmd, packages);
                } catch (RemoteException e) {
                }
            }
        }
    }

    private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType, int callingUid, int[] users) {
        int pmFlags;
        HashSet<ComponentName> singleUserReceivers;
        int pmFlags2;
        int[] iArr = users;
        int pmFlags3 = 268436480;
        boolean scannedFirstReceivers = false;
        try {
            int length = iArr.length;
            List<ResolveInfo> receivers = null;
            HashSet<ComponentName> singleUserReceivers2 = null;
            int i = 0;
            while (i < length) {
                try {
                    int user = iArr[i];
                    if (callingUid == 2000) {
                        try {
                            if (this.mUserController.hasUserRestriction("no_debugging_features", user) && !isPermittedShellBroadcast(intent)) {
                                Intent intent2 = intent;
                                String str = resolvedType;
                                pmFlags = pmFlags3;
                                i++;
                                pmFlags3 = pmFlags;
                                iArr = users;
                            }
                        } catch (RemoteException e) {
                            Intent intent3 = intent;
                            String str2 = resolvedType;
                            return receivers;
                        }
                    }
                    try {
                    } catch (RemoteException e2) {
                        Intent intent4 = intent;
                        String str3 = resolvedType;
                        int i2 = pmFlags3;
                        return receivers;
                    }
                    try {
                        List<ResolveInfo> newReceivers = AppGlobals.getPackageManager().queryIntentReceivers(intent, resolvedType, pmFlags3, user).getList();
                        if (!(user == 0 || newReceivers == null)) {
                            int i3 = 0;
                            while (i3 < newReceivers.size()) {
                                try {
                                    if ((newReceivers.get(i3).activityInfo.flags & 536870912) != 0) {
                                        newReceivers.remove(i3);
                                        i3--;
                                    }
                                    i3++;
                                } catch (RemoteException e3) {
                                    return receivers;
                                }
                            }
                        }
                        if (newReceivers != null && newReceivers.size() == 0) {
                            newReceivers = null;
                        }
                        if (receivers == null) {
                            pmFlags = pmFlags3;
                            receivers = newReceivers;
                        } else if (newReceivers != null) {
                            if (!scannedFirstReceivers) {
                                scannedFirstReceivers = true;
                                singleUserReceivers = singleUserReceivers2;
                                int i4 = 0;
                                while (i4 < receivers.size()) {
                                    ResolveInfo ri = receivers.get(i4);
                                    if ((ri.activityInfo.flags & 1073741824) != 0) {
                                        pmFlags2 = pmFlags3;
                                        try {
                                            ComponentName cn = new ComponentName(ri.activityInfo.packageName, ri.activityInfo.name);
                                            if (singleUserReceivers == null) {
                                                singleUserReceivers = new HashSet<>();
                                            }
                                            singleUserReceivers.add(cn);
                                        } catch (RemoteException e4) {
                                            return receivers;
                                        }
                                    } else {
                                        pmFlags2 = pmFlags3;
                                    }
                                    i4++;
                                    pmFlags3 = pmFlags2;
                                    int[] iArr2 = users;
                                }
                                pmFlags = pmFlags3;
                            } else {
                                pmFlags = pmFlags3;
                                singleUserReceivers = singleUserReceivers2;
                            }
                            for (int i5 = 0; i5 < newReceivers.size(); i5++) {
                                ResolveInfo ri2 = newReceivers.get(i5);
                                if ((ri2.activityInfo.flags & 1073741824) != 0) {
                                    ComponentName cn2 = new ComponentName(ri2.activityInfo.packageName, ri2.activityInfo.name);
                                    if (singleUserReceivers == null) {
                                        singleUserReceivers = new HashSet<>();
                                    }
                                    if (!singleUserReceivers.contains(cn2)) {
                                        singleUserReceivers.add(cn2);
                                        receivers.add(ri2);
                                    }
                                } else {
                                    receivers.add(ri2);
                                }
                            }
                            singleUserReceivers2 = singleUserReceivers;
                        } else {
                            pmFlags = pmFlags3;
                        }
                        i++;
                        pmFlags3 = pmFlags;
                        iArr = users;
                    } catch (RemoteException e5) {
                        int i22 = pmFlags3;
                        return receivers;
                    }
                } catch (RemoteException e6) {
                    Intent intent5 = intent;
                    String str4 = resolvedType;
                    int i6 = callingUid;
                    int i222 = pmFlags3;
                    return receivers;
                }
            }
            Intent intent6 = intent;
            String str5 = resolvedType;
            int i7 = callingUid;
            int i8 = pmFlags3;
            return receivers;
        } catch (RemoteException e7) {
            Intent intent7 = intent;
            String str6 = resolvedType;
            int i9 = callingUid;
            return null;
        }
    }

    private boolean isPermittedShellBroadcast(Intent intent) {
        return INTENT_REMOTE_BUGREPORT_FINISHED.equals(intent.getAction());
    }

    private void checkBroadcastFromSystem(Intent intent, ProcessRecord callerApp, String callerPackage, int callingUid, boolean isProtectedBroadcast, List receivers) {
        if ((intent.getFlags() & DumpState.DUMP_CHANGES) == 0) {
            String action = intent.getAction();
            if (!isProtectedBroadcast && !"android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) && !"com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MEDIA_BUTTON".equals(action) && !"android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) && !"com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) && !"android.intent.action.MASTER_CLEAR".equals(action) && !"android.intent.action.FACTORY_RESET".equals(action) && !"android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) && !"android.appwidget.action.APPWIDGET_UPDATE".equals(action) && !"android.location.HIGH_POWER_REQUEST_CHANGE".equals(action) && !"com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) && !"android.text.style.SUGGESTION_PICKED".equals(action) && !"android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) && !"android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
                if (!(intent.getPackage() == null && intent.getComponent() == null)) {
                    if (receivers != null && receivers.size() != 0) {
                        boolean allProtected = true;
                        int i = receivers.size() - 1;
                        while (true) {
                            if (i < 0) {
                                break;
                            }
                            Object target = receivers.get(i);
                            if (target instanceof ResolveInfo) {
                                ResolveInfo ri = (ResolveInfo) target;
                                if (ri.activityInfo.exported && ri.activityInfo.permission == null) {
                                    allProtected = false;
                                    break;
                                }
                            } else if (((BroadcastFilter) target).requiredPermission == null) {
                                allProtected = false;
                                break;
                            }
                            i--;
                        }
                        if (allProtected) {
                            return;
                        }
                    } else {
                        return;
                    }
                }
                if (callerApp != null) {
                    Log.w(TAG, "Sending non-protected broadcast " + action + " from system " + callerApp.toShortString() + " pkg " + callerPackage);
                } else {
                    Log.w(TAG, "Sending non-protected broadcast " + action + " from system uid " + UserHandle.formatUid(callingUid) + " pkg " + callerPackage);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x0470, code lost:
        r34 = r3;
        r47 = r7;
        r9 = r10;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x0475, code lost:
        r15 = -1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:229:0x0570, code lost:
        if (r7.equals("android.intent.action.PACKAGE_REMOVED") != false) goto L_0x05ac;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x00d1, code lost:
        if ((r5.getFlags() & com.android.server.pm.DumpState.DUMP_HANDLE) == 0) goto L_0x00d6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:309:0x076c, code lost:
        r9 = r73;
     */
    /* JADX WARNING: Removed duplicated region for block: B:282:0x0675  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x068a  */
    /* JADX WARNING: Removed duplicated region for block: B:286:0x06b5  */
    /* JADX WARNING: Removed duplicated region for block: B:325:0x07eb  */
    /* JADX WARNING: Removed duplicated region for block: B:365:0x0907  */
    /* JADX WARNING: Removed duplicated region for block: B:367:0x090c  */
    /* JADX WARNING: Removed duplicated region for block: B:368:0x0914  */
    /* JADX WARNING: Removed duplicated region for block: B:371:0x0925  */
    /* JADX WARNING: Removed duplicated region for block: B:372:0x092c  */
    /* JADX WARNING: Removed duplicated region for block: B:375:0x0934  */
    /* JADX WARNING: Removed duplicated region for block: B:391:0x096c  */
    /* JADX WARNING: Removed duplicated region for block: B:395:0x0971  */
    /* JADX WARNING: Removed duplicated region for block: B:409:0x09da  */
    /* JADX WARNING: Removed duplicated region for block: B:410:0x09dc  */
    /* JADX WARNING: Removed duplicated region for block: B:413:0x0a17  */
    /* JADX WARNING: Removed duplicated region for block: B:414:0x0a19  */
    /* JADX WARNING: Removed duplicated region for block: B:417:0x0a24  */
    /* JADX WARNING: Removed duplicated region for block: B:418:0x0a26  */
    /* JADX WARNING: Removed duplicated region for block: B:421:0x0a34  */
    /* JADX WARNING: Removed duplicated region for block: B:422:0x0a36  */
    /* JADX WARNING: Removed duplicated region for block: B:425:0x0a49  */
    /* JADX WARNING: Removed duplicated region for block: B:426:0x0a4e  */
    /* JADX WARNING: Removed duplicated region for block: B:429:0x0a53 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:451:0x0afb  */
    /* JADX WARNING: Removed duplicated region for block: B:495:0x0bd0  */
    /* JADX WARNING: Removed duplicated region for block: B:497:0x0bd7  */
    /* JADX WARNING: Removed duplicated region for block: B:501:0x0beb  */
    /* JADX WARNING: Removed duplicated region for block: B:502:0x0bfb  */
    /* JADX WARNING: Removed duplicated region for block: B:504:0x0c01  */
    /* JADX WARNING: Removed duplicated region for block: B:544:0x0d55  */
    @GuardedBy("this")
    public int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int userId) {
        int i;
        Intent intent2;
        BroadcastOptions brOptions;
        Intent intent3;
        int i2;
        String action;
        boolean isCallerSystem;
        int i3;
        int i4;
        String action2;
        int i5;
        Intent intent4;
        boolean z;
        int[] users;
        String str;
        boolean z2;
        List<BroadcastFilter> registeredReceivers;
        BroadcastQueue processQueue;
        boolean z3;
        boolean z4;
        ProcessRecord processRecord;
        String str2;
        boolean replacePending;
        boolean z5;
        boolean replacePending2;
        List<BroadcastFilter> registeredReceivers2;
        Intent intent5;
        ProcessRecord processRecord2;
        String str3;
        int NR;
        int ir;
        List receivers;
        int userId2;
        ProcessRecord processRecord3;
        String str4;
        List list;
        List<BroadcastFilter> registeredReceivers3;
        String str5;
        ProcessRecord processRecord4;
        char c;
        String action3;
        String action4;
        int userId3;
        int userId4;
        String ssp;
        int userId5;
        String ssp2;
        boolean killProcess;
        String action5;
        int i6;
        long j;
        ProcessRecord processRecord5 = callerApp;
        String str6 = callerPackage;
        String str7 = resolvedType;
        String[] strArr = requiredPermissions;
        Bundle bundle = bOptions;
        boolean z6 = ordered;
        int i7 = callingPid;
        int i8 = callingUid;
        int userId6 = this.mHwAMSEx.getCloneAppUserId(intent.getAction(), userId);
        Intent intent6 = new Intent(intent);
        boolean callerInstantApp = isInstantApp(processRecord5, str6, i8);
        if (callerInstantApp) {
            intent6.setFlags(intent6.getFlags() & -2097153);
        }
        intent6.addFlags(16);
        if (!this.mProcessesReady && (intent6.getFlags() & DumpState.DUMP_HANDLE) == 0) {
            intent6.addFlags(1073741824);
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
            StringBuilder sb = new StringBuilder();
            sb.append(sticky ? "Broadcast sticky: " : "Broadcast: ");
            sb.append(intent6);
            sb.append(" ordered=");
            sb.append(z6);
            sb.append(" userid=");
            sb.append(userId6);
            Slog.v(TAG, sb.toString());
        }
        if (resultTo != null && !z6) {
            Slog.w(TAG, "Broadcast " + intent6 + " not ordered but result callback requested!");
        }
        Intent intent7 = intent6;
        int i9 = i7;
        int userId7 = this.mUserController.handleIncomingUser(i7, i8, userId6, true, 0, "broadcast", str6);
        if (userId7 == -1 || this.mUserController.isUserOrItsParentRunning(userId7)) {
            intent2 = intent7;
            i = callingUid;
        } else {
            i = callingUid;
            if (i == 1000) {
                intent2 = intent7;
            } else {
                intent2 = intent7;
            }
            if (!"android.intent.action.ACTION_SHUTDOWN".equals(intent2.getAction())) {
                Slog.w(TAG, "Skipping broadcast of " + intent2 + ": user " + userId7 + " and its parent (if any) are stopped");
                return -2;
            }
        }
        String action6 = intent2.getAction();
        if (bundle != null) {
            BroadcastOptions brOptions2 = new BroadcastOptions(bundle);
            if (brOptions2.getTemporaryAppWhitelistDuration() > 0) {
                action = action6;
                intent3 = intent2;
                i2 = i;
                if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", Binder.getCallingPid(), Binder.getCallingUid(), -1, true) != 0) {
                    String msg = "Permission Denial: " + intent3.getAction() + " broadcast from " + str6 + " (pid=" + i9 + ", uid=" + i2 + ") requires " + "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            } else {
                action = action6;
                intent3 = intent2;
                i2 = i;
            }
            if (!brOptions2.isDontSendToRestrictedApps() || isUidActiveLocked(i2) || !isBackgroundRestrictedNoCheck(i2, str6)) {
                brOptions = brOptions2;
            } else {
                Slog.i(TAG, "Not sending broadcast " + action + " - app " + str6 + " has background restrictions");
                return -96;
            }
        } else {
            action = action6;
            intent3 = intent2;
            i2 = i;
            brOptions = null;
        }
        try {
            boolean isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);
            int appId = UserHandle.getAppId(callingUid);
            if (!(appId == 0 || appId == 1027 || appId == 1068)) {
                switch (appId) {
                    case 1000:
                    case NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE /*1001*/:
                    case 1002:
                        break;
                    default:
                        if (processRecord5 != null && processRecord5.persistent) {
                            isCallerSystem = true;
                            break;
                        } else {
                            isCallerSystem = false;
                            break;
                        }
                        break;
                }
            }
            isCallerSystem = true;
            boolean isCallerSystem2 = isCallerSystem;
            if (!isCallerSystem2) {
                if (isProtectedBroadcast) {
                    if (checkPermission("android.permission.INSTALL_LOCATION_PROVIDER", i9, i2) != 0 || !"android.intent.action.AIRPLANE_MODE".equals(intent3.getAction())) {
                        String msg2 = "Permission Denial: not allowed to send broadcast " + action + " from pid=" + i9 + ", uid=" + i2;
                        Slog.w(TAG, msg2);
                        throw new SecurityException(msg2);
                    }
                } else if ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action)) {
                    if (str6 == null) {
                        String msg3 = "Permission Denial: not allowed to send broadcast " + action + " from unknown caller.";
                        Slog.w(TAG, msg3);
                        throw new SecurityException(msg3);
                    } else if (intent3.getComponent() == null) {
                        intent3.setPackage(str6);
                    } else if (!intent3.getComponent().getPackageName().equals(str6)) {
                        String msg4 = "Permission Denial: not allowed to send broadcast " + action + " to " + intent3.getComponent().getPackageName() + " from " + str6;
                        Slog.w(TAG, msg4);
                        throw new SecurityException(msg4);
                    }
                }
            }
            BroadcastRecord broadcastRecord = null;
            if (action != null) {
                if (getBackgroundLaunchBroadcasts().contains(action)) {
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        Slog.i(TAG, "Broadcast action " + action + " forcing include-background");
                    }
                    intent3.addFlags(DumpState.DUMP_SERVICE_PERMISSIONS);
                }
                int cmd = 2;
                switch (action.hashCode()) {
                    case -2098526293:
                        if (action.equals("android.hardware.action.NEW_VIDEO")) {
                            c = 15;
                            break;
                        }
                    case -2074848843:
                        if (action.equals("android.intent.action.CLEAR_DNS_CACHE")) {
                            c = 12;
                            break;
                        }
                    case -1749672628:
                        if (action.equals("android.intent.action.UID_REMOVED")) {
                            c = 0;
                            break;
                        }
                    case -1403934493:
                        if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                            c = 3;
                            break;
                        }
                    case -1338021860:
                        if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                            c = 4;
                            break;
                        }
                    case -1001645458:
                        if (action.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                            c = 5;
                            break;
                        }
                    case -810471698:
                        if (action.equals("android.intent.action.PACKAGE_REPLACED")) {
                            c = 7;
                            break;
                        }
                    case 172491798:
                        if (action.equals("android.intent.action.PACKAGE_CHANGED")) {
                            c = 2;
                            break;
                        }
                    case 183904262:
                        if (action.equals("android.intent.action.PROXY_CHANGE")) {
                            c = 13;
                            break;
                        }
                    case 267468725:
                        if (action.equals("android.intent.action.PACKAGE_DATA_CLEARED")) {
                            c = 9;
                            break;
                        }
                    case 502473491:
                        if (action.equals("android.intent.action.TIMEZONE_CHANGED")) {
                            c = 10;
                            break;
                        }
                    case 505380757:
                        if (action.equals("android.intent.action.TIME_SET")) {
                            c = 11;
                            break;
                        }
                    case 525384130:
                        if (action.equals("android.intent.action.PACKAGE_REMOVED")) {
                            c = 1;
                            break;
                        }
                    case 555021408:
                        if (action.equals("com.android.launcher.action.INSTALL_SHORTCUT")) {
                            c = 17;
                            break;
                        }
                    case 920338478:
                        if (action.equals("android.hardware.action.NEW_PICTURE")) {
                            c = 14;
                            break;
                        }
                    case 1290767157:
                        if (action.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                            c = 6;
                            break;
                        }
                    case 1544582882:
                        if (action.equals("android.intent.action.PACKAGE_ADDED")) {
                            c = 8;
                            break;
                        }
                    case 1862858502:
                        if (action.equals("android.security.action.TRUST_STORE_CHANGED")) {
                            c = 16;
                            break;
                        }
                    default:
                        c = 65535;
                        break;
                }
                switch (c) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        String action7 = action;
                        i3 = 1073741824;
                        char c2 = 3;
                        if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", i9, i2, -1, true) == 0) {
                            if (!this.mHwAMSEx.isLimitedPackageBroadcast(intent3)) {
                                String action8 = action7;
                                switch (action8.hashCode()) {
                                    case -1749672628:
                                        if (action8.equals("android.intent.action.UID_REMOVED")) {
                                            c2 = 0;
                                            break;
                                        }
                                    case -1403934493:
                                        if (action8.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                            c2 = 1;
                                            break;
                                        }
                                    case -1338021860:
                                        if (action8.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                            c2 = 2;
                                            break;
                                        }
                                    case -1001645458:
                                        if (action8.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                            c2 = 5;
                                            break;
                                        }
                                    case 172491798:
                                        if (action8.equals("android.intent.action.PACKAGE_CHANGED")) {
                                            c2 = 4;
                                            break;
                                        }
                                    case 525384130:
                                        break;
                                    case 1290767157:
                                        if (action8.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                            c2 = 6;
                                            break;
                                        }
                                    default:
                                        c2 = 65535;
                                        break;
                                }
                                switch (c2) {
                                    case 0:
                                        action4 = action8;
                                        i4 = -1;
                                        int uid = getUidFromIntent(intent3);
                                        if (uid >= 0) {
                                            this.mBatteryStatsService.removeUid(uid);
                                            this.mAppOpsService.uidRemoved(uid);
                                            break;
                                        }
                                        break;
                                    case 1:
                                        action4 = action8;
                                        int userId8 = userId7;
                                        i4 = -1;
                                        String[] list2 = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                        if (list2 != null && list2.length > 0) {
                                            int i10 = 0;
                                            while (true) {
                                                int i11 = i10;
                                                if (i11 >= list2.length) {
                                                    this.mRecentTasks.cleanupLocked(-1);
                                                    userId7 = userId8;
                                                    sendPackageBroadcastLocked(1, list2, userId7);
                                                    break;
                                                } else {
                                                    forceStopPackageLocked(list2[i11], -1, false, true, true, false, false, userId8, "storage unmount");
                                                    i10 = i11 + 1;
                                                    userId8 = userId8;
                                                }
                                            }
                                        } else {
                                            userId7 = userId8;
                                            break;
                                        }
                                        break;
                                    case 2:
                                        action4 = action8;
                                        int i12 = userId7;
                                        i4 = -1;
                                        this.mRecentTasks.cleanupLocked(-1);
                                        break;
                                    case 3:
                                    case 4:
                                        Uri data = intent3.getData();
                                        if (data != null) {
                                            String schemeSpecificPart = data.getSchemeSpecificPart();
                                            String ssp3 = schemeSpecificPart;
                                            if (schemeSpecificPart != null) {
                                                boolean removed = "android.intent.action.PACKAGE_REMOVED".equals(action8);
                                                boolean replacing = intent3.getBooleanExtra("android.intent.extra.REPLACING", false);
                                                boolean killProcess2 = !intent3.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false);
                                                boolean fullUninstall = removed && !replacing;
                                                if (removed) {
                                                    if (killProcess2) {
                                                        if (!this.mHwAMSEx.isApplyPersistAppPatch(ssp3, intent3.getIntExtra("android.intent.extra.UID", -1), userId7, false, false, null, action8)) {
                                                            killProcess = killProcess2;
                                                            ssp2 = ssp3;
                                                            action4 = action8;
                                                            userId5 = userId7;
                                                            forceStopPackageLocked(ssp3, UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1)), false, true, true, false, fullUninstall, userId5, removed ? "pkg removed" : "pkg changed");
                                                            if (killProcess) {
                                                                cmd = 0;
                                                            }
                                                            String ssp4 = ssp2;
                                                            int userId9 = userId5;
                                                            sendPackageBroadcastLocked(cmd, new String[]{ssp4}, userId9);
                                                            if (!fullUninstall) {
                                                                this.mAppOpsService.packageRemoved(intent3.getIntExtra("android.intent.extra.UID", -1), ssp4);
                                                                removeUriPermissionsForPackageLocked(ssp4, userId9, true, false);
                                                                this.mRecentTasks.removeTasksByPackageName(ssp4, userId9);
                                                                this.mServices.forceStopPackageLocked(ssp4, userId9);
                                                                this.mAppWarnings.onPackageUninstalled(ssp4);
                                                                this.mCompatModePackages.handlePackageUninstalledLocked(ssp4);
                                                                this.mBatteryStatsService.notePackageUninstalled(ssp4);
                                                            }
                                                            Uri uri = data;
                                                            String str8 = ssp4;
                                                            userId3 = userId9;
                                                        }
                                                    }
                                                    killProcess = killProcess2;
                                                    ssp2 = ssp3;
                                                    action4 = action8;
                                                    userId5 = userId7;
                                                    if (killProcess) {
                                                    }
                                                    String ssp42 = ssp2;
                                                    int userId92 = userId5;
                                                    sendPackageBroadcastLocked(cmd, new String[]{ssp42}, userId92);
                                                    if (!fullUninstall) {
                                                    }
                                                    Uri uri2 = data;
                                                    String str82 = ssp42;
                                                    userId3 = userId92;
                                                } else {
                                                    boolean killProcess3 = killProcess2;
                                                    String ssp5 = ssp3;
                                                    action4 = action8;
                                                    int userId10 = userId7;
                                                    if (killProcess3) {
                                                        userId4 = userId10;
                                                        Uri uri3 = data;
                                                        ssp = ssp5;
                                                        killPackageProcessesLocked(ssp5, UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1)), userId10, -10000, false, true, true, false, "change " + ssp5);
                                                    } else {
                                                        userId4 = userId10;
                                                        ssp = ssp5;
                                                    }
                                                    userId3 = userId4;
                                                    cleanupDisabledPackageComponentsLocked(ssp, userId3, killProcess3, intent3.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
                                                }
                                                userId7 = userId3;
                                            }
                                        }
                                        action4 = action8;
                                        i4 = -1;
                                        break;
                                    case 5:
                                    case 6:
                                        boolean suspended = "android.intent.action.PACKAGES_SUSPENDED".equals(intent3.getAction());
                                        String[] packageNames = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                        int userHandle = intent3.getIntExtra("android.intent.extra.user_handle", -10000);
                                        synchronized (this) {
                                            try {
                                                boostPriorityForLockedSection();
                                                this.mRecentTasks.onPackagesSuspendedChanged(packageNames, suspended, userHandle);
                                            } catch (Throwable th) {
                                                while (true) {
                                                    resetPriorityAfterLockedSection();
                                                    throw th;
                                                    break;
                                                }
                                            }
                                        }
                                        resetPriorityAfterLockedSection();
                                        action4 = action8;
                                        i4 = -1;
                                        break;
                                    default:
                                        action4 = action8;
                                        i4 = -1;
                                        break;
                                }
                            } else {
                                Flog.d(102, "Android Wear-skip limited ACTION_PACKAGE_REMOVED");
                                int i13 = i2;
                                String action9 = action7;
                            }
                        } else {
                            String msg5 = "Permission Denial: " + intent3.getAction() + " broadcast from " + str6 + " (pid=" + i9 + ", uid=" + callingUid + ") requires " + "android.permission.BROADCAST_PACKAGE_REMOVED";
                            Slog.w(TAG, msg5);
                            throw new SecurityException(msg5);
                        }
                        break;
                    case 7:
                        action5 = action;
                        Uri data2 = intent3.getData();
                        if (data2 != null) {
                            String schemeSpecificPart2 = data2.getSchemeSpecificPart();
                            String ssp6 = schemeSpecificPart2;
                            if (schemeSpecificPart2 != null) {
                                ApplicationInfo aInfo = null;
                                try {
                                    aInfo = AppGlobals.getPackageManager().getApplicationInfo(ssp6, 1024, userId7);
                                } catch (RemoteException e) {
                                }
                                if (aInfo != null) {
                                    this.mStackSupervisor.updateActivityApplicationInfoLocked(aInfo);
                                    this.mServices.updateServiceApplicationInfoLocked(aInfo);
                                    sendPackageBroadcastLocked(3, new String[]{ssp6}, userId7);
                                    break;
                                } else {
                                    Slog.w(TAG, "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=" + ssp6 + " data=" + data2);
                                    return 0;
                                }
                            }
                        }
                        break;
                    case 8:
                        i6 = 1073741824;
                        if (!this.mHwAMSEx.isLimitedPackageBroadcast(intent3)) {
                            Uri data3 = intent3.getData();
                            if (data3 != null) {
                                String schemeSpecificPart3 = data3.getSchemeSpecificPart();
                                String ssp7 = schemeSpecificPart3;
                                if (schemeSpecificPart3 != null) {
                                    this.mCompatModePackages.handlePackageAddedLocked(ssp7, intent3.getBooleanExtra("android.intent.extra.REPLACING", false));
                                    try {
                                        ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(ssp7, 1024, 0);
                                        BatteryStatsService batteryStatsService = this.mBatteryStatsService;
                                        if (ai != null) {
                                            action5 = action;
                                            j = (long) ai.versionCode;
                                        } else {
                                            action5 = action;
                                            j = 0;
                                        }
                                        try {
                                            batteryStatsService.notePackageInstalled(ssp7, j);
                                            break;
                                        } catch (RemoteException e2) {
                                            break;
                                        }
                                    } catch (RemoteException e3) {
                                        action5 = action;
                                        break;
                                    }
                                }
                            }
                            i3 = 1073741824;
                            action3 = action;
                            i5 = i2;
                            i4 = -1;
                            break;
                        } else {
                            Flog.d(102, "Android Wear-skip limited ACTION_PACKAGE_ADDED");
                            break;
                        }
                    case 9:
                        i6 = 1073741824;
                        Uri data4 = intent3.getData();
                        if (data4 != null) {
                            String schemeSpecificPart4 = data4.getSchemeSpecificPart();
                            String ssp8 = schemeSpecificPart4;
                            if (schemeSpecificPart4 != null) {
                                this.mCompatModePackages.handlePackageDataClearedLocked(ssp8);
                                this.mAppWarnings.onPackageDataCleared(ssp8);
                                break;
                            }
                        }
                        break;
                    case 10:
                        i6 = 1073741824;
                        this.mHandler.sendEmptyMessage(13);
                        break;
                    case 11:
                        i6 = 1073741824;
                        int timeFormatPreferenceMsgValue = intent3.getIntExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", -1);
                        if (timeFormatPreferenceMsgValue != -1) {
                            this.mHandler.sendMessage(this.mHandler.obtainMessage(41, timeFormatPreferenceMsgValue, 0));
                        }
                        BatteryStatsImpl stats = this.mBatteryStatsService.getActiveStatistics();
                        synchronized (stats) {
                            stats.noteCurrentTimeChangedLocked();
                        }
                        break;
                    case 12:
                        i6 = 1073741824;
                        this.mHandler.sendEmptyMessage(28);
                        break;
                    case 13:
                        i6 = 1073741824;
                        this.mHandler.sendMessage(this.mHandler.obtainMessage(29, (ProxyInfo) intent3.getParcelableExtra("android.intent.extra.PROXY_INFO")));
                        break;
                    case 14:
                    case 15:
                        i6 = 1073741824;
                        intent3.addFlags(1073741824);
                        break;
                    case 16:
                        this.mHandler.sendEmptyMessage(HANDLE_TRUST_STORAGE_UPDATE_MSG);
                        action3 = action;
                        i5 = i2;
                        break;
                    case 17:
                        Log.w(TAG, "Broadcast " + action + " no longer supported. It will not be delivered.");
                        return 0;
                    default:
                        action3 = action;
                        i5 = i2;
                        i4 = -1;
                        i3 = 1073741824;
                        break;
                }
            } else {
                i5 = i2;
                i4 = -1;
                i3 = 1073741824;
                action2 = action;
            }
            if (sticky) {
                intent4 = intent3;
                String[] strArr2 = requiredPermissions;
            } else if (checkPermission("android.permission.BROADCAST_STICKY", i9, i5) == 0) {
                intent4 = intent3;
                String[] strArr3 = requiredPermissions;
                if (strArr3 != null && strArr3.length > 0) {
                    Slog.w(TAG, "Can't broadcast sticky intent " + intent4 + " and enforce permissions " + Arrays.toString(requiredPermissions));
                    return i4;
                } else if (intent4.getComponent() == null) {
                    if (userId7 != i4) {
                        ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(i4);
                        if (stickies != null) {
                            ArrayList<Intent> list3 = stickies.get(intent4.getAction());
                            if (list3 != null) {
                                int N = list3.size();
                                int i14 = 0;
                                while (i14 < N) {
                                    if (!intent4.filterEquals(list3.get(i14))) {
                                        i14++;
                                    } else {
                                        throw new IllegalArgumentException("Sticky broadcast " + intent4 + " for user " + userId7 + " conflicts with existing global broadcast");
                                    }
                                }
                            }
                        }
                    }
                    ArrayMap<String, ArrayList<Intent>> stickies2 = this.mStickyBroadcasts.get(userId7);
                    if (stickies2 == null) {
                        stickies2 = new ArrayMap<>();
                        this.mStickyBroadcasts.put(userId7, stickies2);
                    }
                    ArrayList<Intent> list4 = stickies2.get(intent4.getAction());
                    if (list4 == null) {
                        list4 = new ArrayList<>();
                        stickies2.put(intent4.getAction(), list4);
                    }
                    int stickiesCount = list4.size();
                    int i15 = 0;
                    while (true) {
                        if (i15 < stickiesCount) {
                            if (intent4.filterEquals(list4.get(i15))) {
                                list4.set(i15, new Intent(intent4));
                            } else {
                                i15++;
                            }
                        }
                    }
                    if (i15 >= stickiesCount) {
                        list4.add(new Intent(intent4));
                    }
                } else {
                    throw new SecurityException("Sticky broadcasts can't target a specific component");
                }
            } else {
                String[] strArr4 = requiredPermissions;
                String msg6 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + i9 + ", uid=" + i5 + " requires " + "android.permission.BROADCAST_STICKY";
                Slog.w(TAG, msg6);
                throw new SecurityException(msg6);
            }
            if (userId7 != i4) {
                users = this.mUserController.getStartedUserArray();
                z = true;
            } else {
                z = true;
                users = new int[]{userId7};
            }
            int[] users2 = users;
            List receivers2 = null;
            List<BroadcastFilter> registeredReceivers4 = null;
            if ((intent4.getFlags() & i3) != 0) {
                str = resolvedType;
                receivers2 = collectReceiverComponents(intent4, str, i5, users2);
            } else {
                str = resolvedType;
            }
            if (intent4.getComponent() == null) {
                z2 = false;
            } else if (userId7 == i4 && i5 == 2000) {
                registeredReceivers = null;
                for (int i16 = 0; i16 < users2.length; i16++) {
                    if (!this.mUserController.hasUserRestriction("no_debugging_features", users2[i16])) {
                        List<BroadcastFilter> registeredReceiversForUser = this.mReceiverResolver.queryIntent(intent4, str, false, users2[i16]);
                        if (registeredReceivers == null) {
                            registeredReceivers = registeredReceiversForUser;
                        } else if (registeredReceiversForUser != null) {
                            registeredReceivers.addAll(registeredReceiversForUser);
                        }
                    }
                }
                z2 = false;
                if ((registeredReceivers != null || registeredReceivers.size() <= 0) && ((receivers2 == null || receivers2.size() <= 0) && resultTo == null)) {
                    z4 = z;
                    String str9 = action2;
                    str2 = str6;
                    z3 = z2;
                    processRecord = callerApp;
                    processQueue = null;
                } else {
                    boolean z7 = z;
                    processRecord = callerApp;
                    BroadcastQueue processQueue2 = getProcessBroadcastQueue(processRecord, str6, intent4);
                    if (processQueue2.getMtmBRManager() != null) {
                        z4 = z7;
                        str2 = str6;
                        String str10 = action2;
                        z3 = z2;
                        processQueue2.getMtmBRManager().iawareFilterBroadcast(intent4, processRecord, str2, callingPid, i5, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, receivers2, registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId7);
                    } else {
                        z4 = z7;
                        str2 = str6;
                        z3 = z2;
                    }
                    processQueue = processQueue2;
                }
                replacePending = (intent4.getFlags() & 536870912) != 0 ? z4 : z3;
                StringBuilder sb2 = new StringBuilder();
                sb2.append("sendBroadcast caller:");
                sb2.append(processRecord);
                sb2.append(",action:");
                sb2.append(intent4.getAction());
                sb2.append(",replace:");
                sb2.append(replacePending);
                sb2.append(",ordered:");
                z5 = ordered;
                sb2.append(z5);
                sb2.append(",hasComponent:");
                sb2.append(intent4.getComponent() != null ? z4 : z3);
                sb2.append(",manifestNum:");
                sb2.append(receivers2 == null ? z3 : receivers2.size());
                sb2.append(",registeredNum:");
                sb2.append(registeredReceivers == null ? z3 : registeredReceivers.size());
                Flog.i(104, sb2.toString());
                checkBroadcastRecordSpeed(i5, str2, processRecord);
                int NR2 = registeredReceivers != null ? registeredReceivers.size() : z3;
                if (!z5 || NR2 <= 0) {
                    int[] iArr = users2;
                    intent5 = intent4;
                    replacePending2 = replacePending;
                    str3 = str2;
                    processRecord2 = processRecord;
                    registeredReceivers2 = registeredReceivers;
                } else {
                    if (isCallerSystem2) {
                        str5 = str2;
                        processRecord4 = processRecord;
                        boolean z8 = z4;
                        registeredReceivers3 = registeredReceivers;
                        int[] iArr2 = users2;
                        intent5 = intent4;
                        checkBroadcastFromSystem(intent4, processRecord4, str5, i5, isProtectedBroadcast, registeredReceivers3);
                    } else {
                        str5 = str2;
                        processRecord4 = processRecord;
                        registeredReceivers3 = registeredReceivers;
                        int[] iArr3 = users2;
                        intent5 = intent4;
                    }
                    BroadcastQueue queue = processQueue != null ? processQueue : getProcessBroadcastQueue(processRecord4, str5, intent5);
                    processRecord2 = processRecord4;
                    str3 = str5;
                    replacePending2 = replacePending;
                    BroadcastRecord broadcastRecord2 = new BroadcastRecord(queue, intent5, processRecord2, str3, callingPid, i5, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, registeredReceivers3, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId7);
                    if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                        Slog.v(TAG, "Enqueueing parallel broadcast " + broadcastRecord2);
                    }
                    this.mHwAMSEx.checkAndPrintTestModeLog(registeredReceivers3, intent5.getAction(), "broadcastIntentLocked", "接收短信");
                    if (!(replacePending2 && queue.replaceParallelBroadcastLocked(broadcastRecord2) != null)) {
                        queue.enqueueParallelBroadcastLocked(broadcastRecord2);
                        queue.scheduleBroadcastsLocked();
                    }
                    NR2 = 0;
                    registeredReceivers2 = null;
                }
                NR = NR2;
                int ir2 = 0;
                if (receivers2 != null) {
                    String[] skipPackages = null;
                    if ("android.intent.action.PACKAGE_ADDED".equals(intent5.getAction()) || "android.intent.action.PACKAGE_RESTARTED".equals(intent5.getAction()) || "android.intent.action.PACKAGE_DATA_CLEARED".equals(intent5.getAction())) {
                        Uri data5 = intent5.getData();
                        if (data5 != null) {
                            String pkgName = data5.getSchemeSpecificPart();
                            if (pkgName != null) {
                                skipPackages = new String[]{pkgName};
                            }
                        }
                    } else if ("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(intent5.getAction())) {
                        skipPackages = intent5.getStringArrayExtra("android.intent.extra.changed_package_list");
                    }
                    if (skipPackages != null && skipPackages.length > 0) {
                        int length = skipPackages.length;
                        int i17 = 0;
                        while (i17 < length) {
                            String skipPackage = skipPackages[i17];
                            if (skipPackage != null) {
                                int NT = receivers2.size();
                                int it = 0;
                                while (it < NT) {
                                    int ir3 = ir2;
                                    String[] skipPackages2 = skipPackages;
                                    if (receivers2.get(it).activityInfo.packageName.equals(skipPackage)) {
                                        receivers2.remove(it);
                                        it--;
                                        NT--;
                                    }
                                    it++;
                                    ir2 = ir3;
                                    skipPackages = skipPackages2;
                                }
                            }
                            i17++;
                            ir2 = ir2;
                            skipPackages = skipPackages;
                        }
                    }
                    String[] strArr5 = skipPackages;
                    int it2 = 0;
                    ResolveInfo curt = null;
                    int ir4 = ir2;
                    int NT2 = receivers2 != null ? receivers2.size() : 0;
                    BroadcastFilter curr = null;
                    while (it2 < NT2 && ir4 < NR) {
                        if (curt == null) {
                            curt = receivers2.get(it2);
                        }
                        if (curr == null) {
                            curr = registeredReceivers2.get(ir4);
                        }
                        if (curr.getPriority() >= curt.priority) {
                            receivers2.add(it2, curr);
                            ir4++;
                            curr = null;
                            it2++;
                            NT2++;
                        } else {
                            it2++;
                            curt = null;
                        }
                    }
                    receivers = receivers2;
                    ir = ir4;
                } else {
                    receivers = receivers2;
                    ir = 0;
                }
                while (ir < NR) {
                    if (receivers == null) {
                        receivers = new ArrayList();
                    }
                    receivers.add(registeredReceivers2.get(ir));
                    ir++;
                }
                if (isCallerSystem2) {
                    userId2 = userId7;
                    str4 = str3;
                    processRecord3 = processRecord2;
                    checkBroadcastFromSystem(intent5, processRecord2, str3, i5, isProtectedBroadcast, receivers);
                } else {
                    processRecord3 = processRecord2;
                    userId2 = userId7;
                    str4 = str3;
                }
                if ((receivers != null || receivers.size() <= 0) && resultTo == null) {
                    list = receivers;
                    int i18 = ir;
                    List<BroadcastFilter> list5 = registeredReceivers2;
                    int i19 = NR;
                    if (intent5.getComponent() != null && intent5.getPackage() == null && (intent5.getFlags() & i3) == 0) {
                        List<ResolveInfo> list6 = list;
                        addBroadcastStatLocked(intent5.getAction(), str4, 0, 0, 0);
                    } else {
                        List receivers3 = list;
                    }
                } else {
                    BroadcastQueue queue2 = processQueue != null ? processQueue : getProcessBroadcastQueue(processRecord3, str4, intent5);
                    List list7 = receivers;
                    int i20 = ir;
                    List<BroadcastFilter> list8 = registeredReceivers2;
                    int i21 = NR;
                    BroadcastRecord broadcastRecord3 = new BroadcastRecord(queue2, intent5, processRecord3, str4, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, list7, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId2);
                    BroadcastRecord r = broadcastRecord3;
                    if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                        Slog.v(TAG, "Enqueueing ordered broadcast " + r + ": prev had " + queue2.mOrderedBroadcasts.size());
                    }
                    if (ActivityManagerDebugConfig.HWFLOW && queue2.mOrderedBroadcasts.size() > BroadcastQueue.MAX_BROADCAST_HISTORY / 10) {
                        BroadcastRecord br = queue2.mOrderedBroadcasts.get(0);
                        boolean z9 = true;
                        int currentReceiverIdx = Math.max(br.nextReceiver - 1, 0);
                        if (currentReceiverIdx >= (br.receivers != null ? br.receivers.size() : 0)) {
                            z9 = false;
                        }
                        boolean isLegalIdx = z9;
                        StringBuilder sb3 = new StringBuilder();
                        sb3.append("ordered broadcast[");
                        sb3.append(queue2.mQueueName);
                        sb3.append("] head:");
                        sb3.append(br);
                        sb3.append(" prev had ");
                        sb3.append(queue2.mOrderedBroadcasts.size());
                        sb3.append(" currentReceiver:");
                        sb3.append(isLegalIdx ? br.receivers.get(currentReceiverIdx) : BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS);
                        Flog.i(104, sb3.toString());
                    }
                    this.mHwAMSEx.checkAndPrintTestModeLog(list7, intent5.getAction(), "broadcastIntentLocked", "接收短信");
                    if (replacePending2) {
                        broadcastRecord = queue2.replaceOrderedBroadcastLocked(r);
                    }
                    BroadcastRecord oldRecord = broadcastRecord;
                    if (oldRecord == null) {
                        queue2.enqueueOrderedBroadcastLocked(r);
                        queue2.scheduleBroadcastsLocked();
                    } else if (oldRecord.resultTo != null) {
                        try {
                            broadcastQueueForIntent(oldRecord.intent).performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo, oldRecord.intent, 0, null, null, false, false, oldRecord.userId);
                        } catch (RemoteException e4) {
                            Slog.w(TAG, "Failure [" + queue2.mQueueName + "] sending broadcast result of " + intent5, e4);
                        }
                    }
                    List list9 = list7;
                }
                return 0;
            } else {
                z2 = false;
                registeredReceivers4 = this.mReceiverResolver.queryIntent(intent4, str, false, userId7);
            }
            registeredReceivers = registeredReceivers4;
            if (registeredReceivers != null) {
            }
            z4 = z;
            String str92 = action2;
            str2 = str6;
            z3 = z2;
            processRecord = callerApp;
            processQueue = null;
            replacePending = (intent4.getFlags() & 536870912) != 0 ? z4 : z3;
            StringBuilder sb22 = new StringBuilder();
            sb22.append("sendBroadcast caller:");
            sb22.append(processRecord);
            sb22.append(",action:");
            sb22.append(intent4.getAction());
            sb22.append(",replace:");
            sb22.append(replacePending);
            sb22.append(",ordered:");
            z5 = ordered;
            sb22.append(z5);
            sb22.append(",hasComponent:");
            sb22.append(intent4.getComponent() != null ? z4 : z3);
            sb22.append(",manifestNum:");
            sb22.append(receivers2 == null ? z3 : receivers2.size());
            sb22.append(",registeredNum:");
            sb22.append(registeredReceivers == null ? z3 : registeredReceivers.size());
            Flog.i(104, sb22.toString());
            checkBroadcastRecordSpeed(i5, str2, processRecord);
            int NR22 = registeredReceivers != null ? registeredReceivers.size() : z3;
            if (!z5) {
            }
            int[] iArr4 = users2;
            intent5 = intent4;
            replacePending2 = replacePending;
            str3 = str2;
            processRecord2 = processRecord;
            registeredReceivers2 = registeredReceivers;
            NR = NR22;
            int ir22 = 0;
            if (receivers2 != null) {
            }
            while (ir < NR) {
            }
            if (isCallerSystem2) {
            }
            if (receivers != null) {
            }
            list = receivers;
            int i182 = ir;
            List<BroadcastFilter> list52 = registeredReceivers2;
            int i192 = NR;
            if (intent5.getComponent() != null) {
            }
            List receivers32 = list;
            return 0;
            i5 = i2;
            action3 = action5;
            i4 = -1;
            i3 = 1073741824;
            action2 = action3;
            if ("android.intent.action.PACKAGE_ADDED".equals(action2) || "android.intent.action.PACKAGE_REMOVED".equals(action2) || "android.intent.action.PACKAGE_REPLACED".equals(action2)) {
                int uid2 = getUidFromIntent(intent3);
                if (uid2 != i4) {
                    UidRecord uidRec = this.mActiveUids.get(uid2);
                    if (uidRec != null) {
                        uidRec.updateHasInternetPermission();
                    }
                }
            }
            if (sticky) {
            }
            if (userId7 != i4) {
            }
            int[] users22 = users;
            List receivers22 = null;
            List<BroadcastFilter> registeredReceivers42 = null;
            if ((intent4.getFlags() & i3) != 0) {
            }
            if (intent4.getComponent() == null) {
            }
            registeredReceivers = registeredReceivers42;
            if (registeredReceivers != null) {
            }
            z4 = z;
            String str922 = action2;
            str2 = str6;
            z3 = z2;
            processRecord = callerApp;
            processQueue = null;
            replacePending = (intent4.getFlags() & 536870912) != 0 ? z4 : z3;
            StringBuilder sb222 = new StringBuilder();
            sb222.append("sendBroadcast caller:");
            sb222.append(processRecord);
            sb222.append(",action:");
            sb222.append(intent4.getAction());
            sb222.append(",replace:");
            sb222.append(replacePending);
            sb222.append(",ordered:");
            z5 = ordered;
            sb222.append(z5);
            sb222.append(",hasComponent:");
            sb222.append(intent4.getComponent() != null ? z4 : z3);
            sb222.append(",manifestNum:");
            sb222.append(receivers22 == null ? z3 : receivers22.size());
            sb222.append(",registeredNum:");
            sb222.append(registeredReceivers == null ? z3 : registeredReceivers.size());
            Flog.i(104, sb222.toString());
            checkBroadcastRecordSpeed(i5, str2, processRecord);
            int NR222 = registeredReceivers != null ? registeredReceivers.size() : z3;
            if (!z5) {
            }
            int[] iArr42 = users22;
            intent5 = intent4;
            replacePending2 = replacePending;
            str3 = str2;
            processRecord2 = processRecord;
            registeredReceivers2 = registeredReceivers;
            NR = NR222;
            int ir222 = 0;
            if (receivers22 != null) {
            }
            while (ir < NR) {
            }
            if (isCallerSystem2) {
            }
            if (receivers != null) {
            }
            list = receivers;
            int i1822 = ir;
            List<BroadcastFilter> list522 = registeredReceivers2;
            int i1922 = NR;
            if (intent5.getComponent() != null) {
            }
            List receivers322 = list;
            return 0;
        } catch (RemoteException e5) {
            String str11 = action;
            int i22 = userId7;
            Intent intent8 = intent3;
            String str12 = str6;
            Slog.w(TAG, "Remote exception", e5);
            return 0;
        }
    }

    private int getUidFromIntent(Intent intent) {
        int i = -1;
        if (intent == null) {
            return -1;
        }
        Bundle intentExtras = intent.getExtras();
        if (intent.hasExtra("android.intent.extra.UID")) {
            i = intentExtras.getInt("android.intent.extra.UID");
        }
        return i;
    }

    /* access modifiers changed from: package-private */
    public final void rotateBroadcastStatsIfNeededLocked() {
        long now = SystemClock.elapsedRealtime();
        if (this.mCurBroadcastStats == null || this.mCurBroadcastStats.mStartRealtime + 86400000 < now) {
            this.mLastBroadcastStats = this.mCurBroadcastStats;
            if (this.mLastBroadcastStats != null) {
                this.mLastBroadcastStats.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    /* access modifiers changed from: package-private */
    public final void addBroadcastStatLocked(String action, String srcPackage, int receiveCount, int skipCount, long dispatchTime) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(action, srcPackage, receiveCount, skipCount, dispatchTime);
    }

    /* access modifiers changed from: package-private */
    public final void addBackgroundCheckViolationLocked(String action, String targetPackage) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(action, targetPackage);
    }

    /* access modifiers changed from: package-private */
    public final Intent verifyBroadcastLocked(Intent intent) {
        if (intent == null || !intent.hasFileDescriptors()) {
            int flags = intent.getFlags();
            if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
                Slog.e(TAG, "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
                throw new IllegalStateException("Cannot broadcast before boot completed");
            } else if ((33554432 & flags) == 0) {
                if ((flags & DumpState.DUMP_CHANGES) != 0) {
                    int callingUid = Binder.getCallingUid();
                    if (!(callingUid == 0 || callingUid == 2000)) {
                        Slog.w(TAG, "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + Binder.getCallingUid());
                        intent.removeFlags(DumpState.DUMP_CHANGES);
                    }
                }
                return intent;
            } else {
                throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public final int broadcastIntent(IApplicationThread caller, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        Intent intent2 = intent;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_BROADCASTINTENT, new Object[]{intent2});
        enforceNotIsolatedCaller("broadcastIntent");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                Intent intent3 = verifyBroadcastLocked(intent2);
                try {
                    ProcessRecord callerApp = getRecordForAppLocked(caller);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    try {
                        int res = broadcastIntentLocked(callerApp, callerApp != null ? callerApp.info.packageName : null, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, appOp, bOptions, serialized, sticky, callingPid, callingUid, userId);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return res;
                    } catch (Throwable th) {
                        th = th;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                Intent intent4 = intent2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public int broadcastIntentInPackage(String packageName, int uid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        Intent intent2;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mHwAMSEx.removePackageStopFlag(packageName, uid, resolvedType, resultCode, requiredPermission, bOptions, userId);
                intent2 = intent;
                try {
                    Intent intent3 = verifyBroadcastLocked(intent2);
                    try {
                        long origId = Binder.clearCallingIdentity();
                        try {
                            int res = broadcastIntentLocked(null, packageName, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermission == null ? null : new String[]{requiredPermission}, -1, bOptions, serialized, sticky, -1, uid, userId);
                            Binder.restoreCallingIdentity(origId);
                            resetPriorityAfterLockedSection();
                            return res;
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    Intent intent4 = intent2;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                intent2 = intent;
                Intent intent42 = intent2;
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void unbroadcastIntent(IApplicationThread caller, Intent intent, int userId) {
        if (intent == null || !intent.hasFileDescriptors()) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 0, "removeStickyBroadcast", null);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.BROADCAST_STICKY") == 0) {
                        ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(userId2);
                        if (stickies != null) {
                            ArrayList<Intent> list = stickies.get(intent.getAction());
                            if (list != null) {
                                int N = list.size();
                                int i = 0;
                                while (true) {
                                    if (i >= N) {
                                        break;
                                    } else if (intent.filterEquals(list.get(i))) {
                                        list.remove(i);
                                        break;
                                    } else {
                                        i++;
                                    }
                                }
                                if (list.size() <= 0) {
                                    stickies.remove(intent.getAction());
                                }
                            }
                            if (stickies.size() <= 0) {
                                this.mStickyBroadcasts.remove(userId2);
                            }
                        }
                    } else {
                        String msg = "Permission Denial: unbroadcastIntent() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.BROADCAST_STICKY";
                        Slog.w(TAG, msg);
                        throw new SecurityException(msg);
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new IllegalArgumentException("File descriptors passed in Intent");
    }

    /* access modifiers changed from: package-private */
    public void backgroundServicesFinishedLocked(int userId) {
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.backgroundServicesFinishedLocked(userId);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:40:0x0095 A[SYNTHETIC, Splitter:B:40:0x0095] */
    /* JADX WARNING: Removed duplicated region for block: B:45:0x00ac A[Catch:{ all -> 0x00a7 }] */
    public void finishReceiver(IBinder who, int resultCode, String resultData, Bundle resultExtras, boolean resultAbort, int flags) {
        BroadcastRecord r;
        IBinder iBinder = who;
        int i = flags;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG, "Finish receiver: " + iBinder);
        }
        if (resultExtras == null || !resultExtras.hasFileDescriptors()) {
            long origId = Binder.clearCallingIdentity();
            boolean doNext = false;
            BroadcastRecord r2 = null;
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if ((i & 4096) != 0) {
                            BroadcastQueue keyQueue = (i & 268435456) != 0 ? this.mFgKeyAppBroadcastQueue : this.mBgKeyAppBroadcastQueue;
                            if (keyQueue != null) {
                                r2 = keyQueue.getMatchingOrderedReceiver(iBinder);
                            }
                            if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                                Slog.v(TAG, "Finish receiver find key broadcast: " + r2);
                            }
                        } else if ((i & 8192) != 0) {
                            BroadcastQueue thirdPartyQueue = (i & 268435456) != 0 ? this.mFgThirdAppBroadcastQueue : this.mBgThirdAppBroadcastQueue;
                            if (thirdPartyQueue != null) {
                                r2 = thirdPartyQueue.getMatchingOrderedReceiver(iBinder);
                            }
                        } else {
                            r = ((i & 268435456) != 0 ? this.mFgBroadcastQueue : this.mBgBroadcastQueue).getMatchingOrderedReceiver(iBinder);
                            if (r != null) {
                                try {
                                    doNext = r.queue.finishReceiverLocked(r, resultCode, resultData, resultExtras, resultAbort, true);
                                } catch (Throwable th) {
                                    th = th;
                                    BroadcastRecord broadcastRecord = r;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            if (doNext) {
                                r.queue.processNextBroadcastLocked(false, true);
                            }
                            trimApplicationsLocked();
                            resetPriorityAfterLockedSection();
                        }
                        r = r2;
                        if (r != null) {
                        }
                        if (doNext) {
                        }
                        trimApplicationsLocked();
                        resetPriorityAfterLockedSection();
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(origId);
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
    }

    public boolean startInstrumentation(ComponentName className, String profileFile, int flags, Bundle arguments, IInstrumentationWatcher watcher, IUiAutomationConnection uiAutomationConnection, int userId, String abiOverride) {
        ApplicationInfo ai;
        InstrumentationInfo ii;
        boolean evenPersistent;
        ComponentName componentName = className;
        Bundle bundle = arguments;
        IInstrumentationWatcher iInstrumentationWatcher = watcher;
        enforceNotIsolatedCaller("startInstrumentation");
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "startInstrumentation", null);
        if (bundle == null || !arguments.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    try {
                        InstrumentationInfo ii2 = this.mContext.getPackageManager().getInstrumentationInfo(componentName, 1024);
                        ai = AppGlobals.getPackageManager().getApplicationInfo(ii2.targetPackage, 1024, userId2);
                        ii = ii2;
                    } catch (PackageManager.NameNotFoundException | RemoteException e) {
                        ii = null;
                        ai = null;
                    }
                    if (ii == null) {
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Unable to find instrumentation info for: " + componentName);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (ai == null) {
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Unable to find instrumentation target package: " + ii.targetPackage);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (!ai.hasCode()) {
                        reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Instrumentation target has no code: " + ii.targetPackage);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else {
                        int match = this.mContext.getPackageManager().checkSignatures(ii.targetPackage, ii.packageName);
                        if (match < 0) {
                            if (match != -1) {
                                String msg = "Permission Denial: starting instrumentation " + componentName + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingPid() + " not allowed because package " + ii.packageName + " does not have a signature matching the target " + ii.targetPackage;
                                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, msg);
                                throw new SecurityException(msg);
                            }
                        }
                        ActiveInstrumentation activeInstr = new ActiveInstrumentation(this);
                        activeInstr.mClass = componentName;
                        String defProcess = ai.processName;
                        boolean z = true;
                        if (ii.targetProcesses == null) {
                            activeInstr.mTargetProcesses = new String[]{ai.processName};
                        } else if (ii.targetProcesses.equals("*")) {
                            activeInstr.mTargetProcesses = new String[0];
                        } else {
                            activeInstr.mTargetProcesses = ii.targetProcesses.split(",");
                            defProcess = activeInstr.mTargetProcesses[0];
                        }
                        String defProcess2 = defProcess;
                        activeInstr.mTargetInfo = ai;
                        activeInstr.mProfileFile = profileFile;
                        activeInstr.mArguments = bundle;
                        activeInstr.mWatcher = iInstrumentationWatcher;
                        activeInstr.mUiAutomationConnection = uiAutomationConnection;
                        activeInstr.mResultClass = componentName;
                        boolean disableHiddenApiChecks = (flags & 1) != 0;
                        if (disableHiddenApiChecks) {
                            enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                        }
                        long origId = Binder.clearCallingIdentity();
                        if (bundle != null) {
                            Slog.i(TAG, "Arguments param disableAnalytics results = " + bundle.getString("disableAnalytics"));
                            z = true;
                            evenPersistent = "true".equals(bundle.getString("disableAnalytics")) ^ true;
                        } else {
                            evenPersistent = true;
                        }
                        long origId2 = origId;
                        boolean z2 = z;
                        int i = match;
                        ActiveInstrumentation activeInstr2 = activeInstr;
                        ApplicationInfo ai2 = ai;
                        forceStopPackageLocked(ii.targetPackage, -1, true, false, true, evenPersistent, false, userId2, "start instr");
                        if (this.mUsageStatsService != null) {
                            this.mUsageStatsService.reportEvent(ii.targetPackage, userId2, 6);
                        }
                        ProcessRecord app = addAppLocked(ai2, defProcess2, false, disableHiddenApiChecks, abiOverride);
                        ActiveInstrumentation activeInstr3 = activeInstr2;
                        app.instr = activeInstr3;
                        activeInstr3.mFinished = false;
                        activeInstr3.mRunningProcesses.add(app);
                        if (!this.mActiveInstrumentation.contains(activeInstr3)) {
                            this.mActiveInstrumentation.add(activeInstr3);
                        }
                        Binder.restoreCallingIdentity(origId2);
                        resetPriorityAfterLockedSection();
                        return z2;
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
    }

    private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher, ComponentName cn, String report) {
        Slog.w(TAG, report);
        if (watcher != null) {
            Bundle results = new Bundle();
            results.putString("id", "ActivityManagerService");
            results.putString("Error", report);
            this.mInstrumentationReporter.reportStatus(watcher, cn, -1, results);
        }
    }

    /* access modifiers changed from: package-private */
    public void addInstrumentationResultsLocked(ProcessRecord app, Bundle results) {
        if (app.instr == null) {
            Slog.w(TAG, "finishInstrumentation called on non-instrumented: " + app);
            return;
        }
        if (!app.instr.mFinished && results != null) {
            if (app.instr.mCurResults == null) {
                app.instr.mCurResults = new Bundle(results);
            } else {
                app.instr.mCurResults.putAll(results);
            }
        }
    }

    public void addInstrumentationResults(IApplicationThread target, Bundle results) {
        int callingUserId = UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        Slog.w(TAG, "addInstrumentationResults: no app for " + target);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    long origId = Binder.clearCallingIdentity();
                    addInstrumentationResultsLocked(app, results);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results) {
        if (app.instr == null) {
            Slog.w(TAG, "finishInstrumentation called on non-instrumented: " + app);
            return;
        }
        if (!app.instr.mFinished) {
            if (app.instr.mWatcher != null) {
                Bundle finalResults = app.instr.mCurResults;
                if (finalResults == null) {
                    finalResults = results;
                } else if (!(app.instr.mCurResults == null || results == null)) {
                    finalResults.putAll(results);
                }
                this.mInstrumentationReporter.reportFinished(app.instr.mWatcher, app.instr.mClass, resultCode, finalResults);
            }
            if (app.instr.mUiAutomationConnection != null) {
                StringBuilder sb = new StringBuilder();
                sb.append("finishInstrumentationLocked shortMsg:");
                sb.append(results != null ? results.getString("shortMsg") : null);
                sb.append(" from app:");
                sb.append(app);
                Slog.d(TAG, sb.toString());
                this.mHandler.obtainMessage(56, app.instr.mUiAutomationConnection).sendToTarget();
            }
            app.instr.mFinished = true;
        }
        app.instr.removeProcess(app);
        app.instr = null;
        boolean evenPersistent = true;
        if (results != null) {
            Slog.i(TAG, "Bundle param DontKillDeptProc = " + results.getString("DontKillDeptProc"));
            evenPersistent = true ^ "true".equals(results.getString("DontKillDeptProc"));
        }
        forceStopPackageLocked(app.info.packageName, -1, false, false, true, evenPersistent, false, app.userId, "finished inst");
    }

    public void finishInstrumentation(IApplicationThread target, int resultCode, Bundle results) {
        int callingUserId = UserHandle.getCallingUserId();
        if (results == null || !results.hasFileDescriptors()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getRecordForAppLocked(target);
                    if (app == null) {
                        Slog.w(TAG, "finishInstrumentation: no app for " + target);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    long origId = Binder.clearCallingIdentity();
                    finishInstrumentationLocked(app, resultCode, results);
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
        } else {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
    }

    public ConfigurationInfo getDeviceConfigurationInfo() {
        ConfigurationInfo config = new ConfigurationInfo();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                Configuration globalConfig = getGlobalConfiguration();
                config.reqTouchScreen = globalConfig.touchscreen;
                config.reqKeyboardType = globalConfig.keyboard;
                config.reqNavigation = globalConfig.navigation;
                if (globalConfig.navigation == 2 || globalConfig.navigation == 3) {
                    config.reqInputFeatures |= 2;
                }
                if (!(globalConfig.keyboard == 0 || globalConfig.keyboard == 1)) {
                    config.reqInputFeatures |= 1;
                }
                config.reqGlEsVersion = this.GL_ES_VERSION;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return config;
    }

    /* access modifiers changed from: package-private */
    public ActivityStack getFocusedStack() {
        return this.mStackSupervisor.getFocusedStack();
    }

    public ActivityManager.StackInfo getFocusedStackInfo() throws RemoteException {
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "getStackInfo()");
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ActivityStack focusedStack = getFocusedStack();
                if (focusedStack != null) {
                    ActivityManager.StackInfo stackInfo = this.mStackSupervisor.getStackInfo(focusedStack.mStackId);
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(ident);
                    return stackInfo;
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(ident);
                return null;
            }
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(ident);
            throw th;
        }
    }

    public Configuration getConfiguration() {
        Configuration ci;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ci = new Configuration(getGlobalConfiguration());
                ci.userSetLocale = false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        return ci;
    }

    public void suppressResizeConfigChanges(boolean suppress) throws RemoteException {
        enforceCallingPermission("android.permission.MANAGE_ACTIVITY_STACKS", "suppressResizeConfigChanges()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mSuppressResizeConfigChanges = suppress;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void moveTasksToFullscreenStack(int fromStackId, boolean onTop) {
        long origId;
        enforceCallerIsRecentsOrHasPermission("android.permission.MANAGE_ACTIVITY_STACKS", "moveTasksToFullscreenStack()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                ActivityStack stack = this.mStackSupervisor.getStack(fromStackId);
                if (stack != null) {
                    if (stack.isActivityTypeStandardOrUndefined()) {
                        this.mStackSupervisor.moveTasksToFullscreenStackLocked(stack, onTop);
                    } else {
                        throw new IllegalArgumentException("You can't move tasks from non-standard stacks.");
                    }
                }
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void updatePersistentConfiguration(Configuration values) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()");
        if (values != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    updatePersistentConfigurationLocked(values, this.mUserController.getCurrentUserId());
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new NullPointerException("Configuration must not be null");
    }

    private void updatePersistentConfigurationLocked(Configuration values, int userId) {
        long origId = Binder.clearCallingIdentity();
        try {
            updateConfigurationLocked(values, null, false, true, userId, false);
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    /* access modifiers changed from: private */
    public void updateFontScaleIfNeeded(int userId) {
        float scaleFactor = Settings.System.getFloatForUser(this.mContext.getContentResolver(), "font_scale", 1.0f, userId);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (getGlobalConfiguration().fontScale == scaleFactor) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Configuration configuration = this.mWindowManager.computeNewConfiguration(0);
                configuration.fontScale = scaleFactor;
                updatePersistentConfigurationLocked(configuration, userId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    private void enforceWriteSettingsPermission(String func) {
        int uid = Binder.getCallingUid();
        if (uid != 0 && !Settings.checkAndNoteWriteSettingsOperation(this.mContext, uid, Settings.getPackageNameForUid(this.mContext, uid), false)) {
            String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + uid + " requires " + "android.permission.WRITE_SETTINGS";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
    }

    public boolean updateConfiguration(Configuration values) {
        boolean z;
        long origId;
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_UPDATECONFIGURATION);
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateConfiguration()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                z = false;
                if (values == null && this.mWindowManager != null) {
                    values = this.mWindowManager.computeNewConfiguration(0);
                }
                if (this.mWindowManager != null) {
                    this.mProcessList.applyDisplaySize(this.mWindowManager);
                }
                origId = Binder.clearCallingIdentity();
                if (values != null) {
                    Settings.System.clearConfiguration(values);
                }
                updateConfigurationLocked(values, null, false, false, -10000, false, this.mTmpUpdateConfigurationResult);
                if (this.mTmpUpdateConfigurationResult.changes != 0) {
                    z = true;
                }
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* access modifiers changed from: package-private */
    public void updateUserConfigurationLocked() {
        Configuration configuration = new Configuration(getGlobalConfiguration());
        int currentUserId = this.mUserController.getCurrentUserId();
        Settings.System.adjustConfigurationForUser(this.mContext.getContentResolver(), configuration, currentUserId, Settings.System.canWrite(this.mContext));
        updateConfigurationLocked(configuration, null, false, false, currentUserId, false);
    }

    /* access modifiers changed from: package-private */
    public boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale) {
        return updateConfigurationLocked(values, starting, initLocale, false);
    }

    /* access modifiers changed from: package-private */
    public boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale, boolean deferResume) {
        return updateConfigurationLocked(values, starting, initLocale, false, -10000, deferResume);
    }

    /* access modifiers changed from: private */
    public boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale, boolean persistent, int userId, boolean deferResume) {
        return updateConfigurationLocked(values, starting, initLocale, persistent, userId, deferResume, null);
    }

    private boolean updateConfigurationLocked(Configuration values, ActivityRecord starting, boolean initLocale, boolean persistent, int userId, boolean deferResume, UpdateConfigurationResult result) {
        int changes = 0;
        if (this.mWindowManager != null) {
            this.mWindowManager.deferSurfaceLayout();
        }
        if (values != null) {
            try {
                changes = updateGlobalConfigurationLocked(values, initLocale, persistent, userId, deferResume);
            } catch (Throwable th) {
                if (this.mWindowManager != null) {
                    this.mWindowManager.continueSurfaceLayout();
                }
                throw th;
            }
        }
        boolean kept = ensureConfigAndVisibilityAfterUpdate(starting, changes);
        if (this.mWindowManager != null) {
            this.mWindowManager.continueSurfaceLayout();
        }
        if (result != null) {
            result.changes = changes;
            result.activityRelaunched = !kept;
        }
        return kept;
    }

    private static boolean isSplitConfigurationChange(int configDiff) {
        return (configDiff & 4100) != 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:71:0x0304, code lost:
        if (r14.mProcessesReady == false) goto L_0x0309;
     */
    private int updateGlobalConfigurationLocked(Configuration values, boolean initLocale, boolean persistent, int userId, boolean deferResume) {
        ActivityManagerService activityManagerService;
        int changes;
        int changes2;
        ActivityManagerService activityManagerService2;
        Configuration configuration = values;
        boolean z = deferResume;
        this.mTempConfig.setTo(getGlobalConfiguration());
        int oldOrientation = this.mTempConfig.orientation;
        int changes3 = this.mTempConfig.updateFrom(configuration);
        if (!(this.mWindowManager == null || this.mWindowManager.mIsPerfBoost || oldOrientation == this.mTempConfig.orientation || this.mTempConfig.orientation == 0 || oldOrientation == 0)) {
            this.mWindowManager.mIsPerfBoost = true;
            UniPerf.getInstance().uniPerfEvent(4105, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, new int[]{0});
        }
        if (changes3 == 0) {
            performDisplayOverrideConfigUpdate(configuration, z, 0);
            return 0;
        }
        if (ActivityManagerDebugConfig.DEBUG_SWITCH || ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
            Slog.i(TAG_CONFIGURATION, "Updating global configuration to: " + configuration);
        }
        IHwConfiguration oldConfigEx = getGlobalConfiguration().extraConfig;
        IHwConfiguration newConfigEx = this.mTempConfig.extraConfig;
        int oldConfigHwt = oldConfigEx.getConfigItem(1);
        int newConfigHwt = newConfigEx.getConfigItem(1);
        int oldConfigUserId = oldConfigEx.getConfigItem(3);
        int newConfigUserId = newConfigEx.getConfigItem(3);
        boolean isSuccess = false;
        if (!(oldConfigHwt == newConfigHwt && oldConfigUserId == newConfigUserId)) {
            int currentUserId = this.mUserController.getCurrentUserId();
            Slog.i(TAG, "updateConfigurationLocked  currentUserId " + currentUserId + " ; oldConfigHwt " + oldConfigHwt + " ; newConfigHwt " + newConfigHwt);
            this.mTempConfig.extraConfig.setConfigItem(3, currentUserId);
            if (oldConfigHwt != newConfigHwt) {
                isSuccess = Process.updateHwThemeZipsAndSomeIcons(currentUserId);
                this.mTempConfig.extraConfig.setConfigItem(4, 1);
            }
        }
        boolean isSuccess2 = isSuccess;
        EventLog.writeEvent(EventLogTags.CONFIGURATION_CHANGED, changes3);
        int newConfigUserId2 = newConfigUserId;
        int oldConfigUserId2 = oldConfigUserId;
        int newConfigHwt2 = newConfigHwt;
        int oldConfigHwt2 = oldConfigHwt;
        IHwConfiguration newConfigEx2 = newConfigEx;
        IHwConfiguration oldConfigEx2 = oldConfigEx;
        int oldOrientation2 = oldOrientation;
        int changes4 = changes3;
        StatsLog.write(66, configuration.colorMode, configuration.densityDpi, configuration.fontScale, configuration.hardKeyboardHidden, configuration.keyboard, configuration.keyboardHidden, configuration.mcc, configuration.mnc, configuration.navigation, configuration.navigationHidden, configuration.orientation, configuration.screenHeightDp, configuration.screenLayout, configuration.screenWidthDp, configuration.smallestScreenWidthDp, configuration.touchscreen, configuration.uiMode);
        if (initLocale || values.getLocales().isEmpty() || !configuration.userSetLocale) {
            activityManagerService = this;
        } else {
            LocaleList locales = values.getLocales();
            int bestLocaleIndex = 0;
            if (locales.size() > 1) {
                activityManagerService = this;
                if (activityManagerService.mSupportedSystemLocales == null) {
                    activityManagerService.mSupportedSystemLocales = Resources.getSystem().getAssets().getLocales();
                }
                bestLocaleIndex = Math.max(0, locales.getFirstMatchIndex(activityManagerService.mSupportedSystemLocales));
            } else {
                activityManagerService = this;
            }
            SystemProperties.set("persist.sys.locale", locales.get(bestLocaleIndex).toLanguageTag());
            LocaleList.setDefault(locales, bestLocaleIndex);
            activityManagerService.mHandler.sendMessage(activityManagerService.mHandler.obtainMessage(47, locales.get(bestLocaleIndex)));
        }
        int changes5 = changes4;
        HwThemeManager.updateSimpleUIConfig(activityManagerService.mContext.getContentResolver(), activityManagerService.mTempConfig, changes5);
        int i = activityManagerService.mConfigurationSeq + 1;
        activityManagerService.mConfigurationSeq = i;
        activityManagerService.mConfigurationSeq = Math.max(i, 1);
        activityManagerService.mTempConfig.seq = activityManagerService.mConfigurationSeq;
        activityManagerService.mStackSupervisor.onConfigurationChanged(activityManagerService.mTempConfig);
        Slog.i(TAG, "Config changes=" + Integer.toHexString(changes5) + " " + activityManagerService.mTempConfig);
        activityManagerService.mUsageStatsService.reportConfigurationChange(activityManagerService.mTempConfig, activityManagerService.mUserController.getCurrentUserId());
        getGlobalConfiguration().extraConfig.setConfigItem(3, activityManagerService.mTempConfig.extraConfig.getConfigItem(3));
        if (isSuccess2) {
            getGlobalConfiguration().extraConfig.setConfigItem(4, 0);
        }
        activityManagerService.updateShouldShowDialogsLocked(activityManagerService.mTempConfig);
        AttributeCache ac = AttributeCache.instance();
        if (ac != null) {
            ac.updateConfiguration(activityManagerService.mTempConfig);
        }
        activityManagerService.mSystemThread.applyConfigurationToResources(activityManagerService.mTempConfig);
        Configuration configCopy = new Configuration(activityManagerService.mTempConfig);
        if (!persistent || !Settings.System.hasInterestingConfigurationChanges(changes5)) {
            int i2 = userId;
        } else {
            Message msg = activityManagerService.mHandler.obtainMessage(4);
            msg.obj = configCopy;
            msg.arg1 = userId;
            activityManagerService.mHandler.sendMessage(msg);
        }
        int i3 = activityManagerService.mLruProcesses.size() - 1;
        while (true) {
            int i4 = i3;
            if (i4 < 0) {
                break;
            }
            ProcessRecord app = activityManagerService.mLruProcesses.get(i4);
            try {
                if (app.thread != null) {
                    if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                        Slog.v(TAG_CONFIGURATION, "Sending to proc " + app.processName + " new config " + configCopy);
                    }
                    activityManagerService.mLifecycleManager.scheduleTransaction(app.thread, ConfigurationChangeItem.obtain(configCopy));
                }
            } catch (Exception e) {
                Slog.e(TAG_CONFIGURATION, "Failed to schedule configuration change", e);
            }
            i3 = i4 - 1;
        }
        Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
        intent.addFlags(1881145344);
        int i5 = newConfigUserId2;
        int i6 = oldConfigUserId2;
        int i7 = newConfigHwt2;
        int i8 = oldConfigHwt2;
        IHwConfiguration iHwConfiguration = newConfigEx2;
        IHwConfiguration iHwConfiguration2 = oldConfigEx2;
        Configuration configuration2 = configCopy;
        int i9 = oldOrientation2;
        AttributeCache attributeCache = ac;
        activityManagerService.broadcastIntentLocked(null, null, intent, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, -1);
        int changes6 = changes5;
        if ((changes6 & 4) != 0) {
            Intent intent2 = new Intent("android.intent.action.LOCALE_CHANGED");
            intent2.addFlags(287309824);
            if (!initLocale) {
                activityManagerService2 = this;
            } else {
                activityManagerService2 = this;
            }
            intent2.addFlags(1073741824);
            changes = changes6;
            activityManagerService2.broadcastIntentLocked(null, null, intent2, null, null, 0, null, null, null, -1, null, false, false, MY_PID, 1000, -1);
        } else {
            changes = changes6;
        }
        if (!initLocale) {
            int changes7 = changes;
            if (isSplitConfigurationChange(changes7)) {
                Intent intent3 = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                intent3.addFlags(553648128);
                changes2 = changes7;
                broadcastIntentLocked(null, null, intent3, null, null, 0, null, null, new String[]{"android.permission.INSTALL_PACKAGES"}, -1, null, false, false, MY_PID, 1000, -1);
            } else {
                changes2 = changes7;
            }
        } else {
            changes2 = changes;
        }
        performDisplayOverrideConfigUpdate(this.mStackSupervisor.getConfiguration(), deferResume, 0);
        return changes2;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0033, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0030, code lost:
        resetPriorityAfterLockedSection();
     */
    public boolean updateDisplayOverrideConfiguration(Configuration values, int displayId) {
        long origId;
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updateDisplayOverrideConfiguration()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean z = false;
                if (this.mStackSupervisor.isDisplayAdded(displayId)) {
                    if (values == null) {
                        if (this.mWindowManager != null) {
                            values = this.mWindowManager.computeNewConfiguration(displayId);
                        }
                    }
                    if (this.mWindowManager != null) {
                        this.mProcessList.applyDisplaySize(this.mWindowManager);
                    }
                    origId = Binder.clearCallingIdentity();
                    if (values != null) {
                        Settings.System.clearConfiguration(values);
                    }
                    updateDisplayOverrideConfigurationLocked(values, null, false, displayId, this.mTmpUpdateConfigurationResult);
                    if (this.mTmpUpdateConfigurationResult.changes != 0) {
                        z = true;
                    }
                    Binder.restoreCallingIdentity(origId);
                    resetPriorityAfterLockedSection();
                    return z;
                } else if (ActivityManagerDebugConfig.DEBUG_CONFIGURATION) {
                    Slog.w(TAG, "Trying to update display configuration for non-existing displayId=" + displayId);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* access modifiers changed from: package-private */
    public boolean updateDisplayOverrideConfigurationLocked(Configuration values, ActivityRecord starting, boolean deferResume, int displayId) {
        return updateDisplayOverrideConfigurationLocked(values, starting, deferResume, displayId, null);
    }

    private boolean updateDisplayOverrideConfigurationLocked(Configuration values, ActivityRecord starting, boolean deferResume, int displayId, UpdateConfigurationResult result) {
        int changes = 0;
        if (this.mWindowManager != null) {
            this.mWindowManager.mAppTransitTrack = "updateconfig";
            this.mWindowManager.deferSurfaceLayout();
        }
        if (values != null) {
            if (displayId == 0) {
                try {
                    changes = updateGlobalConfigurationLocked(values, false, false, -10000, deferResume);
                } catch (Throwable th) {
                    if (this.mWindowManager != null) {
                        this.mWindowManager.continueSurfaceLayout();
                    }
                    throw th;
                }
            } else {
                changes = performDisplayOverrideConfigUpdate(values, deferResume, displayId);
            }
        }
        boolean kept = ensureConfigAndVisibilityAfterUpdate(starting, changes);
        if (this.mWindowManager != null) {
            this.mWindowManager.continueSurfaceLayout();
        }
        if (result != null) {
            result.changes = changes;
            result.activityRelaunched = !kept;
        }
        return kept;
    }

    private int performDisplayOverrideConfigUpdate(Configuration values, boolean deferResume, int displayId) {
        this.mTempConfig.setTo(this.mStackSupervisor.getDisplayOverrideConfiguration(displayId));
        int changes = this.mTempConfig.updateFrom(values);
        if (changes != 0) {
            Slog.i(TAG, "Override config changes=" + Integer.toHexString(changes) + " " + this.mTempConfig + " for displayId=" + displayId);
            this.mStackSupervisor.setDisplayOverrideConfiguration(this.mTempConfig, displayId);
            if (((changes & 4096) != 0) && displayId == 0) {
                this.mAppWarnings.onDensityChanged();
                killAllBackgroundProcessesExcept(24, 4);
            }
        }
        if (this.mWindowManager != null) {
            int[] resizedStacks = this.mWindowManager.setNewDisplayOverrideConfiguration(this.mTempConfig, displayId);
            if (resizedStacks != null) {
                for (int stackId : resizedStacks) {
                    resizeStackWithBoundsFromWindowManager(stackId, deferResume);
                }
            }
        }
        return changes;
    }

    private boolean ensureConfigAndVisibilityAfterUpdate(ActivityRecord starting, int changes) {
        ActivityStack mainStack = this.mStackSupervisor.getFocusedStack();
        if (mainStack == null) {
            return true;
        }
        if (changes != 0 && starting == null) {
            starting = mainStack.topRunningActivityLocked();
        }
        if (starting == null) {
            return true;
        }
        boolean kept = starting.ensureActivityConfiguration(changes, false);
        this.mStackSupervisor.ensureActivitiesVisibleLocked(starting, changes, false);
        return kept;
    }

    private void resizeStackWithBoundsFromWindowManager(int stackId, boolean deferResume) {
        Rect newStackBounds = new Rect();
        ActivityStack stack = this.mStackSupervisor.getStack(stackId);
        if (stack == null) {
            StringWriter writer = new StringWriter();
            PrintWriter printWriter = new PrintWriter(writer);
            this.mStackSupervisor.dumpDisplays(printWriter);
            printWriter.flush();
            Log.wtf(TAG, "stack not found:" + stackId + " displays:" + writer);
        }
        stack.getBoundsForNewConfiguration(newStackBounds);
        this.mStackSupervisor.resizeStackLocked(stack, !newStackBounds.isEmpty() ? newStackBounds : null, null, null, false, false, deferResume);
    }

    /* access modifiers changed from: private */
    public void updateShouldShowDialogsLocked(Configuration config) {
        boolean z = false;
        boolean inputMethodExists = (config.keyboard == 1 && config.touchscreen == 1 && config.navigation == 1) ? false : true;
        int modeType = config.uiMode & 15;
        boolean uiModeSupportsDialogs = (modeType == 3 || (modeType == 6 && Build.IS_USER) || modeType == 4 || modeType == 7) ? false : true;
        boolean hideDialogsSet = Settings.Global.getInt(this.mContext.getContentResolver(), "hide_error_dialogs", 0) != 0;
        if (inputMethodExists && uiModeSupportsDialogs && !hideDialogsSet) {
            z = true;
        }
        this.mShowDialogs = z;
    }

    public boolean shouldUpRecreateTask(IBinder token, String destAffinity) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord srec = ActivityRecord.forTokenLocked(token);
                if (srec != null) {
                    boolean shouldUpRecreateTaskLocked = srec.getStack().shouldUpRecreateTaskLocked(srec, destAffinity);
                    resetPriorityAfterLockedSection();
                    return shouldUpRecreateTaskLocked;
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public boolean navigateUpTo(IBinder token, Intent destIntent, int resultCode, Intent resultData) {
        HwFrameworkFactory.getHwBehaviorCollectManager().sendBehavior(IHwBehaviorCollectManager.BehaviorId.ACTIVITYMANAGER_NAVIGATEUPTO);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.forTokenLocked(token);
                if (r != null) {
                    boolean navigateUpToLocked = r.getStack().navigateUpToLocked(r, destIntent, resultCode, resultData);
                    resetPriorityAfterLockedSection();
                    return navigateUpToLocked;
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public int getLaunchedFromUid(IBinder activityToken) {
        ActivityRecord srec;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                srec = ActivityRecord.forTokenLocked(activityToken);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (srec == null) {
            return -1;
        }
        return srec.launchedFromUid;
    }

    public String getLaunchedFromPackage(IBinder activityToken) {
        ActivityRecord srec;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                srec = ActivityRecord.forTokenLocked(activityToken);
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
        if (srec == null) {
            return null;
        }
        return srec.launchedFromPackage;
    }

    private boolean isReceivingBroadcastLocked(ProcessRecord app, ArraySet<BroadcastQueue> receivingQueues) {
        int N = app.curReceivers.size();
        int i = 0;
        if (N > 0) {
            while (i < N) {
                receivingQueues.add(app.curReceivers.valueAt(i).queue);
                i++;
            }
            return true;
        }
        BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
        int length = broadcastQueueArr.length;
        while (i < length) {
            BroadcastQueue queue = broadcastQueueArr[i];
            BroadcastRecord r = queue.mPendingBroadcast;
            if (r != null && r.curApp == app) {
                receivingQueues.add(queue);
            }
            i++;
        }
        return !receivingQueues.isEmpty();
    }

    /* access modifiers changed from: package-private */
    public Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState, int targetUid, ComponentName targetComponent, String targetProcess) {
        int i = sourceUid;
        String str = sourceProcess;
        int i2 = targetUid;
        ComponentName componentName = targetComponent;
        if (!this.mTrackingAssociations) {
            return null;
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components = this.mAssociations.get(i2);
        if (components == null) {
            components = new ArrayMap<>();
            this.mAssociations.put(i2, components);
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components2 = components;
        SparseArray<ArrayMap<String, Association>> sourceUids = components2.get(componentName);
        if (sourceUids == null) {
            sourceUids = new SparseArray<>();
            components2.put(componentName, sourceUids);
        }
        SparseArray<ArrayMap<String, Association>> sourceUids2 = sourceUids;
        ArrayMap<String, Association> sourceProcesses = sourceUids2.get(i);
        if (sourceProcesses == null) {
            sourceProcesses = new ArrayMap<>();
            sourceUids2.put(i, sourceProcesses);
        }
        ArrayMap<String, Association> sourceProcesses2 = sourceProcesses;
        Association ass = sourceProcesses2.get(str);
        if (ass == null) {
            Association association = new Association(i, str, i2, componentName, targetProcess);
            ass = association;
            sourceProcesses2.put(str, ass);
        }
        ass.mCount++;
        ass.mNesting++;
        if (ass.mNesting == 1) {
            long uptimeMillis = SystemClock.uptimeMillis();
            ass.mLastStateUptime = uptimeMillis;
            ass.mStartTime = uptimeMillis;
            ass.mLastState = sourceState;
        } else {
            int i3 = sourceState;
        }
        return ass;
    }

    /* access modifiers changed from: package-private */
    public void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent) {
        if (this.mTrackingAssociations) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components = this.mAssociations.get(targetUid);
            if (components != null) {
                SparseArray<ArrayMap<String, Association>> sourceUids = components.get(targetComponent);
                if (sourceUids != null) {
                    ArrayMap<String, Association> sourceProcesses = sourceUids.get(sourceUid);
                    if (sourceProcesses != null) {
                        Association ass = sourceProcesses.get(sourceProcess);
                        if (ass == null) {
                        } else if (ass.mNesting <= 0) {
                            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap = components;
                        } else {
                            ass.mNesting--;
                            if (ass.mNesting == 0) {
                                long uptime = SystemClock.uptimeMillis();
                                ass.mTime += uptime - ass.mStartTime;
                                long[] jArr = ass.mStateTimes;
                                int i = ass.mLastState + 0;
                                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> arrayMap2 = components;
                                jArr[i] = jArr[i] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = 21;
                            }
                        }
                    }
                }
            }
        }
    }

    private void noteUidProcessState(int uid, int state) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        int N1;
        ActivityManagerService activityManagerService = this;
        int i = uid;
        int i2 = state;
        activityManagerService.mBatteryStatsService.noteUidProcessState(i, i2);
        activityManagerService.mAppOpsService.updateUidProcState(i, i2);
        if (activityManagerService.mTrackingAssociations) {
            int i1 = 0;
            int N12 = activityManagerService.mAssociations.size();
            while (i1 < N12) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
                int i22 = 0;
                int N2 = targetComponents2.size();
                while (i22 < N2) {
                    ArrayMap<String, Association> sourceProcesses = targetComponents2.valueAt(i22).get(i);
                    if (sourceProcesses != null) {
                        int i4 = 0;
                        int N4 = sourceProcesses.size();
                        while (i4 < N4) {
                            Association ass = sourceProcesses.valueAt(i4);
                            if (ass.mNesting >= 1) {
                                long uptime = SystemClock.uptimeMillis();
                                long[] jArr = ass.mStateTimes;
                                int i3 = ass.mLastState + 0;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                jArr[i3] = jArr[i3] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = i2;
                                ass.mLastStateUptime = uptime;
                            } else {
                                N1 = N12;
                                targetComponents = targetComponents2;
                            }
                            i4++;
                            N12 = N1;
                            targetComponents2 = targetComponents;
                        }
                    }
                    i22++;
                    N12 = N12;
                    targetComponents2 = targetComponents2;
                }
                i1++;
                activityManagerService = this;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:223:0x04d0, code lost:
        if (r11 > 3) goto L_0x04d4;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:382:0x08a5, code lost:
        if (r0.completedAdjSeq < r7.mAdjSeq) goto L_0x08a8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:488:0x0a04, code lost:
        if (r13 == r12) goto L_0x0a0b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:547:0x0bec, code lost:
        if (r13.completedAdjSeq < r7.mAdjSeq) goto L_0x0bef;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:585:0x0c68, code lost:
        if (r3 == r6) goto L_0x0c6f;
     */
    /* JADX WARNING: Removed duplicated region for block: B:167:0x039d  */
    /* JADX WARNING: Removed duplicated region for block: B:173:0x03c2  */
    /* JADX WARNING: Removed duplicated region for block: B:174:0x03c5  */
    /* JADX WARNING: Removed duplicated region for block: B:222:0x04cf  */
    /* JADX WARNING: Removed duplicated region for block: B:224:0x04d3  */
    /* JADX WARNING: Removed duplicated region for block: B:227:0x04d8  */
    /* JADX WARNING: Removed duplicated region for block: B:234:0x0505  */
    /* JADX WARNING: Removed duplicated region for block: B:251:0x056a  */
    /* JADX WARNING: Removed duplicated region for block: B:266:0x05c0  */
    /* JADX WARNING: Removed duplicated region for block: B:284:0x0622  */
    /* JADX WARNING: Removed duplicated region for block: B:291:0x064f  */
    /* JADX WARNING: Removed duplicated region for block: B:301:0x0689  */
    /* JADX WARNING: Removed duplicated region for block: B:314:0x06d2  */
    /* JADX WARNING: Removed duplicated region for block: B:320:0x0706  */
    /* JADX WARNING: Removed duplicated region for block: B:435:0x0947  */
    /* JADX WARNING: Removed duplicated region for block: B:437:0x094c  */
    /* JADX WARNING: Removed duplicated region for block: B:443:0x0962  */
    /* JADX WARNING: Removed duplicated region for block: B:466:0x09bb  */
    /* JADX WARNING: Removed duplicated region for block: B:475:0x09d4  */
    /* JADX WARNING: Removed duplicated region for block: B:478:0x09db  */
    /* JADX WARNING: Removed duplicated region for block: B:485:0x09eb  */
    /* JADX WARNING: Removed duplicated region for block: B:491:0x0a4c  */
    /* JADX WARNING: Removed duplicated region for block: B:526:0x0b6e  */
    /* JADX WARNING: Removed duplicated region for block: B:606:0x0d2c  */
    /* JADX WARNING: Removed duplicated region for block: B:621:0x0d8e  */
    /* JADX WARNING: Removed duplicated region for block: B:626:0x0d98  */
    /* JADX WARNING: Removed duplicated region for block: B:629:0x0da6  */
    /* JADX WARNING: Removed duplicated region for block: B:636:0x0e2d  */
    /* JADX WARNING: Removed duplicated region for block: B:644:0x0e46  */
    /* JADX WARNING: Removed duplicated region for block: B:661:0x0e85  */
    /* JADX WARNING: Removed duplicated region for block: B:662:0x0e88  */
    /* JADX WARNING: Removed duplicated region for block: B:665:0x0e8f  */
    /* JADX WARNING: Removed duplicated region for block: B:670:0x0e9c  */
    /* JADX WARNING: Removed duplicated region for block: B:674:0x0ea5  */
    /* JADX WARNING: Removed duplicated region for block: B:677:0x0ebc  */
    /* JADX WARNING: Removed duplicated region for block: B:678:0x0ec4  */
    /* JADX WARNING: Removed duplicated region for block: B:681:0x0ed2  */
    /* JADX WARNING: Removed duplicated region for block: B:684:0x0ede  */
    /* JADX WARNING: Removed duplicated region for block: B:695:0x0b46 A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:704:0x0d21 A[SYNTHETIC] */
    private final boolean computeOomAdjLocked(ProcessRecord app, int cachedAdj, ProcessRecord TOP_APP, boolean doingAll, long now) {
        int adj;
        int schedGroup;
        int procState;
        int PROCESS_STATE_CUR_TOP;
        int prevAppAdj;
        int prevProcState;
        boolean foregroundActivities;
        int procState2;
        int adj2;
        boolean mayBeTop;
        boolean bConnectTopApp;
        int is;
        boolean mayBeTop2;
        int bConnectTopApp2;
        String mayBeTopType;
        Object mayBeTopSource;
        int logUid;
        boolean foregroundActivities2;
        int prevProcState2;
        int prevAppAdj2;
        int appUid;
        int procState3;
        Object mayBeTopTarget;
        boolean procState4;
        String mayBeTopType2;
        Object mayBeTopSource2;
        int appUid2;
        int appUid3;
        int logUid2;
        boolean bConnectTopApp3;
        int prevAppAdj3;
        boolean z;
        int provi;
        ProcessRecord processRecord;
        int provi2;
        int logUid3;
        ContentProviderRecord cpr;
        int i;
        int provi3;
        ContentProviderRecord cpr2;
        int appUid4;
        ProcessRecord processRecord2;
        int logUid4;
        int logUid5;
        int appUid5;
        int procState5;
        Object mayBeTopSource3;
        String mayBeTopType3;
        boolean bConnectTopApp4;
        boolean bConnectTopApp5;
        int conni;
        int prevAppAdj4;
        int prevProcState3;
        boolean foregroundActivities3;
        int is2;
        int i2;
        ArrayList<ConnectionRecord> clist;
        int conni2;
        int PROCESS_STATE_CUR_TOP2;
        int logUid6;
        int appUid6;
        ServiceRecord s;
        int logUid7;
        int appUid7;
        int schedGroup2;
        int procState6;
        int schedGroup3;
        ConnectionRecord cr;
        int procState7;
        ServiceRecord s2;
        int clientProcState;
        int procState8;
        String adjType;
        int schedGroup4;
        int newAdj;
        int i3;
        int i4;
        int procState9;
        boolean foregroundActivities4;
        int schedGroup5;
        int PROCESS_STATE_CUR_TOP3;
        int activitiesSize;
        int schedGroup6;
        int schedGroup7;
        int adj3;
        int adj4;
        int adj5;
        int adj6;
        int adj7;
        int adj8;
        int adj9;
        ProcessRecord processRecord3 = app;
        ProcessRecord processRecord4 = TOP_APP;
        boolean z2 = false;
        if (this.mAdjSeq == processRecord3.adjSeq) {
            this.mHwAMSEx.updateProcessRecordCurAdj(this.mAdjSeq, processRecord3);
            if (processRecord3.adjSeq == processRecord3.completedAdjSeq) {
                return false;
            }
            processRecord3.containsCycle = true;
            return false;
        } else if (processRecord3.thread == null) {
            processRecord3.adjSeq = this.mAdjSeq;
            processRecord3.curSchedGroup = 0;
            processRecord3.curProcState = 18;
            processRecord3.curRawAdj = 906;
            processRecord3.curAdj = 906;
            processRecord3.completedAdjSeq = processRecord3.adjSeq;
            return false;
        } else {
            processRecord3.adjTypeCode = 0;
            processRecord3.adjSource = null;
            processRecord3.adjTarget = null;
            processRecord3.empty = false;
            processRecord3.cached = false;
            int activitiesSize2 = processRecord3.activities.size();
            int appUid8 = processRecord3.info.uid;
            int logUid8 = this.mCurOomAdjUid;
            int prevAppAdj5 = processRecord3.curAdj;
            int prevProcState4 = processRecord3.curProcState;
            if (processRecord3.maxAdj <= 0) {
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    reportOomAdjMessageLocked(TAG, "Making fixed: " + processRecord3);
                }
                processRecord3.adjType = "fixed";
                processRecord3.adjSeq = this.mAdjSeq;
                processRecord3.curRawAdj = processRecord3.maxAdj;
                processRecord3.foregroundActivities = false;
                processRecord3.curSchedGroup = 2;
                processRecord3.curProcState = 0;
                processRecord3.systemNoUi = true;
                if (processRecord3 == processRecord4) {
                    processRecord3.systemNoUi = false;
                    processRecord3.curSchedGroup = 3;
                    processRecord3.adjType = "pers-top-activity";
                } else if (processRecord3.hasTopUi) {
                    processRecord3.systemNoUi = false;
                    processRecord3.adjType = "pers-top-ui";
                } else if (activitiesSize2 > 0) {
                    for (int j = 0; j < activitiesSize2; j++) {
                        if (processRecord3.activities.get(j).visible) {
                            processRecord3.systemNoUi = false;
                        }
                    }
                }
                if (processRecord3.systemNoUi == 0) {
                    if (this.mWakefulness == 1) {
                        processRecord3.curProcState = 1;
                        processRecord3.curSchedGroup = 3;
                    } else {
                        processRecord3.curProcState = 4;
                        processRecord3.curSchedGroup = 1;
                    }
                }
                if (this.mCpusetSwitch) {
                    setWhiteListProcessGroup(processRecord3, processRecord4, processRecord3 == processRecord4);
                }
                processRecord3.curAdj = processRecord3.maxAdj;
                processRecord3.completedAdjSeq = processRecord3.adjSeq;
                if (processRecord3.curAdj < prevAppAdj5) {
                    z2 = true;
                }
                return z2;
            }
            processRecord3.systemNoUi = false;
            int PROCESS_STATE_CUR_TOP4 = this.mTopProcessState;
            boolean foregroundActivities5 = processRecord3 == processRecord4;
            this.mTmpBroadcastQueue.clear();
            if (PROCESS_STATE_CUR_TOP4 == 2 && processRecord3 == processRecord4) {
                schedGroup = 3;
                processRecord3.adjType = "top-activity";
                procState = PROCESS_STATE_CUR_TOP4;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb = new StringBuilder();
                    adj = 0;
                    sb.append("Making top: ");
                    sb.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb.toString());
                } else {
                    adj = 0;
                }
            } else if (processRecord3.runningRemoteAnimation) {
                schedGroup = 3;
                processRecord3.adjType = "running-remote-anim";
                procState = PROCESS_STATE_CUR_TOP4;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb2 = new StringBuilder();
                    adj9 = 100;
                    sb2.append("Making running remote anim: ");
                    sb2.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb2.toString());
                } else {
                    adj9 = 100;
                }
                adj = adj9;
            } else if (processRecord3.instr != null) {
                schedGroup = 2;
                processRecord3.adjType = "instrumentation";
                procState = 3;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb3 = new StringBuilder();
                    adj8 = 0;
                    sb3.append("Making instrumentation: ");
                    sb3.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb3.toString());
                } else {
                    adj8 = 0;
                }
                adj = adj8;
            } else if (isReceivingBroadcastLocked(processRecord3, this.mTmpBroadcastQueue)) {
                schedGroup = (this.mTmpBroadcastQueue.contains(this.mFgBroadcastQueue) || (this.mFgThirdAppBroadcastQueue != null && this.mTmpBroadcastQueue.contains(this.mFgThirdAppBroadcastQueue)) || (this.mFgKeyAppBroadcastQueue != null && this.mTmpBroadcastQueue.contains(this.mFgKeyAppBroadcastQueue))) ? 2 : 0;
                processRecord3.adjType = "broadcast";
                procState = 10;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb4 = new StringBuilder();
                    adj7 = 0;
                    sb4.append("Making broadcast: ");
                    sb4.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb4.toString());
                } else {
                    adj7 = 0;
                }
                adj = adj7;
            } else if (processRecord3.executingServices.size() > 0) {
                schedGroup = processRecord3.execServicesFg ? 2 : 0;
                processRecord3.adjType = "exec-service";
                procState = 9;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb5 = new StringBuilder();
                    adj6 = 0;
                    sb5.append("Making exec-service: ");
                    sb5.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb5.toString());
                } else {
                    adj6 = 0;
                }
                adj = adj6;
            } else if (processRecord3 == processRecord4) {
                schedGroup = 0;
                processRecord3.adjType = "top-sleeping";
                procState = PROCESS_STATE_CUR_TOP4;
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb6 = new StringBuilder();
                    adj5 = 0;
                    sb6.append("Making top (sleeping): ");
                    sb6.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb6.toString());
                } else {
                    adj5 = 0;
                }
                adj = adj5;
            } else {
                schedGroup = 0;
                int adj10 = cachedAdj;
                procState = 18;
                processRecord3.cached = true;
                processRecord3.empty = true;
                processRecord3.adjType = "cch-empty";
                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                    StringBuilder sb7 = new StringBuilder();
                    adj4 = adj10;
                    sb7.append("Making empty: ");
                    sb7.append(processRecord3);
                    reportOomAdjMessageLocked(TAG, sb7.toString());
                } else {
                    adj4 = adj10;
                }
                adj = adj4;
            }
            if (foregroundActivities5 || activitiesSize2 <= 0) {
                PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP4;
                prevProcState = prevProcState4;
                prevAppAdj = prevAppAdj5;
                int i5 = activitiesSize2;
                foregroundActivities = foregroundActivities5;
                procState2 = procState;
            } else {
                int minLayer = 99;
                procState2 = procState;
                int schedGroup8 = schedGroup;
                adj2 = adj;
                boolean foregroundActivities6 = foregroundActivities5;
                int j2 = 0;
                while (true) {
                    if (j2 >= activitiesSize2) {
                        PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP4;
                        prevProcState = prevProcState4;
                        prevAppAdj = prevAppAdj5;
                        int i6 = activitiesSize2;
                        foregroundActivities4 = foregroundActivities6;
                        schedGroup5 = schedGroup8;
                        break;
                    }
                    ActivityRecord r = processRecord3.activities.get(j2);
                    prevProcState = prevProcState4;
                    if (r.app != processRecord3) {
                        prevAppAdj = prevAppAdj5;
                        StringBuilder sb8 = new StringBuilder();
                        activitiesSize = activitiesSize2;
                        sb8.append("Found activity ");
                        sb8.append(r);
                        sb8.append(" in proc activity list using ");
                        sb8.append(r.app);
                        sb8.append(" instead of expected ");
                        sb8.append(processRecord3);
                        Log.e(TAG, sb8.toString());
                        if (r.app == null || r.app.uid == processRecord3.uid) {
                            r.setProcess(processRecord3);
                        } else {
                            PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                            schedGroup6 = schedGroup8;
                            schedGroup8 = schedGroup6;
                            j2++;
                            prevProcState4 = prevProcState;
                            prevAppAdj5 = prevAppAdj;
                            activitiesSize2 = activitiesSize;
                            PROCESS_STATE_CUR_TOP4 = PROCESS_STATE_CUR_TOP3;
                        }
                    } else {
                        prevAppAdj = prevAppAdj5;
                        activitiesSize = activitiesSize2;
                    }
                    if (r.visible) {
                        if (adj2 > 100) {
                            adj2 = 100;
                            processRecord3.adjType = "vis-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise adj to vis-activity: " + processRecord3);
                            }
                        }
                        if (procState2 > PROCESS_STATE_CUR_TOP4) {
                            procState2 = PROCESS_STATE_CUR_TOP4;
                            processRecord3.adjType = "vis-activity";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise procstate to vis-activity (top): " + processRecord3);
                            }
                        }
                        int schedGroup9 = schedGroup8;
                        if (schedGroup9 < 2) {
                            schedGroup7 = 2;
                        } else {
                            schedGroup7 = schedGroup9;
                        }
                        processRecord3.cached = false;
                        processRecord3.empty = false;
                        TaskRecord task = r.getTask();
                        if (task != null && 99 > 0) {
                            int layer = task.mLayerRank;
                            if (layer >= 0 && 99 > layer) {
                                minLayer = layer;
                            }
                        }
                        PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP4;
                        foregroundActivities4 = true;
                        schedGroup5 = schedGroup7;
                    } else {
                        schedGroup6 = schedGroup8;
                        if (r.isState(ActivityStack.ActivityState.PAUSING, ActivityStack.ActivityState.PAUSED)) {
                            if (adj2 > 200) {
                                adj2 = 200;
                                processRecord3.adjType = "pause-activity";
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                    StringBuilder sb9 = new StringBuilder();
                                    adj3 = 200;
                                    sb9.append("Raise adj to pause-activity: ");
                                    sb9.append(processRecord3);
                                    reportOomAdjMessageLocked(TAG, sb9.toString());
                                    if (procState2 > PROCESS_STATE_CUR_TOP4) {
                                        procState2 = PROCESS_STATE_CUR_TOP4;
                                        processRecord3.adjType = "pause-activity";
                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                            reportOomAdjMessageLocked(TAG, "Raise procstate to pause-activity (top): " + processRecord3);
                                        }
                                    }
                                    if (schedGroup6 >= 2) {
                                        schedGroup8 = 2;
                                    } else {
                                        schedGroup8 = schedGroup6;
                                    }
                                    processRecord3.cached = false;
                                    processRecord3.empty = false;
                                    PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                                    foregroundActivities6 = true;
                                    adj2 = adj3;
                                }
                            }
                            adj3 = adj2;
                            if (procState2 > PROCESS_STATE_CUR_TOP4) {
                            }
                            if (schedGroup6 >= 2) {
                            }
                            processRecord3.cached = false;
                            processRecord3.empty = false;
                            PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                            foregroundActivities6 = true;
                            adj2 = adj3;
                        } else {
                            if (r.isState(ActivityStack.ActivityState.STOPPING)) {
                                if (adj2 > 200) {
                                    adj2 = 200;
                                    processRecord3.adjType = "stop-activity";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                        StringBuilder sb10 = new StringBuilder();
                                        PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                                        sb10.append("Raise adj to stop-activity: ");
                                        sb10.append(processRecord3);
                                        reportOomAdjMessageLocked(TAG, sb10.toString());
                                    } else {
                                        PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                                    }
                                } else {
                                    PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                                }
                                if (r.finishing == 0 && procState2 > 14) {
                                    procState2 = 14;
                                    processRecord3.adjType = "stop-activity";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                        reportOomAdjMessageLocked(TAG, "Raise procstate to stop-activity: " + processRecord3);
                                    }
                                }
                                processRecord3.cached = false;
                                processRecord3.empty = false;
                                foregroundActivities6 = true;
                            } else {
                                PROCESS_STATE_CUR_TOP3 = PROCESS_STATE_CUR_TOP4;
                                if (procState2 > 15) {
                                    processRecord3.adjType = "cch-act";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                        reportOomAdjMessageLocked(TAG, "Raise procstate to cached activity: " + processRecord3);
                                    }
                                    procState2 = 15;
                                }
                                schedGroup8 = schedGroup6;
                            }
                            schedGroup8 = schedGroup6;
                        }
                        j2++;
                        prevProcState4 = prevProcState;
                        prevAppAdj5 = prevAppAdj;
                        activitiesSize2 = activitiesSize;
                        PROCESS_STATE_CUR_TOP4 = PROCESS_STATE_CUR_TOP3;
                    }
                }
                if (adj2 == 100) {
                    adj = adj2 + minLayer;
                    foregroundActivities = foregroundActivities4;
                } else {
                    foregroundActivities = foregroundActivities4;
                    if (procState2 > 17 && processRecord3.recentTasks.size() > 0) {
                        procState2 = 17;
                        processRecord3.adjType = "cch-rec";
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                            reportOomAdjMessageLocked(TAG, "Raise procstate to cached recent: " + processRecord3);
                        }
                    }
                    if (adj2 > 200) {
                    }
                    if (!processRecord3.foregroundServices) {
                        adj2 = 200;
                        procState2 = 3;
                        processRecord3.cached = false;
                        processRecord3.adjType = "fg-service";
                        if (!this.mCpusetSwitch) {
                            schedGroup = 2;
                        }
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON != 0 || logUid8 == appUid8) {
                            reportOomAdjMessageLocked(TAG, "Raise to fg service: " + processRecord3);
                        }
                    } else if (processRecord3.hasOverlayUi) {
                        adj2 = 200;
                        procState2 = 5;
                        processRecord3.cached = false;
                        processRecord3.adjType = "has-overlay-ui";
                        schedGroup = 2;
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                            reportOomAdjMessageLocked(TAG, "Raise to overlay ui: " + processRecord3);
                        }
                    }
                    if ((adj2 > 200 || procState2 > 7) && processRecord3.forcingToImportant != null) {
                        adj2 = 200;
                        procState2 = 7;
                        processRecord3.cached = false;
                        processRecord3.adjType = "force-imp";
                        processRecord3.adjSource = processRecord3.forcingToImportant;
                        schedGroup = 2;
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                            reportOomAdjMessageLocked(TAG, "Raise to force imp: " + processRecord3);
                        }
                    }
                    if (processRecord3 == this.mHeavyWeightProcess) {
                        if (adj2 > 400) {
                            processRecord3.cached = false;
                            processRecord3.adjType = "heavy";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise adj to heavy: " + processRecord3);
                            }
                            adj2 = 400;
                            schedGroup = 0;
                        }
                        if (procState2 > 12) {
                            procState2 = 12;
                            processRecord3.adjType = "heavy";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise procstate to heavy: " + processRecord3);
                            }
                        }
                    }
                    if (processRecord3 == this.mHomeProcess) {
                        if (adj2 > 600) {
                            processRecord3.cached = false;
                            processRecord3.adjType = "home";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise adj to home: " + processRecord3);
                            }
                            adj2 = 600;
                            schedGroup = 0;
                        }
                        if (procState2 > 13) {
                            procState2 = 13;
                            processRecord3.adjType = "home";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise procstate to home: " + processRecord3);
                            }
                        }
                    }
                    if (processRecord3 == this.mPreviousProcess && processRecord3.activities.size() > 0) {
                        if (adj2 > 700) {
                            processRecord3.cached = false;
                            processRecord3.adjType = "previous";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise adj to prev: " + processRecord3);
                            }
                            adj2 = 700;
                            schedGroup = 0;
                        }
                        if (procState2 > 14) {
                            procState2 = 14;
                            processRecord3.adjType = "previous";
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise procstate to prev: " + processRecord3);
                            }
                        }
                    }
                    processRecord3.curRawAdj = adj2;
                    processRecord3.hasStartedServices = false;
                    processRecord3.adjSeq = this.mAdjSeq;
                    if (this.mBackupTarget != null && processRecord3 == this.mBackupTarget.app) {
                        if (adj2 > 300) {
                            if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                Slog.v(TAG, "oom BACKUP_APP_ADJ for " + processRecord3);
                            }
                            if (procState2 > 7) {
                                procState2 = 7;
                            }
                            processRecord3.adjType = BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD;
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise adj to backup: " + processRecord3);
                            }
                            processRecord3.cached = false;
                            adj2 = 300;
                        }
                        if (procState2 > 8) {
                            procState2 = 8;
                            processRecord3.adjType = BatteryService.HealthServiceWrapper.INSTANCE_HEALTHD;
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                reportOomAdjMessageLocked(TAG, "Raise procstate to backup: " + processRecord3);
                            }
                        }
                    }
                    mayBeTop = false;
                    bConnectTopApp = false;
                    String mayBeTopType4 = null;
                    Object mayBeTopSource4 = null;
                    Object mayBeTopSource5 = null;
                    is = processRecord3.services.size() - 1;
                    while (true) {
                        if (is < 0) {
                            if (adj2 <= 0 && schedGroup != 0 && procState2 <= 2) {
                                mayBeTop2 = mayBeTop;
                                bConnectTopApp2 = bConnectTopApp;
                                mayBeTopType = mayBeTopType4;
                                mayBeTopSource = mayBeTopSource4;
                                logUid = logUid8;
                                foregroundActivities2 = foregroundActivities;
                                prevProcState2 = prevProcState;
                                prevAppAdj2 = prevAppAdj;
                                int i7 = PROCESS_STATE_CUR_TOP;
                                appUid = appUid8;
                                break;
                            }
                            ServiceRecord s3 = processRecord3.services.valueAt(is);
                            boolean mayBeTop3 = mayBeTop;
                            if (s3.startRequested) {
                                processRecord3.hasStartedServices = true;
                                if (procState2 > 9) {
                                    processRecord3.adjType = "started-services";
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                        procState9 = 9;
                                        StringBuilder sb11 = new StringBuilder();
                                        bConnectTopApp4 = bConnectTopApp;
                                        sb11.append("Raise procstate to started service: ");
                                        sb11.append(processRecord3);
                                        reportOomAdjMessageLocked(TAG, sb11.toString());
                                    } else {
                                        procState9 = 9;
                                        bConnectTopApp4 = bConnectTopApp;
                                    }
                                    procState2 = procState9;
                                } else {
                                    bConnectTopApp4 = bConnectTopApp;
                                }
                                if (!processRecord3.hasShownUi || processRecord3 == this.mHomeProcess) {
                                    mayBeTopType3 = mayBeTopType4;
                                    mayBeTopSource3 = mayBeTopSource4;
                                    if (now < s3.lastActivity + this.mConstants.MAX_SERVICE_INACTIVITY && adj2 > 500) {
                                        processRecord3.adjType = "started-services";
                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid8 == appUid8) {
                                            reportOomAdjMessageLocked(TAG, "Raise adj to started service: " + processRecord3);
                                        }
                                        processRecord3.cached = false;
                                        adj2 = 500;
                                    }
                                    if (adj2 > 500) {
                                        processRecord3.adjType = "cch-started-services";
                                    }
                                } else {
                                    if (adj2 > 500) {
                                        processRecord3.adjType = "cch-started-ui-services";
                                    }
                                    mayBeTopType3 = mayBeTopType4;
                                    mayBeTopSource3 = mayBeTopSource4;
                                }
                            } else {
                                bConnectTopApp4 = bConnectTopApp;
                                mayBeTopType3 = mayBeTopType4;
                                mayBeTopSource3 = mayBeTopSource4;
                            }
                            int conni3 = s3.connections.size() - 1;
                            boolean bConnectTopApp6 = bConnectTopApp4;
                            mayBeTopType4 = mayBeTopType3;
                            mayBeTopSource4 = mayBeTopSource3;
                            while (true) {
                                if (conni3 < 0) {
                                    bConnectTopApp5 = bConnectTopApp6;
                                    break;
                                }
                                if (adj2 <= 0 && schedGroup != 0) {
                                    bConnectTopApp5 = bConnectTopApp6;
                                    if (procState2 <= 2) {
                                        break;
                                    }
                                } else {
                                    bConnectTopApp5 = bConnectTopApp6;
                                }
                                ArrayList<ConnectionRecord> clist2 = s3.connections.valueAt(conni3);
                                Object mayBeTopTarget2 = mayBeTopSource5;
                                Object mayBeTopSource6 = mayBeTopSource4;
                                int procState10 = procState2;
                                int schedGroup10 = schedGroup;
                                String mayBeTopType5 = mayBeTopType4;
                                int i8 = 0;
                                while (true) {
                                    conni = conni3;
                                    if (i8 >= clist2.size() || (adj2 <= 0 && schedGroup10 != 0 && procState10 <= 2)) {
                                        int procState11 = procState10;
                                        int schedGroup11 = schedGroup10;
                                        appUid8 = appUid8;
                                        logUid8 = logUid8;
                                        mayBeTopType4 = mayBeTopType5;
                                        mayBeTopSource4 = mayBeTopSource6;
                                        PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP;
                                        mayBeTopSource5 = mayBeTopTarget2;
                                        procState2 = procState11;
                                        is = is;
                                        schedGroup = schedGroup11;
                                        foregroundActivities = foregroundActivities;
                                        prevProcState = prevProcState;
                                        prevAppAdj = prevAppAdj;
                                        s3 = s3;
                                        conni3 = conni - 1;
                                        bConnectTopApp6 = bConnectTopApp5;
                                    } else {
                                        ConnectionRecord cr2 = clist2.get(i8);
                                        ArrayList<ConnectionRecord> clist3 = clist2;
                                        if (cr2.binding.client == processRecord3) {
                                            i2 = i8;
                                            procState6 = procState10;
                                            is2 = is;
                                            appUid7 = appUid8;
                                            logUid7 = logUid8;
                                            schedGroup2 = schedGroup10;
                                            foregroundActivities3 = foregroundActivities;
                                            prevProcState3 = prevProcState;
                                            prevAppAdj4 = prevAppAdj;
                                            PROCESS_STATE_CUR_TOP2 = PROCESS_STATE_CUR_TOP;
                                            conni2 = conni;
                                            clist = clist3;
                                        } else {
                                            if ((cr2.flags & 32) == 0) {
                                                ProcessRecord client = cr2.binding.client;
                                                ConnectionRecord cr3 = cr2;
                                                if (this.mCpusetSwitch) {
                                                    processRecord3.curSchedGroup = schedGroup10;
                                                }
                                                schedGroup2 = schedGroup10;
                                                conni2 = conni;
                                                cr = cr3;
                                                foregroundActivities3 = foregroundActivities;
                                                clist = clist3;
                                                i2 = i8;
                                                PROCESS_STATE_CUR_TOP2 = PROCESS_STATE_CUR_TOP;
                                                procState6 = procState10;
                                                prevProcState3 = prevProcState;
                                                is2 = is;
                                                prevAppAdj4 = prevAppAdj;
                                                appUid7 = appUid8;
                                                logUid7 = logUid8;
                                                computeOomAdjLocked(client, cachedAdj, processRecord4, doingAll, now);
                                                ProcessRecord client2 = client;
                                                if (client2.containsCycle) {
                                                    processRecord3.containsCycle = true;
                                                }
                                                int clientAdj = client2.curRawAdj;
                                                int clientProcState2 = client2.curProcState;
                                                if (clientProcState2 >= 15) {
                                                    clientProcState2 = 18;
                                                }
                                                String adjType2 = null;
                                                if ((cr.flags & 16) == 0) {
                                                    s2 = s3;
                                                } else if (!processRecord3.hasShownUi || processRecord3 == this.mHomeProcess) {
                                                    s2 = s3;
                                                    if (now >= s3.lastActivity + this.mConstants.MAX_SERVICE_INACTIVITY) {
                                                        if (adj2 > clientAdj) {
                                                            adjType2 = "cch-bound-services";
                                                        }
                                                        clientAdj = adj2;
                                                    }
                                                } else {
                                                    if (adj2 > clientAdj) {
                                                        adjType2 = "cch-bound-ui-services";
                                                    }
                                                    processRecord3.cached = false;
                                                    clientAdj = adj2;
                                                    clientProcState2 = procState6;
                                                    s2 = s3;
                                                }
                                                if (adj2 > clientAdj) {
                                                    if (!processRecord3.hasShownUi || processRecord3 == this.mHomeProcess || clientAdj <= 200) {
                                                        if ((cr.flags & 72) == 0) {
                                                            if ((cr.flags & 1073741824) != 0) {
                                                                i3 = 200;
                                                                if (clientAdj < 200 && adj2 > 200) {
                                                                    newAdj = 200;
                                                                    if (!client2.cached) {
                                                                        processRecord3.cached = false;
                                                                    }
                                                                    if (adj2 > newAdj) {
                                                                        int adj11 = newAdj;
                                                                        adjType = "service";
                                                                        adj2 = adj11;
                                                                        procState8 = procState6;
                                                                        schedGroup4 = schedGroup2;
                                                                        if ((cr.flags & 8388612) != 0) {
                                                                            if (client2.curSchedGroup > schedGroup4) {
                                                                                if ((cr.flags & 64) != 0) {
                                                                                    schedGroup4 = client2.curSchedGroup;
                                                                                } else {
                                                                                    schedGroup4 = 2;
                                                                                }
                                                                            }
                                                                            if (client2 == processRecord4) {
                                                                                bConnectTopApp5 = true;
                                                                            }
                                                                            if (clientProcState > 2) {
                                                                                int i9 = clientAdj;
                                                                                s = s2;
                                                                            } else if (clientProcState == 2) {
                                                                                Object mayBeTopSource7 = cr.binding.client;
                                                                                ProcessRecord processRecord5 = client2;
                                                                                int i10 = clientAdj;
                                                                                s = s2;
                                                                                clientProcState = 18;
                                                                                mayBeTopTarget2 = s.name;
                                                                                mayBeTopSource6 = mayBeTopSource7;
                                                                                mayBeTop3 = true;
                                                                                mayBeTopType5 = "service";
                                                                            } else {
                                                                                int i11 = clientAdj;
                                                                                s = s2;
                                                                                if ((cr.flags & 67108864) != 0) {
                                                                                    clientProcState = 4;
                                                                                } else if (this.mWakefulness != 1 || (cr.flags & DumpState.DUMP_HANDLE) == 0) {
                                                                                    clientProcState = 5;
                                                                                } else {
                                                                                    clientProcState = 4;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            int i12 = clientAdj;
                                                                            s = s2;
                                                                            if ((cr.flags & DumpState.DUMP_VOLUMES) == 0) {
                                                                                if (clientProcState < 7) {
                                                                                    clientProcState = 7;
                                                                                }
                                                                            } else if (clientProcState < 6) {
                                                                                clientProcState = 6;
                                                                            }
                                                                        }
                                                                        if (procState8 <= clientProcState) {
                                                                            procState7 = clientProcState;
                                                                            if (adjType == null) {
                                                                                adjType = "service";
                                                                            }
                                                                        } else {
                                                                            procState7 = procState8;
                                                                        }
                                                                        if (procState7 < 6 && (cr.flags & 536870912) != 0) {
                                                                            processRecord3.pendingUiClean = true;
                                                                        }
                                                                        if (adjType == null) {
                                                                            processRecord3.adjType = adjType;
                                                                            processRecord3.adjTypeCode = 2;
                                                                            processRecord3.adjSource = cr.binding.client;
                                                                            processRecord3.adjSourceProcState = clientProcState;
                                                                            processRecord3.adjTarget = s.name;
                                                                            if (!ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON) {
                                                                                appUid6 = appUid7;
                                                                                logUid6 = logUid7;
                                                                            } else {
                                                                                appUid6 = appUid7;
                                                                                logUid6 = logUid7;
                                                                            }
                                                                            StringBuilder sb12 = new StringBuilder();
                                                                            int i13 = clientProcState;
                                                                            sb12.append("Raise to ");
                                                                            sb12.append(adjType);
                                                                            sb12.append(": ");
                                                                            sb12.append(processRecord3);
                                                                            sb12.append(", due to ");
                                                                            sb12.append(cr.binding.client);
                                                                            sb12.append(" adj=");
                                                                            sb12.append(adj2);
                                                                            sb12.append(" procState=");
                                                                            sb12.append(ProcessList.makeProcStateString(procState7));
                                                                            reportOomAdjMessageLocked(TAG, sb12.toString());
                                                                        } else {
                                                                            appUid6 = appUid7;
                                                                            logUid6 = logUid7;
                                                                        }
                                                                        schedGroup3 = schedGroup4;
                                                                    }
                                                                    adjType = adjType2;
                                                                    procState8 = procState6;
                                                                    schedGroup4 = schedGroup2;
                                                                    if ((cr.flags & 8388612) != 0) {
                                                                    }
                                                                    if (procState8 <= clientProcState) {
                                                                    }
                                                                    processRecord3.pendingUiClean = true;
                                                                    if (adjType == null) {
                                                                    }
                                                                    schedGroup3 = schedGroup4;
                                                                }
                                                            } else {
                                                                i3 = 200;
                                                            }
                                                            if (clientAdj >= i3) {
                                                                i4 = clientAdj;
                                                            } else {
                                                                if (adj2 > 100) {
                                                                    newAdj = Math.max(clientAdj, 100);
                                                                } else {
                                                                    newAdj = adj2;
                                                                }
                                                                if (!client2.cached) {
                                                                }
                                                                if (adj2 > newAdj) {
                                                                }
                                                                adjType = adjType2;
                                                                procState8 = procState6;
                                                                schedGroup4 = schedGroup2;
                                                                if ((cr.flags & 8388612) != 0) {
                                                                }
                                                                if (procState8 <= clientProcState) {
                                                                }
                                                                processRecord3.pendingUiClean = true;
                                                                if (adjType == null) {
                                                                }
                                                                schedGroup3 = schedGroup4;
                                                            }
                                                        } else if (clientAdj >= -700) {
                                                            i4 = clientAdj;
                                                        } else {
                                                            i4 = -700;
                                                            schedGroup2 = 2;
                                                            procState6 = 0;
                                                        }
                                                        newAdj = i4;
                                                        if (!client2.cached) {
                                                        }
                                                        if (adj2 > newAdj) {
                                                        }
                                                        adjType = adjType2;
                                                        procState8 = procState6;
                                                        schedGroup4 = schedGroup2;
                                                        if ((cr.flags & 8388612) != 0) {
                                                        }
                                                        if (procState8 <= clientProcState) {
                                                        }
                                                        processRecord3.pendingUiClean = true;
                                                        if (adjType == null) {
                                                        }
                                                        schedGroup3 = schedGroup4;
                                                    } else if (adj2 >= 900) {
                                                        adjType = "cch-bound-ui-services";
                                                        procState8 = procState6;
                                                        schedGroup4 = schedGroup2;
                                                        if ((cr.flags & 8388612) != 0) {
                                                        }
                                                        if (procState8 <= clientProcState) {
                                                        }
                                                        processRecord3.pendingUiClean = true;
                                                        if (adjType == null) {
                                                        }
                                                        schedGroup3 = schedGroup4;
                                                    }
                                                }
                                                adjType = adjType2;
                                                procState8 = procState6;
                                                schedGroup4 = schedGroup2;
                                                if ((cr.flags & 8388612) != 0) {
                                                }
                                                if (procState8 <= clientProcState) {
                                                }
                                                processRecord3.pendingUiClean = true;
                                                if (adjType == null) {
                                                }
                                                schedGroup3 = schedGroup4;
                                            } else {
                                                i2 = i8;
                                                is2 = is;
                                                schedGroup3 = schedGroup10;
                                                foregroundActivities3 = foregroundActivities;
                                                prevProcState3 = prevProcState;
                                                prevAppAdj4 = prevAppAdj;
                                                PROCESS_STATE_CUR_TOP2 = PROCESS_STATE_CUR_TOP;
                                                conni2 = conni;
                                                clist = clist3;
                                                cr = cr2;
                                                appUid6 = appUid8;
                                                s = s3;
                                                logUid6 = logUid8;
                                                procState7 = procState10;
                                            }
                                            if ((cr.flags & 134217728) != 0) {
                                                processRecord3.treatLikeActivity = true;
                                            }
                                            ActivityRecord a = cr.activity;
                                            if ((cr.flags & 128) != 0 && a != null && adj2 > 0 && (a.visible || a.isState(ActivityStack.ActivityState.RESUMED, ActivityStack.ActivityState.PAUSING))) {
                                                if ((cr.flags & 4) == 0) {
                                                    if ((cr.flags & 64) != 0) {
                                                        schedGroup3 = 4;
                                                    } else {
                                                        schedGroup3 = 2;
                                                    }
                                                }
                                                processRecord3.cached = false;
                                                processRecord3.adjType = "service";
                                                processRecord3.adjTypeCode = 2;
                                                processRecord3.adjSource = a;
                                                processRecord3.adjSourceProcState = procState7;
                                                processRecord3.adjTarget = s.name;
                                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid6 == appUid6) {
                                                    reportOomAdjMessageLocked(TAG, "Raise to service w/activity: " + processRecord3);
                                                }
                                                adj2 = 0;
                                            }
                                            procState10 = procState7;
                                            schedGroup10 = schedGroup3;
                                            i8 = i2 + 1;
                                            appUid8 = appUid6;
                                            logUid8 = logUid6;
                                            PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP2;
                                            clist2 = clist;
                                            is = is2;
                                            foregroundActivities = foregroundActivities3;
                                            prevProcState = prevProcState3;
                                            prevAppAdj = prevAppAdj4;
                                            s3 = s;
                                            conni3 = conni2;
                                        }
                                        s = s3;
                                        procState10 = procState6;
                                        schedGroup10 = schedGroup2;
                                        appUid6 = appUid7;
                                        logUid6 = logUid7;
                                        i8 = i2 + 1;
                                        appUid8 = appUid6;
                                        logUid8 = logUid6;
                                        PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP2;
                                        clist2 = clist;
                                        is = is2;
                                        foregroundActivities = foregroundActivities3;
                                        prevProcState = prevProcState3;
                                        prevAppAdj = prevAppAdj4;
                                        s3 = s;
                                        conni3 = conni2;
                                    }
                                }
                                int procState112 = procState10;
                                int schedGroup112 = schedGroup10;
                                appUid8 = appUid8;
                                logUid8 = logUid8;
                                mayBeTopType4 = mayBeTopType5;
                                mayBeTopSource4 = mayBeTopSource6;
                                PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP;
                                mayBeTopSource5 = mayBeTopTarget2;
                                procState2 = procState112;
                                is = is;
                                schedGroup = schedGroup112;
                                foregroundActivities = foregroundActivities;
                                prevProcState = prevProcState;
                                prevAppAdj = prevAppAdj;
                                s3 = s3;
                                conni3 = conni - 1;
                                bConnectTopApp6 = bConnectTopApp5;
                            }
                            is--;
                            appUid8 = appUid8;
                            logUid8 = logUid8;
                            PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP;
                            mayBeTop = mayBeTop3;
                            bConnectTopApp = bConnectTopApp5;
                            foregroundActivities = foregroundActivities;
                            prevProcState = prevProcState;
                            prevAppAdj = prevAppAdj;
                        } else {
                            mayBeTop2 = mayBeTop;
                            bConnectTopApp2 = bConnectTopApp;
                            mayBeTopType = mayBeTopType4;
                            mayBeTopSource = mayBeTopSource4;
                            logUid = logUid8;
                            foregroundActivities2 = foregroundActivities;
                            prevProcState2 = prevProcState;
                            prevAppAdj2 = prevAppAdj;
                            int i14 = PROCESS_STATE_CUR_TOP;
                            appUid = appUid8;
                            break;
                        }
                    }
                    procState3 = processRecord3.pubProviders.size() - 1;
                    mayBeTopTarget = mayBeTopSource5;
                    procState4 = bConnectTopApp2;
                    mayBeTopType2 = mayBeTopType;
                    mayBeTopSource2 = mayBeTopSource;
                    while (true) {
                        appUid2 = procState3;
                        if (appUid2 < 0) {
                            if (adj2 <= 0 && schedGroup != 0 && procState2 <= 2) {
                                ProcessRecord processRecord6 = processRecord4;
                                appUid3 = appUid;
                                logUid2 = logUid;
                                break;
                            }
                            ContentProviderRecord cpr3 = processRecord3.pubProviders.valueAt(appUid2);
                            int i15 = cpr3.connections.size() - 1;
                            Object mayBeTopSource8 = mayBeTopSource2;
                            Object mayBeTopTarget3 = mayBeTopTarget;
                            boolean bConnectTopApp7 = procState4;
                            int procState12 = procState2;
                            int schedGroup12 = schedGroup;
                            String mayBeTopType6 = mayBeTopType2;
                            while (true) {
                                if (i15 >= 0) {
                                    if (adj2 <= 0 && schedGroup12 != 0 && procState12 <= 2) {
                                        provi = appUid2;
                                        processRecord = processRecord4;
                                        provi2 = appUid;
                                        logUid3 = logUid;
                                        cpr = cpr3;
                                        break;
                                    }
                                    ContentProviderConnection conn = cpr3.connections.get(i15);
                                    ProcessRecord client3 = conn.client;
                                    if (client3 == processRecord3) {
                                        procState5 = procState12;
                                        i = i15;
                                        provi3 = appUid2;
                                        appUid5 = appUid;
                                        logUid5 = logUid;
                                        cpr2 = cpr3;
                                    } else {
                                        if (this.mCpusetSwitch) {
                                            processRecord3.curSchedGroup = schedGroup12;
                                        }
                                        appUid5 = appUid;
                                        cpr2 = cpr3;
                                        logUid5 = logUid;
                                        ProcessRecord client4 = client3;
                                        ContentProviderConnection contentProviderConnection = conn;
                                        ProcessRecord processRecord7 = processRecord4;
                                        procState5 = procState12;
                                        i = i15;
                                        provi3 = appUid2;
                                        computeOomAdjLocked(client3, cachedAdj, processRecord7, doingAll, now);
                                        if (client4.containsCycle) {
                                            processRecord3.containsCycle = true;
                                        }
                                        int clientAdj2 = client4.curRawAdj;
                                        int clientProcState3 = client4.curProcState;
                                        if (clientProcState3 >= 15) {
                                            clientProcState3 = 18;
                                        }
                                        String adjType3 = null;
                                        if (adj2 > clientAdj2) {
                                            if (!processRecord3.hasShownUi || processRecord3 == this.mHomeProcess || clientAdj2 <= 200) {
                                                adjType3 = "provider";
                                                adj2 = clientAdj2 > 0 ? clientAdj2 : 0;
                                            } else {
                                                adjType3 = "cch-ui-provider";
                                            }
                                            processRecord3.cached &= client4.cached;
                                        }
                                        if (clientProcState3 <= 2) {
                                            if (clientProcState3 == 2) {
                                                clientProcState3 = 18;
                                                adjType3 = "provider-top";
                                                mayBeTop2 = true;
                                                mayBeTopType6 = "provider-top";
                                                mayBeTopTarget3 = cpr2.name;
                                                mayBeTopSource8 = client4;
                                            } else {
                                                clientProcState3 = 4;
                                                if (adjType3 == null) {
                                                    adjType3 = "provider";
                                                }
                                            }
                                        }
                                        if (procState5 > clientProcState3) {
                                            procState5 = clientProcState3;
                                        }
                                        if (client4.curSchedGroup > schedGroup12) {
                                            schedGroup12 = 2;
                                        }
                                        processRecord2 = TOP_APP;
                                        if (client4 == processRecord2) {
                                            bConnectTopApp7 = true;
                                        }
                                        if (adjType3 != null) {
                                            processRecord3.adjType = adjType3;
                                            processRecord3.adjTypeCode = 1;
                                            processRecord3.adjSource = client4;
                                            processRecord3.adjSourceProcState = clientProcState3;
                                            processRecord3.adjTarget = cpr2.name;
                                            if (!ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON) {
                                                appUid4 = appUid5;
                                                logUid4 = logUid5;
                                            } else {
                                                appUid4 = appUid5;
                                                logUid4 = logUid5;
                                            }
                                            int i16 = clientAdj2;
                                            StringBuilder sb13 = new StringBuilder();
                                            int i17 = clientProcState3;
                                            sb13.append("Raise to ");
                                            sb13.append(adjType3);
                                            sb13.append(": ");
                                            sb13.append(processRecord3);
                                            sb13.append(", due to ");
                                            sb13.append(client4);
                                            sb13.append(" adj=");
                                            sb13.append(adj2);
                                            sb13.append(" procState=");
                                            sb13.append(ProcessList.makeProcStateString(procState5));
                                            reportOomAdjMessageLocked(TAG, sb13.toString());
                                        } else {
                                            appUid4 = appUid5;
                                            logUid4 = logUid5;
                                        }
                                        procState12 = procState5;
                                        logUid = logUid4;
                                        processRecord4 = processRecord2;
                                        i15 = i - 1;
                                        cpr3 = cpr2;
                                        appUid = appUid4;
                                        appUid2 = provi3;
                                    }
                                    procState12 = procState5;
                                    appUid4 = appUid5;
                                    logUid4 = logUid5;
                                    processRecord2 = TOP_APP;
                                    logUid = logUid4;
                                    processRecord4 = processRecord2;
                                    i15 = i - 1;
                                    cpr3 = cpr2;
                                    appUid = appUid4;
                                    appUid2 = provi3;
                                } else {
                                    provi = appUid2;
                                    processRecord = processRecord4;
                                    provi2 = appUid;
                                    logUid3 = logUid;
                                    cpr = cpr3;
                                    break;
                                }
                            }
                            if (cpr.hasExternalProcessHandles()) {
                                if (adj2 > 0) {
                                    adj2 = 0;
                                    schedGroup12 = 2;
                                    processRecord3.cached = false;
                                    processRecord3.adjType = "ext-provider";
                                    processRecord3.adjTarget = cpr.name;
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid3 == provi2) {
                                        reportOomAdjMessageLocked(TAG, "Raise adj to external provider: " + processRecord3);
                                    }
                                }
                                if (procState12 > 5) {
                                    reportOomAdjMessageLocked(TAG, "Raise procstate to external provider: " + processRecord3);
                                    procState12 = 5;
                                }
                            }
                            procState3 = provi - 1;
                            logUid = logUid3;
                            processRecord4 = processRecord;
                            appUid = provi2;
                            mayBeTopType2 = mayBeTopType6;
                            mayBeTopSource2 = mayBeTopSource8;
                            mayBeTopTarget = mayBeTopTarget3;
                            schedGroup = schedGroup12;
                            procState2 = procState12;
                            procState4 = bConnectTopApp7;
                        } else {
                            ProcessRecord processRecord8 = processRecord4;
                            appUid3 = appUid;
                            logUid2 = logUid;
                            break;
                        }
                    }
                    if (processRecord3.lastProviderTime <= 0) {
                        bConnectTopApp3 = procState4;
                        if (processRecord3.lastProviderTime + this.mConstants.CONTENT_PROVIDER_RETAIN_TIME > now) {
                            if (adj2 > 700) {
                                processRecord3.cached = false;
                                processRecord3.adjType = "recent-provider";
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid2 == appUid3) {
                                    reportOomAdjMessageLocked(TAG, "Raise adj to recent provider: " + processRecord3);
                                }
                                adj2 = 700;
                                schedGroup = 0;
                            }
                            if (procState2 > 14) {
                                procState2 = 14;
                                processRecord3.adjType = "recent-provider";
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid2 == appUid3) {
                                    reportOomAdjMessageLocked(TAG, "Raise procstate to recent provider: " + processRecord3);
                                }
                            }
                        }
                    } else {
                        bConnectTopApp3 = procState4;
                    }
                    if (mayBeTop2 && procState2 > 2) {
                        switch (procState2) {
                            case 3:
                            case 4:
                                break;
                            case 5:
                            case 6:
                            case 7:
                            case 9:
                                procState2 = 4;
                                processRecord3.adjType = mayBeTopType2;
                                processRecord3.adjSource = mayBeTopSource2;
                                processRecord3.adjTarget = mayBeTopTarget;
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid2 == appUid3) {
                                    reportOomAdjMessageLocked(TAG, "May be top raise to " + mayBeTopType2 + ": " + processRecord3 + ", due to " + mayBeTopSource2 + " adj=" + adj2 + " procState=" + ProcessList.makeProcStateString(4));
                                    break;
                                }
                            default:
                                procState2 = 2;
                                processRecord3.adjType = mayBeTopType2;
                                processRecord3.adjSource = mayBeTopSource2;
                                processRecord3.adjTarget = mayBeTopTarget;
                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ_REASON || logUid2 == appUid3) {
                                    reportOomAdjMessageLocked(TAG, "May be top raise to " + mayBeTopType2 + ": " + processRecord3 + ", due to " + mayBeTopSource2 + " adj=" + adj2 + " procState=" + ProcessList.makeProcStateString(2));
                                    break;
                                }
                        }
                    }
                    if (procState2 >= 18) {
                        if (processRecord3.hasClientActivities) {
                            procState2 = 16;
                            processRecord3.adjType = "cch-client-act";
                        } else if (processRecord3.treatLikeActivity) {
                            procState2 = 15;
                            processRecord3.adjType = "cch-as-act";
                        }
                    }
                    if (adj2 != 500) {
                        if (doingAll) {
                            processRecord3.serviceb = this.mNewNumAServiceProcs > this.mNumServiceProcs / 3;
                            this.mNewNumServiceProcs++;
                            if (processRecord3.serviceb) {
                                processRecord3.serviceHighRam = false;
                                if (processRecord3.serviceb) {
                                    adj2 = 800;
                                }
                            } else if (this.mLastMemoryLevel <= 0 || processRecord3.lastPss < this.mProcessList.getCachedRestoreThresholdKb()) {
                                this.mNewNumAServiceProcs++;
                            } else {
                                processRecord3.serviceHighRam = true;
                                processRecord3.serviceb = true;
                            }
                        }
                        if (processRecord3.serviceb) {
                        }
                    }
                    processRecord3.curRawAdj = adj2;
                    if (adj2 > processRecord3.maxAdj) {
                        adj2 = processRecord3.maxAdj;
                        if (processRecord3.maxAdj <= 200) {
                            schedGroup = 2;
                        }
                    }
                    int schedGroup13 = schedGroup;
                    if (procState2 < 4) {
                        if (this.mWakefulness != 1 && schedGroup13 > 1) {
                            schedGroup13 = 1;
                        }
                    }
                    processRecord3.curAdj = processRecord3.modifyRawOomAdj(adj2);
                    processRecord3.curSchedGroup = schedGroup13;
                    processRecord3.curProcState = procState2;
                    processRecord3.foregroundActivities = foregroundActivities2;
                    processRecord3.completedAdjSeq = this.mAdjSeq;
                    if (!this.mCpusetSwitch) {
                        setWhiteListProcessGroup(processRecord3, TOP_APP, bConnectTopApp3);
                    } else {
                        int i18 = bConnectTopApp3;
                        ProcessRecord processRecord9 = TOP_APP;
                    }
                    int i19 = logUid2;
                    String str = mayBeTopType2;
                    prevAppAdj3 = prevAppAdj2;
                    if (processRecord3.curAdj < prevAppAdj3) {
                        int i20 = prevAppAdj3;
                        if (processRecord3.curProcState >= prevProcState2) {
                            z = false;
                            return z;
                        }
                    } else {
                        int prevAppAdj6 = prevProcState2;
                    }
                    z = true;
                    return z;
                }
            }
            adj2 = adj;
            procState2 = 17;
            processRecord3.adjType = "cch-rec";
            reportOomAdjMessageLocked(TAG, "Raise procstate to cached recent: " + processRecord3);
            if (adj2 > 200) {
            }
            if (!processRecord3.foregroundServices) {
            }
            adj2 = 200;
            procState2 = 7;
            processRecord3.cached = false;
            processRecord3.adjType = "force-imp";
            processRecord3.adjSource = processRecord3.forcingToImportant;
            schedGroup = 2;
            reportOomAdjMessageLocked(TAG, "Raise to force imp: " + processRecord3);
            if (processRecord3 == this.mHeavyWeightProcess) {
            }
            if (processRecord3 == this.mHomeProcess) {
            }
            if (adj2 > 700) {
            }
            if (procState2 > 14) {
            }
            processRecord3.curRawAdj = adj2;
            processRecord3.hasStartedServices = false;
            processRecord3.adjSeq = this.mAdjSeq;
            if (adj2 > 300) {
            }
            if (procState2 > 8) {
            }
            mayBeTop = false;
            bConnectTopApp = false;
            String mayBeTopType42 = null;
            Object mayBeTopSource42 = null;
            Object mayBeTopSource52 = null;
            is = processRecord3.services.size() - 1;
            while (true) {
                if (is < 0) {
                }
                is--;
                appUid8 = appUid8;
                logUid8 = logUid8;
                PROCESS_STATE_CUR_TOP = PROCESS_STATE_CUR_TOP;
                mayBeTop = mayBeTop3;
                bConnectTopApp = bConnectTopApp5;
                foregroundActivities = foregroundActivities;
                prevProcState = prevProcState;
                prevAppAdj = prevAppAdj;
            }
            procState3 = processRecord3.pubProviders.size() - 1;
            mayBeTopTarget = mayBeTopSource52;
            procState4 = bConnectTopApp2;
            mayBeTopType2 = mayBeTopType;
            mayBeTopSource2 = mayBeTopSource;
            while (true) {
                appUid2 = procState3;
                if (appUid2 < 0) {
                }
                procState3 = provi - 1;
                logUid = logUid3;
                processRecord4 = processRecord;
                appUid = provi2;
                mayBeTopType2 = mayBeTopType6;
                mayBeTopSource2 = mayBeTopSource8;
                mayBeTopTarget = mayBeTopTarget3;
                schedGroup = schedGroup12;
                procState2 = procState12;
                procState4 = bConnectTopApp7;
            }
            if (processRecord3.lastProviderTime <= 0) {
            }
            switch (procState2) {
                case 3:
                case 4:
                    break;
                case 5:
                case 6:
                case 7:
                case 9:
                    break;
            }
            if (procState2 >= 18) {
            }
            if (adj2 != 500) {
            }
            processRecord3.curRawAdj = adj2;
            if (adj2 > processRecord3.maxAdj) {
            }
            int schedGroup132 = schedGroup;
            if (procState2 < 4) {
            }
            processRecord3.curAdj = processRecord3.modifyRawOomAdj(adj2);
            processRecord3.curSchedGroup = schedGroup132;
            processRecord3.curProcState = procState2;
            processRecord3.foregroundActivities = foregroundActivities2;
            processRecord3.completedAdjSeq = this.mAdjSeq;
            if (!this.mCpusetSwitch) {
            }
            int i192 = logUid2;
            String str2 = mayBeTopType2;
            prevAppAdj3 = prevAppAdj2;
            if (processRecord3.curAdj < prevAppAdj3) {
            }
            z = true;
            return z;
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v8, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v4, resolved type: java.lang.Long} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v10, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v15, resolved type: android.util.Pair} */
    /* access modifiers changed from: package-private */
    /* JADX WARNING: Multi-variable type inference failed */
    public void recordPssSampleLocked(ProcessRecord proc, int procState, long pss, long uss, long swapPss, long rss, int statType, long pssDuration, long now) {
        long j;
        ProcessRecord processRecord = proc;
        long j2 = pss;
        long j3 = swapPss;
        if (processRecord.info != null) {
            this.mDAProxy.addPssToMap(processRecord.info.packageName, processRecord.processName, processRecord.info.uid, processRecord.pid, procState, j2, uss, swapPss, this.mTestPssMode);
        }
        int i = processRecord.pid;
        long j4 = pss;
        long j5 = swapPss;
        EventLogTags.writeAmPss(i, processRecord.uid, processRecord.processName, j4 * 1024, uss * 1024, j5 * 1024, rss * 1024, statType, procState, pssDuration);
        processRecord.lastPssTime = now;
        long j6 = j5;
        processRecord.baseProcessTracker.addPss(j4, uss, rss, true, statType, pssDuration, processRecord.pkgList);
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            StringBuilder sb = new StringBuilder();
            sb.append("pss of ");
            sb.append(proc.toShortString());
            sb.append(": ");
            j = pss;
            sb.append(j);
            sb.append(" lastPss=");
            sb.append(processRecord.lastPss);
            sb.append(" state=");
            sb.append(ProcessList.makeProcStateString(procState));
            Slog.d(TAG, sb.toString());
        } else {
            j = pss;
        }
        if (processRecord.initialIdlePss == 0) {
            processRecord.initialIdlePss = j;
        }
        processRecord.lastPss = j;
        processRecord.lastSwapPss = j6;
        if (procState >= 13) {
            processRecord.lastCachedPss = j;
            processRecord.lastCachedSwapPss = j6;
        }
        SparseArray<Pair<Long, String>> watchUids = (SparseArray) this.mMemWatchProcesses.getMap().get(processRecord.processName);
        Long check = null;
        if (watchUids != null) {
            Pair<Long, String> val = watchUids.get(processRecord.uid);
            if (val == null) {
                val = watchUids.get(0);
            }
            if (val != null) {
                check = val.first;
            }
        }
        if (check != null && 1024 * j >= check.longValue() && processRecord.thread != null && this.mMemWatchDumpProcName == null) {
            boolean isDebuggable = "1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"));
            if (!isDebuggable && (processRecord.info.flags & 2) != 0) {
                isDebuggable = true;
            }
            if (isDebuggable) {
                Slog.w(TAG, "Process " + processRecord + " exceeded pss limit " + check + "; reporting");
                final ProcessRecord myProc = processRecord;
                final File heapdumpFile = DumpHeapProvider.getJavaFile();
                this.mMemWatchDumpProcName = processRecord.processName;
                this.mMemWatchDumpFile = heapdumpFile.toString();
                this.mMemWatchDumpPid = processRecord.pid;
                this.mMemWatchDumpUid = processRecord.uid;
                BackgroundThread.getHandler().post(new Runnable() {
                    public void run() {
                        ActivityManagerService.this.revokeUriPermission(ActivityThread.currentActivityThread().getApplicationThread(), null, DumpHeapActivity.JAVA_URI, 3, UserHandle.myUserId());
                        ParcelFileDescriptor fd = null;
                        try {
                            heapdumpFile.delete();
                            fd = ParcelFileDescriptor.open(heapdumpFile, 771751936);
                            IApplicationThread thread = myProc.thread;
                            if (thread != null) {
                                try {
                                    if (ActivityManagerDebugConfig.DEBUG_PSS) {
                                        Slog.d(ActivityManagerService.TAG, "Requesting dump heap from " + myProc + " to " + heapdumpFile);
                                    }
                                    thread.dumpHeap(true, false, false, heapdumpFile.toString(), fd);
                                } catch (RemoteException e) {
                                }
                            }
                            if (fd != null) {
                                try {
                                    fd.close();
                                } catch (IOException e2) {
                                }
                            }
                        } catch (FileNotFoundException e3) {
                            e3.printStackTrace();
                            if (fd != null) {
                                fd.close();
                            }
                        } catch (Throwable th) {
                            if (fd != null) {
                                try {
                                    fd.close();
                                } catch (IOException e4) {
                                }
                            }
                            throw th;
                        }
                    }
                });
                return;
            }
            Slog.w(TAG, "Process " + processRecord + " exceeded pss limit " + check + ", but debugging not enabled");
        }
    }

    /* access modifiers changed from: package-private */
    public boolean requestPssLocked(ProcessRecord proc, int procState) {
        if (this.mPendingPssProcesses.contains(proc)) {
            return false;
        }
        if (this.mPendingPssProcesses.size() == 0) {
            this.mBgHandler.sendEmptyMessage(1);
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            Slog.d(TAG, "Requesting pss of: " + proc);
        }
        proc.pssProcState = procState;
        proc.pssStatType = 0;
        this.mPendingPssProcesses.add(proc);
        return true;
    }

    /* access modifiers changed from: package-private */
    public void requestPssAllProcsLocked(long now, boolean always, boolean memLowered) {
        int i;
        long j;
        if (!always) {
            long j2 = this.mLastFullPssTime;
            if (memLowered) {
                j = this.mConstants.FULL_PSS_LOWERED_INTERVAL;
            } else {
                j = this.mConstants.FULL_PSS_MIN_INTERVAL;
            }
            if (now < j2 + j) {
                return;
            }
        }
        if (ActivityManagerDebugConfig.DEBUG_PSS) {
            Slog.d(TAG, "Requesting pss of all procs!  memLowered=" + memLowered);
        }
        this.mLastFullPssTime = now;
        this.mFullPssPending = true;
        for (int i2 = this.mPendingPssProcesses.size() - 1; i2 >= 0; i2--) {
            ProcessList.abortNextPssTime(this.mPendingPssProcesses.get(i2).procStateMemTracker);
        }
        this.mPendingPssProcesses.ensureCapacity(this.mLruProcesses.size());
        this.mPendingPssProcesses.clear();
        for (int i3 = this.mLruProcesses.size() - 1; i3 >= 0; i3--) {
            ProcessRecord app = this.mLruProcesses.get(i3);
            if (!(app.thread == null || app.curProcState == 19 || ((!memLowered && ((!always || now <= app.lastStateTime + 1000) && now <= app.lastStateTime + 1200000)) || app.curProcState < 0))) {
                app.pssProcState = app.setProcState;
                if (always) {
                    i = 2;
                } else {
                    i = 1;
                }
                app.pssStatType = i;
                app.nextPssTime = ProcessList.computeNextPssTime(app.curProcState, app.procStateMemTracker, this.mTestPssMode, isSleepingLocked(), now);
                this.mPendingPssProcesses.add(app);
            }
        }
        if (!this.mBgHandler.hasMessages(1)) {
            this.mBgHandler.sendEmptyMessage(1);
        }
    }

    public void setTestPssMode(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mTestPssMode = enabled;
                if (enabled) {
                    requestPssAllProcsLocked(SystemClock.uptimeMillis(), true, true);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcLocked(ProcessRecord app) {
        try {
            app.lastRequestedGc = SystemClock.uptimeMillis();
            if (app.thread == null) {
                return;
            }
            if (app.reportLowMemory) {
                app.reportLowMemory = false;
                app.thread.scheduleLowMemory();
                return;
            }
            app.thread.processInBackground();
        } catch (Exception e) {
        }
    }

    private final boolean canGcNowLocked() {
        boolean processingBroadcasts = false;
        for (BroadcastQueue q : this.mBroadcastQueues) {
            if (q.mParallelBroadcasts.size() != 0 || q.mOrderedBroadcasts.size() != 0) {
                processingBroadcasts = true;
            }
        }
        if (processingBroadcasts) {
            return false;
        }
        if (isSleepingLocked() || this.mStackSupervisor.allResumedActivitiesIdle()) {
            return true;
        }
        return false;
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcsLocked() {
        ProcessRecord proc;
        if (this.mProcessesToGc.size() > 0 && canGcNowLocked()) {
            while (true) {
                if (this.mProcessesToGc.size() <= 0) {
                    break;
                }
                proc = this.mProcessesToGc.remove(0);
                if (proc.curRawAdj <= 200) {
                    if (proc.reportLowMemory) {
                        break;
                    }
                } else {
                    break;
                }
            }
            if (proc.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis()) {
                performAppGcLocked(proc);
                scheduleAppGcsLocked();
                return;
            }
            addProcessToGcListLocked(proc);
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public final void performAppGcsIfAppropriateLocked() {
        if (canGcNowLocked()) {
            performAppGcsLocked();
        } else {
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public final void scheduleAppGcsLocked() {
        this.mHandler.removeMessages(5);
        if (this.mProcessesToGc.size() > 0) {
            Message msg = this.mHandler.obtainMessage(5);
            long when = this.mProcessesToGc.get(0).lastRequestedGc + this.mConstants.GC_MIN_INTERVAL;
            long now = SystemClock.uptimeMillis();
            if (when < this.mConstants.GC_TIMEOUT + now) {
                when = now + this.mConstants.GC_TIMEOUT;
            }
            this.mHandler.sendMessageAtTime(msg, when);
        }
    }

    /* access modifiers changed from: package-private */
    public final void addProcessToGcListLocked(ProcessRecord proc) {
        boolean added = false;
        int i = this.mProcessesToGc.size() - 1;
        while (true) {
            if (i < 0) {
                break;
            } else if (this.mProcessesToGc.get(i).lastRequestedGc < proc.lastRequestedGc) {
                added = true;
                this.mProcessesToGc.add(i + 1, proc);
                break;
            } else {
                i--;
            }
        }
        if (!added) {
            this.mProcessesToGc.add(0, proc);
        }
    }

    /* access modifiers changed from: package-private */
    public final void scheduleAppGcLocked(ProcessRecord app) {
        if (app.lastRequestedGc + this.mConstants.GC_MIN_INTERVAL <= SystemClock.uptimeMillis() && !this.mProcessesToGc.contains(app)) {
            addProcessToGcListLocked(app);
            scheduleAppGcsLocked();
        }
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x00f8, code lost:
        r1.kill("excessive cpu " + r10 + " during " + r12 + " dur=" + r24 + " limit=" + r23, true);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x012b, code lost:
        if (r1.baseProcessTracker == null) goto L_0x0155;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x012d, code lost:
        r1.baseProcessTracker.reportExcessiveCpu(r1.pkgList);
     */
    public final void checkExcessivePowerUsageLocked() {
        long curUptime;
        boolean doCpuKills;
        long j;
        long uptimeSince;
        ProcessRecord app;
        int cpuLimit;
        ActivityManagerService activityManagerService = this;
        updateCpuStatsNow();
        BatteryStatsImpl stats = activityManagerService.mBatteryStatsService.getActiveStatistics();
        boolean doCpuKills2 = true;
        long j2 = 0;
        if (activityManagerService.mLastPowerCheckUptime == 0) {
            doCpuKills2 = false;
        }
        boolean doCpuKills3 = doCpuKills2;
        long curUptime2 = SystemClock.uptimeMillis();
        long uptimeSince2 = curUptime2 - activityManagerService.mLastPowerCheckUptime;
        activityManagerService.mLastPowerCheckUptime = curUptime2;
        int i = activityManagerService.mLruProcesses.size();
        while (i > 0) {
            int i2 = i - 1;
            ProcessRecord app2 = activityManagerService.mLruProcesses.get(i2);
            if (app2.setProcState < 13) {
                j = j2;
                doCpuKills = doCpuKills3;
                curUptime = curUptime2;
                uptimeSince = uptimeSince2;
            } else if (app2.lastCpuTime <= j2) {
                j = j2;
                doCpuKills = doCpuKills3;
                curUptime = curUptime2;
                uptimeSince = uptimeSince2;
            } else {
                long cputimeUsed = app2.curCpuTime - app2.lastCpuTime;
                if (ActivityManagerDebugConfig.DEBUG_POWER) {
                    StringBuilder sb = new StringBuilder(128);
                    sb.append("CPU for ");
                    app2.toShortString(sb);
                    sb.append(": over ");
                    TimeUtils.formatDuration(uptimeSince2, sb);
                    sb.append(" used ");
                    TimeUtils.formatDuration(cputimeUsed, sb);
                    sb.append(" (");
                    sb.append((cputimeUsed * SINGLE_DISPATCH_THRESHOLD_MS) / uptimeSince2);
                    sb.append("%)");
                    Slog.i(TAG, sb.toString());
                }
                if (doCpuKills3) {
                    j = 0;
                    if (uptimeSince2 > 0) {
                        long checkDur = curUptime2 - app2.whenUnimportant;
                        doCpuKills = doCpuKills3;
                        curUptime = curUptime2;
                        if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL) {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_1;
                        } else if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL * 2 || app2.setProcState <= 13) {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_2;
                        } else if (checkDur <= activityManagerService.mConstants.POWER_CHECK_INTERVAL * 3) {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_3;
                        } else {
                            cpuLimit = activityManagerService.mConstants.POWER_CHECK_MAX_CPU_4;
                        }
                        int cpuLimit2 = cpuLimit;
                        if ((SINGLE_DISPATCH_THRESHOLD_MS * cputimeUsed) / uptimeSince2 >= ((long) cpuLimit2)) {
                            synchronized (stats) {
                                try {
                                    app = app2;
                                    int cpuLimit3 = cpuLimit2;
                                    uptimeSince = uptimeSince2;
                                    try {
                                        stats.reportExcessiveCpuLocked(app2.info.uid, app2.processName, uptimeSince2, cputimeUsed);
                                    } catch (Throwable th) {
                                        th = th;
                                        int i3 = cpuLimit3;
                                        long j3 = checkDur;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th2) {
                                                th = th2;
                                            }
                                        }
                                        throw th;
                                    }
                                } catch (Throwable th3) {
                                    th = th3;
                                    long j4 = checkDur;
                                    ProcessRecord processRecord = app2;
                                    int i4 = cpuLimit2;
                                    long j5 = uptimeSince2;
                                    while (true) {
                                        break;
                                    }
                                    throw th;
                                }
                            }
                        } else {
                            app = app2;
                            uptimeSince = uptimeSince2;
                        }
                        app.lastCpuTime = app.curCpuTime;
                    } else {
                        app = app2;
                        doCpuKills = doCpuKills3;
                        curUptime = curUptime2;
                    }
                } else {
                    app = app2;
                    doCpuKills = doCpuKills3;
                    curUptime = curUptime2;
                    j = 0;
                }
                uptimeSince = uptimeSince2;
                app.lastCpuTime = app.curCpuTime;
            }
            uptimeSince2 = uptimeSince;
            i = i2;
            j2 = j;
            doCpuKills3 = doCpuKills;
            curUptime2 = curUptime;
            activityManagerService = this;
        }
        long j6 = curUptime2;
        long j7 = uptimeSince2;
    }

    private final boolean applyOomAdjLocked(ProcessRecord app, boolean doingAll, long now, long nowElapsed) {
        ProcessChangeItem item;
        int processGroup;
        ProcessRecord processRecord = app;
        long j = now;
        long j2 = nowElapsed;
        boolean success = true;
        if (processRecord.curRawAdj != processRecord.setRawAdj) {
            processRecord.setRawAdj = processRecord.curRawAdj;
        }
        int changes = 0;
        if (processRecord.curAdj != processRecord.setAdj) {
            if (this.mCpusetSwitch) {
                ProcessList.setOomAdj(processRecord.pid, processRecord.uid, processRecord.curAdj, processRecord.processName);
            } else {
                ProcessList.setOomAdj(processRecord.pid, processRecord.uid, processRecord.curAdj);
            }
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ || this.mCurOomAdjUid == processRecord.info.uid) {
                reportOomAdjMessageLocked(TAG, "Set " + processRecord.pid + " " + processRecord.processName + " adj " + processRecord.curAdj + ": " + processRecord.adjType);
            }
            processRecord.setAdj = processRecord.curAdj;
            processRecord.verifiedAdj = -10000;
        }
        if (processRecord.setSchedGroup != processRecord.curSchedGroup) {
            int oldSchedGroup = processRecord.setSchedGroup;
            processRecord.setSchedGroup = processRecord.curSchedGroup;
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ || this.mCurOomAdjUid == processRecord.uid) {
                reportOomAdjMessageLocked(TAG, "Setting sched group of " + processRecord.processName + " to " + processRecord.curSchedGroup + ": " + processRecord.adjType);
            }
            if (processRecord.waitingToKill == null || !processRecord.curReceivers.isEmpty() || processRecord.setSchedGroup != 0) {
                switch (processRecord.curSchedGroup) {
                    case 0:
                        processGroup = 0;
                        break;
                    case 1:
                        processGroup = 7;
                        break;
                    case 3:
                    case 4:
                        if (processRecord.foregroundActivities != 0 && !processRecord.runningRemoteAnimation) {
                            this.mHwAMSEx.onAppGroupChanged(processRecord.pid, processRecord.info.uid, processRecord.processName, oldSchedGroup, processRecord.curSchedGroup);
                        }
                        processGroup = 5;
                        break;
                    case 7:
                        processGroup = 8;
                        break;
                    default:
                        processGroup = -1;
                        break;
                }
                int processGroup2 = processGroup;
                long oldId = Binder.clearCallingIdentity();
                try {
                    Process.setProcessGroup(processRecord.pid, processGroup2);
                    if (processRecord.curSchedGroup == 3) {
                        if (oldSchedGroup != 3) {
                            this.mVrController.onTopProcChangedLocked(processRecord);
                            if (this.mUseFifoUiScheduling) {
                                processRecord.savedPriority = Process.getThreadPriority(processRecord.pid);
                                scheduleAsFifoPriority(processRecord.pid, true);
                                if (processRecord.renderThreadTid != 0) {
                                    scheduleAsFifoPriority(processRecord.renderThreadTid, true);
                                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                        Slog.d("UI_FIFO", "Set RenderThread (TID " + processRecord.renderThreadTid + ") to FIFO");
                                    }
                                } else if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                    Slog.d("UI_FIFO", "Not setting RenderThread TID");
                                }
                            } else {
                                Process.setThreadPriority(processRecord.pid, -10);
                                if (processRecord.renderThreadTid != 0) {
                                    try {
                                        Process.setThreadPriority(processRecord.renderThreadTid, -10);
                                    } catch (IllegalArgumentException e) {
                                    }
                                }
                            }
                        }
                    } else if (oldSchedGroup == 3) {
                        if (processRecord.curSchedGroup != 3) {
                            this.mVrController.onTopProcChangedLocked(processRecord);
                            if (this.mUseFifoUiScheduling) {
                                try {
                                    Process.setThreadScheduler(processRecord.pid, 0, 0);
                                    Process.setThreadPriority(processRecord.pid, processRecord.savedPriority);
                                    if (processRecord.renderThreadTid != 0) {
                                        Process.setThreadScheduler(processRecord.renderThreadTid, 0, 0);
                                        Process.setThreadPriority(processRecord.renderThreadTid, -4);
                                    }
                                } catch (IllegalArgumentException e2) {
                                    Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e2);
                                } catch (SecurityException e3) {
                                    Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e3);
                                }
                            } else {
                                Process.setThreadPriority(processRecord.pid, 0);
                                if (processRecord.renderThreadTid != 0) {
                                    Process.setThreadPriority(processRecord.renderThreadTid, 0);
                                }
                            }
                        }
                    }
                } catch (Exception e4) {
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(oldId);
                    throw th;
                }
                Binder.restoreCallingIdentity(oldId);
                this.mDAProxy.notifyProcessGroupChange(processRecord.pid, processRecord.uid);
                if (this.mCpusetSwitch) {
                    this.mDAProxy.notifyProcessGroupChangeCpu(processRecord.pid, processRecord.uid, processRecord.curSchedGroup);
                    this.mHwAMSEx.setThreadSchedPolicy(oldSchedGroup, processRecord);
                }
            } else {
                processRecord.kill(processRecord.waitingToKill, true);
                success = false;
            }
        }
        boolean success2 = success;
        if (processRecord.repForegroundActivities != processRecord.foregroundActivities) {
            processRecord.repForegroundActivities = processRecord.foregroundActivities;
            changes = 0 | 1;
        }
        int changes2 = changes;
        if (processRecord.repProcState != processRecord.curProcState) {
            processRecord.repProcState = processRecord.curProcState;
            if (processRecord.thread != null) {
                try {
                    processRecord.thread.setProcessState(processRecord.repProcState);
                } catch (RemoteException e5) {
                }
            }
        }
        if (processRecord.setProcState == 19 || ProcessList.procStatesDifferForMem(processRecord.curProcState, processRecord.setProcState)) {
            processRecord.lastStateTime = j;
            processRecord.nextPssTime = ProcessList.computeNextPssTime(processRecord.curProcState, processRecord.procStateMemTracker, this.mTestPssMode, isSleepingLocked(), j);
            if (ActivityManagerDebugConfig.DEBUG_PSS) {
                Slog.d(TAG, "Process state change from " + ProcessList.makeProcStateString(processRecord.setProcState) + " to " + ProcessList.makeProcStateString(processRecord.curProcState) + " next pss in " + (processRecord.nextPssTime - j) + ": " + processRecord);
            }
        } else if ((j > processRecord.nextPssTime || (j > processRecord.lastPssTime + AppStandbyController.SettingsObserver.DEFAULT_STRONG_USAGE_TIMEOUT && j > processRecord.lastStateTime + ProcessList.minTimeFromStateChange(this.mTestPssMode))) && requestPssLocked(processRecord, processRecord.setProcState)) {
            processRecord.nextPssTime = ProcessList.computeNextPssTime(processRecord.curProcState, processRecord.procStateMemTracker, this.mTestPssMode, isSleepingLocked(), j);
        }
        if (processRecord.setProcState != processRecord.curProcState) {
            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ || this.mCurOomAdjUid == processRecord.uid) {
                reportOomAdjMessageLocked(TAG, "Proc state change of " + processRecord.processName + " to " + ProcessList.makeProcStateString(processRecord.curProcState) + " (" + processRecord.curProcState + "): " + processRecord.adjType);
            }
            boolean setImportant = processRecord.setProcState < 9;
            boolean curImportant = processRecord.curProcState < 9;
            if (setImportant && !curImportant) {
                processRecord.whenUnimportant = j;
                processRecord.lastCpuTime = 0;
            }
            maybeUpdateUsageStatsLocked(processRecord, j2);
            processRecord.setProcState = processRecord.curProcState;
            if (processRecord.setProcState >= 13) {
                processRecord.notCachedSinceIdle = false;
            }
            if (!doingAll) {
                setProcessTrackerStateLocked(processRecord, this.mProcessStats.getMemFactorLocked(), j);
            } else {
                processRecord.procStateChanged = true;
            }
        } else if (processRecord.reportedInteraction && j2 - processRecord.interactionEventTime > this.mConstants.USAGE_STATS_INTERACTION_INTERVAL) {
            maybeUpdateUsageStatsLocked(processRecord, j2);
        }
        if (changes2 != 0) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                Slog.i(TAG, "Changes in " + processRecord + ": " + changes2);
            }
            int i = this.mPendingProcessChanges.size() - 1;
            ProcessChangeItem item2 = null;
            while (true) {
                if (i >= 0) {
                    item2 = this.mPendingProcessChanges.get(i);
                    if (item2.pid != processRecord.pid) {
                        i--;
                    } else if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                        Slog.i(TAG, "Re-using existing item: " + item2);
                    }
                }
            }
            if (i < 0) {
                if (this.mAvailProcessChanges.size() > 0) {
                    item = this.mAvailProcessChanges.remove(NA - 1);
                    if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                        Slog.i(TAG, "Retrieving available item: " + item);
                    }
                } else {
                    item = new ProcessChangeItem();
                    if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                        Slog.i(TAG, "Allocating new item: " + item);
                    }
                }
                item.changes = 0;
                item.pid = processRecord.pid;
                item.uid = processRecord.info.uid;
                if (this.mPendingProcessChanges.size() == 0) {
                    if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                        Slog.i(TAG, "*** Enqueueing dispatch processes changed!");
                    }
                    this.mUiHandler.obtainMessage(31).sendToTarget();
                }
                this.mPendingProcessChanges.add(item);
            }
            item.changes |= changes2;
            item.foregroundActivities = processRecord.repForegroundActivities;
            if (ActivityManagerDebugConfig.DEBUG_PROCESS_OBSERVERS) {
                Slog.i(TAG, "Item " + Integer.toHexString(System.identityHashCode(item)) + " " + app.toShortString() + ": changes=" + item.changes + " foreground=" + item.foregroundActivities + " type=" + processRecord.adjType + " source=" + processRecord.adjSource + " target=" + processRecord.adjTarget);
            }
        }
        return success2;
    }

    private boolean isEphemeralLocked(int uid) {
        String[] packages = this.mContext.getPackageManager().getPackagesForUid(uid);
        if (packages == null || packages.length != 1) {
            return false;
        }
        return getPackageManagerInternalLocked().isPackageEphemeral(UserHandle.getUserId(uid), packages[0]);
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public final void enqueueUidChangeLocked(UidRecord uidRec, int uid, int change) {
        UidRecord.ChangeItem pendingChange;
        UidRecord.ChangeItem pendingChange2;
        if (uidRec == null || uidRec.pendingChange == null) {
            if (this.mPendingUidChanges.size() == 0) {
                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                    Slog.i(TAG, "*** Enqueueing dispatch uid changed!");
                }
                this.mUiHandler.obtainMessage(53).sendToTarget();
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int NA = this.mAvailUidChanges.size();
                    if (NA > 0) {
                        pendingChange2 = this.mAvailUidChanges.remove(NA - 1);
                        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                            Slog.i(TAG, "Retrieving available item: " + pendingChange2);
                        }
                    } else {
                        pendingChange2 = new UidRecord.ChangeItem();
                        if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                            Slog.i(TAG, "Allocating new item: " + pendingChange2);
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            pendingChange = pendingChange2;
            if (uidRec != null) {
                uidRec.pendingChange = pendingChange;
                if ((change & 1) != 0 && !uidRec.idle) {
                    change |= 2;
                }
            } else if (uid < 0) {
                throw new IllegalArgumentException("No UidRecord or uid");
            }
            pendingChange.uidRecord = uidRec;
            pendingChange.uid = uidRec != null ? uidRec.uid : uid;
            this.mPendingUidChanges.add(pendingChange);
        } else {
            pendingChange = uidRec.pendingChange;
            if ((change & 6) == 0) {
                change |= pendingChange.change & 6;
            }
            if ((change & 24) == 0) {
                change |= pendingChange.change & 24;
            }
            if ((change & 1) != 0) {
                change &= -13;
                if (!uidRec.idle) {
                    change |= 2;
                }
            }
        }
        pendingChange.change = change;
        pendingChange.processState = uidRec != null ? uidRec.setProcState : 19;
        pendingChange.ephemeral = uidRec != null ? uidRec.ephemeral : isEphemeralLocked(uid);
        pendingChange.procStateSeq = uidRec != null ? uidRec.curProcStateSeq : 0;
        if (uidRec != null) {
            uidRec.lastReportedChange = change;
            uidRec.updateLastDispatchedProcStateSeq(change);
        }
        if (this.mLocalPowerManager != null) {
            if ((change & 4) != 0) {
                this.mLocalPowerManager.uidActive(pendingChange.uid);
            }
            if ((change & 2) != 0) {
                this.mLocalPowerManager.uidIdle(pendingChange.uid);
            }
            if ((change & 1) != 0) {
                this.mLocalPowerManager.uidGone(pendingChange.uid);
            } else {
                this.mLocalPowerManager.updateUidProcState(pendingChange.uid, pendingChange.processState);
            }
        }
    }

    private void maybeUpdateProviderUsageStatsLocked(ProcessRecord app, String providerPkgName, String authority) {
        if (app != null && app.curProcState <= 5) {
            UserState userState = this.mUserController.getStartedUserState(app.userId);
            if (userState != null) {
                long now = SystemClock.elapsedRealtime();
                Long lastReported = userState.mProviderLastReportedFg.get(authority);
                if (lastReported == null || lastReported.longValue() < now - 60000) {
                    if (this.mSystemReady) {
                        this.mUsageStatsService.reportContentProviderUsage(authority, providerPkgName, app.userId);
                    }
                    userState.mProviderLastReportedFg.put(authority, Long.valueOf(now));
                }
            }
        }
    }

    private void maybeUpdateUsageStatsLocked(ProcessRecord app, long nowElapsed) {
        boolean isInteraction;
        if (ActivityManagerDebugConfig.DEBUG_USAGE_STATS) {
            Slog.d(TAG, "Checking proc [" + Arrays.toString(app.getPackageList()) + "] state changes: old = " + app.setProcState + ", new = " + app.curProcState);
        }
        if (this.mUsageStatsService != null) {
            if (app.curProcState <= 2) {
                isInteraction = true;
                app.fgInteractionTime = 0;
            } else {
                boolean z = true;
                if (app.curProcState > 3) {
                    if (app.curProcState > 5) {
                        z = false;
                    }
                    isInteraction = z;
                    app.fgInteractionTime = 0;
                } else if (app.fgInteractionTime == 0) {
                    app.fgInteractionTime = nowElapsed;
                    isInteraction = false;
                } else {
                    if (nowElapsed <= app.fgInteractionTime + this.mConstants.SERVICE_USAGE_INTERACTION_TIME) {
                        z = false;
                    }
                    isInteraction = z;
                }
            }
            if (isInteraction && (!app.reportedInteraction || nowElapsed - app.interactionEventTime > this.mConstants.USAGE_STATS_INTERACTION_INTERVAL)) {
                app.interactionEventTime = nowElapsed;
                String[] packages = app.getPackageList();
                if (packages != null) {
                    for (String reportEvent : packages) {
                        this.mUsageStatsService.reportEvent(reportEvent, app.userId, 6);
                    }
                }
            }
            app.reportedInteraction = isInteraction;
            if (!isInteraction) {
                app.interactionEventTime = 0;
            }
        }
    }

    private final void setProcessTrackerStateLocked(ProcessRecord proc, int memFactor, long now) {
        if (proc.thread != null && proc.baseProcessTracker != null) {
            proc.baseProcessTracker.setState(proc.repProcState, memFactor, now, proc.pkgList);
        }
    }

    private final boolean updateOomAdjLocked(ProcessRecord app, int cachedAdj, ProcessRecord TOP_APP, boolean doingAll, long now) {
        if (app.thread == null) {
            return false;
        }
        computeOomAdjLocked(app, cachedAdj, TOP_APP, doingAll, now);
        return applyOomAdjLocked(app, doingAll, now, SystemClock.elapsedRealtime());
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final void updateProcessForegroundLocked(ProcessRecord proc, boolean isForeground, boolean oomAdj) {
        if (isForeground != proc.foregroundServices) {
            proc.foregroundServices = isForeground;
            ArrayList<ProcessRecord> curProcs = (ArrayList) this.mForegroundPackages.get(proc.info.packageName, proc.info.uid);
            if (isForeground) {
                if (curProcs == null) {
                    curProcs = new ArrayList<>();
                    this.mForegroundPackages.put(proc.info.packageName, proc.info.uid, curProcs);
                }
                if (!curProcs.contains(proc)) {
                    curProcs.add(proc);
                    this.mBatteryStatsService.noteEvent(32770, proc.info.packageName, proc.info.uid);
                }
            } else if (curProcs != null && curProcs.remove(proc)) {
                this.mBatteryStatsService.noteEvent(16386, proc.info.packageName, proc.info.uid);
                if (curProcs.size() <= 0) {
                    this.mForegroundPackages.remove(proc.info.packageName, proc.info.uid);
                }
            }
            if (oomAdj) {
                updateOomAdjLocked();
            }
        }
    }

    private final ActivityRecord resumedAppLocked() {
        int uid;
        String pkg;
        ActivityRecord act = this.mStackSupervisor.getResumedActivityLocked();
        if (act != null) {
            pkg = act.packageName;
            uid = act.info.applicationInfo.uid;
        } else {
            pkg = null;
            uid = -1;
        }
        if (uid != this.mCurResumedUid || (pkg != this.mCurResumedPackage && (pkg == null || !pkg.equals(this.mCurResumedPackage)))) {
            if (this.mCurResumedPackage != null) {
                this.mBatteryStatsService.noteEvent(16387, this.mCurResumedPackage, this.mCurResumedUid);
            }
            this.mCurResumedPackage = pkg;
            this.mCurResumedUid = uid;
            if (this.mCurResumedPackage != null) {
                this.mBatteryStatsService.noteEvent(32771, this.mCurResumedPackage, this.mCurResumedUid);
            }
        }
        return act;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final boolean updateOomAdjLocked(ProcessRecord app, boolean oomAdjAll) {
        ActivityRecord TOP_ACT = resumedAppLocked();
        ProcessRecord TOP_APP = TOP_ACT != null ? TOP_ACT.app : null;
        boolean wasCached = app.cached;
        this.mAdjSeq++;
        boolean success = updateOomAdjLocked(app, app.curRawAdj >= 900 ? app.curRawAdj : 1001, TOP_APP, false, SystemClock.uptimeMillis());
        if (oomAdjAll && (wasCached != app.cached || app.curRawAdj == 1001)) {
            updateOomAdjLocked();
        }
        return success;
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final void updateOomAdjLocked() {
        int cycleCount;
        int memFactor;
        long nowElapsed;
        int uidChange;
        int uidChange2;
        int uidChange3;
        int i;
        int fgTrimLevel;
        int cachedProcessLimit;
        int emptyProcessLimit;
        int memFactor2;
        int curLevel;
        int cachedProcessLimit2;
        int nextCachedAdj;
        int cycleCount2;
        int cachedProcessLimit3;
        int emptyProcessLimit2;
        int numEmpty;
        int numCached;
        long now;
        long nowElapsed2;
        int nextEmptyAdj;
        int emptyFactor;
        int curCachedAdj;
        int i2;
        int curCachedAdj2;
        int emptyProcessLimit3;
        ActivityRecord TOP_ACT;
        int cachedProcessLimit4;
        int emptyProcessLimit4;
        int emptyFactor2;
        int nextCachedAdj2;
        boolean retryCycles;
        int nextCachedAdj3;
        ActivityManagerService activityManagerService = this;
        ActivityRecord TOP_ACT2 = resumedAppLocked();
        ProcessRecord TOP_APP = TOP_ACT2 != null ? TOP_ACT2.app : null;
        long now2 = SystemClock.uptimeMillis();
        long nowElapsed3 = SystemClock.elapsedRealtime();
        long oldTime = now2 - 1800000;
        int N = activityManagerService.mLruProcesses.size();
        for (int i3 = activityManagerService.mActiveUids.size() - 1; i3 >= 0; i3--) {
            activityManagerService.mActiveUids.valueAt(i3).reset();
        }
        activityManagerService.mStackSupervisor.rankTaskLayersIfNeeded();
        activityManagerService.mAdjSeq++;
        activityManagerService.mNewNumServiceProcs = 0;
        activityManagerService.mNewNumAServiceProcs = 0;
        int emptyProcessLimit5 = activityManagerService.mConstants.CUR_MAX_EMPTY_PROCESSES;
        int cachedProcessLimit5 = activityManagerService.mConstants.CUR_MAX_CACHED_PROCESSES - emptyProcessLimit5;
        int numEmptyProcs = (N - activityManagerService.mNumNonCachedProcs) - activityManagerService.mNumCachedHiddenProcs;
        if (numEmptyProcs > cachedProcessLimit5) {
            numEmptyProcs = cachedProcessLimit5;
        }
        int emptyFactor3 = numEmptyProcs / 3;
        if (emptyFactor3 < 1) {
            emptyFactor3 = 1;
        }
        int emptyFactor4 = emptyFactor3;
        int cachedFactor = (activityManagerService.mNumCachedHiddenProcs > 0 ? activityManagerService.mNumCachedHiddenProcs : 1) / 3;
        if (cachedFactor < 1) {
            cachedFactor = 1;
        }
        int cachedFactor2 = cachedFactor;
        int stepEmpty = 0;
        int numTrimming = 0;
        activityManagerService.mNumNonCachedProcs = 0;
        activityManagerService.mNumCachedHiddenProcs = 0;
        int nextCachedAdj4 = 900 + 1;
        int nextEmptyAdj2 = 900 + 2;
        boolean retryCycles2 = false;
        int i4 = N - 1;
        while (true) {
            int i5 = i4;
            if (i5 < 0) {
                break;
            }
            activityManagerService.mLruProcesses.get(i5).containsCycle = false;
            i4 = i5 - 1;
        }
        int emptyFactor5 = N - 1;
        int stepCached = 0;
        long nowElapsed4 = nowElapsed3;
        int curCachedAdj3 = 900;
        int nextCachedAdj5 = nextCachedAdj4;
        int curEmptyAdj = 900;
        int nextEmptyAdj3 = nextEmptyAdj2;
        while (true) {
            int i6 = emptyFactor5;
            if (i6 >= 0) {
                ProcessRecord app = activityManagerService.mLruProcesses.get(i6);
                if (app.killedByAm || app.thread == null) {
                    emptyFactor2 = emptyFactor4;
                    cachedProcessLimit4 = cachedProcessLimit5;
                    emptyProcessLimit3 = emptyProcessLimit5;
                    TOP_ACT = TOP_ACT2;
                    nextCachedAdj2 = nextCachedAdj5;
                    emptyProcessLimit4 = N;
                } else {
                    app.procStateChanged = false;
                    int emptyFactor6 = emptyFactor4;
                    cachedProcessLimit4 = cachedProcessLimit5;
                    TOP_ACT = TOP_ACT2;
                    ProcessRecord app2 = app;
                    emptyProcessLimit3 = emptyProcessLimit5;
                    emptyProcessLimit4 = N;
                    activityManagerService.computeOomAdjLocked(app, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE, TOP_APP, true, now2);
                    boolean retryCycles3 = retryCycles2 | app2.containsCycle;
                    if (app2.curAdj >= 1001) {
                        switch (app2.curProcState) {
                            case 15:
                            case 16:
                            case 17:
                                app2.curRawAdj = curCachedAdj3;
                                app2.curAdj = app2.modifyRawOomAdj(curCachedAdj3);
                                boolean z = ActivityManagerDebugConfig.DEBUG_LRU;
                                nextCachedAdj2 = nextCachedAdj5;
                                if (curCachedAdj3 == nextCachedAdj2) {
                                    emptyFactor2 = emptyFactor6;
                                    break;
                                } else {
                                    int stepCached2 = stepCached + 1;
                                    if (stepCached2 >= cachedFactor2) {
                                        int i7 = nextCachedAdj2;
                                        int nextCachedAdj6 = nextCachedAdj2 + 2;
                                        if (nextCachedAdj6 > 906) {
                                            nextCachedAdj6 = 906;
                                        }
                                        retryCycles = retryCycles3;
                                        nextCachedAdj3 = nextCachedAdj6;
                                        stepCached = 0;
                                        curCachedAdj3 = i7;
                                    } else {
                                        retryCycles = retryCycles3;
                                        nextCachedAdj3 = nextCachedAdj2;
                                        stepCached = stepCached2;
                                    }
                                    emptyFactor2 = emptyFactor6;
                                    continue;
                                }
                            default:
                                nextCachedAdj2 = nextCachedAdj5;
                                app2.curRawAdj = curEmptyAdj;
                                app2.curAdj = app2.modifyRawOomAdj(curEmptyAdj);
                                boolean z2 = ActivityManagerDebugConfig.DEBUG_LRU;
                                if (curEmptyAdj == nextEmptyAdj3) {
                                    emptyFactor2 = emptyFactor6;
                                    break;
                                } else {
                                    int stepEmpty2 = stepEmpty + 1;
                                    emptyFactor2 = emptyFactor6;
                                    if (stepEmpty2 < emptyFactor2) {
                                        retryCycles2 = retryCycles3;
                                        nextCachedAdj5 = nextCachedAdj2;
                                        stepEmpty = stepEmpty2;
                                        break;
                                    } else {
                                        int i8 = nextEmptyAdj3;
                                        nextEmptyAdj3 += 2;
                                        if (nextEmptyAdj3 > 906) {
                                            retryCycles2 = retryCycles3;
                                            nextCachedAdj5 = nextCachedAdj2;
                                            nextEmptyAdj3 = 906;
                                        } else {
                                            retryCycles2 = retryCycles3;
                                            nextCachedAdj5 = nextCachedAdj2;
                                        }
                                        stepEmpty = 0;
                                        curEmptyAdj = i8;
                                        continue;
                                    }
                                }
                        }
                    } else {
                        nextCachedAdj2 = nextCachedAdj5;
                        emptyFactor2 = emptyFactor6;
                    }
                    retryCycles2 = retryCycles3;
                }
                nextCachedAdj5 = nextCachedAdj2;
                emptyFactor4 = emptyFactor2;
                N = emptyProcessLimit4;
                cachedProcessLimit5 = cachedProcessLimit4;
                TOP_ACT2 = TOP_ACT;
                emptyProcessLimit5 = emptyProcessLimit3;
                activityManagerService = this;
                emptyFactor5 = i6 - 1;
            } else {
                int emptyFactor7 = emptyFactor4;
                int cachedProcessLimit6 = cachedProcessLimit5;
                int emptyProcessLimit6 = emptyProcessLimit5;
                ActivityRecord activityRecord = TOP_ACT2;
                int nextCachedAdj7 = nextCachedAdj5;
                int N2 = N;
                int cycleCount3 = 0;
                while (true) {
                    cycleCount = cycleCount3;
                    if (!retryCycles2 || cycleCount >= 10) {
                        int i9 = nextEmptyAdj3;
                        int i10 = curCachedAdj3;
                        long now3 = now2;
                        long nowElapsed5 = nowElapsed4;
                        int i11 = 10;
                        int emptyProcessLimit7 = N2 - 1;
                        int numCached2 = 0;
                        int numEmpty2 = 0;
                    } else {
                        cycleCount3 = cycleCount + 1;
                        int i12 = 0;
                        while (i12 < N2) {
                            ProcessRecord app3 = this.mLruProcesses.get(i12);
                            if (app3.killedByAm || app3.thread == null) {
                                curCachedAdj2 = curCachedAdj3;
                            } else {
                                curCachedAdj2 = curCachedAdj3;
                                if (app3.containsCycle) {
                                    app3.adjSeq--;
                                    app3.completedAdjSeq--;
                                }
                            }
                            i12++;
                            curCachedAdj3 = curCachedAdj2;
                        }
                        int curCachedAdj4 = curCachedAdj3;
                        int curCachedAdj5 = 1;
                        retryCycles2 = false;
                        int i13 = 0;
                        while (i13 < N2) {
                            ProcessRecord app4 = this.mLruProcesses.get(i13);
                            if (app4.killedByAm || app4.thread == null || app4.containsCycle != curCachedAdj5) {
                                emptyFactor = emptyFactor7;
                                nextEmptyAdj = nextEmptyAdj3;
                                i2 = curCachedAdj5;
                                now = now2;
                                nowElapsed2 = nowElapsed4;
                                curCachedAdj = curCachedAdj4;
                            } else {
                                emptyFactor = emptyFactor7;
                                nextEmptyAdj = nextEmptyAdj3;
                                nowElapsed2 = nowElapsed4;
                                ProcessRecord processRecord = app4;
                                i2 = curCachedAdj5;
                                curCachedAdj = curCachedAdj4;
                                now = now2;
                                if (computeOomAdjLocked(app4, NetworkAgentInfo.EVENT_NETWORK_LINGER_COMPLETE, TOP_APP, true, now2)) {
                                    retryCycles2 = true;
                                }
                            }
                            i13++;
                            curCachedAdj5 = i2;
                            curCachedAdj4 = curCachedAdj;
                            emptyFactor7 = emptyFactor;
                            nextEmptyAdj3 = nextEmptyAdj;
                            nowElapsed4 = nowElapsed2;
                            now2 = now;
                        }
                        curCachedAdj3 = curCachedAdj4;
                    }
                }
                int i92 = nextEmptyAdj3;
                int i102 = curCachedAdj3;
                long now32 = now2;
                long nowElapsed52 = nowElapsed4;
                int i112 = 10;
                int emptyProcessLimit72 = N2 - 1;
                int numCached22 = 0;
                int numEmpty22 = 0;
                while (true) {
                    int i14 = emptyProcessLimit72;
                    if (i14 >= 0) {
                        ProcessRecord app5 = this.mLruProcesses.get(i14);
                        if (app5.killedByAm || app5.thread == null) {
                            cycleCount2 = cycleCount;
                            nextCachedAdj = nextCachedAdj7;
                            numEmpty = numEmpty22;
                            numCached = numCached22;
                            cachedProcessLimit3 = cachedProcessLimit6;
                            emptyProcessLimit2 = emptyProcessLimit6;
                        } else {
                            numEmpty = numEmpty22;
                            cycleCount2 = cycleCount;
                            nextCachedAdj = nextCachedAdj7;
                            int nextCachedAdj8 = i112;
                            numCached = numCached22;
                            applyOomAdjLocked(app5, true, now32, nowElapsed52);
                            ProcessRecord app6 = app5;
                            switch (app6.curProcState) {
                                case 15:
                                case 16:
                                    emptyProcessLimit2 = emptyProcessLimit6;
                                    this.mNumCachedHiddenProcs++;
                                    int numCached3 = numCached + 1;
                                    cachedProcessLimit3 = cachedProcessLimit6;
                                    if (numCached3 > cachedProcessLimit3) {
                                        app6.kill("cached #" + numCached3, true);
                                    }
                                    numCached = numCached3;
                                    break;
                                case 18:
                                    if (numEmpty > this.mConstants.CUR_TRIM_EMPTY_PROCESSES && app6.lastActivityTime < oldTime) {
                                        app6.kill("empty for " + (((oldTime + 1800000) - app6.lastActivityTime) / 1000) + "s", true);
                                        cachedProcessLimit3 = cachedProcessLimit6;
                                        emptyProcessLimit2 = emptyProcessLimit6;
                                        break;
                                    } else {
                                        int numEmpty3 = numEmpty + 1;
                                        emptyProcessLimit2 = emptyProcessLimit6;
                                        if (numEmpty3 > emptyProcessLimit2) {
                                            int userId = app6.userId;
                                            String processName = app6.processName;
                                            app6.kill("empty #" + numEmpty3, true);
                                            this.mHwAMSEx.reportAppDiedMsg(userId, processName, -1, "emptyProcess");
                                        }
                                        numEmpty = numEmpty3;
                                        cachedProcessLimit3 = cachedProcessLimit6;
                                        break;
                                    }
                                default:
                                    cachedProcessLimit3 = cachedProcessLimit6;
                                    emptyProcessLimit2 = emptyProcessLimit6;
                                    this.mNumNonCachedProcs++;
                                    break;
                            }
                            if (!app6.isolated || app6.services.size() > 0 || app6.isolatedEntryPoint != null) {
                                UidRecord uidRec = app6.uidRecord;
                                if (uidRec != null) {
                                    uidRec.ephemeral = app6.info.isInstantApp();
                                    if (uidRec.curProcState > app6.curProcState) {
                                        uidRec.curProcState = app6.curProcState;
                                    }
                                    if (app6.foregroundServices) {
                                        uidRec.foregroundServices = true;
                                    }
                                }
                            } else {
                                app6.kill("isolated not needed", true);
                            }
                            if (app6.curProcState >= 13 && !app6.killedByAm) {
                                numTrimming++;
                            }
                        }
                        numCached22 = numCached;
                        numEmpty22 = numEmpty;
                        emptyProcessLimit6 = emptyProcessLimit2;
                        cachedProcessLimit6 = cachedProcessLimit3;
                        cycleCount = cycleCount2;
                        nextCachedAdj7 = nextCachedAdj;
                        i112 = 10;
                        emptyProcessLimit72 = i14 - 1;
                    } else {
                        int i15 = nextCachedAdj7;
                        int numEmpty4 = numEmpty22;
                        int minFactor = numCached22;
                        int cachedProcessLimit7 = cachedProcessLimit6;
                        int emptyProcessLimit8 = emptyProcessLimit6;
                        incrementProcStateSeqAndNotifyAppsLocked();
                        this.mNumServiceProcs = this.mNewNumServiceProcs;
                        int numCachedAndEmpty = minFactor + numEmpty4;
                        if (minFactor > this.mConstants.CUR_TRIM_CACHED_PROCESSES || numEmpty4 > this.mConstants.CUR_TRIM_EMPTY_PROCESSES) {
                            memFactor = 0;
                        } else if (numCachedAndEmpty <= 3) {
                            memFactor = 3;
                        } else if (numCachedAndEmpty <= 5) {
                            memFactor = 2;
                        } else {
                            memFactor = 1;
                        }
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d(TAG, "oom: memFactor=" + memFactor + " last=" + this.mLastMemoryLevel + " allowLow=" + this.mAllowLowerMemLevel + " numProcs=" + this.mLruProcesses.size() + " last=" + this.mLastNumProcesses);
                        }
                        if (memFactor > this.mLastMemoryLevel && (!this.mAllowLowerMemLevel || this.mLruProcesses.size() >= this.mLastNumProcesses)) {
                            memFactor = this.mLastMemoryLevel;
                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                Slog.d(TAG, "Keeping last mem factor!");
                            }
                        }
                        int memFactor3 = memFactor;
                        if (memFactor3 != this.mLastMemoryLevel) {
                            EventLogTags.writeAmMemFactor(memFactor3, this.mLastMemoryLevel);
                        }
                        this.mLastMemoryLevel = memFactor3;
                        this.mLastNumProcesses = this.mLruProcesses.size();
                        int i16 = numEmpty4;
                        long now4 = now32;
                        boolean allChanged = this.mProcessStats.setMemFactorLocked(memFactor3, !isSleepingLocked(), now4);
                        int trackerMemFactor = this.mProcessStats.getMemFactorLocked();
                        boolean allChanged2 = allChanged;
                        if (memFactor3 != 0) {
                            if (this.mLowRamStartTime == 0) {
                                this.mLowRamStartTime = now4;
                            }
                            switch (memFactor3) {
                                case 2:
                                    fgTrimLevel = 10;
                                    break;
                                case 3:
                                    fgTrimLevel = 15;
                                    break;
                                default:
                                    fgTrimLevel = 5;
                                    break;
                            }
                            int factor = numTrimming / 3;
                            int minFactor2 = 2;
                            int step = 0;
                            if (this.mHomeProcess != null) {
                                minFactor2 = 2 + 1;
                            }
                            if (this.mPreviousProcess != null) {
                                minFactor2++;
                            }
                            int numCached4 = minFactor;
                            int minFactor3 = minFactor2;
                            if (factor < minFactor3) {
                                factor = minFactor3;
                            }
                            int i17 = this.mLruProcesses.size() - 1;
                            int i18 = minFactor3;
                            int curLevel2 = 80;
                            while (true) {
                                ProcessRecord TOP_APP2 = TOP_APP;
                                int i19 = i17;
                                if (i19 >= 0) {
                                    try {
                                        memFactor2 = memFactor3;
                                        ProcessRecord app7 = this.mLruProcesses.get(i19);
                                        if (app7 == null) {
                                            curLevel = curLevel2;
                                            emptyProcessLimit = emptyProcessLimit8;
                                            cachedProcessLimit2 = cachedProcessLimit7;
                                        } else {
                                            if (allChanged2 || app7.procStateChanged) {
                                                setProcessTrackerStateLocked(app7, trackerMemFactor, now4);
                                                emptyProcessLimit = emptyProcessLimit8;
                                                app7.procStateChanged = false;
                                            } else {
                                                emptyProcessLimit = emptyProcessLimit8;
                                            }
                                            if (app7.curProcState < 13 || app7.killedByAm) {
                                                cachedProcessLimit2 = cachedProcessLimit7;
                                                if (app7.curProcState != 12 || app7.killedByAm) {
                                                    if (app7.curProcState < 6 && !app7.systemNoUi) {
                                                        curLevel = curLevel2;
                                                    } else if (app7.pendingUiClean) {
                                                        if (app7.trimMemoryLevel >= 20 || app7.thread == null) {
                                                            curLevel = curLevel2;
                                                        } else {
                                                            try {
                                                                if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                    StringBuilder sb = new StringBuilder();
                                                                    curLevel = curLevel2;
                                                                    try {
                                                                        sb.append("Trimming memory of bg-ui ");
                                                                        sb.append(app7.processName);
                                                                        sb.append(" to ");
                                                                        sb.append(20);
                                                                        Slog.v(TAG, sb.toString());
                                                                    } catch (RemoteException e) {
                                                                    }
                                                                } else {
                                                                    curLevel = curLevel2;
                                                                }
                                                                app7.thread.scheduleTrimMemory(20);
                                                            } catch (RemoteException e2) {
                                                                curLevel = curLevel2;
                                                            }
                                                        }
                                                        app7.pendingUiClean = false;
                                                    } else {
                                                        curLevel = curLevel2;
                                                    }
                                                    if (app7.trimMemoryLevel < fgTrimLevel && app7.thread != null) {
                                                        try {
                                                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                Slog.v(TAG, "Trimming memory of fg " + app7.processName + " to " + fgTrimLevel);
                                                            }
                                                            app7.thread.scheduleTrimMemory(fgTrimLevel);
                                                        } catch (RemoteException e3) {
                                                        }
                                                    }
                                                    app7.trimMemoryLevel = fgTrimLevel;
                                                } else {
                                                    if (app7.trimMemoryLevel < 40 && app7.thread != null) {
                                                        try {
                                                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                Slog.v(TAG, "Trimming memory of heavy-weight " + app7.processName + " to " + 40);
                                                            }
                                                            app7.thread.scheduleTrimMemory(40);
                                                        } catch (RemoteException e4) {
                                                        }
                                                    }
                                                    app7.trimMemoryLevel = 40;
                                                    curLevel = curLevel2;
                                                }
                                            } else {
                                                if (app7.trimMemoryLevel >= curLevel2 || app7.thread == null) {
                                                    cachedProcessLimit = cachedProcessLimit7;
                                                } else {
                                                    try {
                                                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                            StringBuilder sb2 = new StringBuilder();
                                                            cachedProcessLimit = cachedProcessLimit7;
                                                            try {
                                                                sb2.append("Trimming memory of ");
                                                                sb2.append(app7.processName);
                                                                sb2.append(" to ");
                                                                sb2.append(curLevel2);
                                                                Slog.v(TAG, sb2.toString());
                                                            } catch (RemoteException e5) {
                                                            }
                                                        } else {
                                                            cachedProcessLimit = cachedProcessLimit7;
                                                        }
                                                        SmartShrinker.reclaim(app7.pid, 4);
                                                        app7.thread.scheduleTrimMemory(curLevel2);
                                                    } catch (RemoteException e6) {
                                                        cachedProcessLimit = cachedProcessLimit7;
                                                    }
                                                }
                                                app7.trimMemoryLevel = curLevel2;
                                                int step2 = step + 1;
                                                if (step2 >= factor) {
                                                    step2 = 0;
                                                    if (curLevel2 == 60) {
                                                        curLevel2 = 40;
                                                    } else if (curLevel2 == 80) {
                                                        curLevel2 = 60;
                                                    }
                                                }
                                                step = step2;
                                                i17 = i19 - 1;
                                                TOP_APP = TOP_APP2;
                                                memFactor3 = memFactor2;
                                                emptyProcessLimit8 = emptyProcessLimit;
                                                cachedProcessLimit7 = cachedProcessLimit;
                                            }
                                        }
                                    } catch (IndexOutOfBoundsException e7) {
                                        curLevel = curLevel2;
                                        memFactor2 = memFactor3;
                                        emptyProcessLimit = emptyProcessLimit8;
                                        cachedProcessLimit2 = cachedProcessLimit7;
                                        Log.w(TAG, "ProcessRecord index out of bounds!", e7);
                                    }
                                    curLevel2 = curLevel;
                                    i17 = i19 - 1;
                                    TOP_APP = TOP_APP2;
                                    memFactor3 = memFactor2;
                                    emptyProcessLimit8 = emptyProcessLimit;
                                    cachedProcessLimit7 = cachedProcessLimit;
                                } else {
                                    int i20 = emptyProcessLimit8;
                                    int i21 = cachedProcessLimit7;
                                }
                            }
                        } else {
                            int numCached5 = minFactor;
                            ProcessRecord processRecord2 = TOP_APP;
                            int i22 = memFactor3;
                            int i23 = emptyProcessLimit8;
                            int i24 = cachedProcessLimit7;
                            if (this.mLowRamStartTime != 0) {
                                this.mLowRamTimeSinceLastIdle += now4 - this.mLowRamStartTime;
                                this.mLowRamStartTime = 0;
                            }
                            int i25 = this.mLruProcesses.size() - 1;
                            while (true) {
                                int i26 = i25;
                                if (i26 >= 0) {
                                    try {
                                        ProcessRecord app8 = this.mLruProcesses.get(i26);
                                        if (app8 != null) {
                                            if (allChanged2 || app8.procStateChanged) {
                                                setProcessTrackerStateLocked(app8, trackerMemFactor, now4);
                                                app8.procStateChanged = false;
                                            }
                                            if ((app8.curProcState >= 6 || app8.systemNoUi) && app8.pendingUiClean) {
                                                if (app8.trimMemoryLevel < 20) {
                                                    if (app8.thread != null) {
                                                        try {
                                                            if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                                                                StringBuilder sb3 = new StringBuilder();
                                                                sb3.append("Trimming memory of ui hidden ");
                                                                sb3.append(app8.processName);
                                                                sb3.append(" to ");
                                                                try {
                                                                    sb3.append(20);
                                                                    Slog.v(TAG, sb3.toString());
                                                                } catch (RemoteException e8) {
                                                                }
                                                            }
                                                            app8.thread.scheduleTrimMemory(20);
                                                        } catch (RemoteException e9) {
                                                        }
                                                    }
                                                }
                                                i = 0;
                                                app8.pendingUiClean = false;
                                            } else {
                                                i = 0;
                                            }
                                            app8.trimMemoryLevel = i;
                                        }
                                    } catch (IndexOutOfBoundsException e10) {
                                        Log.w(TAG, "ProcessRecord index out of bounds!", e10);
                                    }
                                    i25 = i26 - 1;
                                }
                            }
                        }
                        if (this.mAlwaysFinishActivities != 0) {
                            this.mStackSupervisor.scheduleDestroyAllActivities(null, "always-finish");
                        }
                        if (allChanged2) {
                            requestPssAllProcsLocked(now4, false, this.mProcessStats.isMemFactorLowered());
                        }
                        ArrayList<UidRecord> becameIdle = null;
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        int i27 = this.mActiveUids.size() - 1;
                        while (i27 >= 0) {
                            UidRecord uidRec2 = this.mActiveUids.valueAt(i27);
                            if (uidRec2.curProcState == 19) {
                                nowElapsed = nowElapsed52;
                            } else if (uidRec2.setProcState == uidRec2.curProcState && uidRec2.setWhitelist == uidRec2.curWhitelist) {
                                nowElapsed = nowElapsed52;
                            } else {
                                if (ActivityManagerDebugConfig.DEBUG_UID_OBSERVERS) {
                                    Slog.i(TAG, "Changes in " + uidRec2 + ": proc state from " + uidRec2.setProcState + " to " + uidRec2.curProcState + ", whitelist from " + uidRec2.setWhitelist + " to " + uidRec2.curWhitelist);
                                }
                                if (!ActivityManager.isProcStateBackground(uidRec2.curProcState) || uidRec2.curWhitelist) {
                                    nowElapsed = nowElapsed52;
                                    if (uidRec2.idle != 0) {
                                        uidChange2 = 4;
                                        EventLogTags.writeAmUidActive(uidRec2.uid);
                                        uidRec2.idle = false;
                                    } else {
                                        uidChange2 = 0;
                                    }
                                    uidRec2.lastBackgroundTime = 0;
                                } else {
                                    if (!ActivityManager.isProcStateBackground(uidRec2.setProcState) || uidRec2.setWhitelist) {
                                        long nowElapsed6 = nowElapsed52;
                                        uidRec2.lastBackgroundTime = nowElapsed6;
                                        if (!this.mHandler.hasMessages(58)) {
                                            uidChange3 = 0;
                                            nowElapsed = nowElapsed6;
                                            this.mHandler.sendEmptyMessageDelayed(58, this.mConstants.BACKGROUND_SETTLE_TIME);
                                        } else {
                                            uidChange3 = 0;
                                            nowElapsed = nowElapsed6;
                                        }
                                    } else {
                                        uidChange3 = 0;
                                        nowElapsed = nowElapsed52;
                                    }
                                    if (uidRec2.idle == 0 || uidRec2.setIdle) {
                                        uidChange = uidChange3;
                                    } else {
                                        uidChange = 2;
                                        if (becameIdle == null) {
                                            becameIdle = new ArrayList<>();
                                        }
                                        becameIdle.add(uidRec2);
                                    }
                                }
                                boolean wasCached = uidRec2.setProcState > 10;
                                boolean isCached = uidRec2.curProcState > 10;
                                if (wasCached != isCached || uidRec2.setProcState == 19) {
                                    uidChange |= isCached ? 8 : 16;
                                }
                                uidRec2.setProcState = uidRec2.curProcState;
                                uidRec2.setWhitelist = uidRec2.curWhitelist;
                                uidRec2.setIdle = uidRec2.idle;
                                enqueueUidChangeLocked(uidRec2, -1, uidChange);
                                noteUidProcessState(uidRec2.uid, uidRec2.curProcState);
                                if (uidRec2.foregroundServices) {
                                    this.mServices.foregroundServiceProcStateChangedLocked(uidRec2);
                                }
                            }
                            i27--;
                            nowElapsed52 = nowElapsed;
                        }
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.finishUidChanges();
                        }
                        if (becameIdle != null) {
                            for (int i28 = becameIdle.size() - 1; i28 >= 0; i28--) {
                                this.mServices.stopInBackgroundLocked(becameIdle.get(i28).uid);
                            }
                        }
                        if (this.mProcessStats.shouldWriteNowLocked(now4)) {
                            this.mHandler.post(new Runnable() {
                                public void run() {
                                    synchronized (ActivityManagerService.this) {
                                        try {
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            ActivityManagerService.this.mProcessStats.writeStateAsyncLocked();
                                        } catch (Throwable th) {
                                            while (true) {
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                throw th;
                                            }
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                }
                            });
                        }
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d(TAG, "Did OOM ADJ in " + (SystemClock.uptimeMillis() - now4) + "ms");
                            return;
                        }
                        return;
                    }
                }
            }
        }
    }

    public void makePackageIdle(String packageName, int userId) {
        int appId;
        String str = packageName;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") == 0) {
            int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "makePackageIdle", null);
            long callingId = Binder.clearCallingIdentity();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int i = -1;
                    int pkgUid = -1;
                    try {
                        pkgUid = AppGlobals.getPackageManager().getPackageUid(str, 268443648, 0);
                    } catch (RemoteException e) {
                    }
                    if (pkgUid != -1) {
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        int appId2 = UserHandle.getAppId(pkgUid);
                        int i2 = this.mActiveUids.size() - 1;
                        while (i2 >= 0) {
                            UidRecord uidRec = this.mActiveUids.valueAt(i2);
                            if (uidRec.lastBackgroundTime <= 0 || uidRec.idle || UserHandle.getAppId(uidRec.uid) != appId2) {
                                appId = appId2;
                            } else {
                                if (userId2 != i) {
                                    if (userId2 != UserHandle.getUserId(uidRec.uid)) {
                                        appId = appId2;
                                    }
                                }
                                EventLogTags.writeAmUidIdle(uidRec.uid);
                                uidRec.idle = true;
                                uidRec.setIdle = true;
                                StringBuilder sb = new StringBuilder();
                                appId = appId2;
                                sb.append("Idling uid ");
                                sb.append(UserHandle.formatUid(uidRec.uid));
                                sb.append(" from package ");
                                sb.append(str);
                                sb.append(" user ");
                                sb.append(userId2);
                                Slog.w(TAG, sb.toString());
                                doStopUidLocked(uidRec.uid, uidRec);
                            }
                            i2--;
                            appId2 = appId;
                            i = -1;
                        }
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.finishUidChanges();
                        }
                        Binder.restoreCallingIdentity(callingId);
                    } else {
                        throw new IllegalArgumentException("Unknown package name " + str);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        String msg = "Permission Denial: makePackageIdle() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.FORCE_STOP_PACKAGES";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x007e, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0081, code lost:
        return;
     */
    public final void idleUids() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int N = this.mActiveUids.size();
                if (N <= 0) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                long nowElapsed = SystemClock.elapsedRealtime();
                long maxBgTime = nowElapsed - this.mConstants.BACKGROUND_SETTLE_TIME;
                long nextTime = 0;
                if (this.mLocalPowerManager != null) {
                    this.mLocalPowerManager.startUidChanges();
                }
                for (int i = N - 1; i >= 0; i--) {
                    UidRecord uidRec = this.mActiveUids.valueAt(i);
                    long bgTime = uidRec.lastBackgroundTime;
                    if (bgTime > 0 && !uidRec.idle) {
                        if (bgTime <= maxBgTime) {
                            EventLogTags.writeAmUidIdle(uidRec.uid);
                            uidRec.idle = true;
                            uidRec.setIdle = true;
                            doStopUidLocked(uidRec.uid, uidRec);
                        } else if (nextTime == 0 || nextTime > bgTime) {
                            nextTime = bgTime;
                        }
                    }
                }
                if (this.mLocalPowerManager != null) {
                    this.mLocalPowerManager.finishUidChanges();
                }
                if (nextTime > 0) {
                    this.mHandler.removeMessages(58);
                    this.mHandler.sendEmptyMessageDelayed(58, (this.mConstants.BACKGROUND_SETTLE_TIME + nextTime) - nowElapsed);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    @VisibleForTesting
    public void incrementProcStateSeqAndNotifyAppsLocked() {
        if (this.mWaitForNetworkTimeoutMs > 0) {
            ArrayList<Integer> blockingUids = null;
            for (int i = this.mActiveUids.size() - 1; i >= 0; i--) {
                UidRecord uidRec = this.mActiveUids.valueAt(i);
                if (this.mInjector.isNetworkRestrictedForUid(uidRec.uid) && UserHandle.isApp(uidRec.uid) && uidRec.hasInternetPermission && uidRec.setProcState != uidRec.curProcState) {
                    int blockState = getBlockStateForUid(uidRec);
                    if (blockState == 0) {
                        continue;
                    } else {
                        synchronized (uidRec.networkStateLock) {
                            long j = this.mProcStateSeqCounter + 1;
                            this.mProcStateSeqCounter = j;
                            uidRec.curProcStateSeq = j;
                            if (blockState == 1) {
                                if (blockingUids == null) {
                                    blockingUids = new ArrayList<>();
                                }
                                blockingUids.add(Integer.valueOf(uidRec.uid));
                            } else {
                                if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                    Slog.d(TAG_NETWORK, "uid going to background, notifying all blocking threads for uid: " + uidRec);
                                }
                                if (uidRec.waitingForNetwork) {
                                    uidRec.networkStateLock.notifyAll();
                                }
                            }
                        }
                    }
                }
            }
            if (blockingUids != null) {
                for (int i2 = this.mLruProcesses.size() - 1; i2 >= 0; i2--) {
                    ProcessRecord app = this.mLruProcesses.get(i2);
                    if (blockingUids.contains(Integer.valueOf(app.uid)) && !app.killedByAm && app.thread != null) {
                        UidRecord uidRec2 = this.mActiveUids.get(app.uid);
                        try {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(TAG_NETWORK, "Informing app thread that it needs to block: " + uidRec2);
                            }
                            app.thread.setNetworkBlockSeq(uidRec2.curProcStateSeq);
                        } catch (RemoteException e) {
                        }
                    }
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    @VisibleForTesting
    public int getBlockStateForUid(UidRecord uidRec) {
        boolean isAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.curProcState) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.curProcState);
        boolean wasAllowed = NetworkPolicyManager.isProcStateAllowedWhileIdleOrPowerSaveMode(uidRec.setProcState) || NetworkPolicyManager.isProcStateAllowedWhileOnRestrictBackground(uidRec.setProcState);
        if (!wasAllowed && isAllowed) {
            return 1;
        }
        if (!wasAllowed || isAllowed) {
            return 0;
        }
        return 2;
    }

    /* access modifiers changed from: package-private */
    public final void runInBackgroundDisabled(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mActiveUids.get(uid);
                if (uidRec == null) {
                    doStopUidLocked(uid, null);
                } else if (uidRec.idle) {
                    doStopUidLocked(uidRec.uid, uidRec);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void doStopUidForIdleUidsLocked() {
        int size = this.mActiveUids.size();
        for (int i = 0; i < size; i++) {
            if (!UserHandle.isCore(this.mActiveUids.keyAt(i))) {
                UidRecord uidRec = this.mActiveUids.valueAt(i);
                if (uidRec.idle) {
                    doStopUidLocked(uidRec.uid, uidRec);
                }
            }
        }
    }

    /* access modifiers changed from: package-private */
    public final void doStopUidLocked(int uid, UidRecord uidRec) {
        this.mServices.stopInBackgroundLocked(uid);
        enqueueUidChangeLocked(uidRec, uid, 2);
    }

    /* access modifiers changed from: package-private */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0091, code lost:
        tempWhitelistUidLocked(r8, r9, r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0094, code lost:
        return;
     */
    @GuardedBy("this")
    public void tempWhitelistForPendingIntentLocked(int callerPid, int callerUid, int targetUid, long duration, String tag) {
        if (ActivityManagerDebugConfig.DEBUG_WHITELISTS) {
            Slog.d(TAG, "tempWhitelistForPendingIntentLocked(" + callerPid + ", " + callerUid + ", " + targetUid + ", " + duration + ")");
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord pr = this.mPidsSelfLocked.get(callerPid);
            if (pr == null) {
                Slog.w(TAG, "tempWhitelistForPendingIntentLocked() no ProcessRecord for pid " + callerPid);
            } else if (!pr.whitelistManager && checkPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", callerPid, callerUid) != 0) {
                Slog.d(TAG, "tempWhitelistForPendingIntentLocked() for target " + targetUid + ": pid " + callerPid + " is not allowed");
            }
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public void tempWhitelistUidLocked(int targetUid, long duration, String tag) {
        this.mPendingTempWhitelist.put(targetUid, new PendingTempWhitelist(targetUid, duration, tag));
        setUidTempWhitelistStateLocked(targetUid, true);
        this.mUiHandler.obtainMessage(68).sendToTarget();
    }

    /* access modifiers changed from: package-private */
    public void pushTempWhitelist() {
        int N;
        PendingTempWhitelist[] list;
        int i;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                N = this.mPendingTempWhitelist.size();
                list = new PendingTempWhitelist[N];
                for (int i2 = 0; i2 < N; i2++) {
                    list[i2] = this.mPendingTempWhitelist.valueAt(i2);
                }
            } finally {
                while (true) {
                    resetPriorityAfterLockedSection();
                }
            }
        }
        resetPriorityAfterLockedSection();
        for (int i3 = 0; i3 < N; i3++) {
            PendingTempWhitelist ptw = list[i3];
            this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(ptw.targetUid, ptw.duration, true, ptw.tag);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (i = 0; i < N; i++) {
                    PendingTempWhitelist ptw2 = list[i];
                    int index = this.mPendingTempWhitelist.indexOfKey(ptw2.targetUid);
                    if (index >= 0 && this.mPendingTempWhitelist.valueAt(index) == ptw2) {
                        this.mPendingTempWhitelist.removeAt(index);
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final void setAppIdTempWhitelistStateLocked(int appId, boolean onWhitelist) {
        boolean changed = false;
        for (int i = this.mActiveUids.size() - 1; i >= 0; i--) {
            UidRecord uidRec = this.mActiveUids.valueAt(i);
            if (UserHandle.getAppId(uidRec.uid) == appId && uidRec.curWhitelist != onWhitelist) {
                uidRec.curWhitelist = onWhitelist;
                changed = true;
            }
        }
        if (changed) {
            updateOomAdjLocked();
        }
    }

    /* access modifiers changed from: package-private */
    @GuardedBy("this")
    public final void setUidTempWhitelistStateLocked(int uid, boolean onWhitelist) {
        UidRecord uidRec = this.mActiveUids.get(uid);
        if (uidRec != null && uidRec.curWhitelist != onWhitelist) {
            uidRec.curWhitelist = onWhitelist;
            updateOomAdjLocked();
        }
    }

    /* access modifiers changed from: package-private */
    public final void trimApplications() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                trimApplicationsLocked();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public final void trimApplicationsLocked() {
        for (int i = this.mRemovedProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = this.mRemovedProcesses.get(i);
            if (app.activities.size() == 0 && app.recentTasks.size() == 0 && app.curReceivers.isEmpty() && app.services.size() == 0) {
                StringBuilder sb = new StringBuilder();
                sb.append("Exiting empty application process ");
                sb.append(app.toShortString());
                sb.append(" (");
                sb.append(app.thread != null ? app.thread.asBinder() : null);
                sb.append(")\n");
                Slog.i(TAG, sb.toString());
                if (app.pid > 0 && app.pid != MY_PID) {
                    app.kill("empty", false);
                } else if (app.thread != null) {
                    try {
                        app.thread.scheduleExit();
                    } catch (Exception e) {
                    }
                }
                cleanUpApplicationRecordLocked(app, false, true, -1, false);
                this.mRemovedProcesses.remove(i);
                if (app.persistent) {
                    addAppLocked(app.info, null, false, null);
                }
            }
        }
        updateOomAdjLocked();
    }

    /* access modifiers changed from: package-private */
    public final void trimServicesAfterBoot() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                    ProcessRecord app = this.mLruProcesses.get(i);
                    if (app.serviceb || app.curAdj == 500) {
                        SmartShrinker.reclaim(app.pid, 4);
                    }
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void signalPersistentProcesses(int sig) throws RemoteException {
        if (sig == 10) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") == 0) {
                        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
                            ProcessRecord r = this.mLruProcesses.get(i);
                            if (r.thread != null && r.persistent) {
                                Process.sendSignal(r.pid, sig);
                            }
                        }
                    } else {
                        throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
                    }
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            return;
        }
        throw new SecurityException("Only SIGNAL_USR1 is allowed");
    }

    private void stopProfilerLocked(ProcessRecord proc, int profileType) {
        if (proc == null || proc == this.mProfileProc) {
            proc = this.mProfileProc;
            profileType = this.mProfileType;
            clearProfilerLocked();
        }
        if (proc != null) {
            try {
                proc.thread.profilerControl(false, null, profileType);
            } catch (RemoteException e) {
                throw new IllegalStateException("Process disappeared");
            }
        }
    }

    private void clearProfilerLocked() {
        if (!(this.mProfilerInfo == null || this.mProfilerInfo.profileFd == null)) {
            try {
                this.mProfilerInfo.profileFd.close();
            } catch (IOException e) {
            }
        }
        this.mProfileApp = null;
        this.mProfileProc = null;
        this.mProfilerInfo = null;
    }

    public boolean profileControl(String process, int userId, boolean start, ProfilerInfo profilerInfo, int profileType) throws RemoteException {
        ParcelFileDescriptor fd;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    if (start) {
                        if (profilerInfo == null || profilerInfo.profileFd == null) {
                            throw new IllegalArgumentException("null profile info or fd");
                        }
                    }
                    ProcessRecord proc = null;
                    if (process != null) {
                        proc = findProcessLocked(process, userId, "profileControl");
                    }
                    if (start) {
                        if (proc == null || proc.thread == null) {
                            throw new IllegalArgumentException("Unknown process: " + process);
                        }
                    }
                    if (start) {
                        stopProfilerLocked(null, 0);
                        setProfileApp(proc.info, proc.processName, profilerInfo);
                        this.mProfileProc = proc;
                        this.mProfileType = profileType;
                        try {
                            fd = profilerInfo.profileFd.dup();
                        } catch (IOException e) {
                            fd = null;
                        }
                        profilerInfo.profileFd = fd;
                        proc.thread.profilerControl(start, profilerInfo, profileType);
                        try {
                            this.mProfilerInfo.profileFd.close();
                        } catch (IOException e2) {
                        }
                        this.mProfilerInfo.profileFd = null;
                        if (proc.pid == MY_PID) {
                            profilerInfo = null;
                        }
                    } else {
                        stopProfilerLocked(proc, profileType);
                        if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                            try {
                                profilerInfo.profileFd.close();
                            } catch (IOException e3) {
                            }
                        }
                    }
                } else {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
            }
            resetPriorityAfterLockedSection();
            if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                try {
                    profilerInfo.profileFd.close();
                } catch (IOException e4) {
                }
            }
            return true;
        } catch (RemoteException e5) {
            try {
                throw new IllegalStateException("Process disappeared");
            } catch (Throwable th) {
                if (!(profilerInfo == null || profilerInfo.profileFd == null)) {
                    try {
                        profilerInfo.profileFd.close();
                    } catch (IOException e6) {
                    }
                }
                throw th;
            }
        } catch (Throwable th2) {
            resetPriorityAfterLockedSection();
            throw th2;
        }
    }

    private ProcessRecord findProcessLocked(String process, int userId, String callName) {
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, callName, null);
        ProcessRecord proc = null;
        try {
            int pid = Integer.parseInt(process);
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(pid);
            }
        } catch (NumberFormatException e) {
        }
        if (proc != null) {
            return proc;
        }
        SparseArray<ProcessRecord> procs = this.mProcessNames.getMap().get(process);
        if (procs == null || procs.size() <= 0) {
            return proc;
        }
        ProcessRecord proc2 = procs.valueAt(0);
        if (userId2 == -1 || proc2.userId == userId2) {
            return proc2;
        }
        for (int i = 1; i < procs.size(); i++) {
            ProcessRecord thisProc = procs.valueAt(i);
            if (thisProc.userId == userId2) {
                return thisProc;
            }
        }
        return proc2;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:32:0x006d, code lost:
        resetPriorityAfterLockedSection();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0070, code lost:
        if (r3 == null) goto L_0x0077;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:?, code lost:
        r3.close();
     */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x003c A[Catch:{ all -> 0x00a7 }] */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x00cf A[SYNTHETIC, Splitter:B:68:0x00cf] */
    public boolean dumpHeap(String process, int userId, boolean managed, boolean mallocInfo, boolean runGc, String path, ParcelFileDescriptor fd) throws RemoteException {
        ParcelFileDescriptor fd2;
        boolean isDebuggable;
        String str = process;
        try {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                        int i = userId;
                        throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                    } else if (fd != null) {
                        try {
                            ProcessRecord proc = findProcessLocked(str, userId, "dumpHeap");
                            if (proc == null || proc.thread == null) {
                                throw new IllegalArgumentException("Unknown process: " + str);
                            }
                            if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                                if (!IS_DEBUG_VERSION) {
                                    isDebuggable = false;
                                    if (!isDebuggable) {
                                        if ((proc.info.flags & 2) == 0) {
                                            throw new SecurityException("Process not debuggable: " + proc);
                                        }
                                    }
                                    proc.thread.dumpHeap(managed, mallocInfo, runGc, path, fd);
                                    ParcelFileDescriptor fd3 = null;
                                }
                            }
                            isDebuggable = true;
                            if (!isDebuggable) {
                            }
                            proc.thread.dumpHeap(managed, mallocInfo, runGc, path, fd);
                            ParcelFileDescriptor fd32 = null;
                            try {
                            } catch (Throwable th) {
                                th = th;
                                fd2 = fd32;
                                while (true) {
                                    try {
                                        break;
                                    } catch (Throwable th2) {
                                        th = th2;
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            fd2 = fd;
                            while (true) {
                                break;
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } else {
                        int i2 = userId;
                        throw new IllegalArgumentException("null fd");
                    }
                } catch (Throwable th4) {
                    th = th4;
                    int i3 = userId;
                    fd2 = fd;
                    while (true) {
                        break;
                    }
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            return true;
        } catch (RemoteException e) {
            int i4 = userId;
            fd2 = fd;
            try {
                throw new IllegalStateException("Process disappeared");
            } catch (Throwable th5) {
                e = th5;
                RemoteException remoteException = e;
                if (fd2 != null) {
                }
                throw remoteException;
            }
        } catch (Throwable th6) {
            e = th6;
            int i5 = userId;
            fd2 = fd;
            RemoteException remoteException2 = e;
            if (fd2 != null) {
                try {
                    fd2.close();
                } catch (IOException e2) {
                }
            }
            throw remoteException2;
        }
    }

    public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize, String reportPackage) {
        if (processName != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
        } else {
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                if (proc != null) {
                    if (!Build.IS_DEBUGGABLE) {
                        if ((proc.info.flags & 2) == 0) {
                            throw new SecurityException("Not running a debuggable build");
                        }
                    }
                    processName = proc.processName;
                    uid = proc.uid;
                    if (reportPackage != null) {
                        if (!proc.pkgList.containsKey(reportPackage)) {
                            throw new SecurityException("Package " + reportPackage + " is not running in " + proc);
                        }
                    }
                } else {
                    throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
                }
            }
        }
        String processName2 = processName;
        int uid2 = uid;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (maxMemSize > 0) {
                    this.mMemWatchProcesses.put(processName2, uid2, new Pair(Long.valueOf(maxMemSize), reportPackage));
                } else if (uid2 != 0) {
                    this.mMemWatchProcesses.remove(processName2, uid2);
                } else {
                    this.mMemWatchProcesses.getMap().remove(processName2);
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void dumpHeapFinished(String path) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (Binder.getCallingPid() != this.mMemWatchDumpPid) {
                    Slog.w(TAG, "dumpHeapFinished: Calling pid " + Binder.getCallingPid() + " does not match last pid " + this.mMemWatchDumpPid);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (this.mMemWatchDumpFile != null) {
                    if (this.mMemWatchDumpFile.equals(path)) {
                        if (ActivityManagerDebugConfig.DEBUG_PSS) {
                            Slog.d(TAG, "Dump heap finished for " + path);
                        }
                        this.mHandler.sendEmptyMessage(50);
                        Runtime.getRuntime().gc();
                        resetPriorityAfterLockedSection();
                        return;
                    }
                }
                Slog.w(TAG, "dumpHeapFinished: Calling path " + path + " does not match last path " + this.mMemWatchDumpFile);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void monitor() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void onCoreSettingsChange(Bundle settings) {
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord processRecord = this.mLruProcesses.get(i);
            try {
                if (processRecord.thread != null) {
                    processRecord.thread.setCoreSettings(settings);
                }
            } catch (RemoteException e) {
            }
        }
    }

    public boolean startUserInBackground(int userId) {
        return startUserInBackgroundWithListener(userId, null);
    }

    public boolean startUserInBackgroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.startUser(userId, false, unlockListener);
    }

    public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener) {
        return this.mUserController.unlockUser(userId, token, secret, listener);
    }

    public boolean switchUser(int targetUserId) {
        Boolean ret = this.mHwAMSEx.switchUser(targetUserId);
        if (ret != null) {
            return ret.booleanValue();
        }
        UniPerf.getInstance().uniPerfEvent(4099, BackupManagerConstants.DEFAULT_BACKUP_FINISHED_NOTIFICATION_RECEIVERS, new int[0]);
        Slog.i(TAG, "switchUser " + targetUserId + ", callingUid = " + Binder.getCallingUid() + ", callingPid = " + Binder.getCallingPid());
        HwFreeFormManager.getInstance(this.mContext).removeFloatListView();
        return this.mUserController.switchUser(targetUserId);
    }

    public int stopUser(int userId, boolean force, IStopUserCallback callback) {
        Slog.i(TAG, "stopUser " + userId + ", force = " + force + ", callingUid = " + Binder.getCallingUid() + ", callingPid = " + Binder.getCallingPid());
        return this.mUserController.stopUser(userId, force, callback);
    }

    public UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    /* access modifiers changed from: package-private */
    public String getStartedUserState(int userId) {
        return UserState.stateToString(this.mUserController.getStartedUserState(userId).state);
    }

    public boolean isUserRunning(int userId, int flags) {
        if (this.mUserController.isSameProfileGroup(userId, UserHandle.getCallingUserId()) || checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.isUserRunning(userId, flags);
        }
        String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERACT_ACROSS_USERS";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.getStartedUserArray();
        }
        String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + "android.permission.INTERACT_ACROSS_USERS";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public void registerUserSwitchObserver(IUserSwitchObserver observer, String name) {
        this.mUserController.registerUserSwitchObserver(observer, name);
    }

    public void unregisterUserSwitchObserver(IUserSwitchObserver observer) {
        this.mUserController.unregisterUserSwitchObserver(observer);
    }

    /* access modifiers changed from: package-private */
    public ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId) {
        if (info == null) {
            return null;
        }
        ApplicationInfo newInfo = new ApplicationInfo(info);
        newInfo.initForUser(userId);
        return newInfo;
    }

    public boolean isUserStopped(int userId) {
        return this.mUserController.getStartedUserState(userId) == null;
    }

    /* access modifiers changed from: package-private */
    public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
        if (aInfo == null || (userId < 1 && aInfo.applicationInfo.uid < 100000)) {
            return aInfo;
        }
        ActivityInfo info = new ActivityInfo(aInfo);
        info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
        return info;
    }

    private boolean processSanityChecksLocked(ProcessRecord process) {
        if (process == null || process.thread == null) {
            return false;
        }
        if ("1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0")) || (process.info.flags & 2) != 0) {
            return true;
        }
        return false;
    }

    public boolean startBinderTracking() throws RemoteException {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = true;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") == 0) {
                    for (int i = 0; i < this.mLruProcesses.size(); i++) {
                        ProcessRecord process = this.mLruProcesses.get(i);
                        if (processSanityChecksLocked(process)) {
                            process.thread.startBinderTracking();
                        }
                    }
                } else {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
            } catch (RemoteException e) {
                Log.v(TAG, "Process disappared");
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public boolean stopBinderTrackingAndDump(ParcelFileDescriptor fd) throws RemoteException {
        ParcelFileDescriptor fd2;
        TransferPipe tp;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mBinderTransactionTrackingEnabled = false;
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                } else if (fd != null) {
                    PrintWriter pw = new FastPrintWriter(new FileOutputStream(fd.getFileDescriptor()));
                    pw.println("Binder transaction traces for all processes.\n");
                    Iterator<ProcessRecord> it = this.mLruProcesses.iterator();
                    while (it.hasNext()) {
                        ProcessRecord process = it.next();
                        if (processSanityChecksLocked(process)) {
                            pw.println("Traces for process: " + process.processName);
                            pw.flush();
                            try {
                                tp = new TransferPipe();
                                process.thread.stopBinderTrackingAndDump(tp.getWriteFd());
                                tp.go(fd.getFileDescriptor());
                                tp.kill();
                            } catch (IOException e) {
                                pw.println("Failure while dumping IPC traces from " + process + ".  Exception: " + e);
                                pw.flush();
                            } catch (RemoteException e2) {
                                pw.println("Got a RemoteException while dumping IPC traces from " + process + ".  Exception: " + e2);
                                pw.flush();
                            } catch (Throwable th) {
                                tp.kill();
                                throw th;
                            }
                        }
                    }
                    fd2 = null;
                } else {
                    throw new IllegalArgumentException("null fd");
                }
            }
            resetPriorityAfterLockedSection();
            if (fd2 != null) {
                try {
                    fd2.close();
                } catch (IOException e3) {
                }
            }
            return true;
        } catch (Throwable th2) {
            if (fd != null) {
                try {
                    fd.close();
                } catch (IOException e4) {
                }
            }
            throw th2;
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x003a, code lost:
        resetPriorityAfterLockedSection();
        r2 = r1.networkStateLock;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x003f, code lost:
        monitor-enter(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0044, code lost:
        if (r1.lastDispatchedProcStateSeq >= r11) goto L_0x0074;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x0048, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x0072;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x004a, code lost:
        android.util.Slog.d(TAG_NETWORK, "Uid state change for seq no. " + r11 + " is not dispatched to NPMS yet, so don't wait. Uid: " + r0 + " lastProcStateSeqDispatchedToObservers: " + r1.lastDispatchedProcStateSeq);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0072, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0073, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0078, code lost:
        if (r1.curProcStateSeq <= r11) goto L_0x00a8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x007c, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00a6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x007e, code lost:
        android.util.Slog.d(TAG_NETWORK, "Ignore the wait requests for older seq numbers. Uid: " + r0 + ", curProcStateSeq: " + r1.curProcStateSeq + ", procStateSeq: " + r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x00a6, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x00a7, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x00ac, code lost:
        if (r1.lastNetworkUpdatedProcStateSeq < r11) goto L_0x00dc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00b0, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00da;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x00b2, code lost:
        android.util.Slog.d(TAG_NETWORK, "Network rules have been already updated for seq no. " + r11 + ", so no need to wait. Uid: " + r0 + ", lastProcStateSeqWithUpdatedNetworkState: " + r1.lastNetworkUpdatedProcStateSeq);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x00da, code lost:
        monitor-exit(r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00db, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00de, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x00fe;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00e0, code lost:
        android.util.Slog.d(TAG_NETWORK, "Starting to wait for the network rules update. Uid: " + r0 + " procStateSeq: " + r11);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00fe, code lost:
        r3 = android.os.SystemClock.uptimeMillis();
        r1.waitingForNetwork = true;
        r1.networkStateLock.wait(r10.mWaitForNetworkTimeoutMs);
        r1.waitingForNetwork = false;
        r5 = android.os.SystemClock.uptimeMillis() - r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x0118, code lost:
        if (r5 >= r10.mWaitForNetworkTimeoutMs) goto L_0x011e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x011c, code lost:
        if (com.android.server.am.ActivityManagerDebugConfig.DEBUG_NETWORK == false) goto L_0x0163;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x011e, code lost:
        android.util.Slog.w(TAG_NETWORK, "Total time waited for network rules to get updated: " + r5 + ". Uid: " + r0 + " procStateSeq: " + r11 + " UidRec: " + r1 + " validateUidRec: " + r10.mValidateUids.get(r0));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:?, code lost:
        java.lang.Thread.currentThread().interrupt();
     */
    public void waitForNetworkStateUpdate(long procStateSeq) {
        Object obj;
        int callingUid = Binder.getCallingUid();
        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
            Slog.d(TAG_NETWORK, "Called from " + callingUid + " to wait for seq: " + procStateSeq);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord record = this.mActiveUids.get(callingUid);
                if (record == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void waitForBroadcastIdle(PrintWriter pw) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        while (true) {
            boolean idle = true;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (BroadcastQueue queue : this.mBroadcastQueues) {
                        if (!queue.isIdle()) {
                            String msg = "Waiting for queue " + queue + " to become idle...";
                            pw.println(msg);
                            pw.flush();
                            Slog.v(TAG, msg);
                            idle = false;
                        }
                    }
                } catch (Throwable th) {
                    while (true) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            resetPriorityAfterLockedSection();
            if (idle) {
                pw.println("All broadcast queues are idle!");
                pw.flush();
                Slog.v(TAG, "All broadcast queues are idle!");
                return;
            }
            SystemClock.sleep(1000);
        }
    }

    public int getLastResumedActivityUserId() {
        enforceCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "getLastResumedActivityUserId()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mLastResumedActivity == null) {
                    int currentUserId = this.mUserController.getCurrentUserId();
                    resetPriorityAfterLockedSection();
                    return currentUserId;
                }
                int i = this.mLastResumedActivity.userId;
                resetPriorityAfterLockedSection();
                return i;
            } catch (Throwable th) {
                while (true) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
    }

    public void killPackageDependents(String packageName, int userId) {
        String str = packageName;
        int i = userId;
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (str != null) {
            long callingId = Binder.clearCallingIdentity();
            IPackageManager pm = AppGlobals.getPackageManager();
            int pkgUid = -1;
            try {
                pkgUid = pm.getPackageUid(str, 268435456, i);
            } catch (RemoteException e) {
            }
            int pkgUid2 = pkgUid;
            if (i == -1 || pkgUid2 != -1) {
                try {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            int i2 = pkgUid2;
                            IPackageManager iPackageManager = pm;
                            try {
                                killPackageProcessesLocked(str, UserHandle.getAppId(pkgUid2), i, 0, false, true, true, false, "dep: " + str);
                                try {
                                    resetPriorityAfterLockedSection();
                                    Binder.restoreCallingIdentity(callingId);
                                } catch (Throwable th) {
                                    th = th;
                                    Binder.restoreCallingIdentity(callingId);
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            int i3 = pkgUid2;
                            IPackageManager iPackageManager2 = pm;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th4) {
                    th = th4;
                    int i4 = pkgUid2;
                    IPackageManager iPackageManager3 = pm;
                    Binder.restoreCallingIdentity(callingId);
                    throw th;
                }
            } else {
                throw new IllegalArgumentException("Cannot kill dependents of non-existing package " + str);
            }
        } else {
            throw new NullPointerException("Cannot kill the dependents of a package without its name.");
        }
    }

    public void dismissKeyguard(IBinder token, IKeyguardDismissCallback callback, CharSequence message) throws RemoteException {
        if (message != null) {
            enforceCallingPermission("android.permission.SHOW_KEYGUARD_MESSAGE", "dismissKeyguard()");
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            this.mKeyguardController.dismissKeyguard(token, callback, message);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public int restartUserInBackground(int userId) {
        return this.mUserController.restartUser(userId, false);
    }

    public void scheduleApplicationInfoChanged(List<String> packageNames, int userId) {
        long origId;
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                updateApplicationInfoLocked(packageNames, userId);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* access modifiers changed from: package-private */
    public void updateApplicationInfoLocked(List<String> packagesToUpdate, int userId) {
        boolean z;
        boolean updateFrameworkRes = packagesToUpdate.contains(PackageManagerService.PLATFORM_PACKAGE_NAME);
        boolean updateFrameworkReshwext = packagesToUpdate.contains("androidhwext");
        for (int i = this.mLruProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = this.mLruProcesses.get(i);
            if (app.thread != null && (userId == -1 || app.userId == userId)) {
                int packageCount = app.pkgList.size();
                for (int j = 0; j < packageCount; j++) {
                    String packageName = app.pkgList.keyAt(j);
                    if (updateFrameworkRes || updateFrameworkReshwext || packagesToUpdate.contains(packageName)) {
                        try {
                            ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(packageName, 1024, app.userId);
                            if (ai != null) {
                                IApplicationThread iApplicationThread = app.thread;
                                if (!updateFrameworkRes) {
                                    if (!updateFrameworkReshwext) {
                                        z = false;
                                        iApplicationThread.scheduleApplicationThemeInfoChanged(ai, z);
                                        app.updateApplicationInfo(ai);
                                    }
                                }
                                z = true;
                                iApplicationThread.scheduleApplicationThemeInfoChanged(ai, z);
                                app.updateApplicationInfo(ai);
                            }
                        } catch (RemoteException e) {
                            Slog.w(TAG, String.format("Failed to update %s ApplicationInfo for %s", new Object[]{packageName, app}));
                        }
                    }
                }
            }
        }
        if (updateFrameworkRes) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            DisplayManagerInternal display = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (display != null) {
                Objects.requireNonNull(display);
                executor.execute(new Runnable(display) {
                    private final /* synthetic */ DisplayManagerInternal f$0;

                    {
                        this.f$0 = r1;
                    }

                    public final void run() {
                        this.f$0.onOverlayChanged();
                    }
                });
            }
            if (this.mWindowManager != null) {
                WindowManagerService windowManagerService = this.mWindowManager;
                Objects.requireNonNull(windowManagerService);
                executor.execute(new Runnable() {
                    public final void run() {
                        WindowManagerService.this.onOverlayChanged();
                    }
                });
            }
        }
    }

    public void attachAgent(String process, String path) {
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ProcessRecord proc = findProcessLocked(process, 0, "attachAgent");
                if (proc == null || proc.thread == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                }
                if (!"1".equals(SystemProperties.get(SYSTEM_DEBUGGABLE, "0"))) {
                    if ((proc.info.flags & 2) == 0) {
                        throw new SecurityException("Process not debuggable: " + proc);
                    }
                }
                proc.thread.attachAgent(path);
            }
            resetPriorityAfterLockedSection();
        } catch (RemoteException e) {
            throw new IllegalStateException("Process disappeared");
        } catch (Throwable th) {
            resetPriorityAfterLockedSection();
            throw th;
        }
    }

    /* access modifiers changed from: protected */
    public void exitSingleHandMode() {
    }

    /* access modifiers changed from: protected */
    public boolean isMaximizedPortraitAppOnPCMode(ActivityRecord r) {
        return false;
    }

    public ArrayList<TaskRecord> getRecentRawTasks() {
        return this.mRecentTasks.getRawTasks();
    }

    static boolean isInCallActivity(ActivityRecord r) {
        return "com.android.incallui/.InCallActivity".equals(r.shortComponentName);
    }

    static boolean isTimerAlertActivity(ActivityRecord r) {
        return "com.android.deskclock/.timer.TimerAlertActivity".equals(r.shortComponentName);
    }

    public boolean isTopProcessLocked(ProcessRecord processRecord) {
        if (processRecord == null) {
            return false;
        }
        ActivityRecord topActivity = getFocusedStack().topRunningActivityLocked();
        if (topActivity == null || topActivity.app == null || processRecord.pid != topActivity.app.pid) {
            return false;
        }
        return true;
    }

    public boolean zrHungSendEvent(String eventType, int pid, int uid, String packageName, String processName, String event) {
        return this.mHwAMSEx.zrHungSendEvent(eventType, pid, uid, packageName, processName, event);
    }

    public void setShowWhenLocked(IBinder token, boolean showWhenLocked) throws RemoteException {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setShowWhenLocked(showWhenLocked);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void setTurnScreenOn(IBinder token, boolean turnScreenOn) throws RemoteException {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.setTurnScreenOn(turnScreenOn);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void registerRemoteAnimations(IBinder token, RemoteAnimationDefinition definition) throws RemoteException {
        long origId;
        enforceCallingPermission("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimations");
        definition.setCallingPid(Binder.getCallingPid());
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ActivityRecord r = ActivityRecord.isInStackLocked(token);
                if (r == null) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                origId = Binder.clearCallingIdentity();
                r.registerRemoteAnimations(definition);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void registerRemoteAnimationForNextActivityStart(String packageName, RemoteAnimationAdapter adapter) throws RemoteException {
        long origId;
        enforceCallingPermission("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "registerRemoteAnimationForNextActivityStart");
        adapter.setCallingPid(Binder.getCallingPid());
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mActivityStartController.registerRemoteAnimationForNextActivityStart(packageName, adapter);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void alwaysShowUnsupportedCompileSdkWarning(ComponentName activity) {
        long origId;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                origId = Binder.clearCallingIdentity();
                this.mAppWarnings.alwaysShowUnsupportedCompileSdkWarning(activity);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void swapDockedAndFullscreenStack() throws RemoteException {
        long ident;
        TaskRecord taskRecord;
        boolean isTaskEmpty;
        ActivityStack secondarySplitScreenStack;
        boolean z;
        TaskRecord secondaryTask;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ident = Binder.clearCallingIdentity();
                ActivityStack primarySplitScreenStack = this.mStackSupervisor.getDefaultDisplay().getSplitScreenPrimaryStack();
                if (primarySplitScreenStack == null) {
                    Slog.w(TAG, "swapDockedAndFullscreenStack: primary split-screen stack not found.");
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (primarySplitScreenStack.mWindowContainerController != null) {
                    primarySplitScreenStack.mWindowContainerController.clearTempInsetBounds();
                }
                ArrayList<TaskRecord> primaryTasks = primarySplitScreenStack != null ? primarySplitScreenStack.getAllTasks() : null;
                ActivityStack secondarySplitScreenStack2 = primarySplitScreenStack.getDisplay().getTopStackInWindowingMode(4);
                if (secondarySplitScreenStack2 == null) {
                    Slog.w(TAG, "swapDockedAndFullscreenStack: secondary split-screen stack not found.");
                    Binder.restoreCallingIdentity(ident);
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (secondarySplitScreenStack2 != null) {
                    taskRecord = secondarySplitScreenStack2.topTask();
                } else {
                    taskRecord = null;
                }
                TaskRecord secondaryTask2 = taskRecord;
                boolean z2 = false;
                if (!(primaryTasks == null || secondaryTask2 == null)) {
                    if (primaryTasks.size() != 0) {
                        isTaskEmpty = false;
                        if (!isTaskEmpty || secondaryTask2.isActivityTypeHome()) {
                            TaskRecord taskRecord2 = secondaryTask2;
                            ActivityStack activityStack = secondarySplitScreenStack2;
                        } else if (secondaryTask2.isActivityTypeRecents()) {
                            TaskRecord taskRecord3 = secondaryTask2;
                            ActivityStack activityStack2 = secondarySplitScreenStack2;
                        } else {
                            this.mWindowManager.startFreezingScreen(0, 0);
                            this.mWindowManager.mShouldResetTime = true;
                            secondaryTask2.reparent(primarySplitScreenStack, true, 1, true, true, "swapDockedAndFullscreenStack - sss->pss");
                            int size = primaryTasks.size();
                            int i = 0;
                            while (i < size) {
                                if (primaryTasks.get(i).taskId == secondaryTask2.taskId) {
                                    z = z2;
                                    secondaryTask = secondaryTask2;
                                    secondarySplitScreenStack = secondarySplitScreenStack2;
                                } else {
                                    z = z2;
                                    secondaryTask = secondaryTask2;
                                    secondarySplitScreenStack = secondarySplitScreenStack2;
                                    primaryTasks.get(i).reparent(secondarySplitScreenStack2, true, 1, true, true, "swapDockedAndFullscreenStack - pss->sss");
                                }
                                i++;
                                secondaryTask2 = secondaryTask;
                                z2 = z;
                                secondarySplitScreenStack2 = secondarySplitScreenStack;
                            }
                            boolean z3 = z2;
                            TaskRecord taskRecord4 = secondaryTask2;
                            ActivityStack activityStack3 = secondarySplitScreenStack2;
                            this.mStackSupervisor.ensureActivitiesVisibleLocked(null, z3 ? 1 : 0, z3);
                            this.mStackSupervisor.resumeFocusedStackTopActivityLocked();
                            this.mWindowManager.stopFreezingScreen();
                            Binder.restoreCallingIdentity(ident);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        Slog.w(TAG, "Unable to swap tasks, either secondary or primary split-screen stack is empty.");
                        Binder.restoreCallingIdentity(ident);
                        resetPriorityAfterLockedSection();
                    }
                }
                isTaskEmpty = true;
                if (!isTaskEmpty) {
                }
                TaskRecord taskRecord22 = secondaryTask2;
                ActivityStack activityStack4 = secondarySplitScreenStack2;
                Slog.w(TAG, "Unable to swap tasks, either secondary or primary split-screen stack is empty.");
                Binder.restoreCallingIdentity(ident);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARNING: type inference failed for: r0v0, types: [com.android.server.am.ActivityManagerService$HwInnerActivityManagerService, android.os.IBinder] */
    public IBinder getHwInnerService() {
        return this.mHwInnerService;
    }

    public ActivityManagerService getAMSForLock() {
        return this;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x003a, code lost:
        r1 = r8.processName;
        r2 = r8.uid;
        r3 = (com.android.server.am.ProcessRecord) r7.mProcessNames.get(r1, r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0046, code lost:
        if (r3 == r8) goto L_0x0067;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0048, code lost:
        android.util.Slog.w(TAG, "Ignoring remove of inactive process: " + r8 + ", old: " + r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0066, code lost:
        return false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0067, code lost:
        removeProcessNameLocked(r1, r2);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x006c, code lost:
        if (r8.pid != r9) goto L_0x00a7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:19:0x0070, code lost:
        if (r8.thread == null) goto L_0x00a7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0072, code lost:
        if (r10 == null) goto L_0x00a7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x007a, code lost:
        if (r8.thread.asBinder() != r10) goto L_0x00a7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x007c, code lost:
        r4 = r7.mPidsSelfLocked;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x007e, code lost:
        monitor-enter(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:?, code lost:
        r7.mPidsSelfLocked.remove(r9);
        r7.mHandler.removeMessages(20, r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x008b, code lost:
        monitor-exit(r4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x008c, code lost:
        handleAppDiedLocked(r8, r11, r12);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0091, code lost:
        if (r8.persistent == false) goto L_0x00a2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0095, code lost:
        if (r8.isolated != false) goto L_0x00a2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x0097, code lost:
        if (r11 != false) goto L_0x00a2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0099, code lost:
        removeLruProcessLocked(r8);
        addAppLocked(r8.info, null, false, null);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00a3, code lost:
        return true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00a7, code lost:
        android.util.Slog.i(TAG, "Process " + r8.processName + " (pid " + r9 + ") has changed: ");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00cc, code lost:
        return false;
     */
    public boolean removeProcessLockedInner(ProcessRecord app, int pid, IBinder thread, boolean callerWillRestart, boolean allowRestart, String reason) {
        if (app == null) {
            return false;
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord curProc = this.mPidsSelfLocked.get(pid);
            if (curProc != app) {
                Slog.w(TAG, "Spurious death for " + app + ", curProc for " + pid + ": " + curProc);
                return false;
            }
        }
    }

    public ProcessMap<ProcessRecord> getProcessNames() {
        return this.mProcessNames;
    }

    public ActivityStackSupervisor getStackSupervisor() {
        return this.mStackSupervisor;
    }

    public boolean finishDisabledPackageActivitiesLocked(String packageName, Set<String> filterByClasses, boolean doit, boolean evenPersistent, int userId) {
        return this.mStackSupervisor.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId);
    }

    public boolean bringDownDisabledPackageServicesLocked(String packageName, Set<String> filterByClasses, int userId, boolean evenPersistent, boolean killProcess, boolean doit) {
        return this.mServices.bringDownDisabledPackageServicesLocked(packageName, filterByClasses, userId, evenPersistent, killProcess, doit);
    }

    public SparseArray<ArrayMap<String, ArrayList<Intent>>> getStickyBroadcasts() {
        return this.mStickyBroadcasts;
    }

    public ProviderMap getProviderMap() {
        return this.mProviderMap;
    }

    public ArrayList<ContentProviderRecord> getLaunchingProviders() {
        return this.mLaunchingProviders;
    }

    public BroadcastQueue[] getBroadcastQueues() {
        return this.mBroadcastQueues;
    }

    public BroadcastQueue getBgBroadcastQueue() {
        return this.mBgBroadcastQueue;
    }

    public void stopAssociationLockedInner(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent) {
        stopAssociationLocked(sourceUid, sourceProcess, targetUid, targetComponent);
    }

    public void finishForceStopPackageLockedInner(String packageName, int uid) {
        finishForceStopPackageLocked(packageName, uid);
    }

    public AlarmManagerService getAlarmService() {
        return this.mAlms;
    }

    public int getAmsPid() {
        return MY_PID;
    }

    public UserController getUserController() {
        return this.mUserController;
    }

    public Context getUiContext() {
        return this.mUiContext;
    }

    public boolean getActivityIdle() {
        return this.mActivityIdle;
    }

    public boolean getSystemReady() {
        return this.mSystemReady;
    }

    public SystemServiceManager getServiceManager() {
        return this.mSystemServiceManager;
    }

    public TaskChangeNotificationController getHwTaskChangeController() {
        return this.mHwAMSEx.getHwTaskChangeController();
    }

    /* access modifiers changed from: package-private */
    public void notifyActivityState(ActivityRecord r, ActivityStack.ActivityState state) {
        this.mHwAMSEx.notifyActivityState(r, state != null ? state.toString() : null);
    }

    public ActivityRecord getLastResumedActivityRecord() {
        return getLastResumedActivity();
    }

    public boolean isSleeping() {
        return isSleepingLocked();
    }

    public boolean isKeyguardLockedEx() {
        return isKeyguardLocked();
    }

    private void setWhiteListProcessGroup(ProcessRecord app, ProcessRecord TOP_APP, boolean bConnectTopApp) {
        if (app != null) {
            if (app.curSchedGroup == 0) {
                if (SystemClock.elapsedRealtime() - app.startTime <= 3000) {
                    app.curSchedGroup = 7;
                }
                return;
            }
            if (app != TOP_APP && !bConnectTopApp && this.mDAProxy.getCPUConfigGroupBG() == this.mDAProxy.isCPUConfigWhiteList(app.processName)) {
                app.curSchedGroup = 0;
            }
        }
    }

    public void reportCamera(int uid, int status) {
        this.mDAProxy.reportCamera(uid, status);
    }

    public File dumpStackTracesInner(boolean clearTraces, ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids) {
        return dumpStackTraces(clearTraces, firstPids, processCpuTracker, lastPids, nativePids);
    }

    public boolean forceStopPackageLockedInner(String pkg, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        return forceStopPackageLocked(pkg, appId, callerWillRestart, purgeCache, doit, evenPersistent, uninstalling, userId, reason);
    }

    public void showUninstallLauncherDialog(String pkgName) {
        this.mHwAMSEx.showUninstallLauncherDialog(pkgName);
    }

    public HwDAMonitorProxy getDAMonitor() {
        return this.mDAProxy;
    }

    public boolean canCleanTaskRecord(String packageName) {
        return this.mHwAMSEx.canCleanTaskRecord(packageName);
    }

    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        this.mHwAMSEx.onMultiWindowModeChanged(isInMultiWindowMode);
    }

    public void startPersistApp(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride) {
        addAppLocked(info, customProcess, isolated, abiOverride);
    }

    public PackageManagerInternal getPackageManagerInternal() {
        return getPackageManagerInternalLocked();
    }

    public ProcessRecord getProcessRecord(String processName, int uid, boolean keepIfLarge) {
        return getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    public boolean handleANRFilterFIFO(int uid, int cmd) {
        return this.mHwAMSEx.handleANRFilterFIFO(uid, cmd);
    }

    public AppErrors getAppErrors() {
        return this.mAppErrors;
    }

    public Handler getUiHandler() {
        return this.mUiHandler;
    }

    public SparseArray<ProcessRecord> getPidsSelfLocked() {
        return this.mPidsSelfLocked;
    }

    public ActivityManagerConstants getConstants() {
        return this.mConstants;
    }

    public ProcessRecord newProcessRecordLockedEx(ApplicationInfo info, String customProcess, boolean isolated, int isolatedUid) {
        return newProcessRecordLocked(info, customProcess, isolated, isolatedUid);
    }

    public void updateLruProcessLockedEx(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        updateLruProcessLocked(app, activityChange, client);
    }

    public void updateOomAdjLockedEx() {
        updateOomAdjLocked();
    }

    public void startProcessLockedEx(ProcessRecord app, String hostingType, String hostingNameStr, String abiOverride) {
        startProcessLocked(app, hostingType, hostingNameStr, abiOverride);
    }

    public ProcessRecord getProcessRecordLockedEx(String processName, int uid, boolean keepIfLarge) {
        return getProcessRecordLocked(processName, uid, keepIfLarge);
    }

    public boolean cleanupAppInLaunchingProvidersLockedEx(ProcessRecord app, boolean alwaysBad) {
        return cleanupAppInLaunchingProvidersLocked(app, alwaysBad);
    }

    public boolean removeProcessLockedEx(ProcessRecord app, boolean callerWillRestart, boolean allowRestart, String reason) {
        return removeProcessLocked(app, callerWillRestart, allowRestart, reason);
    }

    public int getMyPid() {
        return MY_PID;
    }

    public ArrayList<ProcessRecord> getLruProcesses() {
        return this.mLruProcesses;
    }

    public void recognizeFakeActivity(String compName, int pid, int uid) {
        this.mDAProxy.recognizeFakeActivity(compName, this.mBatteryStatsService.getActiveStatistics().isScreenOn(), pid, uid);
    }

    private BroadcastQueue getProcessBroadcastQueue(ProcessRecord callerApp, String callerPackage, Intent intent) {
        intent.removeFlags(12288);
        if (isKeyAppBroadcastQueue(1, callerPackage) || isKeyAppBroadcastQueue(2, intent.getAction())) {
            BroadcastQueue queue = keyAppBroadcastQueueForIntent(intent);
            intent.addFlags(4096);
            return queue;
        } else if (!isThirdPartyAppBroadcastQueue(callerApp)) {
            return broadcastQueueForIntent(intent);
        } else {
            BroadcastQueue queue2 = thirdPartyAppBroadcastQueueForIntent(intent);
            intent.addFlags(8192);
            return queue2;
        }
    }

    public boolean isExcludedInBGCheck(String pkg, String action) {
        return this.mDAProxy.isExcludedInBGCheck(pkg, action);
    }
}
