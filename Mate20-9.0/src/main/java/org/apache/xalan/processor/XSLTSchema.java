package org.apache.xalan.processor;

import java.util.HashMap;
import org.apache.xalan.templates.Constants;
import org.apache.xalan.templates.ElemApplyImport;
import org.apache.xalan.templates.ElemApplyTemplates;
import org.apache.xalan.templates.ElemAttribute;
import org.apache.xalan.templates.ElemCallTemplate;
import org.apache.xalan.templates.ElemChoose;
import org.apache.xalan.templates.ElemComment;
import org.apache.xalan.templates.ElemCopy;
import org.apache.xalan.templates.ElemCopyOf;
import org.apache.xalan.templates.ElemElement;
import org.apache.xalan.templates.ElemExsltFuncResult;
import org.apache.xalan.templates.ElemExsltFunction;
import org.apache.xalan.templates.ElemExtensionDecl;
import org.apache.xalan.templates.ElemExtensionScript;
import org.apache.xalan.templates.ElemFallback;
import org.apache.xalan.templates.ElemForEach;
import org.apache.xalan.templates.ElemIf;
import org.apache.xalan.templates.ElemLiteralResult;
import org.apache.xalan.templates.ElemMessage;
import org.apache.xalan.templates.ElemNumber;
import org.apache.xalan.templates.ElemOtherwise;
import org.apache.xalan.templates.ElemPI;
import org.apache.xalan.templates.ElemParam;
import org.apache.xalan.templates.ElemSort;
import org.apache.xalan.templates.ElemTemplate;
import org.apache.xalan.templates.ElemText;
import org.apache.xalan.templates.ElemTextLiteral;
import org.apache.xalan.templates.ElemUnknown;
import org.apache.xalan.templates.ElemValueOf;
import org.apache.xalan.templates.ElemVariable;
import org.apache.xalan.templates.ElemWhen;
import org.apache.xalan.templates.ElemWithParam;
import org.apache.xml.utils.QName;

public class XSLTSchema extends XSLTElementDef {
    private HashMap m_availElems = new HashMap();

    XSLTSchema() {
        build();
    }

    /* access modifiers changed from: package-private */
    public void build() {
        XSLTAttributeDef hrefAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_HREF, 2, true, false, 1);
        XSLTAttributeDef elementsAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_ELEMENTS, 12, true, false, 1);
        XSLTAttributeDef methodAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_OUTPUT_METHOD, 9, false, false, 1);
        XSLTAttributeDef versionAttr = new XSLTAttributeDef((String) null, "version", 13, false, false, 1);
        XSLTAttributeDef encodingAttr = new XSLTAttributeDef((String) null, "encoding", 1, false, false, 1);
        XSLTAttributeDef omitXmlDeclarationAttr = new XSLTAttributeDef((String) null, "omit-xml-declaration", 8, false, false, 1);
        XSLTAttributeDef standaloneAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_OUTPUT_STANDALONE, 8, false, false, 1);
        XSLTAttributeDef doctypePublicAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_OUTPUT_DOCTYPE_PUBLIC, 1, false, false, 1);
        XSLTAttributeDef doctypeSystemAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_OUTPUT_DOCTYPE_SYSTEM, 1, false, false, 1);
        XSLTAttributeDef cdataSectionElementsAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS, 19, false, false, 1);
        XSLTAttributeDef indentAttr = new XSLTAttributeDef((String) null, "indent", 8, false, false, 1);
        XSLTAttributeDef mediaTypeAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_OUTPUT_MEDIATYPE, 1, false, false, 1);
        XSLTAttributeDef nameAttrRequired = new XSLTAttributeDef((String) null, "name", 9, true, false, 1);
        XSLTAttributeDef nameAVTRequired = new XSLTAttributeDef((String) null, "name", 18, true, true, 2);
        XSLTAttributeDef nameAVT_NCNAMERequired = new XSLTAttributeDef((String) null, "name", 17, true, true, 2);
        XSLTAttributeDef nameAttrOpt_ERROR = new XSLTAttributeDef((String) null, "name", 9, false, false, 1);
        XSLTAttributeDef useAttr = new XSLTAttributeDef((String) null, "use", 5, true, false, 1);
        XSLTAttributeDef namespaceAVTOpt = new XSLTAttributeDef((String) null, Constants.ATTRNAME_NAMESPACE, 2, false, true, 2);
        XSLTAttributeDef decimalSeparatorAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_DECIMALSEPARATOR, 6, false, 1, Constants.ATTRVAL_THIS);
        XSLTAttributeDef infinityAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_INFINITY, 1, false, 1, Constants.ATTRVAL_INFINITY);
        XSLTAttributeDef minusSignAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_MINUSSIGN, 6, false, 1, "-");
        XSLTAttributeDef NaNAttr = new XSLTAttributeDef((String) null, "NaN", 1, false, 1, "NaN");
        XSLTAttributeDef percentAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_PERCENT, 6, false, 1, "%");
        XSLTAttributeDef perMilleAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_PERMILLE, 6, false, false, 1);
        XSLTAttributeDef zeroDigitAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_ZERODIGIT, 6, false, 1, "0");
        XSLTAttributeDef digitAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_DIGIT, 6, false, 1, "#");
        XSLTAttributeDef patternSeparatorAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_PATTERNSEPARATOR, 6, false, 1, ";");
        XSLTAttributeDef groupingSeparatorAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_GROUPINGSEPARATOR, 6, false, 1, ",");
        XSLTAttributeDef useAttributeSetsAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_USEATTRIBUTESETS, 10, false, false, 1);
        XSLTAttributeDef testAttrRequired = new XSLTAttributeDef((String) null, Constants.ATTRNAME_TEST, 5, true, false, 1);
        XSLTAttributeDef selectAttrRequired = new XSLTAttributeDef((String) null, Constants.ATTRNAME_SELECT, 5, true, false, 1);
        XSLTAttributeDef selectAttrOpt = new XSLTAttributeDef((String) null, Constants.ATTRNAME_SELECT, 5, false, false, 1);
        XSLTAttributeDef selectAttrDefNode = new XSLTAttributeDef((String) null, Constants.ATTRNAME_SELECT, 5, false, 1, "node()");
        XSLTAttributeDef selectAttrDefDot = new XSLTAttributeDef((String) null, Constants.ATTRNAME_SELECT, 5, false, 1, Constants.ATTRVAL_THIS);
        XSLTAttributeDef matchAttrRequired = new XSLTAttributeDef((String) null, Constants.ATTRNAME_MATCH, 4, true, false, 1);
        XSLTAttributeDef matchAttrOpt = new XSLTAttributeDef((String) null, Constants.ATTRNAME_MATCH, 4, false, false, 1);
        XSLTAttributeDef priorityAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_PRIORITY, 7, false, false, 1);
        XSLTAttributeDef modeAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_MODE, 9, false, false, 1);
        XSLTAttributeDef spaceAttr = new XSLTAttributeDef("http://www.w3.org/XML/1998/namespace", "space", false, false, false, 2, Constants.ATTRNAME_DEFAULT, 2, "preserve", 1);
        XSLTAttributeDef spaceAttrLiteral = new XSLTAttributeDef("http://www.w3.org/XML/1998/namespace", "space", 2, false, true, 1);
        XSLTAttributeDef stylesheetPrefixAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_STYLESHEET_PREFIX, 1, true, false, 1);
        XSLTAttributeDef resultPrefixAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_RESULT_PREFIX, 1, true, false, 1);
        XSLTAttributeDef disableOutputEscapingAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_DISABLE_OUTPUT_ESCAPING, 8, false, false, 1);
        XSLTAttributeDef levelAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_LEVEL, false, false, false, 1, Constants.ATTRVAL_SINGLE, 1, Constants.ATTRVAL_MULTI, 2, "any", 3);
        XSLTAttributeDef nameAttrOpt_ERROR2 = nameAttrOpt_ERROR;
        XSLTAttributeDef mediaTypeAttr2 = mediaTypeAttr;
        XSLTAttributeDef levelAttr2 = levelAttr;
        levelAttr2.setDefault(Constants.ATTRVAL_SINGLE);
        XSLTAttributeDef fromAttr = new XSLTAttributeDef((String) null, "count", 4, false, false, 1);
        XSLTAttributeDef fromAttr2 = new XSLTAttributeDef((String) null, Constants.ATTRNAME_FROM, 4, false, false, 1);
        XSLTAttributeDef valueAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_VALUE, 5, false, false, 1);
        XSLTAttributeDef formatAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_FORMAT, 1, false, true, 1);
        XSLTAttributeDef indentAttr2 = indentAttr;
        XSLTAttributeDef cdataSectionElementsAttr2 = cdataSectionElementsAttr;
        XSLTAttributeDef formatAttr2 = formatAttr;
        formatAttr2.setDefault("1");
        XSLTAttributeDef letterValueAttr = new XSLTAttributeDef((String) null, "lang", 13, false, true, 1);
        XSLTAttributeDef letterValueAttr2 = new XSLTAttributeDef(null, Constants.ATTRNAME_LETTERVALUE, false, true, false, 1, Constants.ATTRVAL_ALPHABETIC, 1, Constants.ATTRVAL_TRADITIONAL, 2);
        XSLTAttributeDef groupingSeparatorAVT = new XSLTAttributeDef((String) null, Constants.ATTRNAME_GROUPINGSEPARATOR, 6, false, true, 1);
        XSLTAttributeDef groupingSizeAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_GROUPINGSIZE, 7, false, true, 1);
        XSLTAttributeDef dataTypeAttr = new XSLTAttributeDef(null, Constants.ATTRNAME_DATATYPE, false, true, true, 1, "text", 1, "number", 1);
        XSLTAttributeDef doctypeSystemAttr2 = doctypeSystemAttr;
        XSLTAttributeDef doctypePublicAttr2 = doctypePublicAttr;
        XSLTAttributeDef doctypePublicAttr3 = dataTypeAttr;
        doctypePublicAttr3.setDefault("text");
        XSLTAttributeDef xSLTAttributeDef = new XSLTAttributeDef(null, Constants.ATTRNAME_ORDER, false, true, false, 1, Constants.ATTRVAL_ORDER_ASCENDING, 1, Constants.ATTRVAL_ORDER_DESCENDING, 2);
        XSLTAttributeDef standaloneAttr2 = standaloneAttr;
        xSLTAttributeDef.setDefault(Constants.ATTRVAL_ORDER_ASCENDING);
        XSLTAttributeDef xSLTAttributeDef2 = new XSLTAttributeDef(null, Constants.ATTRNAME_CASEORDER, false, true, false, 1, Constants.ATTRVAL_CASEORDER_UPPER, 1, Constants.ATTRVAL_CASEORDER_LOWER, 2);
        XSLTAttributeDef terminateAttr = new XSLTAttributeDef((String) null, Constants.ATTRNAME_TERMINATE, 8, false, false, 1);
        XSLTAttributeDef omitXmlDeclarationAttr2 = omitXmlDeclarationAttr;
        XSLTAttributeDef encodingAttr2 = encodingAttr;
        XSLTAttributeDef terminateAttr2 = terminateAttr;
        terminateAttr2.setDefault("no");
        XSLTAttributeDef xslExtensionElementPrefixesAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_EXCLUDE_RESULT_PREFIXES, 20, false, false, 1);
        XSLTAttributeDef xslExtensionElementPrefixesAttr2 = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_EXTENSIONELEMENTPREFIXES, 15, false, false, 1);
        XSLTAttributeDef xslUseAttributeSetsAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ATTRNAME_USEATTRIBUTESETS, 10, false, false, 1);
        XSLTAttributeDef xslVersionAttr = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "version", 13, false, false, 1);
        XSLTAttributeDef versionAttr2 = versionAttr;
        XSLTElementDef xSLTElementDef = new XSLTElementDef(this, null, "text()", null, null, null, new ProcessorCharacters(), ElemTextLiteral.class);
        XSLTElementDef charData = xSLTElementDef;
        XSLTAttributeDef methodAttr2 = methodAttr;
        charData.setType(2);
        XSLTElementDef xSLTElementDef2 = new XSLTElementDef(this, null, "text()", null, null, null, null, ElemTextLiteral.class);
        charData.setType(2);
        XSLTAttributeDef xSLTAttributeDef3 = new XSLTAttributeDef((String) null, "*", 3, false, true, 2);
        XSLTAttributeDef xSLTAttributeDef4 = new XSLTAttributeDef(org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "*", 1, false, false, 2);
        XSLTElementDef[] templateElements = new XSLTElementDef[23];
        XSLTAttributeDef elementsAttr2 = elementsAttr;
        XSLTAttributeDef hrefAttr2 = hrefAttr;
        XSLTElementDef[] templateElementsAndParams = new XSLTElementDef[24];
        XSLTAttributeDef terminateAttr3 = terminateAttr2;
        XSLTElementDef[] templateElementsAndSort = new XSLTElementDef[24];
        XSLTElementDef[] exsltFunctionElements = new XSLTElementDef[24];
        XSLTAttributeDef nameAVT_NCNAMERequired2 = nameAVT_NCNAMERequired;
        XSLTElementDef charData2 = charData;
        XSLTElementDef resultElement = new XSLTElementDef(this, (String) null, "*", (String) null, templateElements, new XSLTAttributeDef[]{spaceAttrLiteral, xslExtensionElementPrefixesAttr, xslExtensionElementPrefixesAttr2, xslUseAttributeSetsAttr, xslVersionAttr, xSLTAttributeDef4, xSLTAttributeDef3}, (XSLTElementProcessor) new ProcessorLRE(), ElemLiteralResult.class, 20, true);
        XSLTElementDef resultElement2 = resultElement;
        XSLTElementDef[] charTemplateElements = new XSLTElementDef[15];
        XSLTElementDef xSLTElementDef3 = new XSLTElementDef(this, "*", "unknown", (String) null, templateElementsAndParams, new XSLTAttributeDef[]{xslExtensionElementPrefixesAttr, xslExtensionElementPrefixesAttr2, xslUseAttributeSetsAttr, xslVersionAttr, xSLTAttributeDef4, xSLTAttributeDef3}, (XSLTElementProcessor) new ProcessorUnknown(), ElemUnknown.class, 20, true);
        XSLTElementDef unknownElement = xSLTElementDef3;
        XSLTAttributeDef xSLTAttributeDef5 = xslExtensionElementPrefixesAttr;
        XSLTElementDef xSLTElementDef4 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VALUEOF_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{selectAttrRequired, disableOutputEscapingAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemValueOf.class, 20, true);
        XSLTElementDef[] templateElementsAndParams2 = templateElementsAndParams;
        XSLTElementDef xSLTElementDef5 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COPY_OF_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{selectAttrRequired}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemCopyOf.class, 20, true);
        XSLTElementDef xslCopyOf = xSLTElementDef5;
        XSLTElementDef unknownElement2 = unknownElement;
        XSLTElementDef xSLTElementDef6 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "number", (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{levelAttr2, fromAttr, fromAttr2, valueAttr, formatAttr2, letterValueAttr, letterValueAttr2, groupingSeparatorAVT, groupingSizeAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemNumber.class, 20, true);
        XSLTElementDef xslNumber = xSLTElementDef6;
        XSLTAttributeDef xSLTAttributeDef6 = formatAttr2;
        XSLTElementDef xSLTElementDef7 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_SORT_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{selectAttrDefDot, letterValueAttr, doctypePublicAttr3, xSLTAttributeDef, xSLTAttributeDef2}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemSort.class, 19, true);
        XSLTAttributeDef xSLTAttributeDef7 = xSLTAttributeDef2;
        XSLTElementDef xSLTElementDef8 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_WITHPARAM_STRING, (String) null, templateElements, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemWithParam.class, 19, true);
        XSLTElementDef xslWithParam = xSLTElementDef8;
        XSLTAttributeDef xSLTAttributeDef8 = doctypePublicAttr3;
        XSLTAttributeDef xSLTAttributeDef9 = xSLTAttributeDef;
        XSLTElementDef xSLTElementDef9 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_APPLY_TEMPLATES_STRING, (String) null, new XSLTElementDef[]{xSLTElementDef7, xslWithParam}, new XSLTAttributeDef[]{selectAttrDefNode, modeAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemApplyTemplates.class, 20, true);
        XSLTElementDef xslApplyTemplates = xSLTElementDef9;
        XSLTElementDef xSLTElementDef10 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_APPLY_IMPORTS_STRING, null, null, new XSLTAttributeDef[0], new ProcessorTemplateElem(), ElemApplyImport.class);
        XSLTAttributeDef xSLTAttributeDef10 = letterValueAttr;
        XSLTElementDef xSLTElementDef11 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_FOREACH_STRING, null, templateElementsAndSort, new XSLTAttributeDef[]{selectAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemForEach.class, true, false, true, 20, true);
        XSLTAttributeDef xSLTAttributeDef11 = levelAttr2;
        XSLTElementDef xSLTElementDef12 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_IF_STRING, (String) null, templateElements, new XSLTAttributeDef[]{testAttrRequired, spaceAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemIf.class, 20, true);
        XSLTAttributeDef xSLTAttributeDef12 = fromAttr;
        XSLTElementDef[] xSLTElementDefArr = templateElements;
        XSLTElementDef xSLTElementDef13 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_WHEN_STRING, null, xSLTElementDefArr, new XSLTAttributeDef[]{testAttrRequired, spaceAttr}, new ProcessorTemplateElem(), ElemWhen.class, false, true, 1, true);
        XSLTElementDef xslSort = xSLTElementDef7;
        XSLTElementDef xSLTElementDef14 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_OTHERWISE_STRING, null, xSLTElementDefArr, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemOtherwise.class, false, false, 2, false);
        XSLTElementDef xslOtherwise = xSLTElementDef14;
        XSLTElementDef[] templateElementsAndSort2 = templateElementsAndSort;
        XSLTElementDef[] templateElementsAndSort3 = {xSLTElementDef13, xslOtherwise};
        XSLTElementDef xSLTElementDef15 = xslOtherwise;
        XSLTElementDef xSLTElementDef16 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_CHOOSE_STRING, null, templateElementsAndSort3, new XSLTAttributeDef[]{spaceAttr}, new ProcessorTemplateElem(), ElemChoose.class, true, false, true, 20, true);
        XSLTElementDef xslChoose = xSLTElementDef16;
        XSLTElementDef xSLTElementDef17 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "attribute", (String) null, charTemplateElements, new XSLTAttributeDef[]{nameAVTRequired, namespaceAVTOpt, spaceAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemAttribute.class, 20, true);
        XSLTElementDef xSLTElementDef18 = xSLTElementDef13;
        XSLTElementDef[] xSLTElementDefArr2 = {xslWithParam};
        XSLTElementDef xSLTElementDef19 = xslWithParam;
        XSLTElementDef xSLTElementDef20 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_CALLTEMPLATE_STRING, (String) null, xSLTElementDefArr2, new XSLTAttributeDef[]{nameAttrRequired}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemCallTemplate.class, 20, true);
        XSLTElementDef xslCallTemplate = xSLTElementDef20;
        XSLTElementDef[] xSLTElementDefArr3 = templateElements;
        XSLTElementDef xSLTElementDef21 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VARIABLE_STRING, (String) null, xSLTElementDefArr3, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemVariable.class, 20, true);
        XSLTElementDef xslAttribute = xSLTElementDef17;
        XSLTElementDef xslParam = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PARAMVARIABLE_STRING, (String) null, xSLTElementDefArr3, new XSLTAttributeDef[]{nameAttrRequired, selectAttrOpt}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemParam.class, 19, true);
        XSLTElementDef xslParam2 = xslParam;
        XSLTElementDef xslVariable = xSLTElementDef21;
        XSLTElementDef xSLTElementDef22 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "text", (String) null, new XSLTElementDef[]{charData2}, new XSLTAttributeDef[]{disableOutputEscapingAttr}, (XSLTElementProcessor) new ProcessorText(), ElemText.class, 20, true);
        XSLTElementDef xslText = xSLTElementDef22;
        XSLTElementDef xSLTElementDef23 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PI_STRING, (String) null, charTemplateElements, new XSLTAttributeDef[]{nameAVT_NCNAMERequired2, spaceAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemPI.class, 20, true);
        XSLTElementDef xslProcessingInstruction = xSLTElementDef23;
        XSLTElementDef xSLTElementDef24 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "element", (String) null, templateElements, new XSLTAttributeDef[]{nameAVTRequired, namespaceAVTOpt, useAttributeSetsAttr, spaceAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemElement.class, 20, true);
        XSLTElementDef xslElement = xSLTElementDef24;
        XSLTAttributeDef xSLTAttributeDef13 = nameAVTRequired;
        XSLTElementDef xSLTElementDef25 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COMMENT_STRING, (String) null, charTemplateElements, new XSLTAttributeDef[]{spaceAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemComment.class, 20, true);
        XSLTElementDef xslComment = xSLTElementDef25;
        XSLTElementDef xslElement2 = xslElement;
        XSLTElementDef[] xSLTElementDefArr4 = templateElements;
        XSLTElementDef xSLTElementDef26 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_COPY_STRING, (String) null, xSLTElementDefArr4, new XSLTAttributeDef[]{spaceAttr, useAttributeSetsAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemCopy.class, 20, true);
        XSLTElementDef xslCopy = xSLTElementDef26;
        XSLTElementDef xslComment2 = xslComment;
        XSLTElementDef xslMessage = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_MESSAGE_STRING, (String) null, xSLTElementDefArr4, new XSLTAttributeDef[]{terminateAttr3}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemMessage.class, 20, true);
        XSLTElementDef xslMessage2 = xslMessage;
        XSLTElementDef xslFallback = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_FALLBACK_STRING, (String) null, xSLTElementDefArr4, new XSLTAttributeDef[]{spaceAttr}, (XSLTElementProcessor) new ProcessorTemplateElem(), ElemFallback.class, 20, true);
        XSLTElementDef xslFallback2 = xslFallback;
        XSLTElementDef xSLTElementDef27 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_EXSLT_FUNCTIONS_URL, Constants.EXSLT_ELEMNAME_FUNCTION_STRING, null, exsltFunctionElements, new XSLTAttributeDef[]{nameAttrRequired}, new ProcessorExsltFunction(), ElemExsltFunction.class);
        XSLTElementDef exsltFunction = xSLTElementDef27;
        XSLTAttributeDef nameAttrRequired2 = nameAttrRequired;
        XSLTElementDef xSLTElementDef28 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_EXSLT_FUNCTIONS_URL, Constants.EXSLT_ELEMNAME_FUNCRESULT_STRING, null, templateElements, new XSLTAttributeDef[]{selectAttrOpt}, new ProcessorExsltFuncResult(), ElemExsltFuncResult.class);
        XSLTElementDef exsltResult = xSLTElementDef28;
        int i = 0 + 1;
        templateElements[0] = charData2;
        int i2 = i + 1;
        templateElements[i] = xslApplyTemplates;
        int i3 = i2 + 1;
        templateElements[i2] = xslCallTemplate;
        int i4 = i3 + 1;
        templateElements[i3] = xSLTElementDef10;
        int i5 = i4 + 1;
        templateElements[i4] = xSLTElementDef11;
        int i6 = i5 + 1;
        templateElements[i5] = xSLTElementDef4;
        int i7 = i6 + 1;
        templateElements[i6] = xslCopyOf;
        int i8 = i7 + 1;
        templateElements[i7] = xslNumber;
        int i9 = i8 + 1;
        templateElements[i8] = xslChoose;
        int i10 = i9 + 1;
        templateElements[i9] = xSLTElementDef12;
        int i11 = i10 + 1;
        templateElements[i10] = xslText;
        int i12 = i11 + 1;
        templateElements[i11] = xslCopy;
        int i13 = i12 + 1;
        templateElements[i12] = xslVariable;
        int i14 = i13 + 1;
        templateElements[i13] = xslMessage2;
        int i15 = i14 + 1;
        templateElements[i14] = xslFallback2;
        int i16 = i15 + 1;
        templateElements[i15] = xslProcessingInstruction;
        int i17 = i16 + 1;
        templateElements[i16] = xslComment2;
        int i18 = i17 + 1;
        templateElements[i17] = xslElement2;
        int i19 = i18 + 1;
        templateElements[i18] = xslAttribute;
        int i20 = i19 + 1;
        templateElements[i19] = resultElement2;
        int i21 = i20 + 1;
        templateElements[i20] = unknownElement2;
        int i22 = i21 + 1;
        templateElements[i21] = exsltFunction;
        int i23 = i22 + 1;
        templateElements[i22] = exsltResult;
        XSLTElementDef xSLTElementDef29 = exsltResult;
        XSLTElementDef[] templateElementsAndParams3 = templateElementsAndParams2;
        System.arraycopy(templateElements, 0, templateElementsAndParams3, 0, i23);
        XSLTElementDef exsltFunction2 = exsltFunction;
        XSLTElementDef[] templateElementsAndSort4 = templateElementsAndSort2;
        System.arraycopy(templateElements, 0, templateElementsAndSort4, 0, i23);
        XSLTElementDef xslCopy2 = xslCopy;
        XSLTElementDef[] exsltFunctionElements2 = exsltFunctionElements;
        System.arraycopy(templateElements, 0, exsltFunctionElements2, 0, i23);
        templateElementsAndParams3[i23] = xslParam2;
        templateElementsAndSort4[i23] = xslSort;
        exsltFunctionElements2[i23] = xslParam2;
        int i24 = 0 + 1;
        charTemplateElements[0] = charData2;
        int i25 = i24 + 1;
        charTemplateElements[i24] = xslApplyTemplates;
        int i26 = i25 + 1;
        charTemplateElements[i25] = xslCallTemplate;
        int i27 = i26 + 1;
        charTemplateElements[i26] = xSLTElementDef10;
        int i28 = i27 + 1;
        charTemplateElements[i27] = xSLTElementDef11;
        int i29 = i28 + 1;
        charTemplateElements[i28] = xSLTElementDef4;
        int i30 = i29 + 1;
        charTemplateElements[i29] = xslCopyOf;
        int i31 = i30 + 1;
        charTemplateElements[i30] = xslNumber;
        int i32 = i31 + 1;
        charTemplateElements[i31] = xslChoose;
        int i33 = i32 + 1;
        charTemplateElements[i32] = xSLTElementDef12;
        int i34 = i33 + 1;
        charTemplateElements[i33] = xslText;
        int i35 = i34 + 1;
        charTemplateElements[i34] = xslCopy2;
        int i36 = i35 + 1;
        charTemplateElements[i35] = xslVariable;
        int i37 = i36 + 1;
        charTemplateElements[i36] = xslMessage2;
        int i38 = i37 + 1;
        charTemplateElements[i37] = xslFallback2;
        XSLTElementDef xSLTElementDef30 = xslCopyOf;
        XSLTElementDef xSLTElementDef31 = xslNumber;
        XSLTElementDef xSLTElementDef32 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_IMPORT_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{hrefAttr2}, (XSLTElementProcessor) new ProcessorImport(), (Class) null, 1, true);
        XSLTElementDef importDef = xSLTElementDef32;
        XSLTElementDef xSLTElementDef33 = xSLTElementDef4;
        XSLTElementDef xSLTElementDef34 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_INCLUDE_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{hrefAttr2}, (XSLTElementProcessor) new ProcessorInclude(), (Class) null, 20, true);
        XSLTAttributeDef xSLTAttributeDef14 = new XSLTAttributeDef((String) null, "lang", 13, true, false, 2);
        XSLTAttributeDef xSLTAttributeDef15 = new XSLTAttributeDef((String) null, "src", 2, false, false, 2);
        XSLTAttributeDef[] scriptAttrs = {xSLTAttributeDef14, xSLTAttributeDef15};
        XSLTAttributeDef xSLTAttributeDef16 = new XSLTAttributeDef((String) null, "prefix", 13, true, false, 2);
        XSLTAttributeDef xSLTAttributeDef17 = new XSLTAttributeDef((String) null, Constants.ATTRNAME_ELEMENTS, 14, false, false, 2);
        XSLTAttributeDef xSLTAttributeDef18 = new XSLTAttributeDef((String) null, Constants.ELEMNAME_EXTENSION_STRING, 14, false, false, 2);
        XSLTAttributeDef[] componentAttrs = {xSLTAttributeDef16, xSLTAttributeDef17, xSLTAttributeDef18};
        XSLTElementDef xSLTElementDef35 = xslChoose;
        XSLTElementDef xSLTElementDef36 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_STRIPSPACE_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{elementsAttr2}, (XSLTElementProcessor) new ProcessorStripSpace(), (Class) null, 20, true);
        XSLTElementDef xSLTElementDef37 = xslText;
        XSLTElementDef xSLTElementDef38 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PRESERVESPACE_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{elementsAttr2}, (XSLTElementProcessor) new ProcessorPreserveSpace(), (Class) null, 20, true);
        XSLTElementDef xSLTElementDef39 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_OUTPUT_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{methodAttr2, versionAttr2, encodingAttr2, omitXmlDeclarationAttr2, standaloneAttr2, doctypePublicAttr2, doctypeSystemAttr2, cdataSectionElementsAttr2, indentAttr2, mediaTypeAttr2, XSLTAttributeDef.m_foreignAttr}, (XSLTElementProcessor) new ProcessorOutputElem(), (Class) null, 20, true);
        XSLTElementDef xSLTElementDef40 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "key", (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{nameAttrRequired2, matchAttrRequired, useAttr}, (XSLTElementProcessor) new ProcessorKey(), (Class) null, 20, true);
        XSLTElementDef xSLTElementDef41 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_DECIMALFORMAT_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{nameAttrOpt_ERROR2, decimalSeparatorAttr, groupingSeparatorAttr, infinityAttr, minusSignAttr, NaNAttr, percentAttr, perMilleAttr, zeroDigitAttr, digitAttr, patternSeparatorAttr}, (XSLTElementProcessor) new ProcessorDecimalFormat(), (Class) null, 20, true);
        XSLTElementDef xSLTElementDef42 = xslCallTemplate;
        XSLTElementDef xSLTElementDef43 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, "attribute-set", (String) null, new XSLTElementDef[]{xslAttribute}, new XSLTAttributeDef[]{nameAttrRequired2, useAttributeSetsAttr}, (XSLTElementProcessor) new ProcessorAttributeSet(), (Class) null, 20, true);
        XSLTElementDef[] xSLTElementDefArr5 = templateElements;
        XSLTElementDef xSLTElementDef44 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_VARIABLE_STRING, (String) null, xSLTElementDefArr5, new XSLTAttributeDef[]{nameAttrRequired2, selectAttrOpt}, (XSLTElementProcessor) new ProcessorGlobalVariableDecl(), ElemVariable.class, 20, true);
        XSLTElementDef xSLTElementDef45 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_PARAMVARIABLE_STRING, (String) null, xSLTElementDefArr5, new XSLTAttributeDef[]{nameAttrRequired2, selectAttrOpt}, (XSLTElementProcessor) new ProcessorGlobalParamDecl(), ElemParam.class, 20, true);
        XSLTElementDef xSLTElementDef46 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_TEMPLATE_STRING, null, templateElementsAndParams3, new XSLTAttributeDef[]{matchAttrOpt, nameAttrOpt_ERROR2, priorityAttr, modeAttr, spaceAttr}, new ProcessorTemplate(), ElemTemplate.class, true, 20, true);
        XSLTElementDef xSLTElementDef47 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_NSALIAS_STRING, (String) null, (XSLTElementDef[]) null, new XSLTAttributeDef[]{stylesheetPrefixAttr, resultPrefixAttr}, (XSLTElementProcessor) new ProcessorNamespaceAlias(), (Class) null, 20, true);
        XSLTElementDef[] xSLTElementDefArr6 = templateElements;
        XSLTElementDef xSLTElementDef48 = new XSLTElementDef(this, "http://xml.apache.org/xalan", Constants.ELEMNAME_SCRIPT_STRING, (String) null, new XSLTElementDef[]{charData2}, scriptAttrs, (XSLTElementProcessor) new ProcessorLRE(), ElemExtensionScript.class, 20, true);
        XSLTElementDef xSLTElementDef49 = new XSLTElementDef(this, "http://xml.apache.org/xalan", Constants.ELEMNAME_COMPONENT_STRING, null, new XSLTElementDef[]{xSLTElementDef48}, componentAttrs, new ProcessorLRE(), ElemExtensionDecl.class);
        XSLTElementDef xSLTElementDef50 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_BUILTIN_OLD_EXTENSIONS_URL, Constants.ELEMNAME_SCRIPT_STRING, (String) null, new XSLTElementDef[]{charData2}, scriptAttrs, (XSLTElementProcessor) new ProcessorLRE(), ElemExtensionScript.class, 20, true);
        XSLTElementDef xSLTElementDef51 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_BUILTIN_OLD_EXTENSIONS_URL, Constants.ELEMNAME_COMPONENT_STRING, null, new XSLTElementDef[]{xSLTElementDef50}, componentAttrs, new ProcessorLRE(), ElemExtensionDecl.class);
        XSLTAttributeDef xSLTAttributeDef19 = new XSLTAttributeDef((String) null, Constants.ATTRNAME_EXCLUDE_RESULT_PREFIXES, 20, false, false, 2);
        XSLTAttributeDef xSLTAttributeDef20 = new XSLTAttributeDef((String) null, Constants.ATTRNAME_EXTENSIONELEMENTPREFIXES, 15, false, false, 2);
        XSLTAttributeDef xSLTAttributeDef21 = new XSLTAttributeDef((String) null, "id", 1, false, false, 2);
        XSLTAttributeDef xSLTAttributeDef22 = new XSLTAttributeDef((String) null, "version", 13, true, false, 2);
        XSLTAttributeDef xSLTAttributeDef23 = xSLTAttributeDef19;
        XSLTElementDef xSLTElementDef52 = new XSLTElementDef(this, org.apache.xml.utils.Constants.S_XSLNAMESPACEURL, Constants.ELEMNAME_STYLESHEET_STRING, Constants.ELEMNAME_TRANSFORM_STRING, new XSLTElementDef[]{xSLTElementDef34, importDef, xSLTElementDef2, unknownElement2, xSLTElementDef36, xSLTElementDef38, xSLTElementDef39, xSLTElementDef40, xSLTElementDef41, xSLTElementDef43, xSLTElementDef44, xSLTElementDef45, xSLTElementDef46, xSLTElementDef47, xSLTElementDef49, xSLTElementDef51, exsltFunction2}, new XSLTAttributeDef[]{xSLTAttributeDef20, xSLTAttributeDef19, xSLTAttributeDef21, xSLTAttributeDef22, spaceAttr}, new ProcessorStylesheetElement(), null, true, -1, false);
        XSLTElementDef stylesheetElemDef = xSLTElementDef52;
        importDef.setElements(new XSLTElementDef[]{stylesheetElemDef, resultElement2, unknownElement2});
        xSLTElementDef34.setElements(new XSLTElementDef[]{stylesheetElemDef, resultElement2, unknownElement2});
        build(null, null, null, new XSLTElementDef[]{stylesheetElemDef, xSLTElementDef2, resultElement2, unknownElement2}, null, new ProcessorStylesheetDoc(), null);
    }

    public HashMap getElemsAvailable() {
        return this.m_availElems;
    }

    /* access modifiers changed from: package-private */
    public void addAvailableElement(QName elemName) {
        this.m_availElems.put(elemName, elemName);
    }

    public boolean elementAvailable(QName elemName) {
        return this.m_availElems.containsKey(elemName);
    }
}
